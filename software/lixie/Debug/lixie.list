
lixie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008080  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08008140  08008140  00018140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008868  08008868  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008868  08008868  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008868  08008868  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008868  08008868  00018868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800886c  0800886c  0001886c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001044  200001dc  08008a4c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001220  08008a4c  00021220  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c73  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e64  00000000  00000000  00039e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd8  00000000  00000000  0003dce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df0  00000000  00000000  0003ecb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018344  00000000  00000000  0003faa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e52  00000000  00000000  00057dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007dab3  00000000  00000000  00069c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e76f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003824  00000000  00000000  000e776c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008128 	.word	0x08008128

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08008128 	.word	0x08008128

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <HAL_Init+0x3c>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <HAL_Init+0x3c>)
 8000232:	2140      	movs	r1, #64	; 0x40
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000238:	2000      	movs	r0, #0
 800023a:	f000 f811 	bl	8000260 <HAL_InitTick>
 800023e:	1e03      	subs	r3, r0, #0
 8000240:	d003      	beq.n	800024a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
 8000248:	e001      	b.n	800024e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800024a:	f006 fb6f 	bl	800692c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800024e:	1dfb      	adds	r3, r7, #7
 8000250:	781b      	ldrb	r3, [r3, #0]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	40022000 	.word	0x40022000

08000260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000268:	230f      	movs	r3, #15
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <HAL_InitTick+0x50>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	23fa      	movs	r3, #250	; 0xfa
 8000276:	0099      	lsls	r1, r3, #2
 8000278:	0010      	movs	r0, r2
 800027a:	f7ff ff45 	bl	8000108 <__udivsi3>
 800027e:	0003      	movs	r3, r0
 8000280:	0018      	movs	r0, r3
 8000282:	f000 f918 	bl	80004b6 <HAL_SYSTICK_Config>
 8000286:	1e03      	subs	r3, r0, #0
 8000288:	d004      	beq.n	8000294 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800028a:	230f      	movs	r3, #15
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
 8000292:	e006      	b.n	80002a2 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	2301      	movs	r3, #1
 8000298:	425b      	negs	r3, r3
 800029a:	2200      	movs	r2, #0
 800029c:	0018      	movs	r0, r3
 800029e:	f000 f8e5 	bl	800046c <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80002a2:	230f      	movs	r3, #15
 80002a4:	18fb      	adds	r3, r7, r3
 80002a6:	781b      	ldrb	r3, [r3, #0]
}
 80002a8:	0018      	movs	r0, r3
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b004      	add	sp, #16
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000110 	.word	0x20000110

080002b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  uwTick++;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <HAL_IncTick+0x14>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	1c5a      	adds	r2, r3, #1
 80002be:	4b02      	ldr	r3, [pc, #8]	; (80002c8 <HAL_IncTick+0x14>)
 80002c0:	601a      	str	r2, [r3, #0]
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	2000042c 	.word	0x2000042c

080002cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  return uwTick;
 80002d0:	4b02      	ldr	r3, [pc, #8]	; (80002dc <HAL_GetTick+0x10>)
 80002d2:	681b      	ldr	r3, [r3, #0]
}
 80002d4:	0018      	movs	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	2000042c 	.word	0x2000042c

080002e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002e8:	f7ff fff0 	bl	80002cc <HAL_GetTick>
 80002ec:	0003      	movs	r3, r0
 80002ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	3301      	adds	r3, #1
 80002f8:	d002      	beq.n	8000300 <HAL_Delay+0x20>
  {
    wait++;
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	3301      	adds	r3, #1
 80002fe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000300:	46c0      	nop			; (mov r8, r8)
 8000302:	f7ff ffe3 	bl	80002cc <HAL_GetTick>
 8000306:	0002      	movs	r2, r0
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	1ad3      	subs	r3, r2, r3
 800030c:	68fa      	ldr	r2, [r7, #12]
 800030e:	429a      	cmp	r2, r3
 8000310:	d8f7      	bhi.n	8000302 <HAL_Delay+0x22>
  {
  }
}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	b004      	add	sp, #16
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	0002      	movs	r2, r0
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	001a      	movs	r2, r3
 800032e:	231f      	movs	r3, #31
 8000330:	401a      	ands	r2, r3
 8000332:	4b04      	ldr	r3, [pc, #16]	; (8000344 <NVIC_EnableIRQ+0x28>)
 8000334:	2101      	movs	r1, #1
 8000336:	4091      	lsls	r1, r2
 8000338:	000a      	movs	r2, r1
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b002      	add	sp, #8
 8000342:	bd80      	pop	{r7, pc}
 8000344:	e000e100 	.word	0xe000e100

08000348 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	0002      	movs	r2, r0
 8000350:	6039      	str	r1, [r7, #0]
 8000352:	1dfb      	adds	r3, r7, #7
 8000354:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000356:	1dfb      	adds	r3, r7, #7
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b7f      	cmp	r3, #127	; 0x7f
 800035c:	d932      	bls.n	80003c4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800035e:	4a2f      	ldr	r2, [pc, #188]	; (800041c <NVIC_SetPriority+0xd4>)
 8000360:	1dfb      	adds	r3, r7, #7
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	0019      	movs	r1, r3
 8000366:	230f      	movs	r3, #15
 8000368:	400b      	ands	r3, r1
 800036a:	3b08      	subs	r3, #8
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	3306      	adds	r3, #6
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	18d3      	adds	r3, r2, r3
 8000374:	3304      	adds	r3, #4
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	1dfa      	adds	r2, r7, #7
 800037a:	7812      	ldrb	r2, [r2, #0]
 800037c:	0011      	movs	r1, r2
 800037e:	2203      	movs	r2, #3
 8000380:	400a      	ands	r2, r1
 8000382:	00d2      	lsls	r2, r2, #3
 8000384:	21ff      	movs	r1, #255	; 0xff
 8000386:	4091      	lsls	r1, r2
 8000388:	000a      	movs	r2, r1
 800038a:	43d2      	mvns	r2, r2
 800038c:	401a      	ands	r2, r3
 800038e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	019b      	lsls	r3, r3, #6
 8000394:	22ff      	movs	r2, #255	; 0xff
 8000396:	401a      	ands	r2, r3
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	0018      	movs	r0, r3
 800039e:	2303      	movs	r3, #3
 80003a0:	4003      	ands	r3, r0
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003a6:	481d      	ldr	r0, [pc, #116]	; (800041c <NVIC_SetPriority+0xd4>)
 80003a8:	1dfb      	adds	r3, r7, #7
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	001c      	movs	r4, r3
 80003ae:	230f      	movs	r3, #15
 80003b0:	4023      	ands	r3, r4
 80003b2:	3b08      	subs	r3, #8
 80003b4:	089b      	lsrs	r3, r3, #2
 80003b6:	430a      	orrs	r2, r1
 80003b8:	3306      	adds	r3, #6
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	18c3      	adds	r3, r0, r3
 80003be:	3304      	adds	r3, #4
 80003c0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80003c2:	e027      	b.n	8000414 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003c4:	4a16      	ldr	r2, [pc, #88]	; (8000420 <NVIC_SetPriority+0xd8>)
 80003c6:	1dfb      	adds	r3, r7, #7
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	b25b      	sxtb	r3, r3
 80003cc:	089b      	lsrs	r3, r3, #2
 80003ce:	33c0      	adds	r3, #192	; 0xc0
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	589b      	ldr	r3, [r3, r2]
 80003d4:	1dfa      	adds	r2, r7, #7
 80003d6:	7812      	ldrb	r2, [r2, #0]
 80003d8:	0011      	movs	r1, r2
 80003da:	2203      	movs	r2, #3
 80003dc:	400a      	ands	r2, r1
 80003de:	00d2      	lsls	r2, r2, #3
 80003e0:	21ff      	movs	r1, #255	; 0xff
 80003e2:	4091      	lsls	r1, r2
 80003e4:	000a      	movs	r2, r1
 80003e6:	43d2      	mvns	r2, r2
 80003e8:	401a      	ands	r2, r3
 80003ea:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	019b      	lsls	r3, r3, #6
 80003f0:	22ff      	movs	r2, #255	; 0xff
 80003f2:	401a      	ands	r2, r3
 80003f4:	1dfb      	adds	r3, r7, #7
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	0018      	movs	r0, r3
 80003fa:	2303      	movs	r3, #3
 80003fc:	4003      	ands	r3, r0
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000402:	4807      	ldr	r0, [pc, #28]	; (8000420 <NVIC_SetPriority+0xd8>)
 8000404:	1dfb      	adds	r3, r7, #7
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	b25b      	sxtb	r3, r3
 800040a:	089b      	lsrs	r3, r3, #2
 800040c:	430a      	orrs	r2, r1
 800040e:	33c0      	adds	r3, #192	; 0xc0
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	501a      	str	r2, [r3, r0]
}
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b003      	add	sp, #12
 800041a:	bd90      	pop	{r4, r7, pc}
 800041c:	e000ed00 	.word	0xe000ed00
 8000420:	e000e100 	.word	0xe000e100

08000424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3b01      	subs	r3, #1
 8000430:	4a0c      	ldr	r2, [pc, #48]	; (8000464 <SysTick_Config+0x40>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d901      	bls.n	800043a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000436:	2301      	movs	r3, #1
 8000438:	e010      	b.n	800045c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <SysTick_Config+0x44>)
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	3a01      	subs	r2, #1
 8000440:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000442:	2301      	movs	r3, #1
 8000444:	425b      	negs	r3, r3
 8000446:	2103      	movs	r1, #3
 8000448:	0018      	movs	r0, r3
 800044a:	f7ff ff7d 	bl	8000348 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <SysTick_Config+0x44>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <SysTick_Config+0x44>)
 8000456:	2207      	movs	r2, #7
 8000458:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800045a:	2300      	movs	r3, #0
}
 800045c:	0018      	movs	r0, r3
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}
 8000464:	00ffffff 	.word	0x00ffffff
 8000468:	e000e010 	.word	0xe000e010

0800046c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	60b9      	str	r1, [r7, #8]
 8000474:	607a      	str	r2, [r7, #4]
 8000476:	210f      	movs	r1, #15
 8000478:	187b      	adds	r3, r7, r1
 800047a:	1c02      	adds	r2, r0, #0
 800047c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800047e:	68ba      	ldr	r2, [r7, #8]
 8000480:	187b      	adds	r3, r7, r1
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	b25b      	sxtb	r3, r3
 8000486:	0011      	movs	r1, r2
 8000488:	0018      	movs	r0, r3
 800048a:	f7ff ff5d 	bl	8000348 <NVIC_SetPriority>
}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b004      	add	sp, #16
 8000494:	bd80      	pop	{r7, pc}

08000496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	b082      	sub	sp, #8
 800049a:	af00      	add	r7, sp, #0
 800049c:	0002      	movs	r2, r0
 800049e:	1dfb      	adds	r3, r7, #7
 80004a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	b25b      	sxtb	r3, r3
 80004a8:	0018      	movs	r0, r3
 80004aa:	f7ff ff37 	bl	800031c <NVIC_EnableIRQ>
}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	0018      	movs	r0, r3
 80004c2:	f7ff ffaf 	bl	8000424 <SysTick_Config>
 80004c6:	0003      	movs	r3, r0
}
 80004c8:	0018      	movs	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b002      	add	sp, #8
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80004e6:	e155      	b.n	8000794 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2101      	movs	r1, #1
 80004ee:	697a      	ldr	r2, [r7, #20]
 80004f0:	4091      	lsls	r1, r2
 80004f2:	000a      	movs	r2, r1
 80004f4:	4013      	ands	r3, r2
 80004f6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d100      	bne.n	8000500 <HAL_GPIO_Init+0x30>
 80004fe:	e146      	b.n	800078e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	2b02      	cmp	r3, #2
 8000506:	d003      	beq.n	8000510 <HAL_GPIO_Init+0x40>
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	2b12      	cmp	r3, #18
 800050e:	d123      	bne.n	8000558 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	08da      	lsrs	r2, r3, #3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	3208      	adds	r2, #8
 8000518:	0092      	lsls	r2, r2, #2
 800051a:	58d3      	ldr	r3, [r2, r3]
 800051c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	2207      	movs	r2, #7
 8000522:	4013      	ands	r3, r2
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	220f      	movs	r2, #15
 8000528:	409a      	lsls	r2, r3
 800052a:	0013      	movs	r3, r2
 800052c:	43da      	mvns	r2, r3
 800052e:	693b      	ldr	r3, [r7, #16]
 8000530:	4013      	ands	r3, r2
 8000532:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	691a      	ldr	r2, [r3, #16]
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	2107      	movs	r1, #7
 800053c:	400b      	ands	r3, r1
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	409a      	lsls	r2, r3
 8000542:	0013      	movs	r3, r2
 8000544:	693a      	ldr	r2, [r7, #16]
 8000546:	4313      	orrs	r3, r2
 8000548:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	08da      	lsrs	r2, r3, #3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3208      	adds	r2, #8
 8000552:	0092      	lsls	r2, r2, #2
 8000554:	6939      	ldr	r1, [r7, #16]
 8000556:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d00b      	beq.n	8000578 <HAL_GPIO_Init+0xa8>
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d007      	beq.n	8000578 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800056c:	2b11      	cmp	r3, #17
 800056e:	d003      	beq.n	8000578 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	2b12      	cmp	r3, #18
 8000576:	d130      	bne.n	80005da <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	2203      	movs	r2, #3
 8000584:	409a      	lsls	r2, r3
 8000586:	0013      	movs	r3, r2
 8000588:	43da      	mvns	r2, r3
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	4013      	ands	r3, r2
 800058e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	409a      	lsls	r2, r3
 800059a:	0013      	movs	r3, r2
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	4313      	orrs	r3, r2
 80005a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005ae:	2201      	movs	r2, #1
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	409a      	lsls	r2, r3
 80005b4:	0013      	movs	r3, r2
 80005b6:	43da      	mvns	r2, r3
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	4013      	ands	r3, r2
 80005bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	091b      	lsrs	r3, r3, #4
 80005c4:	2201      	movs	r2, #1
 80005c6:	401a      	ands	r2, r3
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	409a      	lsls	r2, r3
 80005cc:	0013      	movs	r3, r2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	2203      	movs	r2, #3
 80005e6:	409a      	lsls	r2, r3
 80005e8:	0013      	movs	r3, r2
 80005ea:	43da      	mvns	r2, r3
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	4013      	ands	r3, r2
 80005f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	2203      	movs	r2, #3
 80005f8:	401a      	ands	r2, r3
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	409a      	lsls	r2, r3
 8000600:	0013      	movs	r3, r2
 8000602:	693a      	ldr	r2, [r7, #16]
 8000604:	4313      	orrs	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	2203      	movs	r2, #3
 800061a:	409a      	lsls	r2, r3
 800061c:	0013      	movs	r3, r2
 800061e:	43da      	mvns	r2, r3
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	4013      	ands	r3, r2
 8000624:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	689a      	ldr	r2, [r3, #8]
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	409a      	lsls	r2, r3
 8000630:	0013      	movs	r3, r2
 8000632:	693a      	ldr	r2, [r7, #16]
 8000634:	4313      	orrs	r3, r2
 8000636:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	685a      	ldr	r2, [r3, #4]
 8000642:	2380      	movs	r3, #128	; 0x80
 8000644:	055b      	lsls	r3, r3, #21
 8000646:	4013      	ands	r3, r2
 8000648:	d100      	bne.n	800064c <HAL_GPIO_Init+0x17c>
 800064a:	e0a0      	b.n	800078e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064c:	4b57      	ldr	r3, [pc, #348]	; (80007ac <HAL_GPIO_Init+0x2dc>)
 800064e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000650:	4b56      	ldr	r3, [pc, #344]	; (80007ac <HAL_GPIO_Init+0x2dc>)
 8000652:	2101      	movs	r1, #1
 8000654:	430a      	orrs	r2, r1
 8000656:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000658:	4a55      	ldr	r2, [pc, #340]	; (80007b0 <HAL_GPIO_Init+0x2e0>)
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	089b      	lsrs	r3, r3, #2
 800065e:	3302      	adds	r3, #2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	589b      	ldr	r3, [r3, r2]
 8000664:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	2203      	movs	r2, #3
 800066a:	4013      	ands	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	220f      	movs	r2, #15
 8000670:	409a      	lsls	r2, r3
 8000672:	0013      	movs	r3, r2
 8000674:	43da      	mvns	r2, r3
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	4013      	ands	r3, r2
 800067a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	23a0      	movs	r3, #160	; 0xa0
 8000680:	05db      	lsls	r3, r3, #23
 8000682:	429a      	cmp	r2, r3
 8000684:	d01f      	beq.n	80006c6 <HAL_GPIO_Init+0x1f6>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a4a      	ldr	r2, [pc, #296]	; (80007b4 <HAL_GPIO_Init+0x2e4>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d019      	beq.n	80006c2 <HAL_GPIO_Init+0x1f2>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a49      	ldr	r2, [pc, #292]	; (80007b8 <HAL_GPIO_Init+0x2e8>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d013      	beq.n	80006be <HAL_GPIO_Init+0x1ee>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a48      	ldr	r2, [pc, #288]	; (80007bc <HAL_GPIO_Init+0x2ec>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d00d      	beq.n	80006ba <HAL_GPIO_Init+0x1ea>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a47      	ldr	r2, [pc, #284]	; (80007c0 <HAL_GPIO_Init+0x2f0>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d007      	beq.n	80006b6 <HAL_GPIO_Init+0x1e6>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a46      	ldr	r2, [pc, #280]	; (80007c4 <HAL_GPIO_Init+0x2f4>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d101      	bne.n	80006b2 <HAL_GPIO_Init+0x1e2>
 80006ae:	2305      	movs	r3, #5
 80006b0:	e00a      	b.n	80006c8 <HAL_GPIO_Init+0x1f8>
 80006b2:	2306      	movs	r3, #6
 80006b4:	e008      	b.n	80006c8 <HAL_GPIO_Init+0x1f8>
 80006b6:	2304      	movs	r3, #4
 80006b8:	e006      	b.n	80006c8 <HAL_GPIO_Init+0x1f8>
 80006ba:	2303      	movs	r3, #3
 80006bc:	e004      	b.n	80006c8 <HAL_GPIO_Init+0x1f8>
 80006be:	2302      	movs	r3, #2
 80006c0:	e002      	b.n	80006c8 <HAL_GPIO_Init+0x1f8>
 80006c2:	2301      	movs	r3, #1
 80006c4:	e000      	b.n	80006c8 <HAL_GPIO_Init+0x1f8>
 80006c6:	2300      	movs	r3, #0
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	2103      	movs	r1, #3
 80006cc:	400a      	ands	r2, r1
 80006ce:	0092      	lsls	r2, r2, #2
 80006d0:	4093      	lsls	r3, r2
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006d8:	4935      	ldr	r1, [pc, #212]	; (80007b0 <HAL_GPIO_Init+0x2e0>)
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	089b      	lsrs	r3, r3, #2
 80006de:	3302      	adds	r3, #2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006e6:	4b38      	ldr	r3, [pc, #224]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	43da      	mvns	r2, r3
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	4013      	ands	r3, r2
 80006f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	685a      	ldr	r2, [r3, #4]
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	025b      	lsls	r3, r3, #9
 80006fe:	4013      	ands	r3, r2
 8000700:	d003      	beq.n	800070a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	4313      	orrs	r3, r2
 8000708:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800070a:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 800070c:	693a      	ldr	r2, [r7, #16]
 800070e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000710:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	43da      	mvns	r2, r3
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	4013      	ands	r3, r2
 800071e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	685a      	ldr	r2, [r3, #4]
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	029b      	lsls	r3, r3, #10
 8000728:	4013      	ands	r3, r2
 800072a:	d003      	beq.n	8000734 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	4313      	orrs	r3, r2
 8000732:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	43da      	mvns	r2, r3
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	4013      	ands	r3, r2
 8000748:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	035b      	lsls	r3, r3, #13
 8000752:	4013      	ands	r3, r2
 8000754:	d003      	beq.n	800075e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4313      	orrs	r3, r2
 800075c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 8000760:	693a      	ldr	r2, [r7, #16]
 8000762:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	43da      	mvns	r2, r3
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	4013      	ands	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	039b      	lsls	r3, r3, #14
 800077c:	4013      	ands	r3, r2
 800077e:	d003      	beq.n	8000788 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000780:	693a      	ldr	r2, [r7, #16]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4313      	orrs	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	3301      	adds	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	40da      	lsrs	r2, r3
 800079c:	1e13      	subs	r3, r2, #0
 800079e:	d000      	beq.n	80007a2 <HAL_GPIO_Init+0x2d2>
 80007a0:	e6a2      	b.n	80004e8 <HAL_GPIO_Init+0x18>
  }
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b006      	add	sp, #24
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010000 	.word	0x40010000
 80007b4:	50000400 	.word	0x50000400
 80007b8:	50000800 	.word	0x50000800
 80007bc:	50000c00 	.word	0x50000c00
 80007c0:	50001000 	.word	0x50001000
 80007c4:	50001c00 	.word	0x50001c00
 80007c8:	40010400 	.word	0x40010400

080007cc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	0008      	movs	r0, r1
 80007d6:	0011      	movs	r1, r2
 80007d8:	1cbb      	adds	r3, r7, #2
 80007da:	1c02      	adds	r2, r0, #0
 80007dc:	801a      	strh	r2, [r3, #0]
 80007de:	1c7b      	adds	r3, r7, #1
 80007e0:	1c0a      	adds	r2, r1, #0
 80007e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80007e4:	1c7b      	adds	r3, r7, #1
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d004      	beq.n	80007f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007ec:	1cbb      	adds	r3, r7, #2
 80007ee:	881a      	ldrh	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80007f4:	e003      	b.n	80007fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80007f6:	1cbb      	adds	r3, r7, #2
 80007f8:	881a      	ldrh	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b002      	add	sp, #8
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	0002      	movs	r2, r0
 8000810:	1dbb      	adds	r3, r7, #6
 8000812:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	1dba      	adds	r2, r7, #6
 800081a:	8812      	ldrh	r2, [r2, #0]
 800081c:	4013      	ands	r3, r2
 800081e:	d008      	beq.n	8000832 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000822:	1dba      	adds	r2, r7, #6
 8000824:	8812      	ldrh	r2, [r2, #0]
 8000826:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000828:	1dbb      	adds	r3, r7, #6
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	0018      	movs	r0, r3
 800082e:	f000 f807 	bl	8000840 <HAL_GPIO_EXTI_Callback>
  }
}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b002      	add	sp, #8
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	40010400 	.word	0x40010400

08000840 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	0002      	movs	r2, r0
 8000848:	1dbb      	adds	r3, r7, #6
 800084a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b002      	add	sp, #8
 8000852:	bd80      	pop	{r7, pc}

08000854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e082      	b.n	800096c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2241      	movs	r2, #65	; 0x41
 800086a:	5c9b      	ldrb	r3, [r3, r2]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d107      	bne.n	8000882 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2240      	movs	r2, #64	; 0x40
 8000876:	2100      	movs	r1, #0
 8000878:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	0018      	movs	r0, r3
 800087e:	f006 f869 	bl	8006954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2241      	movs	r2, #65	; 0x41
 8000886:	2124      	movs	r1, #36	; 0x24
 8000888:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2101      	movs	r1, #1
 8000896:	438a      	bics	r2, r1
 8000898:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4934      	ldr	r1, [pc, #208]	; (8000974 <HAL_I2C_Init+0x120>)
 80008a4:	400a      	ands	r2, r1
 80008a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	689a      	ldr	r2, [r3, #8]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4931      	ldr	r1, [pc, #196]	; (8000978 <HAL_I2C_Init+0x124>)
 80008b4:	400a      	ands	r2, r1
 80008b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d108      	bne.n	80008d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	689a      	ldr	r2, [r3, #8]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	0209      	lsls	r1, r1, #8
 80008cc:	430a      	orrs	r2, r1
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	e007      	b.n	80008e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689a      	ldr	r2, [r3, #8]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2184      	movs	r1, #132	; 0x84
 80008dc:	0209      	lsls	r1, r1, #8
 80008de:	430a      	orrs	r2, r1
 80008e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d104      	bne.n	80008f4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	0112      	lsls	r2, r2, #4
 80008f2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	685a      	ldr	r2, [r3, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	491f      	ldr	r1, [pc, #124]	; (800097c <HAL_I2C_Init+0x128>)
 8000900:	430a      	orrs	r2, r1
 8000902:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	68da      	ldr	r2, [r3, #12]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	491a      	ldr	r1, [pc, #104]	; (8000978 <HAL_I2C_Init+0x124>)
 8000910:	400a      	ands	r2, r1
 8000912:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	691a      	ldr	r2, [r3, #16]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	431a      	orrs	r2, r3
 800091e:	0011      	movs	r1, r2
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	021a      	lsls	r2, r3, #8
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	430a      	orrs	r2, r1
 800092c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	69d9      	ldr	r1, [r3, #28]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6a1a      	ldr	r2, [r3, #32]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	430a      	orrs	r2, r1
 800093c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2101      	movs	r1, #1
 800094a:	430a      	orrs	r2, r1
 800094c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2241      	movs	r2, #65	; 0x41
 8000958:	2120      	movs	r1, #32
 800095a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2242      	movs	r2, #66	; 0x42
 8000966:	2100      	movs	r1, #0
 8000968:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800096a:	2300      	movs	r3, #0
}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b002      	add	sp, #8
 8000972:	bd80      	pop	{r7, pc}
 8000974:	f0ffffff 	.word	0xf0ffffff
 8000978:	ffff7fff 	.word	0xffff7fff
 800097c:	02008000 	.word	0x02008000

08000980 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2241      	movs	r2, #65	; 0x41
 800098e:	5c9b      	ldrb	r3, [r3, r2]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b20      	cmp	r3, #32
 8000994:	d138      	bne.n	8000a08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2240      	movs	r2, #64	; 0x40
 800099a:	5c9b      	ldrb	r3, [r3, r2]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d101      	bne.n	80009a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80009a0:	2302      	movs	r3, #2
 80009a2:	e032      	b.n	8000a0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2240      	movs	r2, #64	; 0x40
 80009a8:	2101      	movs	r1, #1
 80009aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2241      	movs	r2, #65	; 0x41
 80009b0:	2124      	movs	r1, #36	; 0x24
 80009b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2101      	movs	r1, #1
 80009c0:	438a      	bics	r2, r1
 80009c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4911      	ldr	r1, [pc, #68]	; (8000a14 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80009d0:	400a      	ands	r2, r1
 80009d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	6819      	ldr	r1, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	430a      	orrs	r2, r1
 80009e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2101      	movs	r1, #1
 80009f0:	430a      	orrs	r2, r1
 80009f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2241      	movs	r2, #65	; 0x41
 80009f8:	2120      	movs	r1, #32
 80009fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2240      	movs	r2, #64	; 0x40
 8000a00:	2100      	movs	r1, #0
 8000a02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000a04:	2300      	movs	r3, #0
 8000a06:	e000      	b.n	8000a0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000a08:	2302      	movs	r3, #2
  }
}
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	ffffefff 	.word	0xffffefff

08000a18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2241      	movs	r2, #65	; 0x41
 8000a26:	5c9b      	ldrb	r3, [r3, r2]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b20      	cmp	r3, #32
 8000a2c:	d139      	bne.n	8000aa2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2240      	movs	r2, #64	; 0x40
 8000a32:	5c9b      	ldrb	r3, [r3, r2]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d101      	bne.n	8000a3c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000a38:	2302      	movs	r3, #2
 8000a3a:	e033      	b.n	8000aa4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2240      	movs	r2, #64	; 0x40
 8000a40:	2101      	movs	r1, #1
 8000a42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2241      	movs	r2, #65	; 0x41
 8000a48:	2124      	movs	r1, #36	; 0x24
 8000a4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2101      	movs	r1, #1
 8000a58:	438a      	bics	r2, r1
 8000a5a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4a11      	ldr	r2, [pc, #68]	; (8000aac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	021b      	lsls	r3, r3, #8
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2241      	movs	r2, #65	; 0x41
 8000a92:	2120      	movs	r1, #32
 8000a94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2240      	movs	r2, #64	; 0x40
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000aa2:	2302      	movs	r3, #2
  }
}
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b004      	add	sp, #16
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	fffff0ff 	.word	0xfffff0ff

08000ab0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab2:	b08b      	sub	sp, #44	; 0x2c
 8000ab4:	af06      	add	r7, sp, #24
 8000ab6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e0e4      	b.n	8000c8c <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a73      	ldr	r2, [pc, #460]	; (8000c94 <HAL_PCD_Init+0x1e4>)
 8000ac6:	5c9b      	ldrb	r3, [r3, r2]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d108      	bne.n	8000ae0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	238a      	movs	r3, #138	; 0x8a
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	0018      	movs	r0, r3
 8000adc:	f006 fa22 	bl	8006f24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a6c      	ldr	r2, [pc, #432]	; (8000c94 <HAL_PCD_Init+0x1e4>)
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	0018      	movs	r0, r3
 8000aee:	f001 ff67 	bl	80029c0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000af2:	230f      	movs	r3, #15
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	e043      	b.n	8000b84 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000afc:	200f      	movs	r0, #15
 8000afe:	183b      	adds	r3, r7, r0
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	2129      	movs	r1, #41	; 0x29
 8000b06:	015b      	lsls	r3, r3, #5
 8000b08:	18d3      	adds	r3, r2, r3
 8000b0a:	185b      	adds	r3, r3, r1
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b10:	183b      	adds	r3, r7, r0
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	2128      	movs	r1, #40	; 0x28
 8000b18:	015b      	lsls	r3, r3, #5
 8000b1a:	18d3      	adds	r3, r2, r3
 8000b1c:	185b      	adds	r3, r3, r1
 8000b1e:	183a      	adds	r2, r7, r0
 8000b20:	7812      	ldrb	r2, [r2, #0]
 8000b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b24:	183b      	adds	r3, r7, r0
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	183a      	adds	r2, r7, r0
 8000b2a:	7812      	ldrb	r2, [r2, #0]
 8000b2c:	b291      	uxth	r1, r2
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	015b      	lsls	r3, r3, #5
 8000b32:	18d3      	adds	r3, r2, r3
 8000b34:	3336      	adds	r3, #54	; 0x36
 8000b36:	1c0a      	adds	r2, r1, #0
 8000b38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b3a:	183b      	adds	r3, r7, r0
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	212b      	movs	r1, #43	; 0x2b
 8000b42:	015b      	lsls	r3, r3, #5
 8000b44:	18d3      	adds	r3, r2, r3
 8000b46:	185b      	adds	r3, r3, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b4c:	183b      	adds	r3, r7, r0
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	015b      	lsls	r3, r3, #5
 8000b54:	18d3      	adds	r3, r2, r3
 8000b56:	3338      	adds	r3, #56	; 0x38
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b5c:	183b      	adds	r3, r7, r0
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	015b      	lsls	r3, r3, #5
 8000b64:	18d3      	adds	r3, r2, r3
 8000b66:	333c      	adds	r3, #60	; 0x3c
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b6c:	183b      	adds	r3, r7, r0
 8000b6e:	781a      	ldrb	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3202      	adds	r2, #2
 8000b74:	0152      	lsls	r2, r2, #5
 8000b76:	2100      	movs	r1, #0
 8000b78:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b7a:	183b      	adds	r3, r7, r0
 8000b7c:	781a      	ldrb	r2, [r3, #0]
 8000b7e:	183b      	adds	r3, r7, r0
 8000b80:	3201      	adds	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
 8000b84:	230f      	movs	r3, #15
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	781a      	ldrb	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d3b4      	bcc.n	8000afc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b92:	230f      	movs	r3, #15
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	e03f      	b.n	8000c1c <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b9c:	200f      	movs	r0, #15
 8000b9e:	183b      	adds	r3, r7, r0
 8000ba0:	781a      	ldrb	r2, [r3, #0]
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	232a      	movs	r3, #42	; 0x2a
 8000ba6:	33ff      	adds	r3, #255	; 0xff
 8000ba8:	0152      	lsls	r2, r2, #5
 8000baa:	188a      	adds	r2, r1, r2
 8000bac:	18d3      	adds	r3, r2, r3
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000bb2:	183b      	adds	r3, r7, r0
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	2394      	movs	r3, #148	; 0x94
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	0152      	lsls	r2, r2, #5
 8000bbe:	188a      	adds	r2, r1, r2
 8000bc0:	18d3      	adds	r3, r2, r3
 8000bc2:	183a      	adds	r2, r7, r0
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000bc8:	183b      	adds	r3, r7, r0
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	232c      	movs	r3, #44	; 0x2c
 8000bd0:	33ff      	adds	r3, #255	; 0xff
 8000bd2:	0152      	lsls	r2, r2, #5
 8000bd4:	188a      	adds	r2, r1, r2
 8000bd6:	18d3      	adds	r3, r2, r3
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000bdc:	183b      	adds	r3, r7, r0
 8000bde:	781a      	ldrb	r2, [r3, #0]
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	239c      	movs	r3, #156	; 0x9c
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	0152      	lsls	r2, r2, #5
 8000be8:	188a      	adds	r2, r1, r2
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000bf0:	183b      	adds	r3, r7, r0
 8000bf2:	781a      	ldrb	r2, [r3, #0]
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	239e      	movs	r3, #158	; 0x9e
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	0152      	lsls	r2, r2, #5
 8000bfc:	188a      	adds	r2, r1, r2
 8000bfe:	18d3      	adds	r3, r2, r3
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c04:	183b      	adds	r3, r7, r0
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	320a      	adds	r2, #10
 8000c0c:	0152      	lsls	r2, r2, #5
 8000c0e:	2100      	movs	r1, #0
 8000c10:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c12:	183b      	adds	r3, r7, r0
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	183b      	adds	r3, r7, r0
 8000c18:	3201      	adds	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d3b8      	bcc.n	8000b9c <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6818      	ldr	r0, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	466a      	mov	r2, sp
 8000c32:	0011      	movs	r1, r2
 8000c34:	001a      	movs	r2, r3
 8000c36:	3210      	adds	r2, #16
 8000c38:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000c3a:	c170      	stmia	r1!, {r4, r5, r6}
 8000c3c:	ca30      	ldmia	r2!, {r4, r5}
 8000c3e:	c130      	stmia	r1!, {r4, r5}
 8000c40:	6859      	ldr	r1, [r3, #4]
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	f001 fedb 	bl	8002a00 <USB_DevInit>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d005      	beq.n	8000c5a <HAL_PCD_Init+0x1aa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <HAL_PCD_Init+0x1e4>)
 8000c52:	2102      	movs	r1, #2
 8000c54:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e018      	b.n	8000c8c <HAL_PCD_Init+0x1dc>
  }

  hpcd->USB_Address = 0U;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2224      	movs	r2, #36	; 0x24
 8000c5e:	2100      	movs	r1, #0
 8000c60:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <HAL_PCD_Init+0x1e4>)
 8000c66:	2101      	movs	r1, #1
 8000c68:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d103      	bne.n	8000c7a <HAL_PCD_Init+0x1ca>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	0018      	movs	r0, r3
 8000c76:	f000 ff2e 	bl	8001ad6 <HAL_PCDEx_ActivateLPM>
  }


  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a1b      	ldr	r3, [r3, #32]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d103      	bne.n	8000c8a <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 ff01 	bl	8001a8c <HAL_PCDEx_ActivateBCD>
  }

  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b005      	add	sp, #20
 8000c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c94:	00000229 	.word	0x00000229

08000c98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	238a      	movs	r3, #138	; 0x8a
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	5cd3      	ldrb	r3, [r2, r3]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d101      	bne.n	8000cb0 <HAL_PCD_Start+0x18>
 8000cac:	2302      	movs	r3, #2
 8000cae:	e014      	b.n	8000cda <HAL_PCD_Start+0x42>
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	238a      	movs	r3, #138	; 0x8a
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	54d1      	strb	r1, [r2, r3]
  (void)USB_DevConnect(hpcd->Instance);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f002 fec6 	bl	8003a50 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f001 fe5f 	bl	800298c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	238a      	movs	r3, #138	; 0x8a
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f002 fec3 	bl	8003a7c <USB_ReadInterrupts>
 8000cf6:	0002      	movs	r2, r0
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	2380      	movs	r3, #128	; 0x80
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d103      	bne.n	8000d0e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 fbaf 	bl	800146c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	0018      	movs	r0, r3
 8000d14:	f002 feb2 	bl	8003a7c <USB_ReadInterrupts>
 8000d18:	0002      	movs	r2, r0
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	401a      	ands	r2, r3
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d114      	bne.n	8000d52 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2244      	movs	r2, #68	; 0x44
 8000d2e:	5a9b      	ldrh	r3, [r3, r2]
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	49a8      	ldr	r1, [pc, #672]	; (8000fd8 <HAL_PCD_IRQHandler+0x2f4>)
 8000d38:	400a      	ands	r2, r1
 8000d3a:	b291      	uxth	r1, r2
 8000d3c:	2244      	movs	r2, #68	; 0x44
 8000d3e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	0018      	movs	r0, r3
 8000d44:	f006 f96a 	bl	800701c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 f951 	bl	8000ff4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	0018      	movs	r0, r3
 8000d58:	f002 fe90 	bl	8003a7c <USB_ReadInterrupts>
 8000d5c:	0002      	movs	r2, r0
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	01db      	lsls	r3, r3, #7
 8000d62:	401a      	ands	r2, r3
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	01db      	lsls	r3, r3, #7
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d10b      	bne.n	8000d84 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2244      	movs	r2, #68	; 0x44
 8000d72:	5a9b      	ldrh	r3, [r3, r2]
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4998      	ldr	r1, [pc, #608]	; (8000fdc <HAL_PCD_IRQHandler+0x2f8>)
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	b291      	uxth	r1, r2
 8000d80:	2244      	movs	r2, #68	; 0x44
 8000d82:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f002 fe77 	bl	8003a7c <USB_ReadInterrupts>
 8000d8e:	0002      	movs	r2, r0
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	019b      	lsls	r3, r3, #6
 8000d94:	401a      	ands	r2, r3
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d10b      	bne.n	8000db6 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2244      	movs	r2, #68	; 0x44
 8000da4:	5a9b      	ldrh	r3, [r3, r2]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	498c      	ldr	r1, [pc, #560]	; (8000fe0 <HAL_PCD_IRQHandler+0x2fc>)
 8000dae:	400a      	ands	r2, r1
 8000db0:	b291      	uxth	r1, r2
 8000db2:	2244      	movs	r2, #68	; 0x44
 8000db4:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f002 fe5e 	bl	8003a7c <USB_ReadInterrupts>
 8000dc0:	0002      	movs	r2, r0
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	015b      	lsls	r3, r3, #5
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	015b      	lsls	r3, r3, #5
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d137      	bne.n	8000e40 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2240      	movs	r2, #64	; 0x40
 8000dd6:	5a9b      	ldrh	r3, [r3, r2]
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2104      	movs	r1, #4
 8000de0:	438a      	bics	r2, r1
 8000de2:	b291      	uxth	r1, r2
 8000de4:	2240      	movs	r2, #64	; 0x40
 8000de6:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2240      	movs	r2, #64	; 0x40
 8000dee:	5a9b      	ldrh	r3, [r3, r2]
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2108      	movs	r1, #8
 8000df8:	438a      	bics	r2, r1
 8000dfa:	b291      	uxth	r1, r2
 8000dfc:	2240      	movs	r2, #64	; 0x40
 8000dfe:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	2398      	movs	r3, #152	; 0x98
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	5cd3      	ldrb	r3, [r2, r3]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d109      	bne.n	8000e20 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	2398      	movs	r3, #152	; 0x98
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	2100      	movs	r1, #0
 8000e14:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f000 fe85 	bl	8001b2a <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	0018      	movs	r0, r3
 8000e24:	f006 f93a 	bl	800709c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2244      	movs	r2, #68	; 0x44
 8000e2e:	5a9b      	ldrh	r3, [r3, r2]
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	496b      	ldr	r1, [pc, #428]	; (8000fe4 <HAL_PCD_IRQHandler+0x300>)
 8000e38:	400a      	ands	r2, r1
 8000e3a:	b291      	uxth	r1, r2
 8000e3c:	2244      	movs	r2, #68	; 0x44
 8000e3e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	0018      	movs	r0, r3
 8000e46:	f002 fe19 	bl	8003a7c <USB_ReadInterrupts>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	011b      	lsls	r3, r3, #4
 8000e50:	401a      	ands	r2, r3
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d134      	bne.n	8000ec4 <HAL_PCD_IRQHandler+0x1e0>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2240      	movs	r2, #64	; 0x40
 8000e60:	5a9b      	ldrh	r3, [r3, r2]
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2108      	movs	r1, #8
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	b291      	uxth	r1, r2
 8000e6e:	2240      	movs	r2, #64	; 0x40
 8000e70:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2244      	movs	r2, #68	; 0x44
 8000e78:	5a9b      	ldrh	r3, [r3, r2]
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4959      	ldr	r1, [pc, #356]	; (8000fe8 <HAL_PCD_IRQHandler+0x304>)
 8000e82:	400a      	ands	r2, r1
 8000e84:	b291      	uxth	r1, r2
 8000e86:	2244      	movs	r2, #68	; 0x44
 8000e88:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2240      	movs	r2, #64	; 0x40
 8000e90:	5a9b      	ldrh	r3, [r3, r2]
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2104      	movs	r1, #4
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	b291      	uxth	r1, r2
 8000e9e:	2240      	movs	r2, #64	; 0x40
 8000ea0:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f002 fde8 	bl	8003a7c <USB_ReadInterrupts>
 8000eac:	0002      	movs	r2, r0
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	015b      	lsls	r3, r3, #5
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	015b      	lsls	r3, r3, #5
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d003      	beq.n	8000ec4 <HAL_PCD_IRQHandler+0x1e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f006 f8d0 	bl	8007064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f002 fdd7 	bl	8003a7c <USB_ReadInterrupts>
 8000ece:	0002      	movs	r2, r0
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b80      	cmp	r3, #128	; 0x80
 8000ed6:	d145      	bne.n	8000f64 <HAL_PCD_IRQHandler+0x280>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2244      	movs	r2, #68	; 0x44
 8000ede:	5a9b      	ldrh	r3, [r3, r2]
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2180      	movs	r1, #128	; 0x80
 8000ee8:	438a      	bics	r2, r1
 8000eea:	b291      	uxth	r1, r2
 8000eec:	2244      	movs	r2, #68	; 0x44
 8000eee:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	2398      	movs	r3, #152	; 0x98
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	5cd3      	ldrb	r3, [r2, r3]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d12f      	bne.n	8000f5c <HAL_PCD_IRQHandler+0x278>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2240      	movs	r2, #64	; 0x40
 8000f02:	5a9b      	ldrh	r3, [r3, r2]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	b291      	uxth	r1, r2
 8000f10:	2240      	movs	r2, #64	; 0x40
 8000f12:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2240      	movs	r2, #64	; 0x40
 8000f1a:	5a9b      	ldrh	r3, [r3, r2]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2108      	movs	r1, #8
 8000f24:	430a      	orrs	r2, r1
 8000f26:	b291      	uxth	r1, r2
 8000f28:	2240      	movs	r2, #64	; 0x40
 8000f2a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	2398      	movs	r3, #152	; 0x98
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	2101      	movs	r1, #1
 8000f34:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2254      	movs	r2, #84	; 0x54
 8000f3c:	5a9b      	ldrh	r3, [r3, r2]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	223c      	movs	r2, #60	; 0x3c
 8000f44:	4013      	ands	r3, r2
 8000f46:	0019      	movs	r1, r3
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	2399      	movs	r3, #153	; 0x99
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2101      	movs	r1, #1
 8000f54:	0018      	movs	r0, r3
 8000f56:	f000 fde8 	bl	8001b2a <HAL_PCDEx_LPM_Callback>
 8000f5a:	e003      	b.n	8000f64 <HAL_PCD_IRQHandler+0x280>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f006 f880 	bl	8007064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f002 fd87 	bl	8003a7c <USB_ReadInterrupts>
 8000f6e:	0002      	movs	r2, r0
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	401a      	ands	r2, r3
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d10f      	bne.n	8000f9e <HAL_PCD_IRQHandler+0x2ba>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2244      	movs	r2, #68	; 0x44
 8000f84:	5a9b      	ldrh	r3, [r3, r2]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4917      	ldr	r1, [pc, #92]	; (8000fec <HAL_PCD_IRQHandler+0x308>)
 8000f8e:	400a      	ands	r2, r1
 8000f90:	b291      	uxth	r1, r2
 8000f92:	2244      	movs	r2, #68	; 0x44
 8000f94:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f006 f830 	bl	8006ffe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f002 fd6a 	bl	8003a7c <USB_ReadInterrupts>
 8000fa8:	0002      	movs	r2, r0
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	401a      	ands	r2, r3
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d10b      	bne.n	8000fd0 <HAL_PCD_IRQHandler+0x2ec>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2244      	movs	r2, #68	; 0x44
 8000fbe:	5a9b      	ldrh	r3, [r3, r2]
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	490a      	ldr	r1, [pc, #40]	; (8000ff0 <HAL_PCD_IRQHandler+0x30c>)
 8000fc8:	400a      	ands	r2, r1
 8000fca:	b291      	uxth	r1, r2
 8000fcc:	2244      	movs	r2, #68	; 0x44
 8000fce:	5299      	strh	r1, [r3, r2]
  }
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b002      	add	sp, #8
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	fffffbff 	.word	0xfffffbff
 8000fdc:	ffffbfff 	.word	0xffffbfff
 8000fe0:	ffffdfff 	.word	0xffffdfff
 8000fe4:	ffffefff 	.word	0xffffefff
 8000fe8:	fffff7ff 	.word	0xfffff7ff
 8000fec:	fffffdff 	.word	0xfffffdff
 8000ff0:	fffffeff 	.word	0xfffffeff

08000ff4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	000a      	movs	r2, r1
 8000ffe:	1cfb      	adds	r3, r7, #3
 8001000:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	238a      	movs	r3, #138	; 0x8a
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	5cd3      	ldrb	r3, [r2, r3]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d101      	bne.n	8001012 <HAL_PCD_SetAddress+0x1e>
 800100e:	2302      	movs	r3, #2
 8001010:	e017      	b.n	8001042 <HAL_PCD_SetAddress+0x4e>
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	238a      	movs	r3, #138	; 0x8a
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	2101      	movs	r1, #1
 800101a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	1cfa      	adds	r2, r7, #3
 8001020:	2124      	movs	r1, #36	; 0x24
 8001022:	7812      	ldrb	r2, [r2, #0]
 8001024:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	1cfb      	adds	r3, r7, #3
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	0019      	movs	r1, r3
 8001030:	0010      	movs	r0, r2
 8001032:	f002 fcf9 	bl	8003a28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	238a      	movs	r3, #138	; 0x8a
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	2100      	movs	r1, #0
 800103e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	0018      	movs	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800104a:	b590      	push	{r4, r7, lr}
 800104c:	b085      	sub	sp, #20
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	000c      	movs	r4, r1
 8001054:	0010      	movs	r0, r2
 8001056:	0019      	movs	r1, r3
 8001058:	1cfb      	adds	r3, r7, #3
 800105a:	1c22      	adds	r2, r4, #0
 800105c:	701a      	strb	r2, [r3, #0]
 800105e:	003b      	movs	r3, r7
 8001060:	1c02      	adds	r2, r0, #0
 8001062:	801a      	strh	r2, [r3, #0]
 8001064:	1cbb      	adds	r3, r7, #2
 8001066:	1c0a      	adds	r2, r1, #0
 8001068:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800106a:	230b      	movs	r3, #11
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001072:	1cfb      	adds	r3, r7, #3
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b25b      	sxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	da0c      	bge.n	8001096 <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800107c:	1cfb      	adds	r3, r7, #3
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2207      	movs	r2, #7
 8001082:	4013      	ands	r3, r2
 8001084:	015b      	lsls	r3, r3, #5
 8001086:	3328      	adds	r3, #40	; 0x28
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	18d3      	adds	r3, r2, r3
 800108c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2201      	movs	r2, #1
 8001092:	705a      	strb	r2, [r3, #1]
 8001094:	e00c      	b.n	80010b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001096:	1cfb      	adds	r3, r7, #3
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2207      	movs	r2, #7
 800109c:	4013      	ands	r3, r2
 800109e:	015b      	lsls	r3, r3, #5
 80010a0:	3329      	adds	r3, #41	; 0x29
 80010a2:	33ff      	adds	r3, #255	; 0xff
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	18d3      	adds	r3, r2, r3
 80010a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2200      	movs	r2, #0
 80010ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010b0:	1cfb      	adds	r3, r7, #3
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2207      	movs	r2, #7
 80010b6:	4013      	ands	r3, r2
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010be:	003b      	movs	r3, r7
 80010c0:	881a      	ldrh	r2, [r3, #0]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1cba      	adds	r2, r7, #2
 80010ca:	7812      	ldrb	r2, [r2, #0]
 80010cc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	785b      	ldrb	r3, [r3, #1]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d004      	beq.n	80010e0 <HAL_PCD_EP_Open+0x96>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80010e0:	1cbb      	adds	r3, r7, #2
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d102      	bne.n	80010ee <HAL_PCD_EP_Open+0xa4>
  {
    ep->data_pid_start = 0U;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2200      	movs	r2, #0
 80010ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	238a      	movs	r3, #138	; 0x8a
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	5cd3      	ldrb	r3, [r2, r3]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d101      	bne.n	80010fe <HAL_PCD_EP_Open+0xb4>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e013      	b.n	8001126 <HAL_PCD_EP_Open+0xdc>
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	238a      	movs	r3, #138	; 0x8a
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	2101      	movs	r1, #1
 8001106:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f001 fca5 	bl	8002a60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	238a      	movs	r3, #138	; 0x8a
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	2100      	movs	r1, #0
 800111e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001120:	230b      	movs	r3, #11
 8001122:	18fb      	adds	r3, r7, r3
 8001124:	781b      	ldrb	r3, [r3, #0]
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b005      	add	sp, #20
 800112c:	bd90      	pop	{r4, r7, pc}

0800112e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	000a      	movs	r2, r1
 8001138:	1cfb      	adds	r3, r7, #3
 800113a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800113c:	1cfb      	adds	r3, r7, #3
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b25b      	sxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	da0c      	bge.n	8001160 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001146:	1cfb      	adds	r3, r7, #3
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2207      	movs	r2, #7
 800114c:	4013      	ands	r3, r2
 800114e:	015b      	lsls	r3, r3, #5
 8001150:	3328      	adds	r3, #40	; 0x28
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	18d3      	adds	r3, r2, r3
 8001156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2201      	movs	r2, #1
 800115c:	705a      	strb	r2, [r3, #1]
 800115e:	e00c      	b.n	800117a <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001160:	1cfb      	adds	r3, r7, #3
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2207      	movs	r2, #7
 8001166:	4013      	ands	r3, r2
 8001168:	015b      	lsls	r3, r3, #5
 800116a:	3329      	adds	r3, #41	; 0x29
 800116c:	33ff      	adds	r3, #255	; 0xff
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	18d3      	adds	r3, r2, r3
 8001172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800117a:	1cfb      	adds	r3, r7, #3
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2207      	movs	r2, #7
 8001180:	4013      	ands	r3, r2
 8001182:	b2da      	uxtb	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	238a      	movs	r3, #138	; 0x8a
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	5cd3      	ldrb	r3, [r2, r3]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <HAL_PCD_EP_Close+0x6a>
 8001194:	2302      	movs	r3, #2
 8001196:	e011      	b.n	80011bc <HAL_PCD_EP_Close+0x8e>
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	238a      	movs	r3, #138	; 0x8a
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	2101      	movs	r1, #1
 80011a0:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	0011      	movs	r1, r2
 80011aa:	0018      	movs	r0, r3
 80011ac:	f001 ff48 	bl	8003040 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	238a      	movs	r3, #138	; 0x8a
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	2100      	movs	r1, #0
 80011b8:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	b004      	add	sp, #16
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	200b      	movs	r0, #11
 80011d2:	183b      	adds	r3, r7, r0
 80011d4:	1c0a      	adds	r2, r1, #0
 80011d6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011d8:	0001      	movs	r1, r0
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2207      	movs	r2, #7
 80011e0:	4013      	ands	r3, r2
 80011e2:	015b      	lsls	r3, r3, #5
 80011e4:	3329      	adds	r3, #41	; 0x29
 80011e6:	33ff      	adds	r3, #255	; 0xff
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	18d3      	adds	r3, r2, r3
 80011ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2200      	movs	r2, #0
 8001204:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001206:	187b      	adds	r3, r7, r1
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2207      	movs	r2, #7
 800120c:	4013      	ands	r3, r2
 800120e:	b2da      	uxtb	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001214:	187b      	adds	r3, r7, r1
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2207      	movs	r2, #7
 800121a:	4013      	ands	r3, r2
 800121c:	d107      	bne.n	800122e <HAL_PCD_EP_Receive+0x6a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	0011      	movs	r1, r2
 8001226:	0018      	movs	r0, r3
 8001228:	f002 f880 	bl	800332c <USB_EPStartXfer>
 800122c:	e006      	b.n	800123c <HAL_PCD_EP_Receive+0x78>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	0011      	movs	r1, r2
 8001236:	0018      	movs	r0, r3
 8001238:	f002 f878 	bl	800332c <USB_EPStartXfer>
  }

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	0018      	movs	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	b006      	add	sp, #24
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	000a      	movs	r2, r1
 8001250:	1cfb      	adds	r3, r7, #3
 8001252:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001254:	1cfb      	adds	r3, r7, #3
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2207      	movs	r2, #7
 800125a:	4013      	ands	r3, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	330a      	adds	r3, #10
 8001260:	015b      	lsls	r3, r3, #5
 8001262:	18d3      	adds	r3, r2, r3
 8001264:	3304      	adds	r3, #4
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	0018      	movs	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	b002      	add	sp, #8
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	200b      	movs	r0, #11
 800127e:	183b      	adds	r3, r7, r0
 8001280:	1c0a      	adds	r2, r1, #0
 8001282:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001284:	0001      	movs	r1, r0
 8001286:	187b      	adds	r3, r7, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2207      	movs	r2, #7
 800128c:	4013      	ands	r3, r2
 800128e:	015b      	lsls	r3, r3, #5
 8001290:	3328      	adds	r3, #40	; 0x28
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	18d3      	adds	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2201      	movs	r2, #1
 80012ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2207      	movs	r2, #7
 80012b6:	4013      	ands	r3, r2
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2207      	movs	r2, #7
 80012c4:	4013      	ands	r3, r2
 80012c6:	d107      	bne.n	80012d8 <HAL_PCD_EP_Transmit+0x68>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	0011      	movs	r1, r2
 80012d0:	0018      	movs	r0, r3
 80012d2:	f002 f82b 	bl	800332c <USB_EPStartXfer>
 80012d6:	e006      	b.n	80012e6 <HAL_PCD_EP_Transmit+0x76>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	0011      	movs	r1, r2
 80012e0:	0018      	movs	r0, r3
 80012e2:	f002 f823 	bl	800332c <USB_EPStartXfer>
  }

  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b006      	add	sp, #24
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	000a      	movs	r2, r1
 80012fa:	1cfb      	adds	r3, r7, #3
 80012fc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012fe:	1cfb      	adds	r3, r7, #3
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2207      	movs	r2, #7
 8001304:	401a      	ands	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	d901      	bls.n	8001312 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e050      	b.n	80013b4 <HAL_PCD_EP_SetStall+0xc4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001312:	1cfb      	adds	r3, r7, #3
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b25b      	sxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	da0c      	bge.n	8001336 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800131c:	1cfb      	adds	r3, r7, #3
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2207      	movs	r2, #7
 8001322:	4013      	ands	r3, r2
 8001324:	015b      	lsls	r3, r3, #5
 8001326:	3328      	adds	r3, #40	; 0x28
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	18d3      	adds	r3, r2, r3
 800132c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2201      	movs	r2, #1
 8001332:	705a      	strb	r2, [r3, #1]
 8001334:	e00a      	b.n	800134c <HAL_PCD_EP_SetStall+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001336:	1cfb      	adds	r3, r7, #3
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	015b      	lsls	r3, r3, #5
 800133c:	3329      	adds	r3, #41	; 0x29
 800133e:	33ff      	adds	r3, #255	; 0xff
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	18d3      	adds	r3, r2, r3
 8001344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2201      	movs	r2, #1
 8001350:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001352:	1cfb      	adds	r3, r7, #3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2207      	movs	r2, #7
 8001358:	4013      	ands	r3, r2
 800135a:	b2da      	uxtb	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	238a      	movs	r3, #138	; 0x8a
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	5cd3      	ldrb	r3, [r2, r3]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <HAL_PCD_EP_SetStall+0x80>
 800136c:	2302      	movs	r3, #2
 800136e:	e021      	b.n	80013b4 <HAL_PCD_EP_SetStall+0xc4>
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	238a      	movs	r3, #138	; 0x8a
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	2101      	movs	r1, #1
 8001378:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	0011      	movs	r1, r2
 8001382:	0018      	movs	r0, r3
 8001384:	f002 fa82 	bl	800388c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001388:	1cfb      	adds	r3, r7, #3
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2207      	movs	r2, #7
 800138e:	4013      	ands	r3, r2
 8001390:	d10a      	bne.n	80013a8 <HAL_PCD_EP_SetStall+0xb8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	218c      	movs	r1, #140	; 0x8c
 800139a:	0089      	lsls	r1, r1, #2
 800139c:	468c      	mov	ip, r1
 800139e:	4463      	add	r3, ip
 80013a0:	0019      	movs	r1, r3
 80013a2:	0010      	movs	r0, r2
 80013a4:	f002 fb78 	bl	8003a98 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	238a      	movs	r3, #138	; 0x8a
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	2100      	movs	r1, #0
 80013b0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b004      	add	sp, #16
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	000a      	movs	r2, r1
 80013c6:	1cfb      	adds	r3, r7, #3
 80013c8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013ca:	1cfb      	adds	r3, r7, #3
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	220f      	movs	r2, #15
 80013d0:	401a      	ands	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d901      	bls.n	80013de <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e042      	b.n	8001464 <HAL_PCD_EP_ClrStall+0xa8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013de:	1cfb      	adds	r3, r7, #3
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b25b      	sxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	da0c      	bge.n	8001402 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013e8:	1cfb      	adds	r3, r7, #3
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2207      	movs	r2, #7
 80013ee:	4013      	ands	r3, r2
 80013f0:	015b      	lsls	r3, r3, #5
 80013f2:	3328      	adds	r3, #40	; 0x28
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	18d3      	adds	r3, r2, r3
 80013f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2201      	movs	r2, #1
 80013fe:	705a      	strb	r2, [r3, #1]
 8001400:	e00c      	b.n	800141c <HAL_PCD_EP_ClrStall+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001402:	1cfb      	adds	r3, r7, #3
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2207      	movs	r2, #7
 8001408:	4013      	ands	r3, r2
 800140a:	015b      	lsls	r3, r3, #5
 800140c:	3329      	adds	r3, #41	; 0x29
 800140e:	33ff      	adds	r3, #255	; 0xff
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	18d3      	adds	r3, r2, r3
 8001414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001422:	1cfb      	adds	r3, r7, #3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2207      	movs	r2, #7
 8001428:	4013      	ands	r3, r2
 800142a:	b2da      	uxtb	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	238a      	movs	r3, #138	; 0x8a
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	5cd3      	ldrb	r3, [r2, r3]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_PCD_EP_ClrStall+0x84>
 800143c:	2302      	movs	r3, #2
 800143e:	e011      	b.n	8001464 <HAL_PCD_EP_ClrStall+0xa8>
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	238a      	movs	r3, #138	; 0x8a
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	2101      	movs	r1, #1
 8001448:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	0011      	movs	r1, r2
 8001452:	0018      	movs	r0, r3
 8001454:	f002 fa5c 	bl	8003910 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	238a      	movs	r3, #138	; 0x8a
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	2100      	movs	r1, #0
 8001460:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b004      	add	sp, #16
 800146a:	bd80      	pop	{r7, pc}

0800146c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001474:	e2a7      	b.n	80019c6 <PCD_EP_ISR_Handler+0x55a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	2016      	movs	r0, #22
 800147c:	183b      	adds	r3, r7, r0
 800147e:	2144      	movs	r1, #68	; 0x44
 8001480:	5a52      	ldrh	r2, [r2, r1]
 8001482:	801a      	strh	r2, [r3, #0]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001484:	183b      	adds	r3, r7, r0
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	2015      	movs	r0, #21
 800148c:	183b      	adds	r3, r7, r0
 800148e:	210f      	movs	r1, #15
 8001490:	400a      	ands	r2, r1
 8001492:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001494:	183b      	adds	r3, r7, r0
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d000      	beq.n	800149e <PCD_EP_ISR_Handler+0x32>
 800149c:	e135      	b.n	800170a <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800149e:	2316      	movs	r3, #22
 80014a0:	18fb      	adds	r3, r7, r3
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	2210      	movs	r2, #16
 80014a6:	4013      	ands	r3, r2
 80014a8:	d14e      	bne.n	8001548 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4ade      	ldr	r2, [pc, #888]	; (800182c <PCD_EP_ISR_Handler+0x3c0>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	b29c      	uxth	r4, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4adc      	ldr	r2, [pc, #880]	; (8001830 <PCD_EP_ISR_Handler+0x3c4>)
 80014be:	4322      	orrs	r2, r4
 80014c0:	b292      	uxth	r2, r2
 80014c2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3328      	adds	r3, #40	; 0x28
 80014c8:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2250      	movs	r2, #80	; 0x50
 80014d0:	5a9b      	ldrh	r3, [r3, r2]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	001a      	movs	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	18d2      	adds	r2, r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	18d3      	adds	r3, r2, r3
 80014e4:	4ad3      	ldr	r2, [pc, #844]	; (8001834 <PCD_EP_ISR_Handler+0x3c8>)
 80014e6:	4694      	mov	ip, r2
 80014e8:	4463      	add	r3, ip
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	059b      	lsls	r3, r3, #22
 80014ee:	0d9a      	lsrs	r2, r3, #22
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	695a      	ldr	r2, [r3, #20]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	18d2      	adds	r2, r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2100      	movs	r1, #0
 8001506:	0018      	movs	r0, r3
 8001508:	f005 fd5e 	bl	8006fc8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2224      	movs	r2, #36	; 0x24
 8001510:	5c9b      	ldrb	r3, [r3, r2]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d100      	bne.n	800151a <PCD_EP_ISR_Handler+0xae>
 8001518:	e255      	b.n	80019c6 <PCD_EP_ISR_Handler+0x55a>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d000      	beq.n	8001524 <PCD_EP_ISR_Handler+0xb8>
 8001522:	e250      	b.n	80019c6 <PCD_EP_ISR_Handler+0x55a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2224      	movs	r2, #36	; 0x24
 8001528:	5c9b      	ldrb	r3, [r3, r2]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	4252      	negs	r2, r2
 8001530:	4313      	orrs	r3, r2
 8001532:	b2da      	uxtb	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b291      	uxth	r1, r2
 800153a:	224c      	movs	r2, #76	; 0x4c
 800153c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2224      	movs	r2, #36	; 0x24
 8001542:	2100      	movs	r1, #0
 8001544:	5499      	strb	r1, [r3, r2]
 8001546:	e23e      	b.n	80019c6 <PCD_EP_ISR_Handler+0x55a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3329      	adds	r3, #41	; 0x29
 800154c:	33ff      	adds	r3, #255	; 0xff
 800154e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	2112      	movs	r1, #18
 8001556:	187b      	adds	r3, r7, r1
 8001558:	8812      	ldrh	r2, [r2, #0]
 800155a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800155c:	187b      	adds	r3, r7, r1
 800155e:	881a      	ldrh	r2, [r3, #0]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	4013      	ands	r3, r2
 8001566:	d033      	beq.n	80015d0 <PCD_EP_ISR_Handler+0x164>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2250      	movs	r2, #80	; 0x50
 800156e:	5a9b      	ldrh	r3, [r3, r2]
 8001570:	b29b      	uxth	r3, r3
 8001572:	001a      	movs	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	18d2      	adds	r2, r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	18d3      	adds	r3, r2, r3
 8001582:	4aad      	ldr	r2, [pc, #692]	; (8001838 <PCD_EP_ISR_Handler+0x3cc>)
 8001584:	4694      	mov	ip, r2
 8001586:	4463      	add	r3, ip
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	059b      	lsls	r3, r3, #22
 800158c:	0d9a      	lsrs	r2, r3, #22
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	228c      	movs	r2, #140	; 0x8c
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	1899      	adds	r1, r3, r2
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	88da      	ldrh	r2, [r3, #6]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	f002 fac3 	bl	8003b32 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4aa1      	ldr	r2, [pc, #644]	; (800183c <PCD_EP_ISR_Handler+0x3d0>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	b29c      	uxth	r4, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	4322      	orrs	r2, r4
 80015c2:	b292      	uxth	r2, r2
 80015c4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f005 fccb 	bl	8006f64 <HAL_PCD_SetupStageCallback>
 80015ce:	e1fa      	b.n	80019c6 <PCD_EP_ISR_Handler+0x55a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015d0:	2312      	movs	r3, #18
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	2200      	movs	r2, #0
 80015d6:	5e9b      	ldrsh	r3, [r3, r2]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db00      	blt.n	80015de <PCD_EP_ISR_Handler+0x172>
 80015dc:	e1f3      	b.n	80019c6 <PCD_EP_ISR_Handler+0x55a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4a95      	ldr	r2, [pc, #596]	; (800183c <PCD_EP_ISR_Handler+0x3d0>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	b29c      	uxth	r4, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2280      	movs	r2, #128	; 0x80
 80015f2:	4322      	orrs	r2, r4
 80015f4:	b292      	uxth	r2, r2
 80015f6:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2250      	movs	r2, #80	; 0x50
 80015fe:	5a9b      	ldrh	r3, [r3, r2]
 8001600:	b29b      	uxth	r3, r3
 8001602:	001a      	movs	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	18d2      	adds	r2, r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	18d3      	adds	r3, r2, r3
 8001612:	4a89      	ldr	r2, [pc, #548]	; (8001838 <PCD_EP_ISR_Handler+0x3cc>)
 8001614:	4694      	mov	ip, r2
 8001616:	4463      	add	r3, ip
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	059b      	lsls	r3, r3, #22
 800161c:	0d9a      	lsrs	r2, r3, #22
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 0U)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d011      	beq.n	800164e <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6959      	ldr	r1, [r3, #20]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	88da      	ldrh	r2, [r3, #6]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	b29b      	uxth	r3, r3
 800163c:	f002 fa79 	bl	8003b32 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	18d2      	adds	r2, r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	615a      	str	r2, [r3, #20]

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2100      	movs	r1, #0
 8001652:	0018      	movs	r0, r3
 8001654:	f005 fc9b 	bl	8006f8e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	001c      	movs	r4, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2250      	movs	r2, #80	; 0x50
 8001664:	5a9b      	ldrh	r3, [r3, r2]
 8001666:	b29b      	uxth	r3, r3
 8001668:	18e4      	adds	r4, r4, r3
 800166a:	4b73      	ldr	r3, [pc, #460]	; (8001838 <PCD_EP_ISR_Handler+0x3cc>)
 800166c:	18e3      	adds	r3, r4, r3
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10e      	bne.n	8001696 <PCD_EP_ISR_Handler+0x22a>
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	4a70      	ldr	r2, [pc, #448]	; (8001840 <PCD_EP_ISR_Handler+0x3d4>)
 800167e:	4013      	ands	r3, r2
 8001680:	b29a      	uxth	r2, r3
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	801a      	strh	r2, [r3, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	4a69      	ldr	r2, [pc, #420]	; (8001830 <PCD_EP_ISR_Handler+0x3c4>)
 800168c:	4313      	orrs	r3, r2
 800168e:	b29a      	uxth	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	801a      	strh	r2, [r3, #0]
 8001694:	e023      	b.n	80016de <PCD_EP_ISR_Handler+0x272>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	2b3d      	cmp	r3, #61	; 0x3d
 800169c:	d812      	bhi.n	80016c4 <PCD_EP_ISR_Handler+0x258>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	085b      	lsrs	r3, r3, #1
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	2201      	movs	r2, #1
 80016ac:	4013      	ands	r3, r2
 80016ae:	d002      	beq.n	80016b6 <PCD_EP_ISR_Handler+0x24a>
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	3301      	adds	r3, #1
 80016b4:	61bb      	str	r3, [r7, #24]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	029b      	lsls	r3, r3, #10
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	801a      	strh	r2, [r3, #0]
 80016c2:	e00c      	b.n	80016de <PCD_EP_ISR_Handler+0x272>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	095b      	lsrs	r3, r3, #5
 80016ca:	61bb      	str	r3, [r7, #24]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	029b      	lsls	r3, r3, #10
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4a56      	ldr	r2, [pc, #344]	; (8001830 <PCD_EP_ISR_Handler+0x3c4>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b29a      	uxth	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	4a57      	ldr	r2, [pc, #348]	; (8001844 <PCD_EP_ISR_Handler+0x3d8>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	b29c      	uxth	r4, r3
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	4063      	eors	r3, r4
 80016f2:	b29c      	uxth	r4, r3
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	019b      	lsls	r3, r3, #6
 80016f8:	4063      	eors	r3, r4
 80016fa:	b29c      	uxth	r4, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a51      	ldr	r2, [pc, #324]	; (8001848 <PCD_EP_ISR_Handler+0x3dc>)
 8001702:	4322      	orrs	r2, r4
 8001704:	b292      	uxth	r2, r2
 8001706:	801a      	strh	r2, [r3, #0]
 8001708:	e15d      	b.n	80019c6 <PCD_EP_ISR_Handler+0x55a>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	001a      	movs	r2, r3
 8001710:	2315      	movs	r3, #21
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	18d2      	adds	r2, r2, r3
 800171a:	2112      	movs	r1, #18
 800171c:	187b      	adds	r3, r7, r1
 800171e:	8812      	ldrh	r2, [r2, #0]
 8001720:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001722:	187b      	adds	r3, r7, r1
 8001724:	2200      	movs	r2, #0
 8001726:	5e9b      	ldrsh	r3, [r3, r2]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db00      	blt.n	800172e <PCD_EP_ISR_Handler+0x2c2>
 800172c:	e0f5      	b.n	800191a <PCD_EP_ISR_Handler+0x4ae>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	001a      	movs	r2, r3
 8001734:	2115      	movs	r1, #21
 8001736:	187b      	adds	r3, r7, r1
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	18d3      	adds	r3, r2, r3
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	b29b      	uxth	r3, r3
 8001742:	4a3e      	ldr	r2, [pc, #248]	; (800183c <PCD_EP_ISR_Handler+0x3d0>)
 8001744:	4013      	ands	r3, r2
 8001746:	b29c      	uxth	r4, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	001a      	movs	r2, r3
 800174e:	187b      	adds	r3, r7, r1
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	18d3      	adds	r3, r2, r3
 8001756:	2280      	movs	r2, #128	; 0x80
 8001758:	4322      	orrs	r2, r4
 800175a:	b292      	uxth	r2, r2
 800175c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800175e:	187b      	adds	r3, r7, r1
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	015b      	lsls	r3, r3, #5
 8001764:	3329      	adds	r3, #41	; 0x29
 8001766:	33ff      	adds	r3, #255	; 0xff
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	18d3      	adds	r3, r2, r3
 800176c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	7b1b      	ldrb	r3, [r3, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d126      	bne.n	80017c4 <PCD_EP_ISR_Handler+0x358>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2250      	movs	r2, #80	; 0x50
 800177c:	5a9b      	ldrh	r3, [r3, r2]
 800177e:	b29b      	uxth	r3, r3
 8001780:	001a      	movs	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	18d2      	adds	r2, r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	18d3      	adds	r3, r2, r3
 8001790:	4a29      	ldr	r2, [pc, #164]	; (8001838 <PCD_EP_ISR_Handler+0x3cc>)
 8001792:	4694      	mov	ip, r2
 8001794:	4463      	add	r3, ip
 8001796:	881a      	ldrh	r2, [r3, #0]
 8001798:	211e      	movs	r1, #30
 800179a:	187b      	adds	r3, r7, r1
 800179c:	0592      	lsls	r2, r2, #22
 800179e:	0d92      	lsrs	r2, r2, #22
 80017a0:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d100      	bne.n	80017ac <PCD_EP_ISR_Handler+0x340>
 80017aa:	e08b      	b.n	80018c4 <PCD_EP_ISR_Handler+0x458>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6959      	ldr	r1, [r3, #20]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	88da      	ldrh	r2, [r3, #6]
 80017b8:	231e      	movs	r3, #30
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	f002 f9b8 	bl	8003b32 <USB_ReadPMA>
 80017c2:	e07f      	b.n	80018c4 <PCD_EP_ISR_Handler+0x458>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	001a      	movs	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	18d3      	adds	r3, r2, r3
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	001a      	movs	r2, r3
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	01db      	lsls	r3, r3, #7
 80017dc:	4013      	ands	r3, r2
 80017de:	d035      	beq.n	800184c <PCD_EP_ISR_Handler+0x3e0>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2250      	movs	r2, #80	; 0x50
 80017e6:	5a9b      	ldrh	r3, [r3, r2]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	001a      	movs	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	18d2      	adds	r2, r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	18d3      	adds	r3, r2, r3
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <PCD_EP_ISR_Handler+0x3c8>)
 80017fc:	4694      	mov	ip, r2
 80017fe:	4463      	add	r3, ip
 8001800:	881a      	ldrh	r2, [r3, #0]
 8001802:	211e      	movs	r1, #30
 8001804:	187b      	adds	r3, r7, r1
 8001806:	0592      	lsls	r2, r2, #22
 8001808:	0d92      	lsrs	r2, r2, #22
 800180a:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 800180c:	187b      	adds	r3, r7, r1
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d040      	beq.n	8001896 <PCD_EP_ISR_Handler+0x42a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6959      	ldr	r1, [r3, #20]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	891a      	ldrh	r2, [r3, #8]
 8001820:	231e      	movs	r3, #30
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	f002 f984 	bl	8003b32 <USB_ReadPMA>
 800182a:	e034      	b.n	8001896 <PCD_EP_ISR_Handler+0x42a>
 800182c:	ffff8f0f 	.word	0xffff8f0f
 8001830:	ffff8000 	.word	0xffff8000
 8001834:	00000402 	.word	0x00000402
 8001838:	00000406 	.word	0x00000406
 800183c:	00000f8f 	.word	0x00000f8f
 8001840:	ffff83ff 	.word	0xffff83ff
 8001844:	ffffbf8f 	.word	0xffffbf8f
 8001848:	ffff8080 	.word	0xffff8080
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2250      	movs	r2, #80	; 0x50
 8001852:	5a9b      	ldrh	r3, [r3, r2]
 8001854:	b29b      	uxth	r3, r3
 8001856:	001a      	movs	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	18d2      	adds	r2, r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	18d3      	adds	r3, r2, r3
 8001866:	4a5f      	ldr	r2, [pc, #380]	; (80019e4 <PCD_EP_ISR_Handler+0x578>)
 8001868:	4694      	mov	ip, r2
 800186a:	4463      	add	r3, ip
 800186c:	881a      	ldrh	r2, [r3, #0]
 800186e:	211e      	movs	r1, #30
 8001870:	187b      	adds	r3, r7, r1
 8001872:	0592      	lsls	r2, r2, #22
 8001874:	0d92      	lsrs	r2, r2, #22
 8001876:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8001878:	187b      	adds	r3, r7, r1
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00a      	beq.n	8001896 <PCD_EP_ISR_Handler+0x42a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6959      	ldr	r1, [r3, #20]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	895a      	ldrh	r2, [r3, #10]
 800188c:	231e      	movs	r3, #30
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	f002 f94e 	bl	8003b32 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	001a      	movs	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	18d3      	adds	r3, r2, r3
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4a4f      	ldr	r2, [pc, #316]	; (80019e8 <PCD_EP_ISR_Handler+0x57c>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	b29c      	uxth	r4, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	001a      	movs	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	18d3      	adds	r3, r2, r3
 80018bc:	4a4b      	ldr	r2, [pc, #300]	; (80019ec <PCD_EP_ISR_Handler+0x580>)
 80018be:	4322      	orrs	r2, r4
 80018c0:	b292      	uxth	r2, r2
 80018c2:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	69da      	ldr	r2, [r3, #28]
 80018c8:	211e      	movs	r1, #30
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	18d2      	adds	r2, r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	695a      	ldr	r2, [r3, #20]
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	18d2      	adds	r2, r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d006      	beq.n	80018f8 <PCD_EP_ISR_Handler+0x48c>
 80018ea:	231e      	movs	r3, #30
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	881a      	ldrh	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <PCD_EP_ISR_Handler+0x49c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	781a      	ldrb	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	0011      	movs	r1, r2
 8001900:	0018      	movs	r0, r3
 8001902:	f005 fb44 	bl	8006f8e <HAL_PCD_DataOutStageCallback>
 8001906:	e008      	b.n	800191a <PCD_EP_ISR_Handler+0x4ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	7819      	ldrb	r1, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fc55 	bl	80011c4 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800191a:	2312      	movs	r3, #18
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	4013      	ands	r3, r2
 8001924:	d04f      	beq.n	80019c6 <PCD_EP_ISR_Handler+0x55a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001926:	2115      	movs	r1, #21
 8001928:	187b      	adds	r3, r7, r1
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	015b      	lsls	r3, r3, #5
 800192e:	3328      	adds	r3, #40	; 0x28
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	18d3      	adds	r3, r2, r3
 8001934:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	001a      	movs	r2, r3
 800193c:	187b      	adds	r3, r7, r1
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	18d3      	adds	r3, r2, r3
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	4a29      	ldr	r2, [pc, #164]	; (80019f0 <PCD_EP_ISR_Handler+0x584>)
 800194a:	4013      	ands	r3, r2
 800194c:	b29c      	uxth	r4, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	001a      	movs	r2, r3
 8001954:	187b      	adds	r3, r7, r1
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	18d3      	adds	r3, r2, r3
 800195c:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <PCD_EP_ISR_Handler+0x588>)
 800195e:	4322      	orrs	r2, r4
 8001960:	b292      	uxth	r2, r2
 8001962:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2250      	movs	r2, #80	; 0x50
 800196a:	5a9b      	ldrh	r3, [r3, r2]
 800196c:	b29b      	uxth	r3, r3
 800196e:	001a      	movs	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	18d2      	adds	r2, r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	18d3      	adds	r3, r2, r3
 800197e:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <PCD_EP_ISR_Handler+0x58c>)
 8001980:	4694      	mov	ip, r2
 8001982:	4463      	add	r3, ip
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	059b      	lsls	r3, r3, #22
 8001988:	0d9a      	lsrs	r2, r3, #22
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	18d2      	adds	r2, r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <PCD_EP_ISR_Handler+0x548>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	0011      	movs	r1, r2
 80019ac:	0018      	movs	r0, r3
 80019ae:	f005 fb0b 	bl	8006fc8 <HAL_PCD_DataInStageCallback>
 80019b2:	e008      	b.n	80019c6 <PCD_EP_ISR_Handler+0x55a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	7819      	ldrb	r1, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff fc55 	bl	8001270 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2244      	movs	r2, #68	; 0x44
 80019cc:	5a9b      	ldrh	r3, [r3, r2]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	da00      	bge.n	80019d8 <PCD_EP_ISR_Handler+0x56c>
 80019d6:	e54e      	b.n	8001476 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b009      	add	sp, #36	; 0x24
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	00000406 	.word	0x00000406
 80019e8:	ffff8f8f 	.word	0xffff8f8f
 80019ec:	ffff80c0 	.word	0xffff80c0
 80019f0:	ffff8f0f 	.word	0xffff8f0f
 80019f4:	ffff8000 	.word	0xffff8000
 80019f8:	00000402 	.word	0x00000402

080019fc <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	0008      	movs	r0, r1
 8001a06:	0011      	movs	r1, r2
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	240a      	movs	r4, #10
 8001a0c:	193b      	adds	r3, r7, r4
 8001a0e:	1c02      	adds	r2, r0, #0
 8001a10:	801a      	strh	r2, [r3, #0]
 8001a12:	2308      	movs	r3, #8
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	1c0a      	adds	r2, r1, #0
 8001a18:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001a1a:	193b      	adds	r3, r7, r4
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	4013      	ands	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00a      	beq.n	8001a3e <HAL_PCDEx_PMAConfig+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a28:	230a      	movs	r3, #10
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	2207      	movs	r2, #7
 8001a30:	4013      	ands	r3, r2
 8001a32:	015b      	lsls	r3, r3, #5
 8001a34:	3328      	adds	r3, #40	; 0x28
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	18d3      	adds	r3, r2, r3
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e008      	b.n	8001a50 <HAL_PCDEx_PMAConfig+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a3e:	230a      	movs	r3, #10
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	015b      	lsls	r3, r3, #5
 8001a46:	3329      	adds	r3, #41	; 0x29
 8001a48:	33ff      	adds	r3, #255	; 0xff
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	18d3      	adds	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001a50:	2308      	movs	r3, #8
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d107      	bne.n	8001a6a <HAL_PCDEx_PMAConfig+0x6e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	80da      	strh	r2, [r3, #6]
 8001a68:	e00b      	b.n	8001a82 <HAL_PCDEx_PMAConfig+0x86>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	0c1b      	lsrs	r3, r3, #16
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b007      	add	sp, #28
 8001a8a:	bd90      	pop	{r4, r7, pc}

08001a8c <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	239b      	movs	r3, #155	; 0x9b
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	50d1      	str	r1, [r2, r3]

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2258      	movs	r2, #88	; 0x58
 8001aa8:	5a9b      	ldrh	r3, [r3, r2]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	2201      	movs	r2, #1
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b299      	uxth	r1, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2258      	movs	r2, #88	; 0x58
 8001ab6:	5299      	strh	r1, [r3, r2]
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2258      	movs	r2, #88	; 0x58
 8001abc:	5a9b      	ldrh	r3, [r3, r2]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b299      	uxth	r1, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2258      	movs	r2, #88	; 0x58
 8001aca:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	0018      	movs	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b004      	add	sp, #16
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	239a      	movs	r3, #154	; 0x9a
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	2101      	movs	r1, #1
 8001aec:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	2398      	movs	r3, #152	; 0x98
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	2100      	movs	r1, #0
 8001af6:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2254      	movs	r2, #84	; 0x54
 8001afc:	5a9b      	ldrh	r3, [r3, r2]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2201      	movs	r2, #1
 8001b02:	4313      	orrs	r3, r2
 8001b04:	b299      	uxth	r1, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2254      	movs	r2, #84	; 0x54
 8001b0a:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2254      	movs	r2, #84	; 0x54
 8001b10:	5a9b      	ldrh	r3, [r3, r2]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2202      	movs	r2, #2
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b299      	uxth	r1, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2254      	movs	r2, #84	; 0x54
 8001b1e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	0018      	movs	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b004      	add	sp, #16
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	000a      	movs	r2, r1
 8001b34:	1cfb      	adds	r3, r7, #3
 8001b36:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	000a      	movs	r2, r1
 8001b4a:	1cfb      	adds	r3, r7, #3
 8001b4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_PWR_EnterSTOPMode+0x60>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	4393      	bics	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_PWR_EnterSTOPMode+0x60>)
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <HAL_PWR_EnterSTOPMode+0x64>)
 8001b70:	691a      	ldr	r2, [r3, #16]
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <HAL_PWR_EnterSTOPMode+0x64>)
 8001b74:	2104      	movs	r1, #4
 8001b76:	430a      	orrs	r2, r1
 8001b78:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001b7a:	1cfb      	adds	r3, r7, #3
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_PWR_EnterSTOPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8001b82:	bf30      	wfi
 8001b84:	e002      	b.n	8001b8c <HAL_PWR_EnterSTOPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8001b86:	bf40      	sev
  __ASM volatile ("wfe");
 8001b88:	bf20      	wfe
 8001b8a:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_PWR_EnterSTOPMode+0x64>)
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <HAL_PWR_EnterSTOPMode+0x64>)
 8001b92:	2104      	movs	r1, #4
 8001b94:	438a      	bics	r2, r1
 8001b96:	611a      	str	r2, [r3, #16]

}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b004      	add	sp, #16
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f000 fbbc 	bl	8002334 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bbc:	4bc8      	ldr	r3, [pc, #800]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	220c      	movs	r2, #12
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc6:	4bc6      	ldr	r3, [pc, #792]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	025b      	lsls	r3, r3, #9
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d100      	bne.n	8001bde <HAL_RCC_OscConfig+0x36>
 8001bdc:	e07e      	b.n	8001cdc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d007      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b0c      	cmp	r3, #12
 8001be8:	d112      	bne.n	8001c10 <HAL_RCC_OscConfig+0x68>
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	025b      	lsls	r3, r3, #9
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d10d      	bne.n	8001c10 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	4bba      	ldr	r3, [pc, #744]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	029b      	lsls	r3, r3, #10
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d100      	bne.n	8001c02 <HAL_RCC_OscConfig+0x5a>
 8001c00:	e06b      	b.n	8001cda <HAL_RCC_OscConfig+0x132>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d167      	bne.n	8001cda <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f000 fb92 	bl	8002334 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	025b      	lsls	r3, r3, #9
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_OscConfig+0x84>
 8001c1c:	4bb0      	ldr	r3, [pc, #704]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4baf      	ldr	r3, [pc, #700]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	0249      	lsls	r1, r1, #9
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	e027      	b.n	8001c7c <HAL_RCC_OscConfig+0xd4>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	23a0      	movs	r3, #160	; 0xa0
 8001c32:	02db      	lsls	r3, r3, #11
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d10e      	bne.n	8001c56 <HAL_RCC_OscConfig+0xae>
 8001c38:	4ba9      	ldr	r3, [pc, #676]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4ba8      	ldr	r3, [pc, #672]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001c3e:	2180      	movs	r1, #128	; 0x80
 8001c40:	02c9      	lsls	r1, r1, #11
 8001c42:	430a      	orrs	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	4ba6      	ldr	r3, [pc, #664]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4ba5      	ldr	r3, [pc, #660]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	0249      	lsls	r1, r1, #9
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	e012      	b.n	8001c7c <HAL_RCC_OscConfig+0xd4>
 8001c56:	4ba2      	ldr	r3, [pc, #648]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4ba1      	ldr	r3, [pc, #644]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001c5c:	49a1      	ldr	r1, [pc, #644]	; (8001ee4 <HAL_RCC_OscConfig+0x33c>)
 8001c5e:	400a      	ands	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	4b9f      	ldr	r3, [pc, #636]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	025b      	lsls	r3, r3, #9
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4b9b      	ldr	r3, [pc, #620]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b9a      	ldr	r3, [pc, #616]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001c76:	499c      	ldr	r1, [pc, #624]	; (8001ee8 <HAL_RCC_OscConfig+0x340>)
 8001c78:	400a      	ands	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d015      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7fe fb22 	bl	80002cc <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c8c:	e009      	b.n	8001ca2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c8e:	f7fe fb1d 	bl	80002cc <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b64      	cmp	r3, #100	; 0x64
 8001c9a:	d902      	bls.n	8001ca2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	f000 fb49 	bl	8002334 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ca2:	4b8f      	ldr	r3, [pc, #572]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	029b      	lsls	r3, r3, #10
 8001caa:	4013      	ands	r3, r2
 8001cac:	d0ef      	beq.n	8001c8e <HAL_RCC_OscConfig+0xe6>
 8001cae:	e015      	b.n	8001cdc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7fe fb0c 	bl	80002cc <HAL_GetTick>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cba:	f7fe fb07 	bl	80002cc <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b64      	cmp	r3, #100	; 0x64
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e333      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ccc:	4b84      	ldr	r3, [pc, #528]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	029b      	lsls	r3, r3, #10
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d1f0      	bne.n	8001cba <HAL_RCC_OscConfig+0x112>
 8001cd8:	e000      	b.n	8001cdc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cda:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d100      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x140>
 8001ce6:	e098      	b.n	8001e1a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001cf6:	4b7a      	ldr	r3, [pc, #488]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4b79      	ldr	r3, [pc, #484]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001cfc:	2120      	movs	r1, #32
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	2220      	movs	r2, #32
 8001d06:	4393      	bics	r3, r2
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d13d      	bne.n	8001d92 <HAL_RCC_OscConfig+0x1ea>
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d13a      	bne.n	8001d92 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d1c:	4b70      	ldr	r3, [pc, #448]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2204      	movs	r2, #4
 8001d22:	4013      	ands	r3, r2
 8001d24:	d004      	beq.n	8001d30 <HAL_RCC_OscConfig+0x188>
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e301      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d30:	4b6b      	ldr	r3, [pc, #428]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	4a6d      	ldr	r2, [pc, #436]	; (8001eec <HAL_RCC_OscConfig+0x344>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	0019      	movs	r1, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	021a      	lsls	r2, r3, #8
 8001d40:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001d42:	430a      	orrs	r2, r1
 8001d44:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d46:	4b66      	ldr	r3, [pc, #408]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2209      	movs	r2, #9
 8001d4c:	4393      	bics	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	4b63      	ldr	r3, [pc, #396]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d58:	f000 fc20 	bl	800259c <HAL_RCC_GetSysClockFreq>
 8001d5c:	0001      	movs	r1, r0
 8001d5e:	4b60      	ldr	r3, [pc, #384]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	220f      	movs	r2, #15
 8001d66:	4013      	ands	r3, r2
 8001d68:	4a61      	ldr	r2, [pc, #388]	; (8001ef0 <HAL_RCC_OscConfig+0x348>)
 8001d6a:	5cd3      	ldrb	r3, [r2, r3]
 8001d6c:	000a      	movs	r2, r1
 8001d6e:	40da      	lsrs	r2, r3
 8001d70:	4b60      	ldr	r3, [pc, #384]	; (8001ef4 <HAL_RCC_OscConfig+0x34c>)
 8001d72:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001d74:	2513      	movs	r5, #19
 8001d76:	197c      	adds	r4, r7, r5
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7fe fa71 	bl	8000260 <HAL_InitTick>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001d82:	197b      	adds	r3, r7, r5
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d047      	beq.n	8001e1a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001d8a:	2313      	movs	r3, #19
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	e2d0      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d027      	beq.n	8001de8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d98:	4b51      	ldr	r3, [pc, #324]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2209      	movs	r2, #9
 8001d9e:	4393      	bics	r3, r2
 8001da0:	0019      	movs	r1, r3
 8001da2:	4b4f      	ldr	r3, [pc, #316]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da6:	430a      	orrs	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7fe fa8f 	bl	80002cc <HAL_GetTick>
 8001dae:	0003      	movs	r3, r0
 8001db0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db4:	f7fe fa8a 	bl	80002cc <HAL_GetTick>
 8001db8:	0002      	movs	r2, r0
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e2b6      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dc6:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2204      	movs	r2, #4
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d0f1      	beq.n	8001db4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd0:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a45      	ldr	r2, [pc, #276]	; (8001eec <HAL_RCC_OscConfig+0x344>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	021a      	lsls	r2, r3, #8
 8001de0:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	e018      	b.n	8001e1a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de8:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b3c      	ldr	r3, [pc, #240]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	438a      	bics	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7fe fa6a 	bl	80002cc <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfe:	f7fe fa65 	bl	80002cc <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e291      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e10:	4b33      	ldr	r3, [pc, #204]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2204      	movs	r2, #4
 8001e16:	4013      	ands	r3, r2
 8001e18:	d1f1      	bne.n	8001dfe <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2210      	movs	r2, #16
 8001e20:	4013      	ands	r3, r2
 8001e22:	d100      	bne.n	8001e26 <HAL_RCC_OscConfig+0x27e>
 8001e24:	e09f      	b.n	8001f66 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d13f      	bne.n	8001eac <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4013      	ands	r3, r2
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_OscConfig+0x29c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e277      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e44:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4a2b      	ldr	r2, [pc, #172]	; (8001ef8 <HAL_RCC_OscConfig+0x350>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e52:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	021b      	lsls	r3, r3, #8
 8001e5e:	0a19      	lsrs	r1, r3, #8
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	061a      	lsls	r2, r3, #24
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	0b5b      	lsrs	r3, r3, #13
 8001e72:	3301      	adds	r3, #1
 8001e74:	2280      	movs	r2, #128	; 0x80
 8001e76:	0212      	lsls	r2, r2, #8
 8001e78:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	210f      	movs	r1, #15
 8001e82:	400b      	ands	r3, r1
 8001e84:	491a      	ldr	r1, [pc, #104]	; (8001ef0 <HAL_RCC_OscConfig+0x348>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <HAL_RCC_OscConfig+0x34c>)
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001e8e:	2513      	movs	r5, #19
 8001e90:	197c      	adds	r4, r7, r5
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7fe f9e4 	bl	8000260 <HAL_InitTick>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001e9c:	197b      	adds	r3, r7, r5
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d060      	beq.n	8001f66 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001ea4:	2313      	movs	r3, #19
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	e243      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d03e      	beq.n	8001f32 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_RCC_OscConfig+0x338>)
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	0049      	lsls	r1, r1, #1
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7fe fa03 	bl	80002cc <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001eca:	e017      	b.n	8001efc <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ecc:	f7fe f9fe 	bl	80002cc <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d910      	bls.n	8001efc <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e22a      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	fffeffff 	.word	0xfffeffff
 8001ee8:	fffbffff 	.word	0xfffbffff
 8001eec:	ffffe0ff 	.word	0xffffe0ff
 8001ef0:	08008788 	.word	0x08008788
 8001ef4:	20000110 	.word	0x20000110
 8001ef8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001efc:	4bc6      	ldr	r3, [pc, #792]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	d0e1      	beq.n	8001ecc <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f08:	4bc3      	ldr	r3, [pc, #780]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4ac3      	ldr	r2, [pc, #780]	; (800221c <HAL_RCC_OscConfig+0x674>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f16:	4bc0      	ldr	r3, [pc, #768]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f1c:	4bbe      	ldr	r3, [pc, #760]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	0a19      	lsrs	r1, r3, #8
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	061a      	lsls	r2, r3, #24
 8001f2a:	4bbb      	ldr	r3, [pc, #748]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	e019      	b.n	8001f66 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f32:	4bb9      	ldr	r3, [pc, #740]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4bb8      	ldr	r3, [pc, #736]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8001f38:	49b9      	ldr	r1, [pc, #740]	; (8002220 <HAL_RCC_OscConfig+0x678>)
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7fe f9c5 	bl	80002cc <HAL_GetTick>
 8001f42:	0003      	movs	r3, r0
 8001f44:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f48:	f7fe f9c0 	bl	80002cc <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1ec      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f5a:	4baf      	ldr	r3, [pc, #700]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4013      	ands	r3, r2
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d036      	beq.n	8001fde <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d019      	beq.n	8001fac <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f78:	4ba7      	ldr	r3, [pc, #668]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8001f7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f7c:	4ba6      	ldr	r3, [pc, #664]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8001f7e:	2101      	movs	r1, #1
 8001f80:	430a      	orrs	r2, r1
 8001f82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f84:	f7fe f9a2 	bl	80002cc <HAL_GetTick>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f8e:	f7fe f99d 	bl	80002cc <HAL_GetTick>
 8001f92:	0002      	movs	r2, r0
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e1c9      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fa0:	4b9d      	ldr	r3, [pc, #628]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8001fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d0f1      	beq.n	8001f8e <HAL_RCC_OscConfig+0x3e6>
 8001faa:	e018      	b.n	8001fde <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fac:	4b9a      	ldr	r3, [pc, #616]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8001fae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fb0:	4b99      	ldr	r3, [pc, #612]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb8:	f7fe f988 	bl	80002cc <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc2:	f7fe f983 	bl	80002cc <HAL_GetTick>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e1af      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fd4:	4b90      	ldr	r3, [pc, #576]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8001fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd8:	2202      	movs	r2, #2
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d1f1      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d100      	bne.n	8001fea <HAL_RCC_OscConfig+0x442>
 8001fe8:	e0af      	b.n	800214a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2323      	movs	r3, #35	; 0x23
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff2:	4b89      	ldr	r3, [pc, #548]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8001ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	055b      	lsls	r3, r3, #21
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d10a      	bne.n	8002014 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	4b86      	ldr	r3, [pc, #536]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8002000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002002:	4b85      	ldr	r3, [pc, #532]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8002004:	2180      	movs	r1, #128	; 0x80
 8002006:	0549      	lsls	r1, r1, #21
 8002008:	430a      	orrs	r2, r1
 800200a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800200c:	2323      	movs	r3, #35	; 0x23
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002014:	4b83      	ldr	r3, [pc, #524]	; (8002224 <HAL_RCC_OscConfig+0x67c>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4013      	ands	r3, r2
 800201e:	d11a      	bne.n	8002056 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002020:	4b80      	ldr	r3, [pc, #512]	; (8002224 <HAL_RCC_OscConfig+0x67c>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b7f      	ldr	r3, [pc, #508]	; (8002224 <HAL_RCC_OscConfig+0x67c>)
 8002026:	2180      	movs	r1, #128	; 0x80
 8002028:	0049      	lsls	r1, r1, #1
 800202a:	430a      	orrs	r2, r1
 800202c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202e:	f7fe f94d 	bl	80002cc <HAL_GetTick>
 8002032:	0003      	movs	r3, r0
 8002034:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002038:	f7fe f948 	bl	80002cc <HAL_GetTick>
 800203c:	0002      	movs	r2, r0
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e174      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204a:	4b76      	ldr	r3, [pc, #472]	; (8002224 <HAL_RCC_OscConfig+0x67c>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4013      	ands	r3, r2
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	429a      	cmp	r2, r3
 8002060:	d107      	bne.n	8002072 <HAL_RCC_OscConfig+0x4ca>
 8002062:	4b6d      	ldr	r3, [pc, #436]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8002064:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002066:	4b6c      	ldr	r3, [pc, #432]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	0049      	lsls	r1, r1, #1
 800206c:	430a      	orrs	r2, r1
 800206e:	651a      	str	r2, [r3, #80]	; 0x50
 8002070:	e031      	b.n	80020d6 <HAL_RCC_OscConfig+0x52e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10c      	bne.n	8002094 <HAL_RCC_OscConfig+0x4ec>
 800207a:	4b67      	ldr	r3, [pc, #412]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 800207c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800207e:	4b66      	ldr	r3, [pc, #408]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8002080:	4967      	ldr	r1, [pc, #412]	; (8002220 <HAL_RCC_OscConfig+0x678>)
 8002082:	400a      	ands	r2, r1
 8002084:	651a      	str	r2, [r3, #80]	; 0x50
 8002086:	4b64      	ldr	r3, [pc, #400]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8002088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800208a:	4b63      	ldr	r3, [pc, #396]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 800208c:	4966      	ldr	r1, [pc, #408]	; (8002228 <HAL_RCC_OscConfig+0x680>)
 800208e:	400a      	ands	r2, r1
 8002090:	651a      	str	r2, [r3, #80]	; 0x50
 8002092:	e020      	b.n	80020d6 <HAL_RCC_OscConfig+0x52e>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	23a0      	movs	r3, #160	; 0xa0
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	429a      	cmp	r2, r3
 800209e:	d10e      	bne.n	80020be <HAL_RCC_OscConfig+0x516>
 80020a0:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 80020a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020a4:	4b5c      	ldr	r3, [pc, #368]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	00c9      	lsls	r1, r1, #3
 80020aa:	430a      	orrs	r2, r1
 80020ac:	651a      	str	r2, [r3, #80]	; 0x50
 80020ae:	4b5a      	ldr	r3, [pc, #360]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 80020b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020b2:	4b59      	ldr	r3, [pc, #356]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	0049      	lsls	r1, r1, #1
 80020b8:	430a      	orrs	r2, r1
 80020ba:	651a      	str	r2, [r3, #80]	; 0x50
 80020bc:	e00b      	b.n	80020d6 <HAL_RCC_OscConfig+0x52e>
 80020be:	4b56      	ldr	r3, [pc, #344]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 80020c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020c2:	4b55      	ldr	r3, [pc, #340]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 80020c4:	4956      	ldr	r1, [pc, #344]	; (8002220 <HAL_RCC_OscConfig+0x678>)
 80020c6:	400a      	ands	r2, r1
 80020c8:	651a      	str	r2, [r3, #80]	; 0x50
 80020ca:	4b53      	ldr	r3, [pc, #332]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 80020cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ce:	4b52      	ldr	r3, [pc, #328]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 80020d0:	4955      	ldr	r1, [pc, #340]	; (8002228 <HAL_RCC_OscConfig+0x680>)
 80020d2:	400a      	ands	r2, r1
 80020d4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d015      	beq.n	800210a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020de:	f7fe f8f5 	bl	80002cc <HAL_GetTick>
 80020e2:	0003      	movs	r3, r0
 80020e4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020e6:	e009      	b.n	80020fc <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e8:	f7fe f8f0 	bl	80002cc <HAL_GetTick>
 80020ec:	0002      	movs	r2, r0
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	4a4e      	ldr	r2, [pc, #312]	; (800222c <HAL_RCC_OscConfig+0x684>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e11b      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020fc:	4b46      	ldr	r3, [pc, #280]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 80020fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4013      	ands	r3, r2
 8002106:	d0ef      	beq.n	80020e8 <HAL_RCC_OscConfig+0x540>
 8002108:	e014      	b.n	8002134 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210a:	f7fe f8df 	bl	80002cc <HAL_GetTick>
 800210e:	0003      	movs	r3, r0
 8002110:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002112:	e009      	b.n	8002128 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002114:	f7fe f8da 	bl	80002cc <HAL_GetTick>
 8002118:	0002      	movs	r2, r0
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	4a43      	ldr	r2, [pc, #268]	; (800222c <HAL_RCC_OscConfig+0x684>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e105      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002128:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 800212a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4013      	ands	r3, r2
 8002132:	d1ef      	bne.n	8002114 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002134:	2323      	movs	r3, #35	; 0x23
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d105      	bne.n	800214a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213e:	4b36      	ldr	r3, [pc, #216]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8002140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002142:	4b35      	ldr	r3, [pc, #212]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8002144:	493a      	ldr	r1, [pc, #232]	; (8002230 <HAL_RCC_OscConfig+0x688>)
 8002146:	400a      	ands	r2, r1
 8002148:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2220      	movs	r2, #32
 8002150:	4013      	ands	r3, r2
 8002152:	d049      	beq.n	80021e8 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d026      	beq.n	80021aa <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800215c:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	4b2d      	ldr	r3, [pc, #180]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8002162:	2101      	movs	r1, #1
 8002164:	430a      	orrs	r2, r1
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 800216a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800216c:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 800216e:	2101      	movs	r1, #1
 8002170:	430a      	orrs	r2, r1
 8002172:	635a      	str	r2, [r3, #52]	; 0x34
 8002174:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <HAL_RCC_OscConfig+0x68c>)
 8002176:	6a1a      	ldr	r2, [r3, #32]
 8002178:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <HAL_RCC_OscConfig+0x68c>)
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	0189      	lsls	r1, r1, #6
 800217e:	430a      	orrs	r2, r1
 8002180:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7fe f8a3 	bl	80002cc <HAL_GetTick>
 8002186:	0003      	movs	r3, r0
 8002188:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800218c:	f7fe f89e 	bl	80002cc <HAL_GetTick>
 8002190:	0002      	movs	r2, r0
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e0ca      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800219e:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2202      	movs	r2, #2
 80021a4:	4013      	ands	r3, r2
 80021a6:	d0f1      	beq.n	800218c <HAL_RCC_OscConfig+0x5e4>
 80021a8:	e01e      	b.n	80021e8 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	438a      	bics	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <HAL_RCC_OscConfig+0x68c>)
 80021b8:	6a1a      	ldr	r2, [r3, #32]
 80021ba:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <HAL_RCC_OscConfig+0x68c>)
 80021bc:	491e      	ldr	r1, [pc, #120]	; (8002238 <HAL_RCC_OscConfig+0x690>)
 80021be:	400a      	ands	r2, r1
 80021c0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7fe f883 	bl	80002cc <HAL_GetTick>
 80021c6:	0003      	movs	r3, r0
 80021c8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021cc:	f7fe f87e 	bl	80002cc <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e0aa      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	d1f1      	bne.n	80021cc <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d100      	bne.n	80021f2 <HAL_RCC_OscConfig+0x64a>
 80021f0:	e09f      	b.n	8002332 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	2b0c      	cmp	r3, #12
 80021f6:	d100      	bne.n	80021fa <HAL_RCC_OscConfig+0x652>
 80021f8:	e078      	b.n	80022ec <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d159      	bne.n	80022b6 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <HAL_RCC_OscConfig+0x670>)
 8002208:	490c      	ldr	r1, [pc, #48]	; (800223c <HAL_RCC_OscConfig+0x694>)
 800220a:	400a      	ands	r2, r1
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7fe f85d 	bl	80002cc <HAL_GetTick>
 8002212:	0003      	movs	r3, r0
 8002214:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002216:	e01c      	b.n	8002252 <HAL_RCC_OscConfig+0x6aa>
 8002218:	40021000 	.word	0x40021000
 800221c:	ffff1fff 	.word	0xffff1fff
 8002220:	fffffeff 	.word	0xfffffeff
 8002224:	40007000 	.word	0x40007000
 8002228:	fffffbff 	.word	0xfffffbff
 800222c:	00001388 	.word	0x00001388
 8002230:	efffffff 	.word	0xefffffff
 8002234:	40010000 	.word	0x40010000
 8002238:	ffffdfff 	.word	0xffffdfff
 800223c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe f844 	bl	80002cc <HAL_GetTick>
 8002244:	0002      	movs	r2, r0
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e070      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002252:	4b3a      	ldr	r3, [pc, #232]	; (800233c <HAL_RCC_OscConfig+0x794>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	049b      	lsls	r3, r3, #18
 800225a:	4013      	ands	r3, r2
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225e:	4b37      	ldr	r3, [pc, #220]	; (800233c <HAL_RCC_OscConfig+0x794>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	4a37      	ldr	r2, [pc, #220]	; (8002340 <HAL_RCC_OscConfig+0x798>)
 8002264:	4013      	ands	r3, r2
 8002266:	0019      	movs	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002276:	431a      	orrs	r2, r3
 8002278:	4b30      	ldr	r3, [pc, #192]	; (800233c <HAL_RCC_OscConfig+0x794>)
 800227a:	430a      	orrs	r2, r1
 800227c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800227e:	4b2f      	ldr	r3, [pc, #188]	; (800233c <HAL_RCC_OscConfig+0x794>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4b2e      	ldr	r3, [pc, #184]	; (800233c <HAL_RCC_OscConfig+0x794>)
 8002284:	2180      	movs	r1, #128	; 0x80
 8002286:	0449      	lsls	r1, r1, #17
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe f81e 	bl	80002cc <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002296:	f7fe f819 	bl	80002cc <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e045      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCC_OscConfig+0x794>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	049b      	lsls	r3, r3, #18
 80022b0:	4013      	ands	r3, r2
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x6ee>
 80022b4:	e03d      	b.n	8002332 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b21      	ldr	r3, [pc, #132]	; (800233c <HAL_RCC_OscConfig+0x794>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_RCC_OscConfig+0x794>)
 80022bc:	4921      	ldr	r1, [pc, #132]	; (8002344 <HAL_RCC_OscConfig+0x79c>)
 80022be:	400a      	ands	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe f803 	bl	80002cc <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022cc:	f7fd fffe 	bl	80002cc <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e02a      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <HAL_RCC_OscConfig+0x794>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	049b      	lsls	r3, r3, #18
 80022e6:	4013      	ands	r3, r2
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x724>
 80022ea:	e022      	b.n	8002332 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e01d      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022f8:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_RCC_OscConfig+0x794>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	025b      	lsls	r3, r3, #9
 8002304:	401a      	ands	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	429a      	cmp	r2, r3
 800230c:	d10f      	bne.n	800232e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	23f0      	movs	r3, #240	; 0xf0
 8002312:	039b      	lsls	r3, r3, #14
 8002314:	401a      	ands	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d107      	bne.n	800232e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	23c0      	movs	r3, #192	; 0xc0
 8002322:	041b      	lsls	r3, r3, #16
 8002324:	401a      	ands	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b00a      	add	sp, #40	; 0x28
 800233a:	bdb0      	pop	{r4, r5, r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	ff02ffff 	.word	0xff02ffff
 8002344:	feffffff 	.word	0xfeffffff

08002348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002348:	b5b0      	push	{r4, r5, r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e10d      	b.n	8002578 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800235c:	4b88      	ldr	r3, [pc, #544]	; (8002580 <HAL_RCC_ClockConfig+0x238>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2201      	movs	r2, #1
 8002362:	4013      	ands	r3, r2
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d911      	bls.n	800238e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b85      	ldr	r3, [pc, #532]	; (8002580 <HAL_RCC_ClockConfig+0x238>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2201      	movs	r2, #1
 8002370:	4393      	bics	r3, r2
 8002372:	0019      	movs	r1, r3
 8002374:	4b82      	ldr	r3, [pc, #520]	; (8002580 <HAL_RCC_ClockConfig+0x238>)
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237c:	4b80      	ldr	r3, [pc, #512]	; (8002580 <HAL_RCC_ClockConfig+0x238>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2201      	movs	r2, #1
 8002382:	4013      	ands	r3, r2
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d001      	beq.n	800238e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0f4      	b.n	8002578 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2202      	movs	r2, #2
 8002394:	4013      	ands	r3, r2
 8002396:	d009      	beq.n	80023ac <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002398:	4b7a      	ldr	r3, [pc, #488]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	22f0      	movs	r2, #240	; 0xf0
 800239e:	4393      	bics	r3, r2
 80023a0:	0019      	movs	r1, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	4b77      	ldr	r3, [pc, #476]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 80023a8:	430a      	orrs	r2, r1
 80023aa:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2201      	movs	r2, #1
 80023b2:	4013      	ands	r3, r2
 80023b4:	d100      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x70>
 80023b6:	e089      	b.n	80024cc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023c0:	4b70      	ldr	r3, [pc, #448]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	029b      	lsls	r3, r3, #10
 80023c8:	4013      	ands	r3, r2
 80023ca:	d120      	bne.n	800240e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0d3      	b.n	8002578 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d107      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023d8:	4b6a      	ldr	r3, [pc, #424]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	049b      	lsls	r3, r3, #18
 80023e0:	4013      	ands	r3, r2
 80023e2:	d114      	bne.n	800240e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0c7      	b.n	8002578 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023f0:	4b64      	ldr	r3, [pc, #400]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2204      	movs	r2, #4
 80023f6:	4013      	ands	r3, r2
 80023f8:	d109      	bne.n	800240e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0bc      	b.n	8002578 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023fe:	4b61      	ldr	r3, [pc, #388]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4013      	ands	r3, r2
 8002408:	d101      	bne.n	800240e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0b4      	b.n	8002578 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240e:	4b5d      	ldr	r3, [pc, #372]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2203      	movs	r2, #3
 8002414:	4393      	bics	r3, r2
 8002416:	0019      	movs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	4b59      	ldr	r3, [pc, #356]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 800241e:	430a      	orrs	r2, r1
 8002420:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002422:	f7fd ff53 	bl	80002cc <HAL_GetTick>
 8002426:	0003      	movs	r3, r0
 8002428:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d111      	bne.n	8002456 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002432:	e009      	b.n	8002448 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002434:	f7fd ff4a 	bl	80002cc <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	4a52      	ldr	r2, [pc, #328]	; (8002588 <HAL_RCC_ClockConfig+0x240>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e097      	b.n	8002578 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002448:	4b4e      	ldr	r3, [pc, #312]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	220c      	movs	r2, #12
 800244e:	4013      	ands	r3, r2
 8002450:	2b08      	cmp	r3, #8
 8002452:	d1ef      	bne.n	8002434 <HAL_RCC_ClockConfig+0xec>
 8002454:	e03a      	b.n	80024cc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d111      	bne.n	8002482 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800245e:	e009      	b.n	8002474 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7fd ff34 	bl	80002cc <HAL_GetTick>
 8002464:	0002      	movs	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	4a47      	ldr	r2, [pc, #284]	; (8002588 <HAL_RCC_ClockConfig+0x240>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e081      	b.n	8002578 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002474:	4b43      	ldr	r3, [pc, #268]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	220c      	movs	r2, #12
 800247a:	4013      	ands	r3, r2
 800247c:	2b0c      	cmp	r3, #12
 800247e:	d1ef      	bne.n	8002460 <HAL_RCC_ClockConfig+0x118>
 8002480:	e024      	b.n	80024cc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d11b      	bne.n	80024c2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800248a:	e009      	b.n	80024a0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248c:	f7fd ff1e 	bl	80002cc <HAL_GetTick>
 8002490:	0002      	movs	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	4a3c      	ldr	r2, [pc, #240]	; (8002588 <HAL_RCC_ClockConfig+0x240>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e06b      	b.n	8002578 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024a0:	4b38      	ldr	r3, [pc, #224]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	220c      	movs	r2, #12
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d1ef      	bne.n	800248c <HAL_RCC_ClockConfig+0x144>
 80024ac:	e00e      	b.n	80024cc <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ae:	f7fd ff0d 	bl	80002cc <HAL_GetTick>
 80024b2:	0002      	movs	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	4a33      	ldr	r2, [pc, #204]	; (8002588 <HAL_RCC_ClockConfig+0x240>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e05a      	b.n	8002578 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80024c2:	4b30      	ldr	r3, [pc, #192]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	220c      	movs	r2, #12
 80024c8:	4013      	ands	r3, r2
 80024ca:	d1f0      	bne.n	80024ae <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024cc:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <HAL_RCC_ClockConfig+0x238>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2201      	movs	r2, #1
 80024d2:	4013      	ands	r3, r2
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d211      	bcs.n	80024fe <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCC_ClockConfig+0x238>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2201      	movs	r2, #1
 80024e0:	4393      	bics	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_RCC_ClockConfig+0x238>)
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ec:	4b24      	ldr	r3, [pc, #144]	; (8002580 <HAL_RCC_ClockConfig+0x238>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2201      	movs	r2, #1
 80024f2:	4013      	ands	r3, r2
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e03c      	b.n	8002578 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2204      	movs	r2, #4
 8002504:	4013      	ands	r3, r2
 8002506:	d009      	beq.n	800251c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002508:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_RCC_ClockConfig+0x244>)
 800250e:	4013      	ands	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 8002518:	430a      	orrs	r2, r1
 800251a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2208      	movs	r2, #8
 8002522:	4013      	ands	r3, r2
 8002524:	d00a      	beq.n	800253c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	4a19      	ldr	r2, [pc, #100]	; (8002590 <HAL_RCC_ClockConfig+0x248>)
 800252c:	4013      	ands	r3, r2
 800252e:	0019      	movs	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	00da      	lsls	r2, r3, #3
 8002536:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 8002538:	430a      	orrs	r2, r1
 800253a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800253c:	f000 f82e 	bl	800259c <HAL_RCC_GetSysClockFreq>
 8002540:	0001      	movs	r1, r0
 8002542:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_RCC_ClockConfig+0x23c>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	220f      	movs	r2, #15
 800254a:	4013      	ands	r3, r2
 800254c:	4a11      	ldr	r2, [pc, #68]	; (8002594 <HAL_RCC_ClockConfig+0x24c>)
 800254e:	5cd3      	ldrb	r3, [r2, r3]
 8002550:	000a      	movs	r2, r1
 8002552:	40da      	lsrs	r2, r3
 8002554:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_RCC_ClockConfig+0x250>)
 8002556:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002558:	250b      	movs	r5, #11
 800255a:	197c      	adds	r4, r7, r5
 800255c:	2000      	movs	r0, #0
 800255e:	f7fd fe7f 	bl	8000260 <HAL_InitTick>
 8002562:	0003      	movs	r3, r0
 8002564:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002566:	197b      	adds	r3, r7, r5
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800256e:	230b      	movs	r3, #11
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	e000      	b.n	8002578 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b004      	add	sp, #16
 800257e:	bdb0      	pop	{r4, r5, r7, pc}
 8002580:	40022000 	.word	0x40022000
 8002584:	40021000 	.word	0x40021000
 8002588:	00001388 	.word	0x00001388
 800258c:	fffff8ff 	.word	0xfffff8ff
 8002590:	ffffc7ff 	.word	0xffffc7ff
 8002594:	08008788 	.word	0x08008788
 8002598:	20000110 	.word	0x20000110

0800259c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80025a2:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	220c      	movs	r2, #12
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d00e      	beq.n	80025d0 <HAL_RCC_GetSysClockFreq+0x34>
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d00f      	beq.n	80025d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d157      	bne.n	800266a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025ba:	4b35      	ldr	r3, [pc, #212]	; (8002690 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2210      	movs	r2, #16
 80025c0:	4013      	ands	r3, r2
 80025c2:	d002      	beq.n	80025ca <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80025c4:	4b33      	ldr	r3, [pc, #204]	; (8002694 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025c6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80025c8:	e05d      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80025ca:	4b33      	ldr	r3, [pc, #204]	; (8002698 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025cc:	613b      	str	r3, [r7, #16]
      break;
 80025ce:	e05a      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <HAL_RCC_GetSysClockFreq+0x100>)
 80025d2:	613b      	str	r3, [r7, #16]
      break;
 80025d4:	e057      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	0c9b      	lsrs	r3, r3, #18
 80025da:	220f      	movs	r2, #15
 80025dc:	4013      	ands	r3, r2
 80025de:	4a30      	ldr	r2, [pc, #192]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80025e0:	5cd3      	ldrb	r3, [r2, r3]
 80025e2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	0d9b      	lsrs	r3, r3, #22
 80025e8:	2203      	movs	r2, #3
 80025ea:	4013      	ands	r3, r2
 80025ec:	3301      	adds	r3, #1
 80025ee:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025f0:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	025b      	lsls	r3, r3, #9
 80025f8:	4013      	ands	r3, r2
 80025fa:	d00f      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	000a      	movs	r2, r1
 8002600:	0152      	lsls	r2, r2, #5
 8002602:	1a52      	subs	r2, r2, r1
 8002604:	0193      	lsls	r3, r2, #6
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	185b      	adds	r3, r3, r1
 800260c:	025b      	lsls	r3, r3, #9
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	0018      	movs	r0, r3
 8002612:	f7fd fd79 	bl	8000108 <__udivsi3>
 8002616:	0003      	movs	r3, r0
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e023      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800261c:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <HAL_RCC_GetSysClockFreq+0xf4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2210      	movs	r2, #16
 8002622:	4013      	ands	r3, r2
 8002624:	d00f      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	000a      	movs	r2, r1
 800262a:	0152      	lsls	r2, r2, #5
 800262c:	1a52      	subs	r2, r2, r1
 800262e:	0193      	lsls	r3, r2, #6
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	185b      	adds	r3, r3, r1
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	0018      	movs	r0, r3
 800263c:	f7fd fd64 	bl	8000108 <__udivsi3>
 8002640:	0003      	movs	r3, r0
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	e00e      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	000a      	movs	r2, r1
 800264a:	0152      	lsls	r2, r2, #5
 800264c:	1a52      	subs	r2, r2, r1
 800264e:	0193      	lsls	r3, r2, #6
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	185b      	adds	r3, r3, r1
 8002656:	029b      	lsls	r3, r3, #10
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	0018      	movs	r0, r3
 800265c:	f7fd fd54 	bl	8000108 <__udivsi3>
 8002660:	0003      	movs	r3, r0
 8002662:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	613b      	str	r3, [r7, #16]
      break;
 8002668:	e00d      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_GetSysClockFreq+0xf4>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	0b5b      	lsrs	r3, r3, #13
 8002670:	2207      	movs	r2, #7
 8002672:	4013      	ands	r3, r2
 8002674:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	0212      	lsls	r2, r2, #8
 800267e:	409a      	lsls	r2, r3
 8002680:	0013      	movs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
      break;
 8002684:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002686:	693b      	ldr	r3, [r7, #16]
}
 8002688:	0018      	movs	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	b006      	add	sp, #24
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	003d0900 	.word	0x003d0900
 8002698:	00f42400 	.word	0x00f42400
 800269c:	007a1200 	.word	0x007a1200
 80026a0:	08008798 	.word	0x08008798

080026a4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2220      	movs	r2, #32
 80026b2:	4013      	ands	r3, r2
 80026b4:	d106      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	4013      	ands	r3, r2
 80026c0:	d100      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80026c2:	e0dd      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80026c4:	2317      	movs	r3, #23
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026cc:	4ba4      	ldr	r3, [pc, #656]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	055b      	lsls	r3, r3, #21
 80026d4:	4013      	ands	r3, r2
 80026d6:	d10a      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d8:	4ba1      	ldr	r3, [pc, #644]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026dc:	4ba0      	ldr	r3, [pc, #640]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026de:	2180      	movs	r1, #128	; 0x80
 80026e0:	0549      	lsls	r1, r1, #21
 80026e2:	430a      	orrs	r2, r1
 80026e4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80026e6:	2317      	movs	r3, #23
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	4b9d      	ldr	r3, [pc, #628]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4013      	ands	r3, r2
 80026f8:	d11a      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fa:	4b9a      	ldr	r3, [pc, #616]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b99      	ldr	r3, [pc, #612]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	0049      	lsls	r1, r1, #1
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002708:	f7fd fde0 	bl	80002cc <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	e008      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002712:	f7fd fddb 	bl	80002cc <HAL_GetTick>
 8002716:	0002      	movs	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b64      	cmp	r3, #100	; 0x64
 800271e:	d901      	bls.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e118      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	4b8f      	ldr	r3, [pc, #572]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4013      	ands	r3, r2
 800272e:	d0f0      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002730:	4b8b      	ldr	r3, [pc, #556]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	23c0      	movs	r3, #192	; 0xc0
 8002736:	039b      	lsls	r3, r3, #14
 8002738:	4013      	ands	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	23c0      	movs	r3, #192	; 0xc0
 8002742:	039b      	lsls	r3, r3, #14
 8002744:	4013      	ands	r3, r2
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d107      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	23c0      	movs	r3, #192	; 0xc0
 8002752:	039b      	lsls	r3, r3, #14
 8002754:	4013      	ands	r3, r2
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	429a      	cmp	r2, r3
 800275a:	d013      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	23c0      	movs	r3, #192	; 0xc0
 8002762:	029b      	lsls	r3, r3, #10
 8002764:	401a      	ands	r2, r3
 8002766:	23c0      	movs	r3, #192	; 0xc0
 8002768:	029b      	lsls	r3, r3, #10
 800276a:	429a      	cmp	r2, r3
 800276c:	d10a      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800276e:	4b7c      	ldr	r3, [pc, #496]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	029b      	lsls	r3, r3, #10
 8002776:	401a      	ands	r2, r3
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	029b      	lsls	r3, r3, #10
 800277c:	429a      	cmp	r2, r3
 800277e:	d101      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0e8      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002784:	4b76      	ldr	r3, [pc, #472]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002786:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002788:	23c0      	movs	r3, #192	; 0xc0
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	4013      	ands	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d049      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	23c0      	movs	r3, #192	; 0xc0
 800279c:	029b      	lsls	r3, r3, #10
 800279e:	4013      	ands	r3, r2
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d004      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2220      	movs	r2, #32
 80027ac:	4013      	ands	r3, r2
 80027ae:	d10d      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	23c0      	movs	r3, #192	; 0xc0
 80027b6:	029b      	lsls	r3, r3, #10
 80027b8:	4013      	ands	r3, r2
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d034      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	4013      	ands	r3, r2
 80027ca:	d02e      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027cc:	4b64      	ldr	r3, [pc, #400]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d0:	4a65      	ldr	r2, [pc, #404]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027d6:	4b62      	ldr	r3, [pc, #392]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027da:	4b61      	ldr	r3, [pc, #388]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027dc:	2180      	movs	r1, #128	; 0x80
 80027de:	0309      	lsls	r1, r1, #12
 80027e0:	430a      	orrs	r2, r1
 80027e2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027e4:	4b5e      	ldr	r3, [pc, #376]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027e8:	4b5d      	ldr	r3, [pc, #372]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027ea:	4960      	ldr	r1, [pc, #384]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80027ec:	400a      	ands	r2, r1
 80027ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80027f0:	4b5b      	ldr	r3, [pc, #364]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4013      	ands	r3, r2
 80027fe:	d014      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fd fd64 	bl	80002cc <HAL_GetTick>
 8002804:	0003      	movs	r3, r0
 8002806:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002808:	e009      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7fd fd5f 	bl	80002cc <HAL_GetTick>
 800280e:	0002      	movs	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	4a56      	ldr	r2, [pc, #344]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e09b      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800281e:	4b50      	ldr	r3, [pc, #320]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4013      	ands	r3, r2
 8002828:	d0ef      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	23c0      	movs	r3, #192	; 0xc0
 8002830:	029b      	lsls	r3, r3, #10
 8002832:	401a      	ands	r2, r3
 8002834:	23c0      	movs	r3, #192	; 0xc0
 8002836:	029b      	lsls	r3, r3, #10
 8002838:	429a      	cmp	r2, r3
 800283a:	d10c      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800283c:	4b48      	ldr	r3, [pc, #288]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a4c      	ldr	r2, [pc, #304]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002842:	4013      	ands	r3, r2
 8002844:	0019      	movs	r1, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	23c0      	movs	r3, #192	; 0xc0
 800284c:	039b      	lsls	r3, r3, #14
 800284e:	401a      	ands	r2, r3
 8002850:	4b43      	ldr	r3, [pc, #268]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002852:	430a      	orrs	r2, r1
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	4b42      	ldr	r3, [pc, #264]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002858:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	23c0      	movs	r3, #192	; 0xc0
 8002860:	029b      	lsls	r3, r3, #10
 8002862:	401a      	ands	r2, r3
 8002864:	4b3e      	ldr	r3, [pc, #248]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002866:	430a      	orrs	r2, r1
 8002868:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800286a:	2317      	movs	r3, #23
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d105      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002874:	4b3a      	ldr	r3, [pc, #232]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002878:	4b39      	ldr	r3, [pc, #228]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800287a:	493f      	ldr	r1, [pc, #252]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800287c:	400a      	ands	r2, r1
 800287e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2201      	movs	r2, #1
 8002886:	4013      	ands	r3, r2
 8002888:	d009      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800288a:	4b35      	ldr	r3, [pc, #212]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	2203      	movs	r2, #3
 8002890:	4393      	bics	r3, r2
 8002892:	0019      	movs	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	4b31      	ldr	r3, [pc, #196]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800289a:	430a      	orrs	r2, r1
 800289c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2202      	movs	r2, #2
 80028a4:	4013      	ands	r3, r2
 80028a6:	d009      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028a8:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ac:	220c      	movs	r2, #12
 80028ae:	4393      	bics	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028b8:	430a      	orrs	r2, r1
 80028ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2204      	movs	r2, #4
 80028c2:	4013      	ands	r3, r2
 80028c4:	d009      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028c6:	4b26      	ldr	r3, [pc, #152]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ca:	4a2c      	ldr	r2, [pc, #176]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	4b22      	ldr	r3, [pc, #136]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028d6:	430a      	orrs	r2, r1
 80028d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2208      	movs	r2, #8
 80028e0:	4013      	ands	r3, r2
 80028e2:	d009      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028e4:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e8:	4a25      	ldr	r2, [pc, #148]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	0019      	movs	r1, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028f4:	430a      	orrs	r2, r1
 80028f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4013      	ands	r3, r2
 8002902:	d009      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002904:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002908:	4a17      	ldr	r2, [pc, #92]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002914:	430a      	orrs	r2, r1
 8002916:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2240      	movs	r2, #64	; 0x40
 800291e:	4013      	ands	r3, r2
 8002920:	d009      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	4a17      	ldr	r2, [pc, #92]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002928:	4013      	ands	r3, r2
 800292a:	0019      	movs	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002932:	430a      	orrs	r2, r1
 8002934:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	4013      	ands	r3, r2
 800293e:	d009      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002944:	4a10      	ldr	r2, [pc, #64]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002946:	4013      	ands	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1a      	ldr	r2, [r3, #32]
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002950:	430a      	orrs	r2, r1
 8002952:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b006      	add	sp, #24
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	40021000 	.word	0x40021000
 8002964:	40007000 	.word	0x40007000
 8002968:	fffcffff 	.word	0xfffcffff
 800296c:	fff7ffff 	.word	0xfff7ffff
 8002970:	00001388 	.word	0x00001388
 8002974:	ffcfffff 	.word	0xffcfffff
 8002978:	efffffff 	.word	0xefffffff
 800297c:	fffff3ff 	.word	0xfffff3ff
 8002980:	ffffcfff 	.word	0xffffcfff
 8002984:	fbffffff 	.word	0xfbffffff
 8002988:	fff3ffff 	.word	0xfff3ffff

0800298c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002994:	210e      	movs	r1, #14
 8002996:	187b      	adds	r3, r7, r1
 8002998:	4a08      	ldr	r2, [pc, #32]	; (80029bc <USB_EnableGlobalInt+0x30>)
 800299a:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2240      	movs	r2, #64	; 0x40
 80029a0:	5a9b      	ldrh	r3, [r3, r2]
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	187b      	adds	r3, r7, r1
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	b299      	uxth	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2240      	movs	r2, #64	; 0x40
 80029b0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	0018      	movs	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b004      	add	sp, #16
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	ffffbf80 	.word	0xffffbf80

080029c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029c8:	210e      	movs	r1, #14
 80029ca:	187b      	adds	r3, r7, r1
 80029cc:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <USB_DisableGlobalInt+0x3c>)
 80029ce:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	5a9b      	ldrh	r3, [r3, r2]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	b21b      	sxth	r3, r3
 80029da:	187a      	adds	r2, r7, r1
 80029dc:	2100      	movs	r1, #0
 80029de:	5e52      	ldrsh	r2, [r2, r1]
 80029e0:	43d2      	mvns	r2, r2
 80029e2:	b212      	sxth	r2, r2
 80029e4:	4013      	ands	r3, r2
 80029e6:	b21b      	sxth	r3, r3
 80029e8:	b299      	uxth	r1, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2240      	movs	r2, #64	; 0x40
 80029ee:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	0018      	movs	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b004      	add	sp, #16
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	ffffbf80 	.word	0xffffbf80

08002a00 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a00:	b084      	sub	sp, #16
 8002a02:	b590      	push	{r4, r7, lr}
 8002a04:	46c6      	mov	lr, r8
 8002a06:	b500      	push	{lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	2004      	movs	r0, #4
 8002a10:	2410      	movs	r4, #16
 8002a12:	46a4      	mov	ip, r4
 8002a14:	2408      	movs	r4, #8
 8002a16:	46a0      	mov	r8, r4
 8002a18:	44b8      	add	r8, r7
 8002a1a:	44c4      	add	ip, r8
 8002a1c:	4460      	add	r0, ip
 8002a1e:	6001      	str	r1, [r0, #0]
 8002a20:	6042      	str	r2, [r0, #4]
 8002a22:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2240      	movs	r2, #64	; 0x40
 8002a28:	2101      	movs	r1, #1
 8002a2a:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2240      	movs	r2, #64	; 0x40
 8002a30:	2100      	movs	r1, #0
 8002a32:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2244      	movs	r2, #68	; 0x44
 8002a38:	2100      	movs	r1, #0
 8002a3a:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2250      	movs	r2, #80	; 0x50
 8002a40:	2100      	movs	r1, #0
 8002a42:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	0018      	movs	r0, r3
 8002a48:	f7ff ffa0 	bl	800298c <USB_EnableGlobalInt>

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	0018      	movs	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b002      	add	sp, #8
 8002a54:	bc04      	pop	{r2}
 8002a56:	4690      	mov	r8, r2
 8002a58:	bc90      	pop	{r4, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	b004      	add	sp, #16
 8002a5e:	4718      	bx	r3

08002a60 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002a6a:	2317      	movs	r3, #23
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	18d3      	adds	r3, r2, r3
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	2314      	movs	r3, #20
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	49ae      	ldr	r1, [pc, #696]	; (8002d40 <USB_ActivateEndpoint+0x2e0>)
 8002a86:	400a      	ands	r2, r1
 8002a88:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	78db      	ldrb	r3, [r3, #3]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d020      	beq.n	8002ad4 <USB_ActivateEndpoint+0x74>
 8002a92:	dc02      	bgt.n	8002a9a <USB_ActivateEndpoint+0x3a>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <USB_ActivateEndpoint+0x44>
 8002a98:	e025      	b.n	8002ae6 <USB_ActivateEndpoint+0x86>
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d00b      	beq.n	8002ab6 <USB_ActivateEndpoint+0x56>
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d00f      	beq.n	8002ac2 <USB_ActivateEndpoint+0x62>
 8002aa2:	e020      	b.n	8002ae6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002aa4:	2214      	movs	r2, #20
 8002aa6:	18bb      	adds	r3, r7, r2
 8002aa8:	18ba      	adds	r2, r7, r2
 8002aaa:	8812      	ldrh	r2, [r2, #0]
 8002aac:	2180      	movs	r1, #128	; 0x80
 8002aae:	0089      	lsls	r1, r1, #2
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	801a      	strh	r2, [r3, #0]
      break;
 8002ab4:	e01c      	b.n	8002af0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8002ab6:	2214      	movs	r2, #20
 8002ab8:	18bb      	adds	r3, r7, r2
 8002aba:	18ba      	adds	r2, r7, r2
 8002abc:	8812      	ldrh	r2, [r2, #0]
 8002abe:	801a      	strh	r2, [r3, #0]
      break;
 8002ac0:	e016      	b.n	8002af0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002ac2:	2214      	movs	r2, #20
 8002ac4:	18bb      	adds	r3, r7, r2
 8002ac6:	18ba      	adds	r2, r7, r2
 8002ac8:	8812      	ldrh	r2, [r2, #0]
 8002aca:	21c0      	movs	r1, #192	; 0xc0
 8002acc:	00c9      	lsls	r1, r1, #3
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	801a      	strh	r2, [r3, #0]
      break;
 8002ad2:	e00d      	b.n	8002af0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002ad4:	2214      	movs	r2, #20
 8002ad6:	18bb      	adds	r3, r7, r2
 8002ad8:	18ba      	adds	r2, r7, r2
 8002ada:	8812      	ldrh	r2, [r2, #0]
 8002adc:	2180      	movs	r1, #128	; 0x80
 8002ade:	00c9      	lsls	r1, r1, #3
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	801a      	strh	r2, [r3, #0]
      break;
 8002ae4:	e004      	b.n	8002af0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8002ae6:	2317      	movs	r3, #23
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
      break;
 8002aee:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	18d3      	adds	r3, r2, r3
 8002afa:	2214      	movs	r2, #20
 8002afc:	18ba      	adds	r2, r7, r2
 8002afe:	8812      	ldrh	r2, [r2, #0]
 8002b00:	4990      	ldr	r1, [pc, #576]	; (8002d44 <USB_ActivateEndpoint+0x2e4>)
 8002b02:	430a      	orrs	r2, r1
 8002b04:	b292      	uxth	r2, r2
 8002b06:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	18d3      	adds	r3, r2, r3
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	b21b      	sxth	r3, r3
 8002b18:	4a8b      	ldr	r2, [pc, #556]	; (8002d48 <USB_ActivateEndpoint+0x2e8>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	b21a      	sxth	r2, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b21b      	sxth	r3, r3
 8002b24:	4313      	orrs	r3, r2
 8002b26:	b21b      	sxth	r3, r3
 8002b28:	b29c      	uxth	r4, r3
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	18d3      	adds	r3, r2, r3
 8002b34:	4a83      	ldr	r2, [pc, #524]	; (8002d44 <USB_ActivateEndpoint+0x2e4>)
 8002b36:	4322      	orrs	r2, r4
 8002b38:	b292      	uxth	r2, r2
 8002b3a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	7b1b      	ldrb	r3, [r3, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d000      	beq.n	8002b46 <USB_ActivateEndpoint+0xe6>
 8002b44:	e112      	b.n	8002d6c <USB_ActivateEndpoint+0x30c>
  {
    if (ep->is_in != 0U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d062      	beq.n	8002c14 <USB_ActivateEndpoint+0x1b4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b4e:	687c      	ldr	r4, [r7, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2250      	movs	r2, #80	; 0x50
 8002b54:	5a9b      	ldrh	r3, [r3, r2]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	18e4      	adds	r4, r4, r3
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	18e3      	adds	r3, r4, r3
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	00d2      	lsls	r2, r2, #3
 8002b66:	4694      	mov	ip, r2
 8002b68:	4463      	add	r3, ip
 8002b6a:	001c      	movs	r4, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	88db      	ldrh	r3, [r3, #6]
 8002b70:	085b      	lsrs	r3, r3, #1
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	18db      	adds	r3, r3, r3
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	18d3      	adds	r3, r2, r3
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	b29c      	uxth	r4, r3
 8002b88:	0022      	movs	r2, r4
 8002b8a:	2340      	movs	r3, #64	; 0x40
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d012      	beq.n	8002bb6 <USB_ActivateEndpoint+0x156>
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	18d3      	adds	r3, r2, r3
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	4a6a      	ldr	r2, [pc, #424]	; (8002d48 <USB_ActivateEndpoint+0x2e8>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	b29c      	uxth	r4, r3
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	18d3      	adds	r3, r2, r3
 8002bae:	4a67      	ldr	r2, [pc, #412]	; (8002d4c <USB_ActivateEndpoint+0x2ec>)
 8002bb0:	4322      	orrs	r2, r4
 8002bb2:	b292      	uxth	r2, r2
 8002bb4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	78db      	ldrb	r3, [r3, #3]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d016      	beq.n	8002bec <USB_ActivateEndpoint+0x18c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	18d3      	adds	r3, r2, r3
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	4a60      	ldr	r2, [pc, #384]	; (8002d50 <USB_ActivateEndpoint+0x2f0>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	b29c      	uxth	r4, r3
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	4063      	eors	r3, r4
 8002bd6:	b29c      	uxth	r4, r3
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	18d3      	adds	r3, r2, r3
 8002be2:	4a58      	ldr	r2, [pc, #352]	; (8002d44 <USB_ActivateEndpoint+0x2e4>)
 8002be4:	4322      	orrs	r2, r4
 8002be6:	b292      	uxth	r2, r2
 8002be8:	801a      	strh	r2, [r3, #0]
 8002bea:	e212      	b.n	8003012 <USB_ActivateEndpoint+0x5b2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	18d3      	adds	r3, r2, r3
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	4a55      	ldr	r2, [pc, #340]	; (8002d50 <USB_ActivateEndpoint+0x2f0>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	b29c      	uxth	r4, r3
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	18d3      	adds	r3, r2, r3
 8002c0a:	4a4e      	ldr	r2, [pc, #312]	; (8002d44 <USB_ActivateEndpoint+0x2e4>)
 8002c0c:	4322      	orrs	r2, r4
 8002c0e:	b292      	uxth	r2, r2
 8002c10:	801a      	strh	r2, [r3, #0]
 8002c12:	e1fe      	b.n	8003012 <USB_ActivateEndpoint+0x5b2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002c14:	687c      	ldr	r4, [r7, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2250      	movs	r2, #80	; 0x50
 8002c1a:	5a9b      	ldrh	r3, [r3, r2]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	18e4      	adds	r4, r4, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	18e3      	adds	r3, r4, r3
 8002c28:	4a4a      	ldr	r2, [pc, #296]	; (8002d54 <USB_ActivateEndpoint+0x2f4>)
 8002c2a:	4694      	mov	ip, r2
 8002c2c:	4463      	add	r3, ip
 8002c2e:	001c      	movs	r4, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	88db      	ldrh	r3, [r3, #6]
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	18db      	adds	r3, r3, r3
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002c3e:	687c      	ldr	r4, [r7, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2250      	movs	r2, #80	; 0x50
 8002c44:	5a9b      	ldrh	r3, [r3, r2]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	18e4      	adds	r4, r4, r3
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	18e3      	adds	r3, r4, r3
 8002c52:	4a41      	ldr	r2, [pc, #260]	; (8002d58 <USB_ActivateEndpoint+0x2f8>)
 8002c54:	4694      	mov	ip, r2
 8002c56:	4463      	add	r3, ip
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10e      	bne.n	8002c80 <USB_ActivateEndpoint+0x220>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	4a3d      	ldr	r2, [pc, #244]	; (8002d5c <USB_ActivateEndpoint+0x2fc>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	4a3a      	ldr	r2, [pc, #232]	; (8002d60 <USB_ActivateEndpoint+0x300>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	801a      	strh	r2, [r3, #0]
 8002c7e:	e023      	b.n	8002cc8 <USB_ActivateEndpoint+0x268>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2b3d      	cmp	r3, #61	; 0x3d
 8002c86:	d812      	bhi.n	8002cae <USB_ActivateEndpoint+0x24e>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2201      	movs	r2, #1
 8002c96:	4013      	ands	r3, r2
 8002c98:	d002      	beq.n	8002ca0 <USB_ActivateEndpoint+0x240>
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	029b      	lsls	r3, r3, #10
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	801a      	strh	r2, [r3, #0]
 8002cac:	e00c      	b.n	8002cc8 <USB_ActivateEndpoint+0x268>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	029b      	lsls	r3, r3, #10
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	4a28      	ldr	r2, [pc, #160]	; (8002d60 <USB_ActivateEndpoint+0x300>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	18d3      	adds	r3, r2, r3
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	b29c      	uxth	r4, r3
 8002cd6:	0022      	movs	r2, r4
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	01db      	lsls	r3, r3, #7
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d012      	beq.n	8002d06 <USB_ActivateEndpoint+0x2a6>
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	18d3      	adds	r3, r2, r3
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	4a16      	ldr	r2, [pc, #88]	; (8002d48 <USB_ActivateEndpoint+0x2e8>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	b29c      	uxth	r4, r3
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	18d3      	adds	r3, r2, r3
 8002cfe:	4a19      	ldr	r2, [pc, #100]	; (8002d64 <USB_ActivateEndpoint+0x304>)
 8002d00:	4322      	orrs	r2, r4
 8002d02:	b292      	uxth	r2, r2
 8002d04:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	18d3      	adds	r3, r2, r3
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <USB_ActivateEndpoint+0x308>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	b29c      	uxth	r4, r3
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	015b      	lsls	r3, r3, #5
 8002d1e:	4063      	eors	r3, r4
 8002d20:	b29c      	uxth	r4, r3
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	019b      	lsls	r3, r3, #6
 8002d26:	4063      	eors	r3, r4
 8002d28:	b29c      	uxth	r4, r3
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	18d3      	adds	r3, r2, r3
 8002d34:	4a03      	ldr	r2, [pc, #12]	; (8002d44 <USB_ActivateEndpoint+0x2e4>)
 8002d36:	4322      	orrs	r2, r4
 8002d38:	b292      	uxth	r2, r2
 8002d3a:	801a      	strh	r2, [r3, #0]
 8002d3c:	e169      	b.n	8003012 <USB_ActivateEndpoint+0x5b2>
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	ffff898f 	.word	0xffff898f
 8002d44:	ffff8080 	.word	0xffff8080
 8002d48:	ffff8f8f 	.word	0xffff8f8f
 8002d4c:	ffff80c0 	.word	0xffff80c0
 8002d50:	ffff8fbf 	.word	0xffff8fbf
 8002d54:	00000404 	.word	0x00000404
 8002d58:	00000406 	.word	0x00000406
 8002d5c:	ffff83ff 	.word	0xffff83ff
 8002d60:	ffff8000 	.word	0xffff8000
 8002d64:	ffffc080 	.word	0xffffc080
 8002d68:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	18d3      	adds	r3, r2, r3
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4aa9      	ldr	r2, [pc, #676]	; (8003020 <USB_ActivateEndpoint+0x5c0>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	b29c      	uxth	r4, r3
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	18d3      	adds	r3, r2, r3
 8002d8a:	4aa6      	ldr	r2, [pc, #664]	; (8003024 <USB_ActivateEndpoint+0x5c4>)
 8002d8c:	4322      	orrs	r2, r4
 8002d8e:	b292      	uxth	r2, r2
 8002d90:	801a      	strh	r2, [r3, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002d92:	687c      	ldr	r4, [r7, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2250      	movs	r2, #80	; 0x50
 8002d98:	5a9b      	ldrh	r3, [r3, r2]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	18e4      	adds	r4, r4, r3
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	18e3      	adds	r3, r4, r3
 8002da6:	2280      	movs	r2, #128	; 0x80
 8002da8:	00d2      	lsls	r2, r2, #3
 8002daa:	4694      	mov	ip, r2
 8002dac:	4463      	add	r3, ip
 8002dae:	001c      	movs	r4, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	891b      	ldrh	r3, [r3, #8]
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	18db      	adds	r3, r3, r3
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	8023      	strh	r3, [r4, #0]
 8002dbe:	687c      	ldr	r4, [r7, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2250      	movs	r2, #80	; 0x50
 8002dc4:	5a9b      	ldrh	r3, [r3, r2]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	18e4      	adds	r4, r4, r3
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	18e3      	adds	r3, r4, r3
 8002dd2:	4a95      	ldr	r2, [pc, #596]	; (8003028 <USB_ActivateEndpoint+0x5c8>)
 8002dd4:	4694      	mov	ip, r2
 8002dd6:	4463      	add	r3, ip
 8002dd8:	001c      	movs	r4, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	895b      	ldrh	r3, [r3, #10]
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	18db      	adds	r3, r3, r3
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	785b      	ldrb	r3, [r3, #1]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d000      	beq.n	8002df2 <USB_ActivateEndpoint+0x392>
 8002df0:	e07e      	b.n	8002ef0 <USB_ActivateEndpoint+0x490>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	18d3      	adds	r3, r2, r3
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b29c      	uxth	r4, r3
 8002e00:	0022      	movs	r2, r4
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	01db      	lsls	r3, r3, #7
 8002e06:	4013      	ands	r3, r2
 8002e08:	d012      	beq.n	8002e30 <USB_ActivateEndpoint+0x3d0>
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	18d3      	adds	r3, r2, r3
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	4a81      	ldr	r2, [pc, #516]	; (8003020 <USB_ActivateEndpoint+0x5c0>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	b29c      	uxth	r4, r3
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	18d3      	adds	r3, r2, r3
 8002e28:	4a80      	ldr	r2, [pc, #512]	; (800302c <USB_ActivateEndpoint+0x5cc>)
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	18d3      	adds	r3, r2, r3
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	b29c      	uxth	r4, r3
 8002e3e:	0022      	movs	r2, r4
 8002e40:	2340      	movs	r3, #64	; 0x40
 8002e42:	4013      	ands	r3, r2
 8002e44:	d012      	beq.n	8002e6c <USB_ActivateEndpoint+0x40c>
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	18d3      	adds	r3, r2, r3
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	4a72      	ldr	r2, [pc, #456]	; (8003020 <USB_ActivateEndpoint+0x5c0>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	b29c      	uxth	r4, r3
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	18d3      	adds	r3, r2, r3
 8002e64:	4a72      	ldr	r2, [pc, #456]	; (8003030 <USB_ActivateEndpoint+0x5d0>)
 8002e66:	4322      	orrs	r2, r4
 8002e68:	b292      	uxth	r2, r2
 8002e6a:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	18d3      	adds	r3, r2, r3
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	4a69      	ldr	r2, [pc, #420]	; (8003020 <USB_ActivateEndpoint+0x5c0>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	b29c      	uxth	r4, r3
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	18d3      	adds	r3, r2, r3
 8002e8a:	4a69      	ldr	r2, [pc, #420]	; (8003030 <USB_ActivateEndpoint+0x5d0>)
 8002e8c:	4322      	orrs	r2, r4
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	18d3      	adds	r3, r2, r3
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	4a64      	ldr	r2, [pc, #400]	; (8003034 <USB_ActivateEndpoint+0x5d4>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	b29c      	uxth	r4, r3
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	015b      	lsls	r3, r3, #5
 8002eaa:	4063      	eors	r3, r4
 8002eac:	b29c      	uxth	r4, r3
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	019b      	lsls	r3, r3, #6
 8002eb2:	4063      	eors	r3, r4
 8002eb4:	b29c      	uxth	r4, r3
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	18d3      	adds	r3, r2, r3
 8002ec0:	4a5d      	ldr	r2, [pc, #372]	; (8003038 <USB_ActivateEndpoint+0x5d8>)
 8002ec2:	4322      	orrs	r2, r4
 8002ec4:	b292      	uxth	r2, r2
 8002ec6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	18d3      	adds	r3, r2, r3
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	4a59      	ldr	r2, [pc, #356]	; (800303c <USB_ActivateEndpoint+0x5dc>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	b29c      	uxth	r4, r3
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	18d3      	adds	r3, r2, r3
 8002ee6:	4a54      	ldr	r2, [pc, #336]	; (8003038 <USB_ActivateEndpoint+0x5d8>)
 8002ee8:	4322      	orrs	r2, r4
 8002eea:	b292      	uxth	r2, r2
 8002eec:	801a      	strh	r2, [r3, #0]
 8002eee:	e090      	b.n	8003012 <USB_ActivateEndpoint+0x5b2>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	18d3      	adds	r3, r2, r3
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	b29c      	uxth	r4, r3
 8002efe:	0022      	movs	r2, r4
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	01db      	lsls	r3, r3, #7
 8002f04:	4013      	ands	r3, r2
 8002f06:	d012      	beq.n	8002f2e <USB_ActivateEndpoint+0x4ce>
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	18d3      	adds	r3, r2, r3
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	4a42      	ldr	r2, [pc, #264]	; (8003020 <USB_ActivateEndpoint+0x5c0>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	b29c      	uxth	r4, r3
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	18d3      	adds	r3, r2, r3
 8002f26:	4a41      	ldr	r2, [pc, #260]	; (800302c <USB_ActivateEndpoint+0x5cc>)
 8002f28:	4322      	orrs	r2, r4
 8002f2a:	b292      	uxth	r2, r2
 8002f2c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	18d3      	adds	r3, r2, r3
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	b29c      	uxth	r4, r3
 8002f3c:	0022      	movs	r2, r4
 8002f3e:	2340      	movs	r3, #64	; 0x40
 8002f40:	4013      	ands	r3, r2
 8002f42:	d012      	beq.n	8002f6a <USB_ActivateEndpoint+0x50a>
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	18d3      	adds	r3, r2, r3
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	4a33      	ldr	r2, [pc, #204]	; (8003020 <USB_ActivateEndpoint+0x5c0>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	b29c      	uxth	r4, r3
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	18d3      	adds	r3, r2, r3
 8002f62:	4a33      	ldr	r2, [pc, #204]	; (8003030 <USB_ActivateEndpoint+0x5d0>)
 8002f64:	4322      	orrs	r2, r4
 8002f66:	b292      	uxth	r2, r2
 8002f68:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	18d3      	adds	r3, r2, r3
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	4a29      	ldr	r2, [pc, #164]	; (8003020 <USB_ActivateEndpoint+0x5c0>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	b29c      	uxth	r4, r3
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	18d3      	adds	r3, r2, r3
 8002f88:	4a28      	ldr	r2, [pc, #160]	; (800302c <USB_ActivateEndpoint+0x5cc>)
 8002f8a:	4322      	orrs	r2, r4
 8002f8c:	b292      	uxth	r2, r2
 8002f8e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	78db      	ldrb	r3, [r3, #3]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d016      	beq.n	8002fc6 <USB_ActivateEndpoint+0x566>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	18d3      	adds	r3, r2, r3
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	4a25      	ldr	r2, [pc, #148]	; (800303c <USB_ActivateEndpoint+0x5dc>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	b29c      	uxth	r4, r3
 8002fac:	2320      	movs	r3, #32
 8002fae:	4063      	eors	r3, r4
 8002fb0:	b29c      	uxth	r4, r3
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	18d3      	adds	r3, r2, r3
 8002fbc:	4a1e      	ldr	r2, [pc, #120]	; (8003038 <USB_ActivateEndpoint+0x5d8>)
 8002fbe:	4322      	orrs	r2, r4
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	801a      	strh	r2, [r3, #0]
 8002fc4:	e012      	b.n	8002fec <USB_ActivateEndpoint+0x58c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	18d3      	adds	r3, r2, r3
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4a19      	ldr	r2, [pc, #100]	; (800303c <USB_ActivateEndpoint+0x5dc>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	b29c      	uxth	r4, r3
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	18d3      	adds	r3, r2, r3
 8002fe4:	4a14      	ldr	r2, [pc, #80]	; (8003038 <USB_ActivateEndpoint+0x5d8>)
 8002fe6:	4322      	orrs	r2, r4
 8002fe8:	b292      	uxth	r2, r2
 8002fea:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	18d3      	adds	r3, r2, r3
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	4a0e      	ldr	r2, [pc, #56]	; (8003034 <USB_ActivateEndpoint+0x5d4>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	b29c      	uxth	r4, r3
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	18d3      	adds	r3, r2, r3
 800300a:	4a0b      	ldr	r2, [pc, #44]	; (8003038 <USB_ActivateEndpoint+0x5d8>)
 800300c:	4322      	orrs	r2, r4
 800300e:	b292      	uxth	r2, r2
 8003010:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8003012:	2317      	movs	r3, #23
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	781b      	ldrb	r3, [r3, #0]
}
 8003018:	0018      	movs	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	b007      	add	sp, #28
 800301e:	bd90      	pop	{r4, r7, pc}
 8003020:	ffff8f8f 	.word	0xffff8f8f
 8003024:	ffff8180 	.word	0xffff8180
 8003028:	00000404 	.word	0x00000404
 800302c:	ffffc080 	.word	0xffffc080
 8003030:	ffff80c0 	.word	0xffff80c0
 8003034:	ffffbf8f 	.word	0xffffbf8f
 8003038:	ffff8080 	.word	0xffff8080
 800303c:	ffff8fbf 	.word	0xffff8fbf

08003040 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	7b1b      	ldrb	r3, [r3, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d168      	bne.n	8003124 <USB_DeactivateEndpoint+0xe4>
  {
    if (ep->is_in != 0U)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d031      	beq.n	80030be <USB_DeactivateEndpoint+0x7e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	18d3      	adds	r3, r2, r3
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	b29c      	uxth	r4, r3
 8003068:	0022      	movs	r2, r4
 800306a:	2340      	movs	r3, #64	; 0x40
 800306c:	4013      	ands	r3, r2
 800306e:	d012      	beq.n	8003096 <USB_DeactivateEndpoint+0x56>
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	18d3      	adds	r3, r2, r3
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	4aa5      	ldr	r2, [pc, #660]	; (8003314 <USB_DeactivateEndpoint+0x2d4>)
 8003080:	4013      	ands	r3, r2
 8003082:	b29c      	uxth	r4, r3
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	18d3      	adds	r3, r2, r3
 800308e:	4aa2      	ldr	r2, [pc, #648]	; (8003318 <USB_DeactivateEndpoint+0x2d8>)
 8003090:	4322      	orrs	r2, r4
 8003092:	b292      	uxth	r2, r2
 8003094:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	18d3      	adds	r3, r2, r3
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	4a9d      	ldr	r2, [pc, #628]	; (800331c <USB_DeactivateEndpoint+0x2dc>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	b29c      	uxth	r4, r3
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	18d3      	adds	r3, r2, r3
 80030b4:	4a9a      	ldr	r2, [pc, #616]	; (8003320 <USB_DeactivateEndpoint+0x2e0>)
 80030b6:	4322      	orrs	r2, r4
 80030b8:	b292      	uxth	r2, r2
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	e124      	b.n	8003308 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	18d3      	adds	r3, r2, r3
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	b29c      	uxth	r4, r3
 80030cc:	0022      	movs	r2, r4
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	01db      	lsls	r3, r3, #7
 80030d2:	4013      	ands	r3, r2
 80030d4:	d012      	beq.n	80030fc <USB_DeactivateEndpoint+0xbc>
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	18d3      	adds	r3, r2, r3
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	4a8b      	ldr	r2, [pc, #556]	; (8003314 <USB_DeactivateEndpoint+0x2d4>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	b29c      	uxth	r4, r3
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	18d3      	adds	r3, r2, r3
 80030f4:	4a8b      	ldr	r2, [pc, #556]	; (8003324 <USB_DeactivateEndpoint+0x2e4>)
 80030f6:	4322      	orrs	r2, r4
 80030f8:	b292      	uxth	r2, r2
 80030fa:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	18d3      	adds	r3, r2, r3
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	4a87      	ldr	r2, [pc, #540]	; (8003328 <USB_DeactivateEndpoint+0x2e8>)
 800310c:	4013      	ands	r3, r2
 800310e:	b29c      	uxth	r4, r3
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	18d3      	adds	r3, r2, r3
 800311a:	4a81      	ldr	r2, [pc, #516]	; (8003320 <USB_DeactivateEndpoint+0x2e0>)
 800311c:	4322      	orrs	r2, r4
 800311e:	b292      	uxth	r2, r2
 8003120:	801a      	strh	r2, [r3, #0]
 8003122:	e0f1      	b.n	8003308 <USB_DeactivateEndpoint+0x2c8>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	785b      	ldrb	r3, [r3, #1]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d000      	beq.n	800312e <USB_DeactivateEndpoint+0xee>
 800312c:	e076      	b.n	800321c <USB_DeactivateEndpoint+0x1dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	18d3      	adds	r3, r2, r3
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b29c      	uxth	r4, r3
 800313c:	0022      	movs	r2, r4
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	01db      	lsls	r3, r3, #7
 8003142:	4013      	ands	r3, r2
 8003144:	d012      	beq.n	800316c <USB_DeactivateEndpoint+0x12c>
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	18d3      	adds	r3, r2, r3
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	4a6f      	ldr	r2, [pc, #444]	; (8003314 <USB_DeactivateEndpoint+0x2d4>)
 8003156:	4013      	ands	r3, r2
 8003158:	b29c      	uxth	r4, r3
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	18d3      	adds	r3, r2, r3
 8003164:	4a6f      	ldr	r2, [pc, #444]	; (8003324 <USB_DeactivateEndpoint+0x2e4>)
 8003166:	4322      	orrs	r2, r4
 8003168:	b292      	uxth	r2, r2
 800316a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	18d3      	adds	r3, r2, r3
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	b29c      	uxth	r4, r3
 800317a:	0022      	movs	r2, r4
 800317c:	2340      	movs	r3, #64	; 0x40
 800317e:	4013      	ands	r3, r2
 8003180:	d012      	beq.n	80031a8 <USB_DeactivateEndpoint+0x168>
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	18d3      	adds	r3, r2, r3
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	4a60      	ldr	r2, [pc, #384]	; (8003314 <USB_DeactivateEndpoint+0x2d4>)
 8003192:	4013      	ands	r3, r2
 8003194:	b29c      	uxth	r4, r3
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	18d3      	adds	r3, r2, r3
 80031a0:	4a5d      	ldr	r2, [pc, #372]	; (8003318 <USB_DeactivateEndpoint+0x2d8>)
 80031a2:	4322      	orrs	r2, r4
 80031a4:	b292      	uxth	r2, r2
 80031a6:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	18d3      	adds	r3, r2, r3
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	4a57      	ldr	r2, [pc, #348]	; (8003314 <USB_DeactivateEndpoint+0x2d4>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	b29c      	uxth	r4, r3
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	18d3      	adds	r3, r2, r3
 80031c6:	4a54      	ldr	r2, [pc, #336]	; (8003318 <USB_DeactivateEndpoint+0x2d8>)
 80031c8:	4322      	orrs	r2, r4
 80031ca:	b292      	uxth	r2, r2
 80031cc:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	18d3      	adds	r3, r2, r3
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	4a52      	ldr	r2, [pc, #328]	; (8003328 <USB_DeactivateEndpoint+0x2e8>)
 80031de:	4013      	ands	r3, r2
 80031e0:	b29c      	uxth	r4, r3
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	18d3      	adds	r3, r2, r3
 80031ec:	4a4c      	ldr	r2, [pc, #304]	; (8003320 <USB_DeactivateEndpoint+0x2e0>)
 80031ee:	4322      	orrs	r2, r4
 80031f0:	b292      	uxth	r2, r2
 80031f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	18d3      	adds	r3, r2, r3
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	b29b      	uxth	r3, r3
 8003202:	4a46      	ldr	r2, [pc, #280]	; (800331c <USB_DeactivateEndpoint+0x2dc>)
 8003204:	4013      	ands	r3, r2
 8003206:	b29c      	uxth	r4, r3
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	18d3      	adds	r3, r2, r3
 8003212:	4a43      	ldr	r2, [pc, #268]	; (8003320 <USB_DeactivateEndpoint+0x2e0>)
 8003214:	4322      	orrs	r2, r4
 8003216:	b292      	uxth	r2, r2
 8003218:	801a      	strh	r2, [r3, #0]
 800321a:	e075      	b.n	8003308 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	18d3      	adds	r3, r2, r3
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29c      	uxth	r4, r3
 800322a:	0022      	movs	r2, r4
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	01db      	lsls	r3, r3, #7
 8003230:	4013      	ands	r3, r2
 8003232:	d012      	beq.n	800325a <USB_DeactivateEndpoint+0x21a>
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	18d3      	adds	r3, r2, r3
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	4a34      	ldr	r2, [pc, #208]	; (8003314 <USB_DeactivateEndpoint+0x2d4>)
 8003244:	4013      	ands	r3, r2
 8003246:	b29c      	uxth	r4, r3
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	18d3      	adds	r3, r2, r3
 8003252:	4a34      	ldr	r2, [pc, #208]	; (8003324 <USB_DeactivateEndpoint+0x2e4>)
 8003254:	4322      	orrs	r2, r4
 8003256:	b292      	uxth	r2, r2
 8003258:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	18d3      	adds	r3, r2, r3
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	b29c      	uxth	r4, r3
 8003268:	0022      	movs	r2, r4
 800326a:	2340      	movs	r3, #64	; 0x40
 800326c:	4013      	ands	r3, r2
 800326e:	d012      	beq.n	8003296 <USB_DeactivateEndpoint+0x256>
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	18d3      	adds	r3, r2, r3
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	4a25      	ldr	r2, [pc, #148]	; (8003314 <USB_DeactivateEndpoint+0x2d4>)
 8003280:	4013      	ands	r3, r2
 8003282:	b29c      	uxth	r4, r3
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	18d3      	adds	r3, r2, r3
 800328e:	4a22      	ldr	r2, [pc, #136]	; (8003318 <USB_DeactivateEndpoint+0x2d8>)
 8003290:	4322      	orrs	r2, r4
 8003292:	b292      	uxth	r2, r2
 8003294:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	18d3      	adds	r3, r2, r3
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	4a1b      	ldr	r2, [pc, #108]	; (8003314 <USB_DeactivateEndpoint+0x2d4>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	b29c      	uxth	r4, r3
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	18d3      	adds	r3, r2, r3
 80032b4:	4a1b      	ldr	r2, [pc, #108]	; (8003324 <USB_DeactivateEndpoint+0x2e4>)
 80032b6:	4322      	orrs	r2, r4
 80032b8:	b292      	uxth	r2, r2
 80032ba:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	18d3      	adds	r3, r2, r3
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	4a14      	ldr	r2, [pc, #80]	; (800331c <USB_DeactivateEndpoint+0x2dc>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	b29c      	uxth	r4, r3
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	18d3      	adds	r3, r2, r3
 80032da:	4a11      	ldr	r2, [pc, #68]	; (8003320 <USB_DeactivateEndpoint+0x2e0>)
 80032dc:	4322      	orrs	r2, r4
 80032de:	b292      	uxth	r2, r2
 80032e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	18d3      	adds	r3, r2, r3
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	4a0d      	ldr	r2, [pc, #52]	; (8003328 <USB_DeactivateEndpoint+0x2e8>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	b29c      	uxth	r4, r3
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	18d3      	adds	r3, r2, r3
 8003300:	4a07      	ldr	r2, [pc, #28]	; (8003320 <USB_DeactivateEndpoint+0x2e0>)
 8003302:	4322      	orrs	r2, r4
 8003304:	b292      	uxth	r2, r2
 8003306:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	0018      	movs	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	b003      	add	sp, #12
 8003310:	bd90      	pop	{r4, r7, pc}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	ffff8f8f 	.word	0xffff8f8f
 8003318:	ffff80c0 	.word	0xffff80c0
 800331c:	ffff8fbf 	.word	0xffff8fbf
 8003320:	ffff8080 	.word	0xffff8080
 8003324:	ffffc080 	.word	0xffffc080
 8003328:	ffffbf8f 	.word	0xffffbf8f

0800332c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b095      	sub	sp, #84	; 0x54
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	785b      	ldrb	r3, [r3, #1]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d000      	beq.n	8003340 <USB_EPStartXfer+0x14>
 800333e:	e155      	b.n	80035ec <USB_EPStartXfer+0x2c0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	699a      	ldr	r2, [r3, #24]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	429a      	cmp	r2, r3
 800334a:	d909      	bls.n	8003360 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003358:	1ad2      	subs	r2, r2, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	619a      	str	r2, [r3, #24]
 800335e:	e005      	b.n	800336c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2200      	movs	r2, #0
 800336a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	7b1b      	ldrb	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d11b      	bne.n	80033ac <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	6959      	ldr	r1, [r3, #20]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	88da      	ldrh	r2, [r3, #6]
 800337c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800337e:	b29b      	uxth	r3, r3
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fb93 	bl	8003aac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003386:	687c      	ldr	r4, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2250      	movs	r2, #80	; 0x50
 800338c:	5a9b      	ldrh	r3, [r3, r2]
 800338e:	b29b      	uxth	r3, r3
 8003390:	18e4      	adds	r4, r4, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	18e3      	adds	r3, r4, r3
 800339a:	4ad4      	ldr	r2, [pc, #848]	; (80036ec <USB_EPStartXfer+0x3c0>)
 800339c:	4694      	mov	ip, r2
 800339e:	4463      	add	r3, ip
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	801a      	strh	r2, [r3, #0]
 80033aa:	e105      	b.n	80035b8 <USB_EPStartXfer+0x28c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	18d3      	adds	r3, r2, r3
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	001a      	movs	r2, r3
 80033bc:	2340      	movs	r3, #64	; 0x40
 80033be:	4013      	ands	r3, r2
 80033c0:	d060      	beq.n	8003484 <USB_EPStartXfer+0x158>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80033c2:	687c      	ldr	r4, [r7, #4]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	785b      	ldrb	r3, [r3, #1]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d140      	bne.n	800344e <USB_EPStartXfer+0x122>
 80033cc:	687c      	ldr	r4, [r7, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2250      	movs	r2, #80	; 0x50
 80033d2:	5a9b      	ldrh	r3, [r3, r2]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	18e4      	adds	r4, r4, r3
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	18e3      	adds	r3, r4, r3
 80033e0:	4ac3      	ldr	r2, [pc, #780]	; (80036f0 <USB_EPStartXfer+0x3c4>)
 80033e2:	4694      	mov	ip, r2
 80033e4:	4463      	add	r3, ip
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10e      	bne.n	800340c <USB_EPStartXfer+0xe0>
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	4ac0      	ldr	r2, [pc, #768]	; (80036f4 <USB_EPStartXfer+0x3c8>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	801a      	strh	r2, [r3, #0]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	4abd      	ldr	r2, [pc, #756]	; (80036f8 <USB_EPStartXfer+0x3cc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	b29a      	uxth	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	801a      	strh	r2, [r3, #0]
 800340a:	e035      	b.n	8003478 <USB_EPStartXfer+0x14c>
 800340c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340e:	2b3d      	cmp	r3, #61	; 0x3d
 8003410:	d810      	bhi.n	8003434 <USB_EPStartXfer+0x108>
 8003412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	647b      	str	r3, [r7, #68]	; 0x44
 8003418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341a:	2201      	movs	r2, #1
 800341c:	4013      	ands	r3, r2
 800341e:	d002      	beq.n	8003426 <USB_EPStartXfer+0xfa>
 8003420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003422:	3301      	adds	r3, #1
 8003424:	647b      	str	r3, [r7, #68]	; 0x44
 8003426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003428:	b29b      	uxth	r3, r3
 800342a:	029b      	lsls	r3, r3, #10
 800342c:	b29a      	uxth	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	801a      	strh	r2, [r3, #0]
 8003432:	e021      	b.n	8003478 <USB_EPStartXfer+0x14c>
 8003434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	647b      	str	r3, [r7, #68]	; 0x44
 800343a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800343c:	b29b      	uxth	r3, r3
 800343e:	029b      	lsls	r3, r3, #10
 8003440:	b29b      	uxth	r3, r3
 8003442:	4aad      	ldr	r2, [pc, #692]	; (80036f8 <USB_EPStartXfer+0x3cc>)
 8003444:	4313      	orrs	r3, r2
 8003446:	b29a      	uxth	r2, r3
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	801a      	strh	r2, [r3, #0]
 800344c:	e014      	b.n	8003478 <USB_EPStartXfer+0x14c>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	785b      	ldrb	r3, [r3, #1]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d110      	bne.n	8003478 <USB_EPStartXfer+0x14c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2250      	movs	r2, #80	; 0x50
 800345a:	5a9b      	ldrh	r3, [r3, r2]
 800345c:	b29b      	uxth	r3, r3
 800345e:	18e4      	adds	r4, r4, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	18e3      	adds	r3, r4, r3
 8003468:	4aa1      	ldr	r2, [pc, #644]	; (80036f0 <USB_EPStartXfer+0x3c4>)
 800346a:	4694      	mov	ip, r2
 800346c:	4463      	add	r3, ip
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003472:	b29a      	uxth	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003478:	234e      	movs	r3, #78	; 0x4e
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	8952      	ldrh	r2, [r2, #10]
 8003480:	801a      	strh	r2, [r3, #0]
 8003482:	e05f      	b.n	8003544 <USB_EPStartXfer+0x218>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	785b      	ldrb	r3, [r3, #1]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d140      	bne.n	800350e <USB_EPStartXfer+0x1e2>
 800348c:	687c      	ldr	r4, [r7, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2250      	movs	r2, #80	; 0x50
 8003492:	5a9b      	ldrh	r3, [r3, r2]
 8003494:	b29b      	uxth	r3, r3
 8003496:	18e4      	adds	r4, r4, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	18e3      	adds	r3, r4, r3
 80034a0:	4a92      	ldr	r2, [pc, #584]	; (80036ec <USB_EPStartXfer+0x3c0>)
 80034a2:	4694      	mov	ip, r2
 80034a4:	4463      	add	r3, ip
 80034a6:	61bb      	str	r3, [r7, #24]
 80034a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10e      	bne.n	80034cc <USB_EPStartXfer+0x1a0>
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	4a90      	ldr	r2, [pc, #576]	; (80036f4 <USB_EPStartXfer+0x3c8>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	801a      	strh	r2, [r3, #0]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	4a8d      	ldr	r2, [pc, #564]	; (80036f8 <USB_EPStartXfer+0x3cc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	801a      	strh	r2, [r3, #0]
 80034ca:	e036      	b.n	800353a <USB_EPStartXfer+0x20e>
 80034cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ce:	2b3d      	cmp	r3, #61	; 0x3d
 80034d0:	d810      	bhi.n	80034f4 <USB_EPStartXfer+0x1c8>
 80034d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	643b      	str	r3, [r7, #64]	; 0x40
 80034d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034da:	2201      	movs	r2, #1
 80034dc:	4013      	ands	r3, r2
 80034de:	d002      	beq.n	80034e6 <USB_EPStartXfer+0x1ba>
 80034e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e2:	3301      	adds	r3, #1
 80034e4:	643b      	str	r3, [r7, #64]	; 0x40
 80034e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	029b      	lsls	r3, r3, #10
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	801a      	strh	r2, [r3, #0]
 80034f2:	e022      	b.n	800353a <USB_EPStartXfer+0x20e>
 80034f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	643b      	str	r3, [r7, #64]	; 0x40
 80034fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	029b      	lsls	r3, r3, #10
 8003500:	b29b      	uxth	r3, r3
 8003502:	4a7d      	ldr	r2, [pc, #500]	; (80036f8 <USB_EPStartXfer+0x3cc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	b29a      	uxth	r2, r3
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	801a      	strh	r2, [r3, #0]
 800350c:	e015      	b.n	800353a <USB_EPStartXfer+0x20e>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	785b      	ldrb	r3, [r3, #1]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d111      	bne.n	800353a <USB_EPStartXfer+0x20e>
 8003516:	687c      	ldr	r4, [r7, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2250      	movs	r2, #80	; 0x50
 800351c:	5a9b      	ldrh	r3, [r3, r2]
 800351e:	b29b      	uxth	r3, r3
 8003520:	18e4      	adds	r4, r4, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	18e3      	adds	r3, r4, r3
 800352a:	4a70      	ldr	r2, [pc, #448]	; (80036ec <USB_EPStartXfer+0x3c0>)
 800352c:	4694      	mov	ip, r2
 800352e:	4463      	add	r3, ip
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003534:	b29a      	uxth	r2, r3
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800353a:	234e      	movs	r3, #78	; 0x4e
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	8912      	ldrh	r2, [r2, #8]
 8003542:	801a      	strh	r2, [r3, #0]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6959      	ldr	r1, [r3, #20]
 8003548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354a:	b29c      	uxth	r4, r3
 800354c:	234e      	movs	r3, #78	; 0x4e
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	881a      	ldrh	r2, [r3, #0]
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	0023      	movs	r3, r4
 8003556:	f000 faa9 	bl	8003aac <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	785b      	ldrb	r3, [r3, #1]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d113      	bne.n	800358a <USB_EPStartXfer+0x25e>
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	18d3      	adds	r3, r2, r3
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	4a62      	ldr	r2, [pc, #392]	; (80036fc <USB_EPStartXfer+0x3d0>)
 8003572:	4013      	ands	r3, r2
 8003574:	b29c      	uxth	r4, r3
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	18d3      	adds	r3, r2, r3
 8003580:	4a5f      	ldr	r2, [pc, #380]	; (8003700 <USB_EPStartXfer+0x3d4>)
 8003582:	4322      	orrs	r2, r4
 8003584:	b292      	uxth	r2, r2
 8003586:	801a      	strh	r2, [r3, #0]
 8003588:	e016      	b.n	80035b8 <USB_EPStartXfer+0x28c>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	785b      	ldrb	r3, [r3, #1]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d112      	bne.n	80035b8 <USB_EPStartXfer+0x28c>
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	18d3      	adds	r3, r2, r3
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	4a56      	ldr	r2, [pc, #344]	; (80036fc <USB_EPStartXfer+0x3d0>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	b29c      	uxth	r4, r3
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	18d3      	adds	r3, r2, r3
 80035b0:	4a54      	ldr	r2, [pc, #336]	; (8003704 <USB_EPStartXfer+0x3d8>)
 80035b2:	4322      	orrs	r2, r4
 80035b4:	b292      	uxth	r2, r2
 80035b6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	18d3      	adds	r3, r2, r3
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	4a50      	ldr	r2, [pc, #320]	; (8003708 <USB_EPStartXfer+0x3dc>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	b29c      	uxth	r4, r3
 80035cc:	2310      	movs	r3, #16
 80035ce:	4063      	eors	r3, r4
 80035d0:	b29c      	uxth	r4, r3
 80035d2:	2320      	movs	r3, #32
 80035d4:	4063      	eors	r3, r4
 80035d6:	b29c      	uxth	r4, r3
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	18d3      	adds	r3, r2, r3
 80035e2:	4a4a      	ldr	r2, [pc, #296]	; (800370c <USB_EPStartXfer+0x3e0>)
 80035e4:	4322      	orrs	r2, r4
 80035e6:	b292      	uxth	r2, r2
 80035e8:	801a      	strh	r2, [r3, #0]
 80035ea:	e13e      	b.n	800386a <USB_EPStartXfer+0x53e>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d909      	bls.n	800360c <USB_EPStartXfer+0x2e0>
    {
      len = ep->maxpacket;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003604:	1ad2      	subs	r2, r2, r3
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	619a      	str	r2, [r3, #24]
 800360a:	e005      	b.n	8003618 <USB_EPStartXfer+0x2ec>
    }
    else
    {
      len = ep->xfer_len;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	7b1b      	ldrb	r3, [r3, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d140      	bne.n	80036a2 <USB_EPStartXfer+0x376>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003620:	687c      	ldr	r4, [r7, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2250      	movs	r2, #80	; 0x50
 8003626:	5a9b      	ldrh	r3, [r3, r2]
 8003628:	b29b      	uxth	r3, r3
 800362a:	18e4      	adds	r4, r4, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	18e3      	adds	r3, r4, r3
 8003634:	4a2e      	ldr	r2, [pc, #184]	; (80036f0 <USB_EPStartXfer+0x3c4>)
 8003636:	4694      	mov	ip, r2
 8003638:	4463      	add	r3, ip
 800363a:	623b      	str	r3, [r7, #32]
 800363c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10e      	bne.n	8003660 <USB_EPStartXfer+0x334>
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	4a2b      	ldr	r2, [pc, #172]	; (80036f4 <USB_EPStartXfer+0x3c8>)
 8003648:	4013      	ands	r3, r2
 800364a:	b29a      	uxth	r2, r3
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	801a      	strh	r2, [r3, #0]
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	4a28      	ldr	r2, [pc, #160]	; (80036f8 <USB_EPStartXfer+0x3cc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	b29a      	uxth	r2, r3
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	801a      	strh	r2, [r3, #0]
 800365e:	e0e9      	b.n	8003834 <USB_EPStartXfer+0x508>
 8003660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003662:	2b3d      	cmp	r3, #61	; 0x3d
 8003664:	d810      	bhi.n	8003688 <USB_EPStartXfer+0x35c>
 8003666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800366c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366e:	2201      	movs	r2, #1
 8003670:	4013      	ands	r3, r2
 8003672:	d002      	beq.n	800367a <USB_EPStartXfer+0x34e>
 8003674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003676:	3301      	adds	r3, #1
 8003678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800367a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367c:	b29b      	uxth	r3, r3
 800367e:	029b      	lsls	r3, r3, #10
 8003680:	b29a      	uxth	r2, r3
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	801a      	strh	r2, [r3, #0]
 8003686:	e0d5      	b.n	8003834 <USB_EPStartXfer+0x508>
 8003688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003690:	b29b      	uxth	r3, r3
 8003692:	029b      	lsls	r3, r3, #10
 8003694:	b29b      	uxth	r3, r3
 8003696:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <USB_EPStartXfer+0x3cc>)
 8003698:	4313      	orrs	r3, r2
 800369a:	b29a      	uxth	r2, r3
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	801a      	strh	r2, [r3, #0]
 80036a0:	e0c8      	b.n	8003834 <USB_EPStartXfer+0x508>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	785b      	ldrb	r3, [r3, #1]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d153      	bne.n	8003752 <USB_EPStartXfer+0x426>
 80036aa:	687c      	ldr	r4, [r7, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2250      	movs	r2, #80	; 0x50
 80036b0:	5a9b      	ldrh	r3, [r3, r2]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	18e4      	adds	r4, r4, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	18e3      	adds	r3, r4, r3
 80036be:	4a0b      	ldr	r2, [pc, #44]	; (80036ec <USB_EPStartXfer+0x3c0>)
 80036c0:	4694      	mov	ip, r2
 80036c2:	4463      	add	r3, ip
 80036c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d121      	bne.n	8003710 <USB_EPStartXfer+0x3e4>
 80036cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	4a08      	ldr	r2, [pc, #32]	; (80036f4 <USB_EPStartXfer+0x3c8>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	801a      	strh	r2, [r3, #0]
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	4a06      	ldr	r2, [pc, #24]	; (80036f8 <USB_EPStartXfer+0x3cc>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	801a      	strh	r2, [r3, #0]
 80036e8:	e049      	b.n	800377e <USB_EPStartXfer+0x452>
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	00000402 	.word	0x00000402
 80036f0:	00000406 	.word	0x00000406
 80036f4:	ffff83ff 	.word	0xffff83ff
 80036f8:	ffff8000 	.word	0xffff8000
 80036fc:	ffff8f8f 	.word	0xffff8f8f
 8003700:	ffff80c0 	.word	0xffff80c0
 8003704:	ffffc080 	.word	0xffffc080
 8003708:	ffff8fbf 	.word	0xffff8fbf
 800370c:	ffff8080 	.word	0xffff8080
 8003710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003712:	2b3d      	cmp	r3, #61	; 0x3d
 8003714:	d810      	bhi.n	8003738 <USB_EPStartXfer+0x40c>
 8003716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	63bb      	str	r3, [r7, #56]	; 0x38
 800371c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800371e:	2201      	movs	r2, #1
 8003720:	4013      	ands	r3, r2
 8003722:	d002      	beq.n	800372a <USB_EPStartXfer+0x3fe>
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	3301      	adds	r3, #1
 8003728:	63bb      	str	r3, [r7, #56]	; 0x38
 800372a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372c:	b29b      	uxth	r3, r3
 800372e:	029b      	lsls	r3, r3, #10
 8003730:	b29a      	uxth	r2, r3
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	801a      	strh	r2, [r3, #0]
 8003736:	e022      	b.n	800377e <USB_EPStartXfer+0x452>
 8003738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	63bb      	str	r3, [r7, #56]	; 0x38
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	b29b      	uxth	r3, r3
 8003742:	029b      	lsls	r3, r3, #10
 8003744:	b29b      	uxth	r3, r3
 8003746:	4a4b      	ldr	r2, [pc, #300]	; (8003874 <USB_EPStartXfer+0x548>)
 8003748:	4313      	orrs	r3, r2
 800374a:	b29a      	uxth	r2, r3
 800374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374e:	801a      	strh	r2, [r3, #0]
 8003750:	e015      	b.n	800377e <USB_EPStartXfer+0x452>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	785b      	ldrb	r3, [r3, #1]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d111      	bne.n	800377e <USB_EPStartXfer+0x452>
 800375a:	687c      	ldr	r4, [r7, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2250      	movs	r2, #80	; 0x50
 8003760:	5a9b      	ldrh	r3, [r3, r2]
 8003762:	b29b      	uxth	r3, r3
 8003764:	18e4      	adds	r4, r4, r3
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	18e3      	adds	r3, r4, r3
 800376e:	4a42      	ldr	r2, [pc, #264]	; (8003878 <USB_EPStartXfer+0x54c>)
 8003770:	4694      	mov	ip, r2
 8003772:	4463      	add	r3, ip
 8003774:	633b      	str	r3, [r7, #48]	; 0x30
 8003776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003778:	b29a      	uxth	r2, r3
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	801a      	strh	r2, [r3, #0]
 800377e:	687c      	ldr	r4, [r7, #4]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	785b      	ldrb	r3, [r3, #1]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d140      	bne.n	800380a <USB_EPStartXfer+0x4de>
 8003788:	687c      	ldr	r4, [r7, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2250      	movs	r2, #80	; 0x50
 800378e:	5a9b      	ldrh	r3, [r3, r2]
 8003790:	b29b      	uxth	r3, r3
 8003792:	18e4      	adds	r4, r4, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	18e3      	adds	r3, r4, r3
 800379c:	4a37      	ldr	r2, [pc, #220]	; (800387c <USB_EPStartXfer+0x550>)
 800379e:	4694      	mov	ip, r2
 80037a0:	4463      	add	r3, ip
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
 80037a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10e      	bne.n	80037c8 <USB_EPStartXfer+0x49c>
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	4a34      	ldr	r2, [pc, #208]	; (8003880 <USB_EPStartXfer+0x554>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	801a      	strh	r2, [r3, #0]
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	4a2d      	ldr	r2, [pc, #180]	; (8003874 <USB_EPStartXfer+0x548>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	801a      	strh	r2, [r3, #0]
 80037c6:	e035      	b.n	8003834 <USB_EPStartXfer+0x508>
 80037c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ca:	2b3d      	cmp	r3, #61	; 0x3d
 80037cc:	d810      	bhi.n	80037f0 <USB_EPStartXfer+0x4c4>
 80037ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	637b      	str	r3, [r7, #52]	; 0x34
 80037d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d6:	2201      	movs	r2, #1
 80037d8:	4013      	ands	r3, r2
 80037da:	d002      	beq.n	80037e2 <USB_EPStartXfer+0x4b6>
 80037dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037de:	3301      	adds	r3, #1
 80037e0:	637b      	str	r3, [r7, #52]	; 0x34
 80037e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	029b      	lsls	r3, r3, #10
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	801a      	strh	r2, [r3, #0]
 80037ee:	e021      	b.n	8003834 <USB_EPStartXfer+0x508>
 80037f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	637b      	str	r3, [r7, #52]	; 0x34
 80037f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	029b      	lsls	r3, r3, #10
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <USB_EPStartXfer+0x548>)
 8003800:	4313      	orrs	r3, r2
 8003802:	b29a      	uxth	r2, r3
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	801a      	strh	r2, [r3, #0]
 8003808:	e014      	b.n	8003834 <USB_EPStartXfer+0x508>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	785b      	ldrb	r3, [r3, #1]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d110      	bne.n	8003834 <USB_EPStartXfer+0x508>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2250      	movs	r2, #80	; 0x50
 8003816:	5a9b      	ldrh	r3, [r3, r2]
 8003818:	b29b      	uxth	r3, r3
 800381a:	18e4      	adds	r4, r4, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	18e3      	adds	r3, r4, r3
 8003824:	4a15      	ldr	r2, [pc, #84]	; (800387c <USB_EPStartXfer+0x550>)
 8003826:	4694      	mov	ip, r2
 8003828:	4463      	add	r3, ip
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28
 800382c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800382e:	b29a      	uxth	r2, r3
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	18d3      	adds	r3, r2, r3
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	b29b      	uxth	r3, r3
 8003842:	4a10      	ldr	r2, [pc, #64]	; (8003884 <USB_EPStartXfer+0x558>)
 8003844:	4013      	ands	r3, r2
 8003846:	b29c      	uxth	r4, r3
 8003848:	2380      	movs	r3, #128	; 0x80
 800384a:	015b      	lsls	r3, r3, #5
 800384c:	4063      	eors	r3, r4
 800384e:	b29c      	uxth	r4, r3
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	019b      	lsls	r3, r3, #6
 8003854:	4063      	eors	r3, r4
 8003856:	b29c      	uxth	r4, r3
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	18d3      	adds	r3, r2, r3
 8003862:	4a09      	ldr	r2, [pc, #36]	; (8003888 <USB_EPStartXfer+0x55c>)
 8003864:	4322      	orrs	r2, r4
 8003866:	b292      	uxth	r2, r2
 8003868:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	b015      	add	sp, #84	; 0x54
 8003872:	bd90      	pop	{r4, r7, pc}
 8003874:	ffff8000 	.word	0xffff8000
 8003878:	00000402 	.word	0x00000402
 800387c:	00000406 	.word	0x00000406
 8003880:	ffff83ff 	.word	0xffff83ff
 8003884:	ffffbf8f 	.word	0xffffbf8f
 8003888:	ffff8080 	.word	0xffff8080

0800388c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	785b      	ldrb	r3, [r3, #1]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d016      	beq.n	80038cc <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	18d3      	adds	r3, r2, r3
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	4a15      	ldr	r2, [pc, #84]	; (8003904 <USB_EPSetStall+0x78>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	b29c      	uxth	r4, r3
 80038b2:	2310      	movs	r3, #16
 80038b4:	4063      	eors	r3, r4
 80038b6:	b29c      	uxth	r4, r3
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	18d3      	adds	r3, r2, r3
 80038c2:	4a11      	ldr	r2, [pc, #68]	; (8003908 <USB_EPSetStall+0x7c>)
 80038c4:	4322      	orrs	r2, r4
 80038c6:	b292      	uxth	r2, r2
 80038c8:	801a      	strh	r2, [r3, #0]
 80038ca:	e016      	b.n	80038fa <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	18d3      	adds	r3, r2, r3
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	4a0c      	ldr	r2, [pc, #48]	; (800390c <USB_EPSetStall+0x80>)
 80038dc:	4013      	ands	r3, r2
 80038de:	b29c      	uxth	r4, r3
 80038e0:	2380      	movs	r3, #128	; 0x80
 80038e2:	015b      	lsls	r3, r3, #5
 80038e4:	4063      	eors	r3, r4
 80038e6:	b29c      	uxth	r4, r3
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	18d3      	adds	r3, r2, r3
 80038f2:	4a05      	ldr	r2, [pc, #20]	; (8003908 <USB_EPSetStall+0x7c>)
 80038f4:	4322      	orrs	r2, r4
 80038f6:	b292      	uxth	r2, r2
 80038f8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	0018      	movs	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	b003      	add	sp, #12
 8003902:	bd90      	pop	{r4, r7, pc}
 8003904:	ffff8fbf 	.word	0xffff8fbf
 8003908:	ffff8080 	.word	0xffff8080
 800390c:	ffffbf8f 	.word	0xffffbf8f

08003910 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	785b      	ldrb	r3, [r3, #1]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d037      	beq.n	8003992 <USB_EPClearStall+0x82>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	18d3      	adds	r3, r2, r3
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	b29c      	uxth	r4, r3
 8003930:	0022      	movs	r2, r4
 8003932:	2340      	movs	r3, #64	; 0x40
 8003934:	4013      	ands	r3, r2
 8003936:	d012      	beq.n	800395e <USB_EPClearStall+0x4e>
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	18d3      	adds	r3, r2, r3
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	b29b      	uxth	r3, r3
 8003946:	4a32      	ldr	r2, [pc, #200]	; (8003a10 <USB_EPClearStall+0x100>)
 8003948:	4013      	ands	r3, r2
 800394a:	b29c      	uxth	r4, r3
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	18d3      	adds	r3, r2, r3
 8003956:	4a2f      	ldr	r2, [pc, #188]	; (8003a14 <USB_EPClearStall+0x104>)
 8003958:	4322      	orrs	r2, r4
 800395a:	b292      	uxth	r2, r2
 800395c:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	18d3      	adds	r3, r2, r3
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	b29b      	uxth	r3, r3
 800396c:	4a2a      	ldr	r2, [pc, #168]	; (8003a18 <USB_EPClearStall+0x108>)
 800396e:	4013      	ands	r3, r2
 8003970:	b29c      	uxth	r4, r3
 8003972:	2310      	movs	r3, #16
 8003974:	4063      	eors	r3, r4
 8003976:	b29c      	uxth	r4, r3
 8003978:	2320      	movs	r3, #32
 800397a:	4063      	eors	r3, r4
 800397c:	b29c      	uxth	r4, r3
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	18d3      	adds	r3, r2, r3
 8003988:	4a24      	ldr	r2, [pc, #144]	; (8003a1c <USB_EPClearStall+0x10c>)
 800398a:	4322      	orrs	r2, r4
 800398c:	b292      	uxth	r2, r2
 800398e:	801a      	strh	r2, [r3, #0]
 8003990:	e039      	b.n	8003a06 <USB_EPClearStall+0xf6>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	18d3      	adds	r3, r2, r3
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b29c      	uxth	r4, r3
 80039a0:	0022      	movs	r2, r4
 80039a2:	2380      	movs	r3, #128	; 0x80
 80039a4:	01db      	lsls	r3, r3, #7
 80039a6:	4013      	ands	r3, r2
 80039a8:	d012      	beq.n	80039d0 <USB_EPClearStall+0xc0>
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	18d3      	adds	r3, r2, r3
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	4a15      	ldr	r2, [pc, #84]	; (8003a10 <USB_EPClearStall+0x100>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	b29c      	uxth	r4, r3
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	18d3      	adds	r3, r2, r3
 80039c8:	4a15      	ldr	r2, [pc, #84]	; (8003a20 <USB_EPClearStall+0x110>)
 80039ca:	4322      	orrs	r2, r4
 80039cc:	b292      	uxth	r2, r2
 80039ce:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	18d3      	adds	r3, r2, r3
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	4a11      	ldr	r2, [pc, #68]	; (8003a24 <USB_EPClearStall+0x114>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	b29c      	uxth	r4, r3
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	015b      	lsls	r3, r3, #5
 80039e8:	4063      	eors	r3, r4
 80039ea:	b29c      	uxth	r4, r3
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	019b      	lsls	r3, r3, #6
 80039f0:	4063      	eors	r3, r4
 80039f2:	b29c      	uxth	r4, r3
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	18d3      	adds	r3, r2, r3
 80039fe:	4a07      	ldr	r2, [pc, #28]	; (8003a1c <USB_EPClearStall+0x10c>)
 8003a00:	4322      	orrs	r2, r4
 8003a02:	b292      	uxth	r2, r2
 8003a04:	801a      	strh	r2, [r3, #0]
  }
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	0018      	movs	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b003      	add	sp, #12
 8003a0e:	bd90      	pop	{r4, r7, pc}
 8003a10:	ffff8f8f 	.word	0xffff8f8f
 8003a14:	ffff80c0 	.word	0xffff80c0
 8003a18:	ffff8fbf 	.word	0xffff8fbf
 8003a1c:	ffff8080 	.word	0xffff8080
 8003a20:	ffffc080 	.word	0xffffc080
 8003a24:	ffffbf8f 	.word	0xffffbf8f

08003a28 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	000a      	movs	r2, r1
 8003a32:	1cfb      	adds	r3, r7, #3
 8003a34:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8003a36:	1cfb      	adds	r3, r7, #3
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	224c      	movs	r2, #76	; 0x4c
 8003a42:	2180      	movs	r1, #128	; 0x80
 8003a44:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	0018      	movs	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2258      	movs	r2, #88	; 0x58
 8003a5c:	5a9b      	ldrh	r3, [r3, r2]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <USB_DevConnect+0x28>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	b299      	uxth	r1, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2258      	movs	r2, #88	; 0x58
 8003a6a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	0018      	movs	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b002      	add	sp, #8
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	ffff8000 	.word	0xffff8000

08003a7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2244      	movs	r2, #68	; 0x44
 8003a88:	5a9b      	ldrh	r3, [r3, r2]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b004      	add	sp, #16
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b002      	add	sp, #8
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08c      	sub	sp, #48	; 0x30
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	1dbb      	adds	r3, r7, #6
 8003aba:	801a      	strh	r2, [r3, #0]
 8003abc:	1d3b      	adds	r3, r7, #4
 8003abe:	1c0a      	adds	r2, r1, #0
 8003ac0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003ac2:	1d3b      	adds	r3, r7, #4
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	085b      	lsrs	r3, r3, #1
 8003aca:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003ad4:	1dbb      	adds	r3, r7, #6
 8003ad6:	881a      	ldrh	r2, [r3, #0]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	18d3      	adds	r3, r2, r3
 8003adc:	2280      	movs	r2, #128	; 0x80
 8003ade:	00d2      	lsls	r2, r2, #3
 8003ae0:	4694      	mov	ip, r2
 8003ae2:	4463      	add	r3, ip
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aea:	e01b      	b.n	8003b24 <USB_WritePMA+0x78>
  {
    temp1 = (uint16_t) * pBuf;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	3301      	adds	r3, #1
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	001a      	movs	r2, r3
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	3302      	adds	r3, #2
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	3b01      	subs	r3, #1
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e0      	bne.n	8003aec <USB_WritePMA+0x40>
  }
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b00c      	add	sp, #48	; 0x30
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b08a      	sub	sp, #40	; 0x28
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	1dbb      	adds	r3, r7, #6
 8003b40:	801a      	strh	r2, [r3, #0]
 8003b42:	1d3b      	adds	r3, r7, #4
 8003b44:	1c0a      	adds	r2, r1, #0
 8003b46:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003b48:	1d3b      	adds	r3, r7, #4
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	085b      	lsrs	r3, r3, #1
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b5a:	1dbb      	adds	r3, r7, #6
 8003b5c:	881a      	ldrh	r2, [r3, #0]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	18d3      	adds	r3, r2, r3
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	00d2      	lsls	r2, r2, #3
 8003b66:	4694      	mov	ip, r2
 8003b68:	4463      	add	r3, ip
 8003b6a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b70:	e017      	b.n	8003ba2 <USB_ReadPMA+0x70>
  {
    temp = *pdwVal;
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	3302      	adds	r3, #2
 8003b7c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e4      	bne.n	8003b72 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003ba8:	1d3b      	adds	r3, r7, #4
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	2201      	movs	r2, #1
 8003bae:	4013      	ands	r3, r2
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d006      	beq.n	8003bc4 <USB_ReadPMA+0x92>
  {
    temp = *pdwVal;
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	701a      	strb	r2, [r3, #0]
  }
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b00a      	add	sp, #40	; 0x28
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	000a      	movs	r2, r1
 8003bd6:	1cfb      	adds	r3, r7, #3
 8003bd8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8003bda:	230f      	movs	r3, #15
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	7c1b      	ldrb	r3, [r3, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d116      	bne.n	8003c18 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	2181      	movs	r1, #129	; 0x81
 8003bf4:	f003 fafa 	bl	80071ec <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	2101      	movs	r1, #1
 8003c08:	f003 faf0 	bl	80071ec <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	23ac      	movs	r3, #172	; 0xac
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2101      	movs	r1, #1
 8003c14:	50d1      	str	r1, [r2, r3]
 8003c16:	e013      	b.n	8003c40 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	2340      	movs	r3, #64	; 0x40
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	2181      	movs	r1, #129	; 0x81
 8003c20:	f003 fae4 	bl	80071ec <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	2340      	movs	r3, #64	; 0x40
 8003c2e:	2202      	movs	r2, #2
 8003c30:	2101      	movs	r1, #1
 8003c32:	f003 fadb 	bl	80071ec <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	23ac      	movs	r3, #172	; 0xac
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	2308      	movs	r3, #8
 8003c44:	2203      	movs	r2, #3
 8003c46:	2182      	movs	r1, #130	; 0x82
 8003c48:	f003 fad0 	bl	80071ec <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003c52:	2387      	movs	r3, #135	; 0x87
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	0018      	movs	r0, r3
 8003c58:	f003 fc60 	bl	800751c <USBD_static_malloc>
 8003c5c:	0001      	movs	r1, r0
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	23a4      	movs	r3, #164	; 0xa4
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	50d1      	str	r1, [r2, r3]

  if(pdev->pClassData == NULL)
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	23a4      	movs	r3, #164	; 0xa4
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	58d3      	ldr	r3, [r2, r3]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d104      	bne.n	8003c7c <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8003c72:	230f      	movs	r3, #15
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	2201      	movs	r2, #1
 8003c78:	701a      	strb	r2, [r3, #0]
 8003c7a:	e02c      	b.n	8003cd6 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	23a4      	movs	r3, #164	; 0xa4
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	58d3      	ldr	r3, [r2, r3]
 8003c84:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	23a5      	movs	r3, #165	; 0xa5
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	58d3      	ldr	r3, [r2, r3]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	2385      	movs	r3, #133	; 0x85
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	2100      	movs	r1, #0
 8003c9a:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	2386      	movs	r3, #134	; 0x86
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	50d1      	str	r1, [r2, r3]

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	7c1b      	ldrb	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	2381      	movs	r3, #129	; 0x81
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	58d2      	ldr	r2, [r2, r3]
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	f003 fbdf 	bl	8007480 <USBD_LL_PrepareReceive>
 8003cc2:	e008      	b.n	8003cd6 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	2381      	movs	r3, #129	; 0x81
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	58d2      	ldr	r2, [r2, r3]
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	2340      	movs	r3, #64	; 0x40
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	f003 fbd5 	bl	8007480 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003cd6:	230f      	movs	r3, #15
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	781b      	ldrb	r3, [r3, #0]
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b004      	add	sp, #16
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	000a      	movs	r2, r1
 8003cee:	1cfb      	adds	r3, r7, #3
 8003cf0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8003cf2:	230f      	movs	r3, #15
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2181      	movs	r1, #129	; 0x81
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f003 faab 	bl	800725a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f003 faa3 	bl	800725a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	23ac      	movs	r3, #172	; 0xac
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2182      	movs	r1, #130	; 0x82
 8003d22:	0018      	movs	r0, r3
 8003d24:	f003 fa99 	bl	800725a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	23a4      	movs	r3, #164	; 0xa4
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	58d3      	ldr	r3, [r2, r3]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d011      	beq.n	8003d5e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	23a5      	movs	r3, #165	; 0xa5
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	58d3      	ldr	r3, [r2, r3]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	23a4      	movs	r3, #164	; 0xa4
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	58d3      	ldr	r3, [r2, r3]
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f003 fbf0 	bl	8007534 <USBD_static_free>
    pdev->pClassData = NULL;
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	23a4      	movs	r3, #164	; 0xa4
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8003d5e:	230f      	movs	r3, #15
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	781b      	ldrb	r3, [r3, #0]
}
 8003d64:	0018      	movs	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b004      	add	sp, #16
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	23a4      	movs	r3, #164	; 0xa4
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	58d3      	ldr	r3, [r2, r3]
 8003d7e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003d80:	230f      	movs	r3, #15
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8003d88:	230c      	movs	r3, #12
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8003d90:	2317      	movs	r3, #23
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	2200      	movs	r2, #0
 8003d96:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	2360      	movs	r3, #96	; 0x60
 8003da0:	4013      	ands	r3, r2
 8003da2:	d03d      	beq.n	8003e20 <USBD_CDC_Setup+0xb4>
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d000      	beq.n	8003daa <USBD_CDC_Setup+0x3e>
 8003da8:	e092      	b.n	8003ed0 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	88db      	ldrh	r3, [r3, #6]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d02b      	beq.n	8003e0a <USBD_CDC_Setup+0x9e>
    {
      if (req->bmRequest & 0x80U)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	b25b      	sxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	da12      	bge.n	8003de2 <USBD_CDC_Setup+0x76>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	23a5      	movs	r3, #165	; 0xa5
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	58d3      	ldr	r3, [r2, r3]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8003dca:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	88d2      	ldrh	r2, [r2, #6]
 8003dd0:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003dd2:	6939      	ldr	r1, [r7, #16]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	88da      	ldrh	r2, [r3, #6]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f001 fb12 	bl	8005404 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8003de0:	e081      	b.n	8003ee6 <USBD_CDC_Setup+0x17a>
        hcdc->CmdOpCode = req->bRequest;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	7859      	ldrb	r1, [r3, #1]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	54d1      	strb	r1, [r2, r3]
        hcdc->CmdLength = (uint8_t)req->wLength;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	88db      	ldrh	r3, [r3, #6]
 8003df2:	b2d9      	uxtb	r1, r3
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4a3f      	ldr	r2, [pc, #252]	; (8003ef4 <USBD_CDC_Setup+0x188>)
 8003df8:	5499      	strb	r1, [r3, r2]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003dfa:	6939      	ldr	r1, [r7, #16]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	88da      	ldrh	r2, [r3, #6]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	0018      	movs	r0, r3
 8003e04:	f001 fb31 	bl	800546a <USBD_CtlPrepareRx>
    break;
 8003e08:	e06d      	b.n	8003ee6 <USBD_CDC_Setup+0x17a>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	23a5      	movs	r3, #165	; 0xa5
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	58d3      	ldr	r3, [r2, r3]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	7850      	ldrb	r0, [r2, #1]
 8003e18:	6839      	ldr	r1, [r7, #0]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	4798      	blx	r3
    break;
 8003e1e:	e062      	b.n	8003ee6 <USBD_CDC_Setup+0x17a>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	785b      	ldrb	r3, [r3, #1]
 8003e24:	2b0a      	cmp	r3, #10
 8003e26:	d01c      	beq.n	8003e62 <USBD_CDC_Setup+0xf6>
 8003e28:	2b0b      	cmp	r3, #11
 8003e2a:	d033      	beq.n	8003e94 <USBD_CDC_Setup+0x128>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d142      	bne.n	8003eb6 <USBD_CDC_Setup+0x14a>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	239d      	movs	r3, #157	; 0x9d
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	5cd3      	ldrb	r3, [r2, r3]
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d107      	bne.n	8003e4c <USBD_CDC_Setup+0xe0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8003e3c:	230c      	movs	r3, #12
 8003e3e:	18f9      	adds	r1, r7, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	0018      	movs	r0, r3
 8003e46:	f001 fadd 	bl	8005404 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8003e4a:	e040      	b.n	8003ece <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	0011      	movs	r1, r2
 8003e52:	0018      	movs	r0, r3
 8003e54:	f001 fa57 	bl	8005306 <USBD_CtlError>
			  ret = USBD_FAIL;
 8003e58:	2317      	movs	r3, #23
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	701a      	strb	r2, [r3, #0]
      break;
 8003e60:	e035      	b.n	8003ece <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	239d      	movs	r3, #157	; 0x9d
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	5cd3      	ldrb	r3, [r2, r3]
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d107      	bne.n	8003e7e <USBD_CDC_Setup+0x112>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8003e6e:	230f      	movs	r3, #15
 8003e70:	18f9      	adds	r1, r7, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	0018      	movs	r0, r3
 8003e78:	f001 fac4 	bl	8005404 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8003e7c:	e027      	b.n	8003ece <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	0011      	movs	r1, r2
 8003e84:	0018      	movs	r0, r3
 8003e86:	f001 fa3e 	bl	8005306 <USBD_CtlError>
			  ret = USBD_FAIL;
 8003e8a:	2317      	movs	r3, #23
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	2202      	movs	r2, #2
 8003e90:	701a      	strb	r2, [r3, #0]
      break;
 8003e92:	e01c      	b.n	8003ece <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	239d      	movs	r3, #157	; 0x9d
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	5cd3      	ldrb	r3, [r2, r3]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d015      	beq.n	8003ecc <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError (pdev, req);
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	0011      	movs	r1, r2
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f001 fa2d 	bl	8005306 <USBD_CtlError>
			  ret = USBD_FAIL;
 8003eac:	2317      	movs	r3, #23
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003eb4:	e00a      	b.n	8003ecc <USBD_CDC_Setup+0x160>

    default:
      USBD_CtlError (pdev, req);
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	0011      	movs	r1, r2
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f001 fa22 	bl	8005306 <USBD_CtlError>
      ret = USBD_FAIL;
 8003ec2:	2317      	movs	r3, #23
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	701a      	strb	r2, [r3, #0]
      break;
 8003eca:	e000      	b.n	8003ece <USBD_CDC_Setup+0x162>
      break;
 8003ecc:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8003ece:	e00a      	b.n	8003ee6 <USBD_CDC_Setup+0x17a>

  default:
    USBD_CtlError (pdev, req);
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	0011      	movs	r1, r2
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f001 fa15 	bl	8005306 <USBD_CtlError>
    ret = USBD_FAIL;
 8003edc:	2317      	movs	r3, #23
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	701a      	strb	r2, [r3, #0]
    break;
 8003ee4:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8003ee6:	2317      	movs	r3, #23
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	781b      	ldrb	r3, [r3, #0]
}
 8003eec:	0018      	movs	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b006      	add	sp, #24
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	00000201 	.word	0x00000201

08003ef8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	000a      	movs	r2, r1
 8003f02:	1cfb      	adds	r3, r7, #3
 8003f04:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	23a4      	movs	r3, #164	; 0xa4
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	58d3      	ldr	r3, [r2, r3]
 8003f0e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	23a6      	movs	r3, #166	; 0xa6
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	58d3      	ldr	r3, [r2, r3]
 8003f18:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	23a4      	movs	r3, #164	; 0xa4
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	58d3      	ldr	r3, [r2, r3]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d03b      	beq.n	8003f9e <USBD_CDC_DataIn+0xa6>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003f26:	1cfb      	adds	r3, r7, #3
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	0013      	movs	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	189b      	adds	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	18cb      	adds	r3, r1, r3
 8003f36:	331c      	adds	r3, #28
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d028      	beq.n	8003f90 <USBD_CDC_DataIn+0x98>
 8003f3e:	1cfb      	adds	r3, r7, #3
 8003f40:	781a      	ldrb	r2, [r3, #0]
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	0013      	movs	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	189b      	adds	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	18cb      	adds	r3, r1, r3
 8003f4e:	331c      	adds	r3, #28
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	1cfb      	adds	r3, r7, #3
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	015b      	lsls	r3, r3, #5
 8003f5a:	18d3      	adds	r3, r2, r3
 8003f5c:	3338      	adds	r3, #56	; 0x38
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	0019      	movs	r1, r3
 8003f62:	f7fc f957 	bl	8000214 <__aeabi_uidivmod>
 8003f66:	1e0b      	subs	r3, r1, #0
 8003f68:	d112      	bne.n	8003f90 <USBD_CDC_DataIn+0x98>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003f6a:	1cfb      	adds	r3, r7, #3
 8003f6c:	781a      	ldrb	r2, [r3, #0]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	0013      	movs	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	189b      	adds	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	18cb      	adds	r3, r1, r3
 8003f7a:	331c      	adds	r3, #28
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8003f80:	1cfb      	adds	r3, r7, #3
 8003f82:	7819      	ldrb	r1, [r3, #0]
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	2300      	movs	r3, #0
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f003 fa41 	bl	8007410 <USBD_LL_Transmit>
 8003f8e:	e004      	b.n	8003f9a <USBD_CDC_DataIn+0xa2>
    }
    else
    {
      hcdc->TxState = 0U;
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	2385      	movs	r3, #133	; 0x85
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	2100      	movs	r1, #0
 8003f98:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e000      	b.n	8003fa0 <USBD_CDC_DataIn+0xa8>
  }
  else
  {
    return USBD_FAIL;
 8003f9e:	2302      	movs	r3, #2
  }
}
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b004      	add	sp, #16
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	000a      	movs	r2, r1
 8003fb2:	1cfb      	adds	r3, r7, #3
 8003fb4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	23a4      	movs	r3, #164	; 0xa4
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	58d3      	ldr	r3, [r2, r3]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003fc0:	1cfb      	adds	r3, r7, #3
 8003fc2:	781a      	ldrb	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f003 fa91 	bl	80074f0 <USBD_LL_GetRxDataSize>
 8003fce:	0001      	movs	r1, r0
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	2383      	movs	r3, #131	; 0x83
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	23a4      	movs	r3, #164	; 0xa4
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	58d3      	ldr	r3, [r2, r3]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d011      	beq.n	8004008 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	23a5      	movs	r3, #165	; 0xa5
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	58d3      	ldr	r3, [r2, r3]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	2281      	movs	r2, #129	; 0x81
 8003ff2:	0092      	lsls	r2, r2, #2
 8003ff4:	5888      	ldr	r0, [r1, r2]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	2183      	movs	r1, #131	; 0x83
 8003ffa:	0089      	lsls	r1, r1, #2
 8003ffc:	468c      	mov	ip, r1
 8003ffe:	4462      	add	r2, ip
 8004000:	0011      	movs	r1, r2
 8004002:	4798      	blx	r3

    return USBD_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	e000      	b.n	800400a <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8004008:	2302      	movs	r3, #2
  }
}
 800400a:	0018      	movs	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	b004      	add	sp, #16
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	23a4      	movs	r3, #164	; 0xa4
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	58d3      	ldr	r3, [r2, r3]
 8004024:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	23a5      	movs	r3, #165	; 0xa5
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	58d3      	ldr	r3, [r2, r3]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01a      	beq.n	8004068 <USBD_CDC_EP0_RxReady+0x54>
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	5cd3      	ldrb	r3, [r2, r3]
 800403a:	2bff      	cmp	r3, #255	; 0xff
 800403c:	d014      	beq.n	8004068 <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	23a5      	movs	r3, #165	; 0xa5
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	58d3      	ldr	r3, [r2, r3]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	68f9      	ldr	r1, [r7, #12]
 800404a:	2280      	movs	r2, #128	; 0x80
 800404c:	0092      	lsls	r2, r2, #2
 800404e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8004050:	68fc      	ldr	r4, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4907      	ldr	r1, [pc, #28]	; (8004074 <USBD_CDC_EP0_RxReady+0x60>)
 8004056:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004058:	b292      	uxth	r2, r2
 800405a:	0021      	movs	r1, r4
 800405c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	2380      	movs	r3, #128	; 0x80
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	21ff      	movs	r1, #255	; 0xff
 8004066:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	0018      	movs	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	b005      	add	sp, #20
 8004070:	bd90      	pop	{r4, r7, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	00000201 	.word	0x00000201

08004078 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2243      	movs	r2, #67	; 0x43
 8004084:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004086:	4b02      	ldr	r3, [pc, #8]	; (8004090 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b002      	add	sp, #8
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20000088 	.word	0x20000088

08004094 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2243      	movs	r2, #67	; 0x43
 80040a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80040a2:	4b02      	ldr	r3, [pc, #8]	; (80040ac <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80040a4:	0018      	movs	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b002      	add	sp, #8
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000044 	.word	0x20000044

080040b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2243      	movs	r2, #67	; 0x43
 80040bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80040be:	4b02      	ldr	r3, [pc, #8]	; (80040c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b002      	add	sp, #8
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	200000cc 	.word	0x200000cc

080040cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	220a      	movs	r2, #10
 80040d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80040da:	4b02      	ldr	r3, [pc, #8]	; (80040e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80040dc:	0018      	movs	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	b002      	add	sp, #8
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20000000 	.word	0x20000000

080040e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80040f2:	230f      	movs	r3, #15
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	2202      	movs	r2, #2
 80040f8:	701a      	strb	r2, [r3, #0]

  if(fops != NULL)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData= fops;
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	23a5      	movs	r3, #165	; 0xa5
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	6839      	ldr	r1, [r7, #0]
 8004108:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800410a:	230f      	movs	r3, #15
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004112:	230f      	movs	r3, #15
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	781b      	ldrb	r3, [r3, #0]
}
 8004118:	0018      	movs	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	b004      	add	sp, #16
 800411e:	bd80      	pop	{r7, pc}

08004120 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	1dbb      	adds	r3, r7, #6
 800412c:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	23a4      	movs	r3, #164	; 0xa4
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	58d3      	ldr	r3, [r2, r3]
 8004136:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	2382      	movs	r3, #130	; 0x82
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8004142:	1dbb      	adds	r3, r7, #6
 8004144:	8819      	ldrh	r1, [r3, #0]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	2384      	movs	r3, #132	; 0x84
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	0018      	movs	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	b006      	add	sp, #24
 8004156:	bd80      	pop	{r7, pc}

08004158 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	23a4      	movs	r3, #164	; 0xa4
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	58d3      	ldr	r3, [r2, r3]
 800416a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	2381      	movs	r3, #129	; 0x81
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	6839      	ldr	r1, [r7, #0]
 8004174:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b004      	add	sp, #16
 800417e:	bd80      	pop	{r7, pc}

08004180 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	23a4      	movs	r3, #164	; 0xa4
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	58d3      	ldr	r3, [r2, r3]
 8004190:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	23a4      	movs	r3, #164	; 0xa4
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	58d3      	ldr	r3, [r2, r3]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d022      	beq.n	80041e4 <USBD_CDC_TransmitPacket+0x64>
  {
    if(hcdc->TxState == 0U)
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	2385      	movs	r3, #133	; 0x85
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	58d3      	ldr	r3, [r2, r3]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d11a      	bne.n	80041e0 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	2385      	movs	r3, #133	; 0x85
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	2101      	movs	r1, #1
 80041b2:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	2384      	movs	r3, #132	; 0x84
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	58d2      	ldr	r2, [r2, r3]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	2382      	movs	r3, #130	; 0x82
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	2384      	movs	r3, #132	; 0x84
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	000a      	movs	r2, r1
 80041d6:	2181      	movs	r1, #129	; 0x81
 80041d8:	f003 f91a 	bl	8007410 <USBD_LL_Transmit>

      return USBD_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	e002      	b.n	80041e6 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 80041e4:	2302      	movs	r3, #2
  }
}
 80041e6:	0018      	movs	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b004      	add	sp, #16
 80041ec:	bd80      	pop	{r7, pc}

080041ee <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	23a4      	movs	r3, #164	; 0xa4
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	58d3      	ldr	r3, [r2, r3]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	23a4      	movs	r3, #164	; 0xa4
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	58d3      	ldr	r3, [r2, r3]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d019      	beq.n	8004240 <USBD_CDC_ReceivePacket+0x52>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	7c1b      	ldrb	r3, [r3, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	2381      	movs	r3, #129	; 0x81
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	58d2      	ldr	r2, [r2, r3]
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	2101      	movs	r1, #1
 8004224:	f003 f92c 	bl	8007480 <USBD_LL_PrepareReceive>
 8004228:	e008      	b.n	800423c <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	2381      	movs	r3, #129	; 0x81
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	58d2      	ldr	r2, [r2, r3]
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	2340      	movs	r3, #64	; 0x40
 8004236:	2101      	movs	r1, #1
 8004238:	f003 f922 	bl	8007480 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	e000      	b.n	8004242 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8004240:	2302      	movs	r3, #2
  }
}
 8004242:	0018      	movs	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	b004      	add	sp, #16
 8004248:	bd80      	pop	{r7, pc}

0800424a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	1dfb      	adds	r3, r7, #7
 8004256:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800425e:	2302      	movs	r3, #2
 8004260:	e020      	b.n	80042a4 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	23a3      	movs	r3, #163	; 0xa3
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	58d3      	ldr	r3, [r2, r3]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d004      	beq.n	8004278 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	23a3      	movs	r3, #163	; 0xa3
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	2100      	movs	r1, #0
 8004276:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d004      	beq.n	8004288 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	23a2      	movs	r3, #162	; 0xa2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	239d      	movs	r3, #157	; 0x9d
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	2101      	movs	r1, #1
 8004290:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1dfa      	adds	r2, r7, #7
 8004296:	7812      	ldrb	r2, [r2, #0]
 8004298:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	0018      	movs	r0, r3
 800429e:	f002 ff1b 	bl	80070d8 <USBD_LL_Init>

  return USBD_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b004      	add	sp, #16
 80042aa:	bd80      	pop	{r7, pc}

080042ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80042b6:	230f      	movs	r3, #15
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	23a3      	movs	r3, #163	; 0xa3
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	6839      	ldr	r1, [r7, #0]
 80042cc:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80042ce:	230f      	movs	r3, #15
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e003      	b.n	80042e0 <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80042d8:	230f      	movs	r3, #15
 80042da:	18fb      	adds	r3, r7, r3
 80042dc:	2202      	movs	r2, #2
 80042de:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80042e0:	230f      	movs	r3, #15
 80042e2:	18fb      	adds	r3, r7, r3
 80042e4:	781b      	ldrb	r3, [r3, #0]
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b004      	add	sp, #16
 80042ec:	bd80      	pop	{r7, pc}

080042ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b082      	sub	sp, #8
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	0018      	movs	r0, r3
 80042fa:	f002 ff51 	bl	80071a0 <USBD_LL_Start>

  return USBD_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	0018      	movs	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	b002      	add	sp, #8
 8004306:	bd80      	pop	{r7, pc}

08004308 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	0018      	movs	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	b002      	add	sp, #8
 8004318:	bd80      	pop	{r7, pc}

0800431a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	000a      	movs	r2, r1
 8004324:	1cfb      	adds	r3, r7, #3
 8004326:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004328:	230f      	movs	r3, #15
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	2202      	movs	r2, #2
 800432e:	701a      	strb	r2, [r3, #0]

  if(pdev->pClass != NULL)
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	23a3      	movs	r3, #163	; 0xa3
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	58d3      	ldr	r3, [r2, r3]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00f      	beq.n	800435c <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	23a3      	movs	r3, #163	; 0xa3
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	58d3      	ldr	r3, [r2, r3]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	1cfa      	adds	r2, r7, #3
 8004348:	7811      	ldrb	r1, [r2, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	0010      	movs	r0, r2
 800434e:	4798      	blx	r3
 8004350:	1e03      	subs	r3, r0, #0
 8004352:	d103      	bne.n	800435c <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8004354:	230f      	movs	r3, #15
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800435c:	230f      	movs	r3, #15
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	781b      	ldrb	r3, [r3, #0]
}
 8004362:	0018      	movs	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	b004      	add	sp, #16
 8004368:	bd80      	pop	{r7, pc}

0800436a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	000a      	movs	r2, r1
 8004374:	1cfb      	adds	r3, r7, #3
 8004376:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	23a3      	movs	r3, #163	; 0xa3
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	58d3      	ldr	r3, [r2, r3]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	1cfa      	adds	r2, r7, #3
 8004384:	7811      	ldrb	r1, [r2, #0]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	0010      	movs	r0, r2
 800438a:	4798      	blx	r3
  return USBD_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	0018      	movs	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	b002      	add	sp, #8
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	22a0      	movs	r2, #160	; 0xa0
 80043a6:	0092      	lsls	r2, r2, #2
 80043a8:	4694      	mov	ip, r2
 80043aa:	4463      	add	r3, ip
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	0011      	movs	r1, r2
 80043b0:	0018      	movs	r0, r3
 80043b2:	f000 ff6d 	bl	8005290 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	239b      	movs	r3, #155	; 0x9b
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	2101      	movs	r1, #1
 80043be:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a22      	ldr	r2, [pc, #136]	; (800444c <USBD_LL_SetupStage+0xb4>)
 80043c4:	5a9b      	ldrh	r3, [r3, r2]
 80043c6:	0019      	movs	r1, r3
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	239c      	movs	r3, #156	; 0x9c
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	23a0      	movs	r3, #160	; 0xa0
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	5cd3      	ldrb	r3, [r2, r3]
 80043d8:	001a      	movs	r2, r3
 80043da:	231f      	movs	r3, #31
 80043dc:	4013      	ands	r3, r2
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d00d      	beq.n	80043fe <USBD_LL_SetupStage+0x66>
 80043e2:	d302      	bcc.n	80043ea <USBD_LL_SetupStage+0x52>
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d014      	beq.n	8004412 <USBD_LL_SetupStage+0x7a>
 80043e8:	e01d      	b.n	8004426 <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	22a0      	movs	r2, #160	; 0xa0
 80043ee:	0092      	lsls	r2, r2, #2
 80043f0:	189a      	adds	r2, r3, r2
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	0011      	movs	r1, r2
 80043f6:	0018      	movs	r0, r3
 80043f8:	f000 fa0a 	bl	8004810 <USBD_StdDevReq>
    break;
 80043fc:	e020      	b.n	8004440 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	22a0      	movs	r2, #160	; 0xa0
 8004402:	0092      	lsls	r2, r2, #2
 8004404:	189a      	adds	r2, r3, r2
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	0011      	movs	r1, r2
 800440a:	0018      	movs	r0, r3
 800440c:	f000 fa72 	bl	80048f4 <USBD_StdItfReq>
    break;
 8004410:	e016      	b.n	8004440 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	22a0      	movs	r2, #160	; 0xa0
 8004416:	0092      	lsls	r2, r2, #2
 8004418:	189a      	adds	r2, r3, r2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	0011      	movs	r1, r2
 800441e:	0018      	movs	r0, r3
 8004420:	f000 fabf 	bl	80049a2 <USBD_StdEPReq>
    break;
 8004424:	e00c      	b.n	8004440 <USBD_LL_SetupStage+0xa8>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	23a0      	movs	r3, #160	; 0xa0
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	5cd3      	ldrb	r3, [r2, r3]
 800442e:	227f      	movs	r2, #127	; 0x7f
 8004430:	4393      	bics	r3, r2
 8004432:	b2da      	uxtb	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	0011      	movs	r1, r2
 8004438:	0018      	movs	r0, r3
 800443a:	f002 ff3a 	bl	80072b2 <USBD_LL_StallEP>
    break;
 800443e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b002      	add	sp, #8
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	00000286 	.word	0x00000286

08004450 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	200b      	movs	r0, #11
 800445c:	183b      	adds	r3, r7, r0
 800445e:	1c0a      	adds	r2, r1, #0
 8004460:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8004462:	183b      	adds	r3, r7, r0
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d154      	bne.n	8004514 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3341      	adds	r3, #65	; 0x41
 800446e:	33ff      	adds	r3, #255	; 0xff
 8004470:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	239b      	movs	r3, #155	; 0x9b
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	58d3      	ldr	r3, [r2, r3]
 800447a:	2b03      	cmp	r3, #3
 800447c:	d139      	bne.n	80044f2 <USBD_LL_DataOutStage+0xa2>
    {
      if(pep->rem_length > pep->maxpacket)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	429a      	cmp	r2, r3
 8004488:	d919      	bls.n	80044be <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -=  pep->maxpacket;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	1ad2      	subs	r2, r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d203      	bcs.n	80044ac <USBD_LL_DataOutStage+0x5c>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	e002      	b.n	80044b2 <USBD_LL_DataOutStage+0x62>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	001a      	movs	r2, r3
 80044b8:	f000 fffb 	bl	80054b2 <USBD_CtlContinueRx>
 80044bc:	e045      	b.n	800454a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	23a3      	movs	r3, #163	; 0xa3
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	58d3      	ldr	r3, [r2, r3]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00d      	beq.n	80044e8 <USBD_LL_DataOutStage+0x98>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	239d      	movs	r3, #157	; 0x9d
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d107      	bne.n	80044e8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	23a3      	movs	r3, #163	; 0xa3
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	58d3      	ldr	r3, [r2, r3]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	0010      	movs	r0, r2
 80044e6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	0018      	movs	r0, r3
 80044ec:	f000 fff4 	bl	80054d8 <USBD_CtlSendStatus>
 80044f0:	e02b      	b.n	800454a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	239b      	movs	r3, #155	; 0x9b
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	58d3      	ldr	r3, [r2, r3]
 80044fa:	2b05      	cmp	r3, #5
 80044fc:	d125      	bne.n	800454a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	239b      	movs	r3, #155	; 0x9b
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	2100      	movs	r1, #0
 8004506:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2100      	movs	r1, #0
 800450c:	0018      	movs	r0, r3
 800450e:	f002 fed0 	bl	80072b2 <USBD_LL_StallEP>
 8004512:	e01a      	b.n	800454a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	23a3      	movs	r3, #163	; 0xa3
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	58d3      	ldr	r3, [r2, r3]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d011      	beq.n	8004546 <USBD_LL_DataOutStage+0xf6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	239d      	movs	r3, #157	; 0x9d
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL) &&
 800452a:	2b03      	cmp	r3, #3
 800452c:	d10b      	bne.n	8004546 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	23a3      	movs	r3, #163	; 0xa3
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	58d3      	ldr	r3, [r2, r3]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	220b      	movs	r2, #11
 800453a:	18ba      	adds	r2, r7, r2
 800453c:	7811      	ldrb	r1, [r2, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	0010      	movs	r0, r2
 8004542:	4798      	blx	r3
 8004544:	e001      	b.n	800454a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004546:	2302      	movs	r3, #2
 8004548:	e000      	b.n	800454c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	0018      	movs	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	b006      	add	sp, #24
 8004552:	bd80      	pop	{r7, pc}

08004554 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	607a      	str	r2, [r7, #4]
 800455e:	200b      	movs	r0, #11
 8004560:	183b      	adds	r3, r7, r0
 8004562:	1c0a      	adds	r2, r1, #0
 8004564:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8004566:	183b      	adds	r3, r7, r0
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d000      	beq.n	8004570 <USBD_LL_DataInStage+0x1c>
 800456e:	e08e      	b.n	800468e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	3314      	adds	r3, #20
 8004574:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	239b      	movs	r3, #155	; 0x9b
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	58d3      	ldr	r3, [r2, r3]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d164      	bne.n	800464c <USBD_LL_DataInStage+0xf8>
    {
      if(pep->rem_length > pep->maxpacket)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	429a      	cmp	r2, r3
 800458c:	d915      	bls.n	80045ba <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	1ad2      	subs	r2, r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	0018      	movs	r0, r3
 80045a8:	f000 ff4c 	bl	8005444 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	2300      	movs	r3, #0
 80045b0:	2200      	movs	r2, #0
 80045b2:	2100      	movs	r1, #0
 80045b4:	f002 ff64 	bl	8007480 <USBD_LL_PrepareReceive>
 80045b8:	e059      	b.n	800466e <USBD_LL_DataInStage+0x11a>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	0019      	movs	r1, r3
 80045c4:	0010      	movs	r0, r2
 80045c6:	f7fb fe25 	bl	8000214 <__aeabi_uidivmod>
 80045ca:	1e0b      	subs	r3, r1, #0
 80045cc:	d11f      	bne.n	800460e <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d319      	bcc.n	800460e <USBD_LL_DataInStage+0xba>
           (pep->total_length < pdev->ep0_data_len))
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	68f9      	ldr	r1, [r7, #12]
 80045e0:	239c      	movs	r3, #156	; 0x9c
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d211      	bcs.n	800460e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	2100      	movs	r1, #0
 80045f0:	0018      	movs	r0, r3
 80045f2:	f000 ff27 	bl	8005444 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	239c      	movs	r3, #156	; 0x9c
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	2100      	movs	r1, #0
 80045fe:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	2300      	movs	r3, #0
 8004604:	2200      	movs	r2, #0
 8004606:	2100      	movs	r1, #0
 8004608:	f002 ff3a 	bl	8007480 <USBD_LL_PrepareReceive>
 800460c:	e02f      	b.n	800466e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	23a3      	movs	r3, #163	; 0xa3
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	58d3      	ldr	r3, [r2, r3]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00d      	beq.n	8004638 <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	239d      	movs	r3, #157	; 0x9d
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004624:	2b03      	cmp	r3, #3
 8004626:	d107      	bne.n	8004638 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	23a3      	movs	r3, #163	; 0xa3
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	58d3      	ldr	r3, [r2, r3]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	0010      	movs	r0, r2
 8004636:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2180      	movs	r1, #128	; 0x80
 800463c:	0018      	movs	r0, r3
 800463e:	f002 fe38 	bl	80072b2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	0018      	movs	r0, r3
 8004646:	f000 ff5b 	bl	8005500 <USBD_CtlReceiveStatus>
 800464a:	e010      	b.n	800466e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	239b      	movs	r3, #155	; 0x9b
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	58d3      	ldr	r3, [r2, r3]
 8004654:	2b04      	cmp	r3, #4
 8004656:	d005      	beq.n	8004664 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	239b      	movs	r3, #155	; 0x9b
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004660:	2b00      	cmp	r3, #0
 8004662:	d104      	bne.n	800466e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2180      	movs	r1, #128	; 0x80
 8004668:	0018      	movs	r0, r3
 800466a:	f002 fe22 	bl	80072b2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	239e      	movs	r3, #158	; 0x9e
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	5cd3      	ldrb	r3, [r2, r3]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d124      	bne.n	80046c4 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	0018      	movs	r0, r3
 800467e:	f7ff fe43 	bl	8004308 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	239e      	movs	r3, #158	; 0x9e
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	2100      	movs	r1, #0
 800468a:	54d1      	strb	r1, [r2, r3]
 800468c:	e01a      	b.n	80046c4 <USBD_LL_DataInStage+0x170>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	23a3      	movs	r3, #163	; 0xa3
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	58d3      	ldr	r3, [r2, r3]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d011      	beq.n	80046c0 <USBD_LL_DataInStage+0x16c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	239d      	movs	r3, #157	; 0x9d
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL) &&
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d10b      	bne.n	80046c0 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	23a3      	movs	r3, #163	; 0xa3
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	58d3      	ldr	r3, [r2, r3]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	220b      	movs	r2, #11
 80046b4:	18ba      	adds	r2, r7, r2
 80046b6:	7811      	ldrb	r1, [r2, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	0010      	movs	r0, r2
 80046bc:	4798      	blx	r3
 80046be:	e001      	b.n	80046c4 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80046c0:	2302      	movs	r3, #2
 80046c2:	e000      	b.n	80046c6 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b006      	add	sp, #24
 80046cc:	bd80      	pop	{r7, pc}

080046ce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	2340      	movs	r3, #64	; 0x40
 80046da:	2200      	movs	r2, #0
 80046dc:	2100      	movs	r1, #0
 80046de:	f002 fd85 	bl	80071ec <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	23a2      	movs	r3, #162	; 0xa2
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	2101      	movs	r1, #1
 80046ea:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	23a8      	movs	r3, #168	; 0xa8
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	2140      	movs	r1, #64	; 0x40
 80046f4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	2340      	movs	r3, #64	; 0x40
 80046fa:	2200      	movs	r2, #0
 80046fc:	2180      	movs	r1, #128	; 0x80
 80046fe:	f002 fd75 	bl	80071ec <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2240      	movs	r2, #64	; 0x40
 800470c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	239d      	movs	r3, #157	; 0x9d
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	2101      	movs	r1, #1
 8004716:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	239b      	movs	r3, #155	; 0x9b
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	2100      	movs	r1, #0
 8004720:	50d1      	str	r1, [r2, r3]
  pdev->dev_config= 0U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	239f      	movs	r3, #159	; 0x9f
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	2100      	movs	r1, #0
 8004730:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	23a4      	movs	r3, #164	; 0xa4
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	58d3      	ldr	r3, [r2, r3]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	23a3      	movs	r3, #163	; 0xa3
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	58d3      	ldr	r3, [r2, r3]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	b2d9      	uxtb	r1, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	0018      	movs	r0, r3
 8004752:	4790      	blx	r2
  }

  return USBD_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	0018      	movs	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	b002      	add	sp, #8
 800475c:	bd80      	pop	{r7, pc}

0800475e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	000a      	movs	r2, r1
 8004768:	1cfb      	adds	r3, r7, #3
 800476a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	1cfa      	adds	r2, r7, #3
 8004770:	7812      	ldrb	r2, [r2, #0]
 8004772:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	0018      	movs	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	b002      	add	sp, #8
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	239d      	movs	r3, #157	; 0x9d
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	5cd1      	ldrb	r1, [r2, r3]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a06      	ldr	r2, [pc, #24]	; (80047ac <USBD_LL_Suspend+0x2c>)
 8004794:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	239d      	movs	r3, #157	; 0x9d
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	2104      	movs	r1, #4
 800479e:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	0018      	movs	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b002      	add	sp, #8
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	00000275 	.word	0x00000275

080047b0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a05      	ldr	r2, [pc, #20]	; (80047d0 <USBD_LL_Resume+0x20>)
 80047bc:	5c99      	ldrb	r1, [r3, r2]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	239d      	movs	r3, #157	; 0x9d
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	0018      	movs	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b002      	add	sp, #8
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	00000275 	.word	0x00000275

080047d4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	239d      	movs	r3, #157	; 0x9d
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	5cd3      	ldrb	r3, [r2, r3]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d10e      	bne.n	8004806 <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	23a3      	movs	r3, #163	; 0xa3
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	58d3      	ldr	r3, [r2, r3]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	23a3      	movs	r3, #163	; 0xa3
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	58d3      	ldr	r3, [r2, r3]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	0010      	movs	r0, r2
 8004804:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	0018      	movs	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	b002      	add	sp, #8
 800480e:	bd80      	pop	{r7, pc}

08004810 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800481a:	230f      	movs	r3, #15
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	001a      	movs	r2, r3
 8004828:	2360      	movs	r3, #96	; 0x60
 800482a:	4013      	ands	r3, r2
 800482c:	2b20      	cmp	r3, #32
 800482e:	d004      	beq.n	800483a <USBD_StdDevReq+0x2a>
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	d002      	beq.n	800483a <USBD_StdDevReq+0x2a>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <USBD_StdDevReq+0x3e>
 8004838:	e04b      	b.n	80048d2 <USBD_StdDevReq+0xc2>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	23a3      	movs	r3, #163	; 0xa3
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	58d3      	ldr	r3, [r2, r3]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	6839      	ldr	r1, [r7, #0]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	0010      	movs	r0, r2
 800484a:	4798      	blx	r3
    break;
 800484c:	e048      	b.n	80048e0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	785b      	ldrb	r3, [r3, #1]
 8004852:	2b09      	cmp	r3, #9
 8004854:	d835      	bhi.n	80048c2 <USBD_StdDevReq+0xb2>
 8004856:	009a      	lsls	r2, r3, #2
 8004858:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <USBD_StdDevReq+0xe0>)
 800485a:	18d3      	adds	r3, r2, r3
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	469f      	mov	pc, r3
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0011      	movs	r1, r2
 8004866:	0018      	movs	r0, r3
 8004868:	f000 fa58 	bl	8004d1c <USBD_GetDescriptor>
      break;
 800486c:	e030      	b.n	80048d0 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	0011      	movs	r1, r2
 8004874:	0018      	movs	r0, r3
 8004876:	f000 fb63 	bl	8004f40 <USBD_SetAddress>
      break;
 800487a:	e029      	b.n	80048d0 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	0011      	movs	r1, r2
 8004882:	0018      	movs	r0, r3
 8004884:	f000 fbb0 	bl	8004fe8 <USBD_SetConfig>
      break;
 8004888:	e022      	b.n	80048d0 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	0011      	movs	r1, r2
 8004890:	0018      	movs	r0, r3
 8004892:	f000 fc4d 	bl	8005130 <USBD_GetConfig>
      break;
 8004896:	e01b      	b.n	80048d0 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	0011      	movs	r1, r2
 800489e:	0018      	movs	r0, r3
 80048a0:	f000 fc80 	bl	80051a4 <USBD_GetStatus>
      break;
 80048a4:	e014      	b.n	80048d0 <USBD_StdDevReq+0xc0>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	0011      	movs	r1, r2
 80048ac:	0018      	movs	r0, r3
 80048ae:	f000 fcb3 	bl	8005218 <USBD_SetFeature>
      break;
 80048b2:	e00d      	b.n	80048d0 <USBD_StdDevReq+0xc0>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	0011      	movs	r1, r2
 80048ba:	0018      	movs	r0, r3
 80048bc:	f000 fcc2 	bl	8005244 <USBD_ClrFeature>
      break;
 80048c0:	e006      	b.n	80048d0 <USBD_StdDevReq+0xc0>

    default:
      USBD_CtlError(pdev, req);
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	0011      	movs	r1, r2
 80048c8:	0018      	movs	r0, r3
 80048ca:	f000 fd1c 	bl	8005306 <USBD_CtlError>
      break;
 80048ce:	46c0      	nop			; (mov r8, r8)
    }
    break;
 80048d0:	e006      	b.n	80048e0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	0011      	movs	r1, r2
 80048d8:	0018      	movs	r0, r3
 80048da:	f000 fd14 	bl	8005306 <USBD_CtlError>
    break;
 80048de:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80048e0:	230f      	movs	r3, #15
 80048e2:	18fb      	adds	r3, r7, r3
 80048e4:	781b      	ldrb	r3, [r3, #0]
}
 80048e6:	0018      	movs	r0, r3
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b004      	add	sp, #16
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	08008434 	.word	0x08008434

080048f4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80048f4:	b590      	push	{r4, r7, lr}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80048fe:	230f      	movs	r3, #15
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	001a      	movs	r2, r3
 800490c:	2360      	movs	r3, #96	; 0x60
 800490e:	4013      	ands	r3, r2
 8004910:	2b20      	cmp	r3, #32
 8004912:	d003      	beq.n	800491c <USBD_StdItfReq+0x28>
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d001      	beq.n	800491c <USBD_StdItfReq+0x28>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d136      	bne.n	800498a <USBD_StdItfReq+0x96>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	239d      	movs	r3, #157	; 0x9d
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	5cd3      	ldrb	r3, [r2, r3]
 8004924:	3b01      	subs	r3, #1
 8004926:	2b02      	cmp	r3, #2
 8004928:	d826      	bhi.n	8004978 <USBD_StdItfReq+0x84>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	889b      	ldrh	r3, [r3, #4]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d81a      	bhi.n	800496a <USBD_StdItfReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	23a3      	movs	r3, #163	; 0xa3
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	58d3      	ldr	r3, [r2, r3]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	220f      	movs	r2, #15
 8004940:	18bc      	adds	r4, r7, r2
 8004942:	6839      	ldr	r1, [r7, #0]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	0010      	movs	r0, r2
 8004948:	4798      	blx	r3
 800494a:	0003      	movs	r3, r0
 800494c:	7023      	strb	r3, [r4, #0]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	88db      	ldrh	r3, [r3, #6]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d117      	bne.n	8004986 <USBD_StdItfReq+0x92>
 8004956:	230f      	movs	r3, #15
 8004958:	18fb      	adds	r3, r7, r3
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d112      	bne.n	8004986 <USBD_StdItfReq+0x92>
        {
          USBD_CtlSendStatus(pdev);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	0018      	movs	r0, r3
 8004964:	f000 fdb8 	bl	80054d8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004968:	e00d      	b.n	8004986 <USBD_StdItfReq+0x92>
        USBD_CtlError(pdev, req);
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	0011      	movs	r1, r2
 8004970:	0018      	movs	r0, r3
 8004972:	f000 fcc8 	bl	8005306 <USBD_CtlError>
      break;
 8004976:	e006      	b.n	8004986 <USBD_StdItfReq+0x92>

    default:
      USBD_CtlError(pdev, req);
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0011      	movs	r1, r2
 800497e:	0018      	movs	r0, r3
 8004980:	f000 fcc1 	bl	8005306 <USBD_CtlError>
      break;
 8004984:	e000      	b.n	8004988 <USBD_StdItfReq+0x94>
      break;
 8004986:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8004988:	e006      	b.n	8004998 <USBD_StdItfReq+0xa4>

  default:
    USBD_CtlError(pdev, req);
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	0011      	movs	r1, r2
 8004990:	0018      	movs	r0, r3
 8004992:	f000 fcb8 	bl	8005306 <USBD_CtlError>
    break;
 8004996:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	0018      	movs	r0, r3
 800499c:	46bd      	mov	sp, r7
 800499e:	b005      	add	sp, #20
 80049a0:	bd90      	pop	{r4, r7, pc}

080049a2 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80049a2:	b5b0      	push	{r4, r5, r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80049ac:	230f      	movs	r3, #15
 80049ae:	18fb      	adds	r3, r7, r3
 80049b0:	2200      	movs	r2, #0
 80049b2:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	889a      	ldrh	r2, [r3, #4]
 80049b8:	230e      	movs	r3, #14
 80049ba:	18fb      	adds	r3, r7, r3
 80049bc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	001a      	movs	r2, r3
 80049c4:	2360      	movs	r3, #96	; 0x60
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d004      	beq.n	80049d6 <USBD_StdEPReq+0x34>
 80049cc:	2b40      	cmp	r3, #64	; 0x40
 80049ce:	d002      	beq.n	80049d6 <USBD_StdEPReq+0x34>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <USBD_StdEPReq+0x48>
 80049d4:	e193      	b.n	8004cfe <USBD_StdEPReq+0x35c>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	23a3      	movs	r3, #163	; 0xa3
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	58d3      	ldr	r3, [r2, r3]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	6839      	ldr	r1, [r7, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	0010      	movs	r0, r2
 80049e6:	4798      	blx	r3
    break;
 80049e8:	e190      	b.n	8004d0c <USBD_StdEPReq+0x36a>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	001a      	movs	r2, r3
 80049f0:	2360      	movs	r3, #96	; 0x60
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d10f      	bne.n	8004a18 <USBD_StdEPReq+0x76>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	23a3      	movs	r3, #163	; 0xa3
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	58d3      	ldr	r3, [r2, r3]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	250f      	movs	r5, #15
 8004a04:	197c      	adds	r4, r7, r5
 8004a06:	6839      	ldr	r1, [r7, #0]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	0010      	movs	r0, r2
 8004a0c:	4798      	blx	r3
 8004a0e:	0003      	movs	r3, r0
 8004a10:	7023      	strb	r3, [r4, #0]

      return ret;
 8004a12:	197b      	adds	r3, r7, r5
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	e17c      	b.n	8004d12 <USBD_StdEPReq+0x370>
    }

    switch (req->bRequest)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d054      	beq.n	8004aca <USBD_StdEPReq+0x128>
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d003      	beq.n	8004a2c <USBD_StdEPReq+0x8a>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d100      	bne.n	8004a2a <USBD_StdEPReq+0x88>
 8004a28:	e097      	b.n	8004b5a <USBD_StdEPReq+0x1b8>
 8004a2a:	e160      	b.n	8004cee <USBD_StdEPReq+0x34c>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	239d      	movs	r3, #157	; 0x9d
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	5cd3      	ldrb	r3, [r2, r3]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d002      	beq.n	8004a3e <USBD_StdEPReq+0x9c>
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d01f      	beq.n	8004a7c <USBD_StdEPReq+0xda>
 8004a3c:	e03d      	b.n	8004aba <USBD_StdEPReq+0x118>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a3e:	230e      	movs	r3, #14
 8004a40:	18fb      	adds	r3, r7, r3
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d012      	beq.n	8004a6e <USBD_StdEPReq+0xcc>
 8004a48:	230e      	movs	r3, #14
 8004a4a:	18fb      	adds	r3, r7, r3
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d00d      	beq.n	8004a6e <USBD_StdEPReq+0xcc>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004a52:	230e      	movs	r3, #14
 8004a54:	18fb      	adds	r3, r7, r3
 8004a56:	781a      	ldrb	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	0011      	movs	r1, r2
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f002 fc28 	bl	80072b2 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2180      	movs	r1, #128	; 0x80
 8004a66:	0018      	movs	r0, r3
 8004a68:	f002 fc23 	bl	80072b2 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004a6c:	e02c      	b.n	8004ac8 <USBD_StdEPReq+0x126>
          USBD_CtlError(pdev, req);
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	0011      	movs	r1, r2
 8004a74:	0018      	movs	r0, r3
 8004a76:	f000 fc46 	bl	8005306 <USBD_CtlError>
        break;
 8004a7a:	e025      	b.n	8004ac8 <USBD_StdEPReq+0x126>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	885b      	ldrh	r3, [r3, #2]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d115      	bne.n	8004ab0 <USBD_StdEPReq+0x10e>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004a84:	230e      	movs	r3, #14
 8004a86:	18fb      	adds	r3, r7, r3
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d010      	beq.n	8004ab0 <USBD_StdEPReq+0x10e>
 8004a8e:	230e      	movs	r3, #14
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b80      	cmp	r3, #128	; 0x80
 8004a96:	d00b      	beq.n	8004ab0 <USBD_StdEPReq+0x10e>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	88db      	ldrh	r3, [r3, #6]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d107      	bne.n	8004ab0 <USBD_StdEPReq+0x10e>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8004aa0:	230e      	movs	r3, #14
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	0011      	movs	r1, r2
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f002 fc01 	bl	80072b2 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 fd10 	bl	80054d8 <USBD_CtlSendStatus>

        break;
 8004ab8:	e006      	b.n	8004ac8 <USBD_StdEPReq+0x126>

      default:
        USBD_CtlError(pdev, req);
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	0011      	movs	r1, r2
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 fc20 	bl	8005306 <USBD_CtlError>
        break;
 8004ac6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8004ac8:	e118      	b.n	8004cfc <USBD_StdEPReq+0x35a>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	239d      	movs	r3, #157	; 0x9d
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	5cd3      	ldrb	r3, [r2, r3]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d002      	beq.n	8004adc <USBD_StdEPReq+0x13a>
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d01f      	beq.n	8004b1a <USBD_StdEPReq+0x178>
 8004ada:	e035      	b.n	8004b48 <USBD_StdEPReq+0x1a6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004adc:	230e      	movs	r3, #14
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d012      	beq.n	8004b0c <USBD_StdEPReq+0x16a>
 8004ae6:	230e      	movs	r3, #14
 8004ae8:	18fb      	adds	r3, r7, r3
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b80      	cmp	r3, #128	; 0x80
 8004aee:	d00d      	beq.n	8004b0c <USBD_StdEPReq+0x16a>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004af0:	230e      	movs	r3, #14
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	781a      	ldrb	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	0011      	movs	r1, r2
 8004afa:	0018      	movs	r0, r3
 8004afc:	f002 fbd9 	bl	80072b2 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2180      	movs	r1, #128	; 0x80
 8004b04:	0018      	movs	r0, r3
 8004b06:	f002 fbd4 	bl	80072b2 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004b0a:	e025      	b.n	8004b58 <USBD_StdEPReq+0x1b6>
          USBD_CtlError(pdev, req);
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	0011      	movs	r1, r2
 8004b12:	0018      	movs	r0, r3
 8004b14:	f000 fbf7 	bl	8005306 <USBD_CtlError>
        break;
 8004b18:	e01e      	b.n	8004b58 <USBD_StdEPReq+0x1b6>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	885b      	ldrh	r3, [r3, #2]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d119      	bne.n	8004b56 <USBD_StdEPReq+0x1b4>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004b22:	230e      	movs	r3, #14
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	227f      	movs	r2, #127	; 0x7f
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d007      	beq.n	8004b3e <USBD_StdEPReq+0x19c>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8004b2e:	230e      	movs	r3, #14
 8004b30:	18fb      	adds	r3, r7, r3
 8004b32:	781a      	ldrb	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	0011      	movs	r1, r2
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f002 fbe6 	bl	800730a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	0018      	movs	r0, r3
 8004b42:	f000 fcc9 	bl	80054d8 <USBD_CtlSendStatus>
        }
        break;
 8004b46:	e006      	b.n	8004b56 <USBD_StdEPReq+0x1b4>

      default:
        USBD_CtlError(pdev, req);
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	0011      	movs	r1, r2
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f000 fbd9 	bl	8005306 <USBD_CtlError>
        break;
 8004b54:	e000      	b.n	8004b58 <USBD_StdEPReq+0x1b6>
        break;
 8004b56:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8004b58:	e0d0      	b.n	8004cfc <USBD_StdEPReq+0x35a>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	239d      	movs	r3, #157	; 0x9d
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	5cd3      	ldrb	r3, [r2, r3]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d002      	beq.n	8004b6c <USBD_StdEPReq+0x1ca>
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d03d      	beq.n	8004be6 <USBD_StdEPReq+0x244>
 8004b6a:	e0b8      	b.n	8004cde <USBD_StdEPReq+0x33c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004b6c:	230e      	movs	r3, #14
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <USBD_StdEPReq+0x1ec>
 8004b76:	230e      	movs	r3, #14
 8004b78:	18fb      	adds	r3, r7, r3
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b80      	cmp	r3, #128	; 0x80
 8004b7e:	d006      	beq.n	8004b8e <USBD_StdEPReq+0x1ec>
        {
          USBD_CtlError(pdev, req);
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	0011      	movs	r1, r2
 8004b86:	0018      	movs	r0, r3
 8004b88:	f000 fbbd 	bl	8005306 <USBD_CtlError>
          break;
 8004b8c:	e0ae      	b.n	8004cec <USBD_StdEPReq+0x34a>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004b8e:	230e      	movs	r3, #14
 8004b90:	18fb      	adds	r3, r7, r3
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	b25b      	sxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	da0d      	bge.n	8004bb6 <USBD_StdEPReq+0x214>
 8004b9a:	230e      	movs	r3, #14
 8004b9c:	18fb      	adds	r3, r7, r3
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	227f      	movs	r2, #127	; 0x7f
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	0013      	movs	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	189b      	adds	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	3310      	adds	r3, #16
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	18d3      	adds	r3, r2, r3
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	e00c      	b.n	8004bd0 <USBD_StdEPReq+0x22e>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004bb6:	230e      	movs	r3, #14
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	227f      	movs	r2, #127	; 0x7f
 8004bbe:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004bc0:	0013      	movs	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	189b      	adds	r3, r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	3341      	adds	r3, #65	; 0x41
 8004bca:	33ff      	adds	r3, #255	; 0xff
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	18d3      	adds	r3, r2, r3
 8004bd0:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	0018      	movs	r0, r3
 8004be0:	f000 fc10 	bl	8005404 <USBD_CtlSendData>
          break;
 8004be4:	e082      	b.n	8004cec <USBD_StdEPReq+0x34a>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8004be6:	230e      	movs	r3, #14
 8004be8:	18fb      	adds	r3, r7, r3
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	b25b      	sxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	da15      	bge.n	8004c1e <USBD_StdEPReq+0x27c>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004bf2:	230e      	movs	r3, #14
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	220f      	movs	r2, #15
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	0013      	movs	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	189b      	adds	r3, r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	18cb      	adds	r3, r1, r3
 8004c08:	3318      	adds	r3, #24
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d11e      	bne.n	8004c4e <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	0011      	movs	r1, r2
 8004c16:	0018      	movs	r0, r3
 8004c18:	f000 fb75 	bl	8005306 <USBD_CtlError>
            break;
 8004c1c:	e066      	b.n	8004cec <USBD_StdEPReq+0x34a>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004c1e:	230e      	movs	r3, #14
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	220f      	movs	r2, #15
 8004c26:	401a      	ands	r2, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	23a2      	movs	r3, #162	; 0xa2
 8004c2c:	0059      	lsls	r1, r3, #1
 8004c2e:	0013      	movs	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	189b      	adds	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	18c3      	adds	r3, r0, r3
 8004c38:	185b      	adds	r3, r3, r1
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d106      	bne.n	8004c4e <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	0011      	movs	r1, r2
 8004c46:	0018      	movs	r0, r3
 8004c48:	f000 fb5d 	bl	8005306 <USBD_CtlError>
            break;
 8004c4c:	e04e      	b.n	8004cec <USBD_StdEPReq+0x34a>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004c4e:	230e      	movs	r3, #14
 8004c50:	18fb      	adds	r3, r7, r3
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	b25b      	sxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	da0d      	bge.n	8004c76 <USBD_StdEPReq+0x2d4>
 8004c5a:	230e      	movs	r3, #14
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	227f      	movs	r2, #127	; 0x7f
 8004c62:	401a      	ands	r2, r3
 8004c64:	0013      	movs	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	189b      	adds	r3, r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	3310      	adds	r3, #16
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	18d3      	adds	r3, r2, r3
 8004c72:	3304      	adds	r3, #4
 8004c74:	e00c      	b.n	8004c90 <USBD_StdEPReq+0x2ee>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004c76:	230e      	movs	r3, #14
 8004c78:	18fb      	adds	r3, r7, r3
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	227f      	movs	r2, #127	; 0x7f
 8004c7e:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004c80:	0013      	movs	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	189b      	adds	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	3341      	adds	r3, #65	; 0x41
 8004c8a:	33ff      	adds	r3, #255	; 0xff
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	18d3      	adds	r3, r2, r3
 8004c90:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004c92:	230e      	movs	r3, #14
 8004c94:	18fb      	adds	r3, r7, r3
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d004      	beq.n	8004ca6 <USBD_StdEPReq+0x304>
 8004c9c:	230e      	movs	r3, #14
 8004c9e:	18fb      	adds	r3, r7, r3
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b80      	cmp	r3, #128	; 0x80
 8004ca4:	d103      	bne.n	8004cae <USBD_StdEPReq+0x30c>
          {
            pep->status = 0x0000U;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	e010      	b.n	8004cd0 <USBD_StdEPReq+0x32e>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004cae:	230e      	movs	r3, #14
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	781a      	ldrb	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	0011      	movs	r1, r2
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f002 fb52 	bl	8007362 <USBD_LL_IsStallEP>
 8004cbe:	1e03      	subs	r3, r0, #0
 8004cc0:	d003      	beq.n	8004cca <USBD_StdEPReq+0x328>
          {
            pep->status = 0x0001U;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	e002      	b.n	8004cd0 <USBD_StdEPReq+0x32e>
          }
          else
          {
            pep->status = 0x0000U;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004cd0:	68b9      	ldr	r1, [r7, #8]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f000 fb94 	bl	8005404 <USBD_CtlSendData>
          break;
 8004cdc:	e006      	b.n	8004cec <USBD_StdEPReq+0x34a>

      default:
        USBD_CtlError(pdev, req);
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	0011      	movs	r1, r2
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f000 fb0e 	bl	8005306 <USBD_CtlError>
        break;
 8004cea:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8004cec:	e006      	b.n	8004cfc <USBD_StdEPReq+0x35a>

    default:
      USBD_CtlError(pdev, req);
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	0011      	movs	r1, r2
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f000 fb06 	bl	8005306 <USBD_CtlError>
      break;
 8004cfa:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8004cfc:	e006      	b.n	8004d0c <USBD_StdEPReq+0x36a>

  default:
    USBD_CtlError(pdev, req);
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	0011      	movs	r1, r2
 8004d04:	0018      	movs	r0, r3
 8004d06:	f000 fafe 	bl	8005306 <USBD_CtlError>
    break;
 8004d0a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8004d0c:	230f      	movs	r3, #15
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	781b      	ldrb	r3, [r3, #0]
}
 8004d12:	0018      	movs	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b004      	add	sp, #16
 8004d18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004d1c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	885b      	ldrh	r3, [r3, #2]
 8004d2a:	0a1b      	lsrs	r3, r3, #8
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b07      	cmp	r3, #7
 8004d30:	d900      	bls.n	8004d34 <USBD_GetDescriptor+0x18>
 8004d32:	e0ce      	b.n	8004ed2 <USBD_GetDescriptor+0x1b6>
 8004d34:	009a      	lsls	r2, r3, #2
 8004d36:	4b80      	ldr	r3, [pc, #512]	; (8004f38 <USBD_GetDescriptor+0x21c>)
 8004d38:	18d3      	adds	r3, r2, r3
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	23a2      	movs	r3, #162	; 0xa2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	58d3      	ldr	r3, [r2, r3]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	7c12      	ldrb	r2, [r2, #16]
 8004d4c:	210a      	movs	r1, #10
 8004d4e:	1879      	adds	r1, r7, r1
 8004d50:	0010      	movs	r0, r2
 8004d52:	4798      	blx	r3
 8004d54:	0003      	movs	r3, r0
 8004d56:	60fb      	str	r3, [r7, #12]
    break;
 8004d58:	e0c2      	b.n	8004ee0 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	7c1b      	ldrb	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10f      	bne.n	8004d82 <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	23a3      	movs	r3, #163	; 0xa3
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	58d3      	ldr	r3, [r2, r3]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	220a      	movs	r2, #10
 8004d6e:	18ba      	adds	r2, r7, r2
 8004d70:	0010      	movs	r0, r2
 8004d72:	4798      	blx	r3
 8004d74:	0003      	movs	r3, r0
 8004d76:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004d80:	e0ae      	b.n	8004ee0 <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	23a3      	movs	r3, #163	; 0xa3
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	58d3      	ldr	r3, [r2, r3]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	220a      	movs	r2, #10
 8004d8e:	18ba      	adds	r2, r7, r2
 8004d90:	0010      	movs	r0, r2
 8004d92:	4798      	blx	r3
 8004d94:	0003      	movs	r3, r0
 8004d96:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	701a      	strb	r2, [r3, #0]
    break;
 8004da0:	e09e      	b.n	8004ee0 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	885b      	ldrh	r3, [r3, #2]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	d858      	bhi.n	8004e5e <USBD_GetDescriptor+0x142>
 8004dac:	009a      	lsls	r2, r3, #2
 8004dae:	4b63      	ldr	r3, [pc, #396]	; (8004f3c <USBD_GetDescriptor+0x220>)
 8004db0:	18d3      	adds	r3, r2, r3
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	23a2      	movs	r3, #162	; 0xa2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	58d3      	ldr	r3, [r2, r3]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	7c12      	ldrb	r2, [r2, #16]
 8004dc4:	210a      	movs	r1, #10
 8004dc6:	1879      	adds	r1, r7, r1
 8004dc8:	0010      	movs	r0, r2
 8004dca:	4798      	blx	r3
 8004dcc:	0003      	movs	r3, r0
 8004dce:	60fb      	str	r3, [r7, #12]
      break;
 8004dd0:	e04c      	b.n	8004e6c <USBD_GetDescriptor+0x150>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	23a2      	movs	r3, #162	; 0xa2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	58d3      	ldr	r3, [r2, r3]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	7c12      	ldrb	r2, [r2, #16]
 8004de0:	210a      	movs	r1, #10
 8004de2:	1879      	adds	r1, r7, r1
 8004de4:	0010      	movs	r0, r2
 8004de6:	4798      	blx	r3
 8004de8:	0003      	movs	r3, r0
 8004dea:	60fb      	str	r3, [r7, #12]
      break;
 8004dec:	e03e      	b.n	8004e6c <USBD_GetDescriptor+0x150>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	23a2      	movs	r3, #162	; 0xa2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	58d3      	ldr	r3, [r2, r3]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	7c12      	ldrb	r2, [r2, #16]
 8004dfc:	210a      	movs	r1, #10
 8004dfe:	1879      	adds	r1, r7, r1
 8004e00:	0010      	movs	r0, r2
 8004e02:	4798      	blx	r3
 8004e04:	0003      	movs	r3, r0
 8004e06:	60fb      	str	r3, [r7, #12]
      break;
 8004e08:	e030      	b.n	8004e6c <USBD_GetDescriptor+0x150>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	23a2      	movs	r3, #162	; 0xa2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	58d3      	ldr	r3, [r2, r3]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	7c12      	ldrb	r2, [r2, #16]
 8004e18:	210a      	movs	r1, #10
 8004e1a:	1879      	adds	r1, r7, r1
 8004e1c:	0010      	movs	r0, r2
 8004e1e:	4798      	blx	r3
 8004e20:	0003      	movs	r3, r0
 8004e22:	60fb      	str	r3, [r7, #12]
      break;
 8004e24:	e022      	b.n	8004e6c <USBD_GetDescriptor+0x150>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	23a2      	movs	r3, #162	; 0xa2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	58d3      	ldr	r3, [r2, r3]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	7c12      	ldrb	r2, [r2, #16]
 8004e34:	210a      	movs	r1, #10
 8004e36:	1879      	adds	r1, r7, r1
 8004e38:	0010      	movs	r0, r2
 8004e3a:	4798      	blx	r3
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	60fb      	str	r3, [r7, #12]
      break;
 8004e40:	e014      	b.n	8004e6c <USBD_GetDescriptor+0x150>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	23a2      	movs	r3, #162	; 0xa2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	58d3      	ldr	r3, [r2, r3]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	7c12      	ldrb	r2, [r2, #16]
 8004e50:	210a      	movs	r1, #10
 8004e52:	1879      	adds	r1, r7, r1
 8004e54:	0010      	movs	r0, r2
 8004e56:	4798      	blx	r3
 8004e58:	0003      	movs	r3, r0
 8004e5a:	60fb      	str	r3, [r7, #12]
      break;
 8004e5c:	e006      	b.n	8004e6c <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	0011      	movs	r1, r2
 8004e64:	0018      	movs	r0, r3
 8004e66:	f000 fa4e 	bl	8005306 <USBD_CtlError>
      return;
 8004e6a:	e061      	b.n	8004f30 <USBD_GetDescriptor+0x214>
#endif
    }
    break;
 8004e6c:	e038      	b.n	8004ee0 <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	7c1b      	ldrb	r3, [r3, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10b      	bne.n	8004e8e <USBD_GetDescriptor+0x172>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	23a3      	movs	r3, #163	; 0xa3
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	58d3      	ldr	r3, [r2, r3]
 8004e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e80:	220a      	movs	r2, #10
 8004e82:	18ba      	adds	r2, r7, r2
 8004e84:	0010      	movs	r0, r2
 8004e86:	4798      	blx	r3
 8004e88:	0003      	movs	r3, r0
 8004e8a:	60fb      	str	r3, [r7, #12]
      break;
 8004e8c:	e028      	b.n	8004ee0 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	0011      	movs	r1, r2
 8004e94:	0018      	movs	r0, r3
 8004e96:	f000 fa36 	bl	8005306 <USBD_CtlError>
      return;
 8004e9a:	e049      	b.n	8004f30 <USBD_GetDescriptor+0x214>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	7c1b      	ldrb	r3, [r3, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10f      	bne.n	8004ec4 <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	23a3      	movs	r3, #163	; 0xa3
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	58d3      	ldr	r3, [r2, r3]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	220a      	movs	r2, #10
 8004eb0:	18ba      	adds	r2, r7, r2
 8004eb2:	0010      	movs	r0, r2
 8004eb4:	4798      	blx	r3
 8004eb6:	0003      	movs	r3, r0
 8004eb8:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	2207      	movs	r2, #7
 8004ec0:	701a      	strb	r2, [r3, #0]
      break;
 8004ec2:	e00d      	b.n	8004ee0 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	0011      	movs	r1, r2
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f000 fa1b 	bl	8005306 <USBD_CtlError>
      return;
 8004ed0:	e02e      	b.n	8004f30 <USBD_GetDescriptor+0x214>
    }

  default:
     USBD_CtlError(pdev , req);
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	0011      	movs	r1, r2
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f000 fa14 	bl	8005306 <USBD_CtlError>
    return;
 8004ede:	e027      	b.n	8004f30 <USBD_GetDescriptor+0x214>
  }

  if((len != 0U) && (req->wLength != 0U))
 8004ee0:	230a      	movs	r3, #10
 8004ee2:	18fb      	adds	r3, r7, r3
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01a      	beq.n	8004f20 <USBD_GetDescriptor+0x204>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	88db      	ldrh	r3, [r3, #6]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d016      	beq.n	8004f20 <USBD_GetDescriptor+0x204>
  {

    len = MIN(len, req->wLength);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	88da      	ldrh	r2, [r3, #6]
 8004ef6:	230a      	movs	r3, #10
 8004ef8:	18fb      	adds	r3, r7, r3
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	1c18      	adds	r0, r3, #0
 8004efe:	1c11      	adds	r1, r2, #0
 8004f00:	b28a      	uxth	r2, r1
 8004f02:	b283      	uxth	r3, r0
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d900      	bls.n	8004f0a <USBD_GetDescriptor+0x1ee>
 8004f08:	1c01      	adds	r1, r0, #0
 8004f0a:	b28a      	uxth	r2, r1
 8004f0c:	210a      	movs	r1, #10
 8004f0e:	187b      	adds	r3, r7, r1
 8004f10:	801a      	strh	r2, [r3, #0]

    USBD_CtlSendData (pdev, pbuf, len);
 8004f12:	187b      	adds	r3, r7, r1
 8004f14:	881a      	ldrh	r2, [r3, #0]
 8004f16:	68f9      	ldr	r1, [r7, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f000 fa72 	bl	8005404 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	88db      	ldrh	r3, [r3, #6]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d103      	bne.n	8004f30 <USBD_GetDescriptor+0x214>
  {
   USBD_CtlSendStatus(pdev);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f000 fad4 	bl	80054d8 <USBD_CtlSendStatus>
  }
}
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b004      	add	sp, #16
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	0800845c 	.word	0x0800845c
 8004f3c:	0800847c 	.word	0x0800847c

08004f40 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004f40:	b590      	push	{r4, r7, lr}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	889b      	ldrh	r3, [r3, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d13d      	bne.n	8004fce <USBD_SetAddress+0x8e>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	88db      	ldrh	r3, [r3, #6]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d139      	bne.n	8004fce <USBD_SetAddress+0x8e>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	885b      	ldrh	r3, [r3, #2]
 8004f5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f60:	d835      	bhi.n	8004fce <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	885b      	ldrh	r3, [r3, #2]
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	230f      	movs	r3, #15
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	217f      	movs	r1, #127	; 0x7f
 8004f6e:	400a      	ands	r2, r1
 8004f70:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	239d      	movs	r3, #157	; 0x9d
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	5cd3      	ldrb	r3, [r2, r3]
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d106      	bne.n	8004f8c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev , req);
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0011      	movs	r1, r2
 8004f84:	0018      	movs	r0, r3
 8004f86:	f000 f9be 	bl	8005306 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f8a:	e026      	b.n	8004fda <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	240f      	movs	r4, #15
 8004f90:	193a      	adds	r2, r7, r4
 8004f92:	4914      	ldr	r1, [pc, #80]	; (8004fe4 <USBD_SetAddress+0xa4>)
 8004f94:	7812      	ldrb	r2, [r2, #0]
 8004f96:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004f98:	193b      	adds	r3, r7, r4
 8004f9a:	781a      	ldrb	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	0011      	movs	r1, r2
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f002 fa09 	bl	80073b8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f000 fa95 	bl	80054d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004fae:	193b      	adds	r3, r7, r4
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	239d      	movs	r3, #157	; 0x9d
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	2102      	movs	r1, #2
 8004fbe:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fc0:	e00b      	b.n	8004fda <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	239d      	movs	r3, #157	; 0x9d
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	2101      	movs	r1, #1
 8004fca:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fcc:	e005      	b.n	8004fda <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	0011      	movs	r1, r2
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f000 f996 	bl	8005306 <USBD_CtlError>
  }
}
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	b005      	add	sp, #20
 8004fe0:	bd90      	pop	{r4, r7, pc}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	00000276 	.word	0x00000276

08004fe8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	885b      	ldrh	r3, [r3, #2]
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	4b4c      	ldr	r3, [pc, #304]	; (800512c <USBD_SetConfig+0x144>)
 8004ffa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004ffc:	4b4b      	ldr	r3, [pc, #300]	; (800512c <USBD_SetConfig+0x144>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d906      	bls.n	8005012 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	0011      	movs	r1, r2
 800500a:	0018      	movs	r0, r3
 800500c:	f000 f97b 	bl	8005306 <USBD_CtlError>
 8005010:	e088      	b.n	8005124 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	239d      	movs	r3, #157	; 0x9d
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	5cd3      	ldrb	r3, [r2, r3]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d002      	beq.n	8005024 <USBD_SetConfig+0x3c>
 800501e:	2b03      	cmp	r3, #3
 8005020:	d029      	beq.n	8005076 <USBD_SetConfig+0x8e>
 8005022:	e071      	b.n	8005108 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8005024:	4b41      	ldr	r3, [pc, #260]	; (800512c <USBD_SetConfig+0x144>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d01f      	beq.n	800506c <USBD_SetConfig+0x84>
      {
        pdev->dev_config = cfgidx;
 800502c:	4b3f      	ldr	r3, [pc, #252]	; (800512c <USBD_SetConfig+0x144>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	001a      	movs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	239d      	movs	r3, #157	; 0x9d
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	2103      	movs	r1, #3
 800503e:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005040:	4b3a      	ldr	r3, [pc, #232]	; (800512c <USBD_SetConfig+0x144>)
 8005042:	781a      	ldrb	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	0011      	movs	r1, r2
 8005048:	0018      	movs	r0, r3
 800504a:	f7ff f966 	bl	800431a <USBD_SetClassConfig>
 800504e:	0003      	movs	r3, r0
 8005050:	2b02      	cmp	r3, #2
 8005052:	d106      	bne.n	8005062 <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev, req);
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	0011      	movs	r1, r2
 800505a:	0018      	movs	r0, r3
 800505c:	f000 f953 	bl	8005306 <USBD_CtlError>
          return;
 8005060:	e060      	b.n	8005124 <USBD_SetConfig+0x13c>
        }
        USBD_CtlSendStatus(pdev);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	0018      	movs	r0, r3
 8005066:	f000 fa37 	bl	80054d8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800506a:	e05b      	b.n	8005124 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	0018      	movs	r0, r3
 8005070:	f000 fa32 	bl	80054d8 <USBD_CtlSendStatus>
      break;
 8005074:	e056      	b.n	8005124 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005076:	4b2d      	ldr	r3, [pc, #180]	; (800512c <USBD_SetConfig+0x144>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d115      	bne.n	80050aa <USBD_SetConfig+0xc2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	239d      	movs	r3, #157	; 0x9d
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	2102      	movs	r1, #2
 8005086:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 8005088:	4b28      	ldr	r3, [pc, #160]	; (800512c <USBD_SetConfig+0x144>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	001a      	movs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8005092:	4b26      	ldr	r3, [pc, #152]	; (800512c <USBD_SetConfig+0x144>)
 8005094:	781a      	ldrb	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	0011      	movs	r1, r2
 800509a:	0018      	movs	r0, r3
 800509c:	f7ff f965 	bl	800436a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	0018      	movs	r0, r3
 80050a4:	f000 fa18 	bl	80054d8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80050a8:	e03c      	b.n	8005124 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80050aa:	4b20      	ldr	r3, [pc, #128]	; (800512c <USBD_SetConfig+0x144>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	001a      	movs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d022      	beq.n	80050fe <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	0011      	movs	r1, r2
 80050c2:	0018      	movs	r0, r3
 80050c4:	f7ff f951 	bl	800436a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80050c8:	4b18      	ldr	r3, [pc, #96]	; (800512c <USBD_SetConfig+0x144>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	001a      	movs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80050d2:	4b16      	ldr	r3, [pc, #88]	; (800512c <USBD_SetConfig+0x144>)
 80050d4:	781a      	ldrb	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	0011      	movs	r1, r2
 80050da:	0018      	movs	r0, r3
 80050dc:	f7ff f91d 	bl	800431a <USBD_SetClassConfig>
 80050e0:	0003      	movs	r3, r0
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d106      	bne.n	80050f4 <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev, req);
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	0011      	movs	r1, r2
 80050ec:	0018      	movs	r0, r3
 80050ee:	f000 f90a 	bl	8005306 <USBD_CtlError>
          return;
 80050f2:	e017      	b.n	8005124 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	0018      	movs	r0, r3
 80050f8:	f000 f9ee 	bl	80054d8 <USBD_CtlSendStatus>
      break;
 80050fc:	e012      	b.n	8005124 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	0018      	movs	r0, r3
 8005102:	f000 f9e9 	bl	80054d8 <USBD_CtlSendStatus>
      break;
 8005106:	e00d      	b.n	8005124 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	0011      	movs	r1, r2
 800510e:	0018      	movs	r0, r3
 8005110:	f000 f8f9 	bl	8005306 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <USBD_SetConfig+0x144>)
 8005116:	781a      	ldrb	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	0011      	movs	r1, r2
 800511c:	0018      	movs	r0, r3
 800511e:	f7ff f924 	bl	800436a <USBD_ClrClassConfig>
      break;
 8005122:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8005124:	46bd      	mov	sp, r7
 8005126:	b002      	add	sp, #8
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	200001f8 	.word	0x200001f8

08005130 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	88db      	ldrh	r3, [r3, #6]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d006      	beq.n	8005150 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev , req);
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	0011      	movs	r1, r2
 8005148:	0018      	movs	r0, r3
 800514a:	f000 f8dc 	bl	8005306 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800514e:	e025      	b.n	800519c <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	239d      	movs	r3, #157	; 0x9d
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	5cd3      	ldrb	r3, [r2, r3]
 8005158:	2b01      	cmp	r3, #1
 800515a:	db18      	blt.n	800518e <USBD_GetConfig+0x5e>
 800515c:	2b02      	cmp	r3, #2
 800515e:	dd02      	ble.n	8005166 <USBD_GetConfig+0x36>
 8005160:	2b03      	cmp	r3, #3
 8005162:	d00c      	beq.n	800517e <USBD_GetConfig+0x4e>
 8005164:	e013      	b.n	800518e <USBD_GetConfig+0x5e>
      pdev->dev_default_config = 0U;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3308      	adds	r3, #8
 8005170:	0019      	movs	r1, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	0018      	movs	r0, r3
 8005178:	f000 f944 	bl	8005404 <USBD_CtlSendData>
      break;
 800517c:	e00e      	b.n	800519c <USBD_GetConfig+0x6c>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	1d19      	adds	r1, r3, #4
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	0018      	movs	r0, r3
 8005188:	f000 f93c 	bl	8005404 <USBD_CtlSendData>
      break;
 800518c:	e006      	b.n	800519c <USBD_GetConfig+0x6c>
      USBD_CtlError(pdev , req);
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	0011      	movs	r1, r2
 8005194:	0018      	movs	r0, r3
 8005196:	f000 f8b6 	bl	8005306 <USBD_CtlError>
      break;
 800519a:	46c0      	nop			; (mov r8, r8)
}
 800519c:	46c0      	nop			; (mov r8, r8)
 800519e:	46bd      	mov	sp, r7
 80051a0:	b002      	add	sp, #8
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	239d      	movs	r3, #157	; 0x9d
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	5cd3      	ldrb	r3, [r2, r3]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d822      	bhi.n	8005202 <USBD_GetStatus+0x5e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	88db      	ldrh	r3, [r3, #6]
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d006      	beq.n	80051d2 <USBD_GetStatus+0x2e>
    {
      USBD_CtlError(pdev, req);
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	0011      	movs	r1, r2
 80051ca:	0018      	movs	r0, r3
 80051cc:	f000 f89b 	bl	8005306 <USBD_CtlError>
      break;
 80051d0:	e01e      	b.n	8005210 <USBD_GetStatus+0x6c>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	239f      	movs	r3, #159	; 0x9f
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	58d3      	ldr	r3, [r2, r3]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <USBD_GetStatus+0x4c>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	2202      	movs	r2, #2
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	330c      	adds	r3, #12
 80051f4:	0019      	movs	r1, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	0018      	movs	r0, r3
 80051fc:	f000 f902 	bl	8005404 <USBD_CtlSendData>
    break;
 8005200:	e006      	b.n	8005210 <USBD_GetStatus+0x6c>

  default :
    USBD_CtlError(pdev , req);
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	0011      	movs	r1, r2
 8005208:	0018      	movs	r0, r3
 800520a:	f000 f87c 	bl	8005306 <USBD_CtlError>
    break;
 800520e:	46c0      	nop			; (mov r8, r8)
  }
}
 8005210:	46c0      	nop			; (mov r8, r8)
 8005212:	46bd      	mov	sp, r7
 8005214:	b002      	add	sp, #8
 8005216:	bd80      	pop	{r7, pc}

08005218 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	885b      	ldrh	r3, [r3, #2]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d108      	bne.n	800523c <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	239f      	movs	r3, #159	; 0x9f
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	2101      	movs	r1, #1
 8005232:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	0018      	movs	r0, r3
 8005238:	f000 f94e 	bl	80054d8 <USBD_CtlSendStatus>
  }

}
 800523c:	46c0      	nop			; (mov r8, r8)
 800523e:	46bd      	mov	sp, r7
 8005240:	b002      	add	sp, #8
 8005242:	bd80      	pop	{r7, pc}

08005244 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	239d      	movs	r3, #157	; 0x9d
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	5cd3      	ldrb	r3, [r2, r3]
 8005256:	3b01      	subs	r3, #1
 8005258:	2b02      	cmp	r3, #2
 800525a:	d80d      	bhi.n	8005278 <USBD_ClrFeature+0x34>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	885b      	ldrh	r3, [r3, #2]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d110      	bne.n	8005286 <USBD_ClrFeature+0x42>
    {
      pdev->dev_remote_wakeup = 0U;
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	239f      	movs	r3, #159	; 0x9f
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	2100      	movs	r1, #0
 800526c:	50d1      	str	r1, [r2, r3]
      USBD_CtlSendStatus(pdev);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	0018      	movs	r0, r3
 8005272:	f000 f931 	bl	80054d8 <USBD_CtlSendStatus>
    }
    break;
 8005276:	e006      	b.n	8005286 <USBD_ClrFeature+0x42>

  default :
     USBD_CtlError(pdev , req);
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	0011      	movs	r1, r2
 800527e:	0018      	movs	r0, r3
 8005280:	f000 f841 	bl	8005306 <USBD_CtlError>
    break;
 8005284:	e000      	b.n	8005288 <USBD_ClrFeature+0x44>
    break;
 8005286:	46c0      	nop			; (mov r8, r8)
  }
}
 8005288:	46c0      	nop			; (mov r8, r8)
 800528a:	46bd      	mov	sp, r7
 800528c:	b002      	add	sp, #8
 800528e:	bd80      	pop	{r7, pc}

08005290 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781a      	ldrb	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	785a      	ldrb	r2, [r3, #1]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	3302      	adds	r3, #2
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	3303      	adds	r3, #3
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	b29b      	uxth	r3, r3
 80052be:	18d3      	adds	r3, r2, r3
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	3304      	adds	r3, #4
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	3305      	adds	r3, #5
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	b29b      	uxth	r3, r3
 80052da:	18d3      	adds	r3, r2, r3
 80052dc:	b29a      	uxth	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	3306      	adds	r3, #6
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	3307      	adds	r3, #7
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	18d3      	adds	r3, r2, r3
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	80da      	strh	r2, [r3, #6]

}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	46bd      	mov	sp, r7
 8005302:	b002      	add	sp, #8
 8005304:	bd80      	pop	{r7, pc}

08005306 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2180      	movs	r1, #128	; 0x80
 8005314:	0018      	movs	r0, r3
 8005316:	f001 ffcc 	bl	80072b2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2100      	movs	r1, #0
 800531e:	0018      	movs	r0, r3
 8005320:	f001 ffc7 	bl	80072b2 <USBD_LL_StallEP>
}
 8005324:	46c0      	nop			; (mov r8, r8)
 8005326:	46bd      	mov	sp, r7
 8005328:	b002      	add	sp, #8
 800532a:	bd80      	pop	{r7, pc}

0800532c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800532c:	b590      	push	{r4, r7, lr}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005338:	2317      	movs	r3, #23
 800533a:	18fb      	adds	r3, r7, r3
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d03d      	beq.n	80053c2 <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	0018      	movs	r0, r3
 800534a:	f000 f83e 	bl	80053ca <USBD_GetLen>
 800534e:	0003      	movs	r3, r0
 8005350:	3301      	adds	r3, #1
 8005352:	b29b      	uxth	r3, r3
 8005354:	18db      	adds	r3, r3, r3
 8005356:	b29a      	uxth	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800535c:	2017      	movs	r0, #23
 800535e:	183b      	adds	r3, r7, r0
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	183a      	adds	r2, r7, r0
 8005364:	1c59      	adds	r1, r3, #1
 8005366:	7011      	strb	r1, [r2, #0]
 8005368:	001a      	movs	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	189b      	adds	r3, r3, r2
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	7812      	ldrb	r2, [r2, #0]
 8005372:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005374:	183b      	adds	r3, r7, r0
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	183a      	adds	r2, r7, r0
 800537a:	1c59      	adds	r1, r3, #1
 800537c:	7011      	strb	r1, [r2, #0]
 800537e:	001a      	movs	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	189b      	adds	r3, r3, r2
 8005384:	2203      	movs	r2, #3
 8005386:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005388:	e017      	b.n	80053ba <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	60fa      	str	r2, [r7, #12]
 8005390:	2417      	movs	r4, #23
 8005392:	193a      	adds	r2, r7, r4
 8005394:	7812      	ldrb	r2, [r2, #0]
 8005396:	1939      	adds	r1, r7, r4
 8005398:	1c50      	adds	r0, r2, #1
 800539a:	7008      	strb	r0, [r1, #0]
 800539c:	0011      	movs	r1, r2
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	1852      	adds	r2, r2, r1
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80053a6:	193b      	adds	r3, r7, r4
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	193a      	adds	r2, r7, r4
 80053ac:	1c59      	adds	r1, r3, #1
 80053ae:	7011      	strb	r1, [r2, #0]
 80053b0:	001a      	movs	r2, r3
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	189b      	adds	r3, r3, r2
 80053b6:	2200      	movs	r2, #0
 80053b8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e3      	bne.n	800538a <USBD_GetString+0x5e>
    }
  }
}
 80053c2:	46c0      	nop			; (mov r8, r8)
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b007      	add	sp, #28
 80053c8:	bd90      	pop	{r4, r7, pc}

080053ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80053d2:	230f      	movs	r3, #15
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	2200      	movs	r2, #0
 80053d8:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0')
 80053da:	e008      	b.n	80053ee <USBD_GetLen+0x24>
    {
        len++;
 80053dc:	210f      	movs	r1, #15
 80053de:	187b      	adds	r3, r7, r1
 80053e0:	781a      	ldrb	r2, [r3, #0]
 80053e2:	187b      	adds	r3, r7, r1
 80053e4:	3201      	adds	r2, #1
 80053e6:	701a      	strb	r2, [r3, #0]
        buf++;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3301      	adds	r3, #1
 80053ec:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f2      	bne.n	80053dc <USBD_GetLen+0x12>
    }

    return len;
 80053f6:	230f      	movs	r3, #15
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	781b      	ldrb	r3, [r3, #0]
}
 80053fc:	0018      	movs	r0, r3
 80053fe:	46bd      	mov	sp, r7
 8005400:	b004      	add	sp, #16
 8005402:	bd80      	pop	{r7, pc}

08005404 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	1dbb      	adds	r3, r7, #6
 8005410:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	239b      	movs	r3, #155	; 0x9b
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	2102      	movs	r1, #2
 800541a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800541c:	1dbb      	adds	r3, r7, #6
 800541e:	881a      	ldrh	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005424:	1dbb      	adds	r3, r7, #6
 8005426:	881a      	ldrh	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800542c:	1dbb      	adds	r3, r7, #6
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	2100      	movs	r1, #0
 8005436:	f001 ffeb 	bl	8007410 <USBD_LL_Transmit>

  return USBD_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	0018      	movs	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	b004      	add	sp, #16
 8005442:	bd80      	pop	{r7, pc}

08005444 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	1dbb      	adds	r3, r7, #6
 8005450:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005452:	1dbb      	adds	r3, r7, #6
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	2100      	movs	r1, #0
 800545c:	f001 ffd8 	bl	8007410 <USBD_LL_Transmit>

  return USBD_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	0018      	movs	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	b004      	add	sp, #16
 8005468:	bd80      	pop	{r7, pc}

0800546a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	1dbb      	adds	r3, r7, #6
 8005476:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	239b      	movs	r3, #155	; 0x9b
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	2103      	movs	r1, #3
 8005480:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8005482:	1dbb      	adds	r3, r7, #6
 8005484:	8819      	ldrh	r1, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	23a4      	movs	r3, #164	; 0xa4
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800548e:	1dbb      	adds	r3, r7, #6
 8005490:	8819      	ldrh	r1, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	23a6      	movs	r3, #166	; 0xa6
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800549a:	1dbb      	adds	r3, r7, #6
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	2100      	movs	r1, #0
 80054a4:	f001 ffec 	bl	8007480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	0018      	movs	r0, r3
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b004      	add	sp, #16
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	1dbb      	adds	r3, r7, #6
 80054be:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80054c0:	1dbb      	adds	r3, r7, #6
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	2100      	movs	r1, #0
 80054ca:	f001 ffd9 	bl	8007480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	0018      	movs	r0, r3
 80054d2:	46bd      	mov	sp, r7
 80054d4:	b004      	add	sp, #16
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	239b      	movs	r3, #155	; 0x9b
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	2104      	movs	r1, #4
 80054e8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	2300      	movs	r3, #0
 80054ee:	2200      	movs	r2, #0
 80054f0:	2100      	movs	r1, #0
 80054f2:	f001 ff8d 	bl	8007410 <USBD_LL_Transmit>

  return USBD_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	0018      	movs	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	b002      	add	sp, #8
 80054fe:	bd80      	pop	{r7, pc}

08005500 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	239b      	movs	r3, #155	; 0x9b
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	2105      	movs	r1, #5
 8005510:	50d1      	str	r1, [r2, r3]

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	2300      	movs	r3, #0
 8005516:	2200      	movs	r2, #0
 8005518:	2100      	movs	r1, #0
 800551a:	f001 ffb1 	bl	8007480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	0018      	movs	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	b002      	add	sp, #8
 8005526:	bd80      	pop	{r7, pc}

08005528 <InitGame>:
uint16_t current_state;
//Output buffer for the game
#define GAME_OUTPUT_BUFFER_SIZE 512
char game_output_buffer[GAME_OUTPUT_BUFFER_SIZE];

void InitGame(){
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
	InitItms();
 800552c:	f000 fbbc 	bl	8005ca8 <InitItms>
	InitObjs();
 8005530:	f000 ffe4 	bl	80064fc <InitObjs>
	InitRooms();
 8005534:	f001 f84e 	bl	80065d4 <InitRooms>
	current_room = GetRoomByToken(RTKN_TESTSTART);
 8005538:	2001      	movs	r0, #1
 800553a:	f001 f9c7 	bl	80068cc <GetRoomByToken>
 800553e:	0002      	movs	r2, r0
 8005540:	4b03      	ldr	r3, [pc, #12]	; (8005550 <InitGame+0x28>)
 8005542:	601a      	str	r2, [r3, #0]
	current_state = GSTATE_MOVING;
 8005544:	4b03      	ldr	r3, [pc, #12]	; (8005554 <InitGame+0x2c>)
 8005546:	2201      	movs	r2, #1
 8005548:	801a      	strh	r2, [r3, #0]
}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20000430 	.word	0x20000430
 8005554:	2000043c 	.word	0x2000043c

08005558 <PrintBadInput>:

void PrintBadInput(char* ins, uint8_t index){
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	000a      	movs	r2, r1
 8005562:	1cfb      	adds	r3, r7, #3
 8005564:	701a      	strb	r2, [r3, #0]
	ClearTxBuffer();
 8005566:	f001 fc33 	bl	8006dd0 <ClearTxBuffer>
	strncpy(UserTxBufferFS, "Invalid input: ", 15);
 800556a:	4a2b      	ldr	r2, [pc, #172]	; (8005618 <PrintBadInput+0xc0>)
 800556c:	4b2b      	ldr	r3, [pc, #172]	; (800561c <PrintBadInput+0xc4>)
 800556e:	0010      	movs	r0, r2
 8005570:	0019      	movs	r1, r3
 8005572:	230f      	movs	r3, #15
 8005574:	001a      	movs	r2, r3
 8005576:	f002 f9a3 	bl	80078c0 <memcpy>
	uint8_t i = 0;
 800557a:	230f      	movs	r3, #15
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	2200      	movs	r2, #0
 8005580:	701a      	strb	r2, [r3, #0]
	while(	(i < APP_TX_DATA_SIZE - 18) &&
 8005582:	e015      	b.n	80055b0 <PrintBadInput+0x58>
			(ins[i + index] != '\0') &&
			(ins[i + index] != ' ')){
		UserTxBufferFS[i + 15] = ins[i + index];
 8005584:	210f      	movs	r1, #15
 8005586:	187b      	adds	r3, r7, r1
 8005588:	781a      	ldrb	r2, [r3, #0]
 800558a:	1cfb      	adds	r3, r7, #3
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	18d3      	adds	r3, r2, r3
 8005590:	001a      	movs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	189a      	adds	r2, r3, r2
 8005596:	0008      	movs	r0, r1
 8005598:	187b      	adds	r3, r7, r1
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	330f      	adds	r3, #15
 800559e:	7811      	ldrb	r1, [r2, #0]
 80055a0:	4a1d      	ldr	r2, [pc, #116]	; (8005618 <PrintBadInput+0xc0>)
 80055a2:	54d1      	strb	r1, [r2, r3]
		i++;
 80055a4:	0001      	movs	r1, r0
 80055a6:	187b      	adds	r3, r7, r1
 80055a8:	781a      	ldrb	r2, [r3, #0]
 80055aa:	187b      	adds	r3, r7, r1
 80055ac:	3201      	adds	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
			(ins[i + index] != '\0') &&
 80055b0:	230f      	movs	r3, #15
 80055b2:	18fb      	adds	r3, r7, r3
 80055b4:	781a      	ldrb	r2, [r3, #0]
 80055b6:	1cfb      	adds	r3, r7, #3
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	18d3      	adds	r3, r2, r3
 80055bc:	001a      	movs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	189b      	adds	r3, r3, r2
 80055c2:	781b      	ldrb	r3, [r3, #0]
	while(	(i < APP_TX_DATA_SIZE - 18) &&
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00b      	beq.n	80055e0 <PrintBadInput+0x88>
			(ins[i + index] != ' ')){
 80055c8:	230f      	movs	r3, #15
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	781a      	ldrb	r2, [r3, #0]
 80055ce:	1cfb      	adds	r3, r7, #3
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	18d3      	adds	r3, r2, r3
 80055d4:	001a      	movs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	189b      	adds	r3, r3, r2
 80055da:	781b      	ldrb	r3, [r3, #0]
			(ins[i + index] != '\0') &&
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d1d1      	bne.n	8005584 <PrintBadInput+0x2c>
	}
	UserTxBufferFS[i + 16] = '\r';
 80055e0:	200f      	movs	r0, #15
 80055e2:	183b      	adds	r3, r7, r0
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	3310      	adds	r3, #16
 80055e8:	4a0b      	ldr	r2, [pc, #44]	; (8005618 <PrintBadInput+0xc0>)
 80055ea:	210d      	movs	r1, #13
 80055ec:	54d1      	strb	r1, [r2, r3]
	UserTxBufferFS[i + 17] = '\n';
 80055ee:	183b      	adds	r3, r7, r0
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	3311      	adds	r3, #17
 80055f4:	4a08      	ldr	r2, [pc, #32]	; (8005618 <PrintBadInput+0xc0>)
 80055f6:	210a      	movs	r1, #10
 80055f8:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS(UserTxBufferFS, i + 18);
 80055fa:	183b      	adds	r3, r7, r0
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3312      	adds	r3, #18
 8005602:	b29a      	uxth	r2, r3
 8005604:	4b04      	ldr	r3, [pc, #16]	; (8005618 <PrintBadInput+0xc0>)
 8005606:	0011      	movs	r1, r2
 8005608:	0018      	movs	r0, r3
 800560a:	f001 fb91 	bl	8006d30 <CDC_Transmit_FS>
}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	46bd      	mov	sp, r7
 8005612:	b004      	add	sp, #16
 8005614:	bd80      	pop	{r7, pc}
 8005616:	46c0      	nop			; (mov r8, r8)
 8005618:	20000640 	.word	0x20000640
 800561c:	08008140 	.word	0x08008140

08005620 <GameLoop>:

void GameLoop(){
 8005620:	b5b0      	push	{r4, r5, r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
	  uint8_t ret = 0;
 8005626:	1dfb      	adds	r3, r7, #7
 8005628:	2200      	movs	r2, #0
 800562a:	701a      	strb	r2, [r3, #0]
	  if(CheckUserDataReady()){
 800562c:	f001 fc26 	bl	8006e7c <CheckUserDataReady>
 8005630:	1e03      	subs	r3, r0, #0
 8005632:	d04d      	beq.n	80056d0 <GameLoop+0xb0>
		  ret = TokenizeUserInput(GetUserDataBuf(), GetUserDataSize());
 8005634:	f001 fbac 	bl	8006d90 <GetUserDataBuf>
 8005638:	0005      	movs	r5, r0
 800563a:	f001 fc29 	bl	8006e90 <GetUserDataSize>
 800563e:	0003      	movs	r3, r0
 8005640:	1dfc      	adds	r4, r7, #7
 8005642:	0019      	movs	r1, r3
 8005644:	0028      	movs	r0, r5
 8005646:	f000 fb87 	bl	8005d58 <TokenizeUserInput>
 800564a:	0003      	movs	r3, r0
 800564c:	7023      	strb	r3, [r4, #0]
		  if(ret != 0xFF){
 800564e:	1dfb      	adds	r3, r7, #7
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2bff      	cmp	r3, #255	; 0xff
 8005654:	d00b      	beq.n	800566e <GameLoop+0x4e>
			  PrintBadInput(GetUserDataBuf(), ret);
 8005656:	f001 fb9b 	bl	8006d90 <GetUserDataBuf>
 800565a:	0002      	movs	r2, r0
 800565c:	1dfb      	adds	r3, r7, #7
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	0019      	movs	r1, r3
 8005662:	0010      	movs	r0, r2
 8005664:	f7ff ff78 	bl	8005558 <PrintBadInput>
			  ClearUserDataBuf();
 8005668:	f001 fb9a 	bl	8006da0 <ClearUserDataBuf>
 800566c:	e02e      	b.n	80056cc <GameLoop+0xac>
		  }
		  else{
			  if(game_tokens[0] == LTKN_ACT_GO){
 800566e:	4b1a      	ldr	r3, [pc, #104]	; (80056d8 <GameLoop+0xb8>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d102      	bne.n	800567c <GameLoop+0x5c>
				  MovePlayer();
 8005676:	f000 f9e9 	bl	8005a4c <MovePlayer>
 800567a:	e027      	b.n	80056cc <GameLoop+0xac>
			  }
			  else if(game_tokens[0] == LTKN_ACT_LOCATION){
 800567c:	4b16      	ldr	r3, [pc, #88]	; (80056d8 <GameLoop+0xb8>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b06      	cmp	r3, #6
 8005682:	d102      	bne.n	800568a <GameLoop+0x6a>
				  PrintLocation();
 8005684:	f000 f894 	bl	80057b0 <PrintLocation>
 8005688:	e020      	b.n	80056cc <GameLoop+0xac>
			  }
			  else if(game_tokens[0] == LTKN_ACT_GET){
 800568a:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <GameLoop+0xb8>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b08      	cmp	r3, #8
 8005690:	d102      	bne.n	8005698 <GameLoop+0x78>
				  GetItem();
 8005692:	f000 f98f 	bl	80059b4 <GetItem>
 8005696:	e019      	b.n	80056cc <GameLoop+0xac>
			  }
			  else if(game_tokens[0] == LTKN_ACT_INVENTORY){
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <GameLoop+0xb8>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b0b      	cmp	r3, #11
 800569e:	d102      	bne.n	80056a6 <GameLoop+0x86>
				  PrintInventory();
 80056a0:	f000 f940 	bl	8005924 <PrintInventory>
 80056a4:	e012      	b.n	80056cc <GameLoop+0xac>
			  }
			  else if(game_tokens[0] == LTKN_ACT_EXAMINE){
 80056a6:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <GameLoop+0xb8>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b0c      	cmp	r3, #12
 80056ac:	d102      	bne.n	80056b4 <GameLoop+0x94>
				  ExamineItem();
 80056ae:	f000 f961 	bl	8005974 <ExamineItem>
 80056b2:	e00b      	b.n	80056cc <GameLoop+0xac>
			  }
			  else if(game_tokens[0] == LTKN_ACT_USE){
 80056b4:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <GameLoop+0xb8>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d102      	bne.n	80056c2 <GameLoop+0xa2>
				  UseItem();
 80056bc:	f000 f810 	bl	80056e0 <UseItem>
 80056c0:	e004      	b.n	80056cc <GameLoop+0xac>
			  }
			  else{
				  PrintToConsole("You can't perform that action", 29);
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <GameLoop+0xbc>)
 80056c4:	211d      	movs	r1, #29
 80056c6:	0018      	movs	r0, r3
 80056c8:	f001 fb90 	bl	8006dec <PrintToConsole>
			  }
		  }
		  ClearUserDataBuf();
 80056cc:	f001 fb68 	bl	8006da0 <ClearUserDataBuf>
	  }
	  else{

	  }
}
 80056d0:	46c0      	nop			; (mov r8, r8)
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b002      	add	sp, #8
 80056d6:	bdb0      	pop	{r4, r5, r7, pc}
 80056d8:	20000434 	.word	0x20000434
 80056dc:	08008150 	.word	0x08008150

080056e0 <UseItem>:

void UseItem(){
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
	//Make sure the item exists
	struct itm* useitem = GetItmByToken(game_tokens[1]);
 80056e6:	4b2e      	ldr	r3, [pc, #184]	; (80057a0 <UseItem+0xc0>)
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	0018      	movs	r0, r3
 80056ec:	f000 fb04 	bl	8005cf8 <GetItmByToken>
 80056f0:	0003      	movs	r3, r0
 80056f2:	60bb      	str	r3, [r7, #8]
	if(useitem == NULL){
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d105      	bne.n	8005706 <UseItem+0x26>
		PrintToConsole("You can't use that item", 23);
 80056fa:	4b2a      	ldr	r3, [pc, #168]	; (80057a4 <UseItem+0xc4>)
 80056fc:	2117      	movs	r1, #23
 80056fe:	0018      	movs	r0, r3
 8005700:	f001 fb74 	bl	8006dec <PrintToConsole>
		return;
 8005704:	e048      	b.n	8005798 <UseItem+0xb8>
	}
	//Make sure the item is in the players iventory
	if(useitem->state != ITM_IN_INVENTORY){
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	78db      	ldrb	r3, [r3, #3]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d005      	beq.n	800571a <UseItem+0x3a>
		PrintToConsole("You can't use that item", 23);
 800570e:	4b25      	ldr	r3, [pc, #148]	; (80057a4 <UseItem+0xc4>)
 8005710:	2117      	movs	r1, #23
 8005712:	0018      	movs	r0, r3
 8005714:	f001 fb6a 	bl	8006dec <PrintToConsole>
		return;
 8005718:	e03e      	b.n	8005798 <UseItem+0xb8>
	}
	//Make sure the object the item is being used on exists
	struct obj* useobj = GetObjByToken(game_tokens[2]);
 800571a:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <UseItem+0xc0>)
 800571c:	789b      	ldrb	r3, [r3, #2]
 800571e:	0018      	movs	r0, r3
 8005720:	f000 ff0e 	bl	8006540 <GetObjByToken>
 8005724:	0003      	movs	r3, r0
 8005726:	607b      	str	r3, [r7, #4]
	if(useobj == NULL){
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d105      	bne.n	800573a <UseItem+0x5a>
		PrintToConsole("You can't use that on that object", 33);
 800572e:	4b1e      	ldr	r3, [pc, #120]	; (80057a8 <UseItem+0xc8>)
 8005730:	2121      	movs	r1, #33	; 0x21
 8005732:	0018      	movs	r0, r3
 8005734:	f001 fb5a 	bl	8006dec <PrintToConsole>
		return;
 8005738:	e02e      	b.n	8005798 <UseItem+0xb8>
	}
	//Make sure the object that item is being used on is in the current room
	for(uint8_t i = 0; i < current_room->object_count; i++){
 800573a:	230f      	movs	r3, #15
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	e01a      	b.n	800577a <UseItem+0x9a>
		if(useobj == current_room->objects[i]){
 8005744:	4b19      	ldr	r3, [pc, #100]	; (80057ac <UseItem+0xcc>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800574a:	230f      	movs	r3, #15
 800574c:	18fb      	adds	r3, r7, r3
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	18d3      	adds	r3, r2, r3
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	429a      	cmp	r2, r3
 800575a:	d108      	bne.n	800576e <UseItem+0x8e>
			//Make sure that item and that object can be used together
			if(useitem->object_token == game_tokens[2])
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	789a      	ldrb	r2, [r3, #2]
 8005760:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <UseItem+0xc0>)
 8005762:	789b      	ldrb	r3, [r3, #2]
 8005764:	429a      	cmp	r2, r3
 8005766:	d102      	bne.n	800576e <UseItem+0x8e>
			{
				UseItemStateMachine();
 8005768:	f000 fa66 	bl	8005c38 <UseItemStateMachine>
				return;
 800576c:	e014      	b.n	8005798 <UseItem+0xb8>
	for(uint8_t i = 0; i < current_room->object_count; i++){
 800576e:	210f      	movs	r1, #15
 8005770:	187b      	adds	r3, r7, r1
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	187b      	adds	r3, r7, r1
 8005776:	3201      	adds	r2, #1
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	4b0c      	ldr	r3, [pc, #48]	; (80057ac <UseItem+0xcc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2229      	movs	r2, #41	; 0x29
 8005780:	5c9b      	ldrb	r3, [r3, r2]
 8005782:	220f      	movs	r2, #15
 8005784:	18ba      	adds	r2, r7, r2
 8005786:	7812      	ldrb	r2, [r2, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d3db      	bcc.n	8005744 <UseItem+0x64>
			}
		}
	}
	PrintToConsole("You can't use that on that object", 33);
 800578c:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <UseItem+0xc8>)
 800578e:	2121      	movs	r1, #33	; 0x21
 8005790:	0018      	movs	r0, r3
 8005792:	f001 fb2b 	bl	8006dec <PrintToConsole>
	return;
 8005796:	46c0      	nop			; (mov r8, r8)
}
 8005798:	46bd      	mov	sp, r7
 800579a:	b004      	add	sp, #16
 800579c:	bd80      	pop	{r7, pc}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	20000434 	.word	0x20000434
 80057a4:	08008170 	.word	0x08008170
 80057a8:	08008188 	.word	0x08008188
 80057ac:	20000430 	.word	0x20000430

080057b0 <PrintLocation>:

void PrintLocation(){
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b09a      	sub	sp, #104	; 0x68
 80057b4:	af00      	add	r7, sp, #0
	char tmp[100];
	memset(tmp, '\0', 100);
 80057b6:	1d3b      	adds	r3, r7, #4
 80057b8:	2264      	movs	r2, #100	; 0x64
 80057ba:	2100      	movs	r1, #0
 80057bc:	0018      	movs	r0, r3
 80057be:	f002 f888 	bl	80078d2 <memset>
	snprintf(tmp, 100, "You are in %s", current_room->name);
 80057c2:	4b50      	ldr	r3, [pc, #320]	; (8005904 <PrintLocation+0x154>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	4a4f      	ldr	r2, [pc, #316]	; (8005908 <PrintLocation+0x158>)
 80057ca:	1d38      	adds	r0, r7, #4
 80057cc:	2164      	movs	r1, #100	; 0x64
 80057ce:	f002 f889 	bl	80078e4 <sniprintf>
	PrintStrToConsole(tmp);
 80057d2:	1d3b      	adds	r3, r7, #4
 80057d4:	0018      	movs	r0, r3
 80057d6:	f001 fb65 	bl	8006ea4 <PrintStrToConsole>
	if(current_room->north_room != NULL){
 80057da:	4b4a      	ldr	r3, [pc, #296]	; (8005904 <PrintLocation+0x154>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d012      	beq.n	800580a <PrintLocation+0x5a>
		snprintf(tmp, 100, "To the north is %s", current_room->north_room->name);
 80057e4:	4b47      	ldr	r3, [pc, #284]	; (8005904 <PrintLocation+0x154>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	4a47      	ldr	r2, [pc, #284]	; (800590c <PrintLocation+0x15c>)
 80057ee:	1d38      	adds	r0, r7, #4
 80057f0:	2164      	movs	r1, #100	; 0x64
 80057f2:	f002 f877 	bl	80078e4 <sniprintf>
		PrintStrToConsole(tmp);
 80057f6:	1d3b      	adds	r3, r7, #4
 80057f8:	0018      	movs	r0, r3
 80057fa:	f001 fb53 	bl	8006ea4 <PrintStrToConsole>
		memset(tmp, '\0', 100);
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	2264      	movs	r2, #100	; 0x64
 8005802:	2100      	movs	r1, #0
 8005804:	0018      	movs	r0, r3
 8005806:	f002 f864 	bl	80078d2 <memset>
	}
	if(current_room->east_room != NULL){
 800580a:	4b3e      	ldr	r3, [pc, #248]	; (8005904 <PrintLocation+0x154>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d012      	beq.n	800583a <PrintLocation+0x8a>
		snprintf(tmp, 100, "To the east is %s", current_room->east_room->name);
 8005814:	4b3b      	ldr	r3, [pc, #236]	; (8005904 <PrintLocation+0x154>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	4a3c      	ldr	r2, [pc, #240]	; (8005910 <PrintLocation+0x160>)
 800581e:	1d38      	adds	r0, r7, #4
 8005820:	2164      	movs	r1, #100	; 0x64
 8005822:	f002 f85f 	bl	80078e4 <sniprintf>
		PrintStrToConsole(tmp);
 8005826:	1d3b      	adds	r3, r7, #4
 8005828:	0018      	movs	r0, r3
 800582a:	f001 fb3b 	bl	8006ea4 <PrintStrToConsole>
		memset(tmp, '\0', 100);
 800582e:	1d3b      	adds	r3, r7, #4
 8005830:	2264      	movs	r2, #100	; 0x64
 8005832:	2100      	movs	r1, #0
 8005834:	0018      	movs	r0, r3
 8005836:	f002 f84c 	bl	80078d2 <memset>
	}
	if(current_room->south_room != NULL){
 800583a:	4b32      	ldr	r3, [pc, #200]	; (8005904 <PrintLocation+0x154>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d012      	beq.n	800586a <PrintLocation+0xba>
		snprintf(tmp, 100, "To the south is %s", current_room->south_room->name);
 8005844:	4b2f      	ldr	r3, [pc, #188]	; (8005904 <PrintLocation+0x154>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	4a31      	ldr	r2, [pc, #196]	; (8005914 <PrintLocation+0x164>)
 800584e:	1d38      	adds	r0, r7, #4
 8005850:	2164      	movs	r1, #100	; 0x64
 8005852:	f002 f847 	bl	80078e4 <sniprintf>
		PrintStrToConsole(tmp);
 8005856:	1d3b      	adds	r3, r7, #4
 8005858:	0018      	movs	r0, r3
 800585a:	f001 fb23 	bl	8006ea4 <PrintStrToConsole>
		memset(tmp, '\0', 100);
 800585e:	1d3b      	adds	r3, r7, #4
 8005860:	2264      	movs	r2, #100	; 0x64
 8005862:	2100      	movs	r1, #0
 8005864:	0018      	movs	r0, r3
 8005866:	f002 f834 	bl	80078d2 <memset>
	}
	if(current_room->west_room != NULL){
 800586a:	4b26      	ldr	r3, [pc, #152]	; (8005904 <PrintLocation+0x154>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d012      	beq.n	800589a <PrintLocation+0xea>
		snprintf(tmp, 100, "To the west is %s", current_room->west_room->name);
 8005874:	4b23      	ldr	r3, [pc, #140]	; (8005904 <PrintLocation+0x154>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	4a26      	ldr	r2, [pc, #152]	; (8005918 <PrintLocation+0x168>)
 800587e:	1d38      	adds	r0, r7, #4
 8005880:	2164      	movs	r1, #100	; 0x64
 8005882:	f002 f82f 	bl	80078e4 <sniprintf>
		PrintStrToConsole(tmp);
 8005886:	1d3b      	adds	r3, r7, #4
 8005888:	0018      	movs	r0, r3
 800588a:	f001 fb0b 	bl	8006ea4 <PrintStrToConsole>
		memset(tmp, '\0', 100);
 800588e:	1d3b      	adds	r3, r7, #4
 8005890:	2264      	movs	r2, #100	; 0x64
 8005892:	2100      	movs	r1, #0
 8005894:	0018      	movs	r0, r3
 8005896:	f002 f81c 	bl	80078d2 <memset>
	}
	if(current_room->up_room != NULL){
 800589a:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <PrintLocation+0x154>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d012      	beq.n	80058ca <PrintLocation+0x11a>
		snprintf(tmp, 100, "Above you is %s", current_room->up_room->name);
 80058a4:	4b17      	ldr	r3, [pc, #92]	; (8005904 <PrintLocation+0x154>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	4a1b      	ldr	r2, [pc, #108]	; (800591c <PrintLocation+0x16c>)
 80058ae:	1d38      	adds	r0, r7, #4
 80058b0:	2164      	movs	r1, #100	; 0x64
 80058b2:	f002 f817 	bl	80078e4 <sniprintf>
		PrintStrToConsole(tmp);
 80058b6:	1d3b      	adds	r3, r7, #4
 80058b8:	0018      	movs	r0, r3
 80058ba:	f001 faf3 	bl	8006ea4 <PrintStrToConsole>
		memset(tmp, '\0', 100);
 80058be:	1d3b      	adds	r3, r7, #4
 80058c0:	2264      	movs	r2, #100	; 0x64
 80058c2:	2100      	movs	r1, #0
 80058c4:	0018      	movs	r0, r3
 80058c6:	f002 f804 	bl	80078d2 <memset>
	}
	if(current_room->down_room != NULL){
 80058ca:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <PrintLocation+0x154>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d012      	beq.n	80058fa <PrintLocation+0x14a>
		snprintf(tmp, 100, "Below you is %s", current_room->down_room->name);
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <PrintLocation+0x154>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	4a10      	ldr	r2, [pc, #64]	; (8005920 <PrintLocation+0x170>)
 80058de:	1d38      	adds	r0, r7, #4
 80058e0:	2164      	movs	r1, #100	; 0x64
 80058e2:	f001 ffff 	bl	80078e4 <sniprintf>
		PrintStrToConsole(tmp);
 80058e6:	1d3b      	adds	r3, r7, #4
 80058e8:	0018      	movs	r0, r3
 80058ea:	f001 fadb 	bl	8006ea4 <PrintStrToConsole>
		memset(tmp, '\0', 100);
 80058ee:	1d3b      	adds	r3, r7, #4
 80058f0:	2264      	movs	r2, #100	; 0x64
 80058f2:	2100      	movs	r1, #0
 80058f4:	0018      	movs	r0, r3
 80058f6:	f001 ffec 	bl	80078d2 <memset>
	}
}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	46bd      	mov	sp, r7
 80058fe:	b01a      	add	sp, #104	; 0x68
 8005900:	bd80      	pop	{r7, pc}
 8005902:	46c0      	nop			; (mov r8, r8)
 8005904:	20000430 	.word	0x20000430
 8005908:	080081ac 	.word	0x080081ac
 800590c:	080081bc 	.word	0x080081bc
 8005910:	080081d0 	.word	0x080081d0
 8005914:	080081e4 	.word	0x080081e4
 8005918:	080081f8 	.word	0x080081f8
 800591c:	0800820c 	.word	0x0800820c
 8005920:	0800821c 	.word	0x0800821c

08005924 <PrintInventory>:

void PrintInventory(){
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < ITEM_COUNT; i++){
 800592a:	1dfb      	adds	r3, r7, #7
 800592c:	2200      	movs	r2, #0
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	e015      	b.n	800595e <PrintInventory+0x3a>
		if(game_itms[i]->state == ITM_IN_INVENTORY){
 8005932:	1dfb      	adds	r3, r7, #7
 8005934:	781a      	ldrb	r2, [r3, #0]
 8005936:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <PrintInventory+0x4c>)
 8005938:	0092      	lsls	r2, r2, #2
 800593a:	58d3      	ldr	r3, [r2, r3]
 800593c:	78db      	ldrb	r3, [r3, #3]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d108      	bne.n	8005954 <PrintInventory+0x30>
			PrintStrToConsole(game_itms[i]->name);
 8005942:	1dfb      	adds	r3, r7, #7
 8005944:	781a      	ldrb	r2, [r3, #0]
 8005946:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <PrintInventory+0x4c>)
 8005948:	0092      	lsls	r2, r2, #2
 800594a:	58d3      	ldr	r3, [r2, r3]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	0018      	movs	r0, r3
 8005950:	f001 faa8 	bl	8006ea4 <PrintStrToConsole>
	for(uint8_t i = 0; i < ITEM_COUNT; i++){
 8005954:	1dfb      	adds	r3, r7, #7
 8005956:	781a      	ldrb	r2, [r3, #0]
 8005958:	1dfb      	adds	r3, r7, #7
 800595a:	3201      	adds	r2, #1
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	1dfb      	adds	r3, r7, #7
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0e5      	beq.n	8005932 <PrintInventory+0xe>
		}
	}
}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	46bd      	mov	sp, r7
 800596a:	b002      	add	sp, #8
 800596c:	bd80      	pop	{r7, pc}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	20000438 	.word	0x20000438

08005974 <ExamineItem>:

void ExamineItem(){
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
	struct itm* examine = GetItmByToken(game_tokens[1]);
 800597a:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <ExamineItem+0x38>)
 800597c:	785b      	ldrb	r3, [r3, #1]
 800597e:	0018      	movs	r0, r3
 8005980:	f000 f9ba 	bl	8005cf8 <GetItmByToken>
 8005984:	0003      	movs	r3, r0
 8005986:	607b      	str	r3, [r7, #4]
	if(examine != NULL){
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <ExamineItem+0x26>
		PrintStrToConsole(examine->examine_text);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	0018      	movs	r0, r3
 8005994:	f001 fa86 	bl	8006ea4 <PrintStrToConsole>
	}
	else{
		PrintToConsole("You can't examine that", 22);
	}
}
 8005998:	e004      	b.n	80059a4 <ExamineItem+0x30>
		PrintToConsole("You can't examine that", 22);
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <ExamineItem+0x3c>)
 800599c:	2116      	movs	r1, #22
 800599e:	0018      	movs	r0, r3
 80059a0:	f001 fa24 	bl	8006dec <PrintToConsole>
}
 80059a4:	46c0      	nop			; (mov r8, r8)
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b002      	add	sp, #8
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	20000434 	.word	0x20000434
 80059b0:	0800822c 	.word	0x0800822c

080059b4 <GetItem>:

void GetItem(){
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < current_room->item_count; i++){
 80059ba:	1dfb      	adds	r3, r7, #7
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e02c      	b.n	8005a1c <GetItem+0x68>
		if(game_tokens[1] == current_room->items[i]->token){
 80059c2:	4b1e      	ldr	r3, [pc, #120]	; (8005a3c <GetItem+0x88>)
 80059c4:	785a      	ldrb	r2, [r3, #1]
 80059c6:	4b1e      	ldr	r3, [pc, #120]	; (8005a40 <GetItem+0x8c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6a19      	ldr	r1, [r3, #32]
 80059cc:	1dfb      	adds	r3, r7, #7
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	18cb      	adds	r3, r1, r3
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d11a      	bne.n	8005a12 <GetItem+0x5e>
			if(current_room->items[i]->state == ITM_NOT_PICKED_UP){
 80059dc:	4b18      	ldr	r3, [pc, #96]	; (8005a40 <GetItem+0x8c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6a1a      	ldr	r2, [r3, #32]
 80059e2:	1dfb      	adds	r3, r7, #7
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	18d3      	adds	r3, r2, r3
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	78db      	ldrb	r3, [r3, #3]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d10f      	bne.n	8005a12 <GetItem+0x5e>
				current_room->items[i]->state = ITM_IN_INVENTORY;
 80059f2:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <GetItem+0x8c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6a1a      	ldr	r2, [r3, #32]
 80059f8:	1dfb      	adds	r3, r7, #7
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	18d3      	adds	r3, r2, r3
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2202      	movs	r2, #2
 8005a04:	70da      	strb	r2, [r3, #3]
				PrintToConsole("You got it", 10);
 8005a06:	4b0f      	ldr	r3, [pc, #60]	; (8005a44 <GetItem+0x90>)
 8005a08:	210a      	movs	r1, #10
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f001 f9ee 	bl	8006dec <PrintToConsole>
				return;
 8005a10:	e011      	b.n	8005a36 <GetItem+0x82>
	for(uint8_t i = 0; i < current_room->item_count; i++){
 8005a12:	1dfb      	adds	r3, r7, #7
 8005a14:	781a      	ldrb	r2, [r3, #0]
 8005a16:	1dfb      	adds	r3, r7, #7
 8005a18:	3201      	adds	r2, #1
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <GetItem+0x8c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2228      	movs	r2, #40	; 0x28
 8005a22:	5c9b      	ldrb	r3, [r3, r2]
 8005a24:	1dfa      	adds	r2, r7, #7
 8005a26:	7812      	ldrb	r2, [r2, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d3ca      	bcc.n	80059c2 <GetItem+0xe>
			}
		}
	}
	PrintToConsole("You can't get that", 18);
 8005a2c:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <GetItem+0x94>)
 8005a2e:	2112      	movs	r1, #18
 8005a30:	0018      	movs	r0, r3
 8005a32:	f001 f9db 	bl	8006dec <PrintToConsole>
}
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b002      	add	sp, #8
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20000434 	.word	0x20000434
 8005a40:	20000430 	.word	0x20000430
 8005a44:	08008244 	.word	0x08008244
 8005a48:	08008250 	.word	0x08008250

08005a4c <MovePlayer>:

void MovePlayer(){
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
	if(game_tokens[1] <= 0x15 && game_tokens[1] >= 0x10){
 8005a52:	4b6f      	ldr	r3, [pc, #444]	; (8005c10 <MovePlayer+0x1c4>)
 8005a54:	785b      	ldrb	r3, [r3, #1]
 8005a56:	2b15      	cmp	r3, #21
 8005a58:	d900      	bls.n	8005a5c <MovePlayer+0x10>
 8005a5a:	e0d1      	b.n	8005c00 <MovePlayer+0x1b4>
 8005a5c:	4b6c      	ldr	r3, [pc, #432]	; (8005c10 <MovePlayer+0x1c4>)
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	2b0f      	cmp	r3, #15
 8005a62:	d800      	bhi.n	8005a66 <MovePlayer+0x1a>
 8005a64:	e0cc      	b.n	8005c00 <MovePlayer+0x1b4>
		if(game_tokens[1] == LTKN_NAVD_NORTH){
 8005a66:	4b6a      	ldr	r3, [pc, #424]	; (8005c10 <MovePlayer+0x1c4>)
 8005a68:	785b      	ldrb	r3, [r3, #1]
 8005a6a:	2b10      	cmp	r3, #16
 8005a6c:	d110      	bne.n	8005a90 <MovePlayer+0x44>
			if(current_room->north_room != 0x00){
 8005a6e:	4b69      	ldr	r3, [pc, #420]	; (8005c14 <MovePlayer+0x1c8>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <MovePlayer+0x38>
				current_room = current_room->north_room;
 8005a78:	4b66      	ldr	r3, [pc, #408]	; (8005c14 <MovePlayer+0x1c8>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4b65      	ldr	r3, [pc, #404]	; (8005c14 <MovePlayer+0x1c8>)
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	e06e      	b.n	8005b62 <MovePlayer+0x116>
			}
			else{
				PrintToConsole("You can't go north", 18);
 8005a84:	4b64      	ldr	r3, [pc, #400]	; (8005c18 <MovePlayer+0x1cc>)
 8005a86:	2112      	movs	r1, #18
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f001 f9af 	bl	8006dec <PrintToConsole>
				return;
 8005a8e:	e0bc      	b.n	8005c0a <MovePlayer+0x1be>
			}
		}
		else if(game_tokens[1] == LTKN_NAVD_EAST){
 8005a90:	4b5f      	ldr	r3, [pc, #380]	; (8005c10 <MovePlayer+0x1c4>)
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b12      	cmp	r3, #18
 8005a96:	d110      	bne.n	8005aba <MovePlayer+0x6e>
			if(current_room->east_room != 0x00){
 8005a98:	4b5e      	ldr	r3, [pc, #376]	; (8005c14 <MovePlayer+0x1c8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <MovePlayer+0x62>
				current_room = current_room->east_room;
 8005aa2:	4b5c      	ldr	r3, [pc, #368]	; (8005c14 <MovePlayer+0x1c8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	4b5a      	ldr	r3, [pc, #360]	; (8005c14 <MovePlayer+0x1c8>)
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	e059      	b.n	8005b62 <MovePlayer+0x116>
			}
			else{
				PrintToConsole("You can't go east", 17);
 8005aae:	4b5b      	ldr	r3, [pc, #364]	; (8005c1c <MovePlayer+0x1d0>)
 8005ab0:	2111      	movs	r1, #17
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f001 f99a 	bl	8006dec <PrintToConsole>
				return;
 8005ab8:	e0a7      	b.n	8005c0a <MovePlayer+0x1be>
			}
		}
		else if(game_tokens[1] == LTKN_NAVD_SOUTH){
 8005aba:	4b55      	ldr	r3, [pc, #340]	; (8005c10 <MovePlayer+0x1c4>)
 8005abc:	785b      	ldrb	r3, [r3, #1]
 8005abe:	2b11      	cmp	r3, #17
 8005ac0:	d110      	bne.n	8005ae4 <MovePlayer+0x98>
			if(current_room->south_room != 0x00){
 8005ac2:	4b54      	ldr	r3, [pc, #336]	; (8005c14 <MovePlayer+0x1c8>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <MovePlayer+0x8c>
				current_room = current_room->south_room;
 8005acc:	4b51      	ldr	r3, [pc, #324]	; (8005c14 <MovePlayer+0x1c8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	4b50      	ldr	r3, [pc, #320]	; (8005c14 <MovePlayer+0x1c8>)
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	e044      	b.n	8005b62 <MovePlayer+0x116>
			}
			else{
				PrintToConsole("You can't go south", 18);
 8005ad8:	4b51      	ldr	r3, [pc, #324]	; (8005c20 <MovePlayer+0x1d4>)
 8005ada:	2112      	movs	r1, #18
 8005adc:	0018      	movs	r0, r3
 8005ade:	f001 f985 	bl	8006dec <PrintToConsole>
				return;
 8005ae2:	e092      	b.n	8005c0a <MovePlayer+0x1be>
			}
		}
		else if(game_tokens[1] == LTKN_NAVD_WEST){
 8005ae4:	4b4a      	ldr	r3, [pc, #296]	; (8005c10 <MovePlayer+0x1c4>)
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b13      	cmp	r3, #19
 8005aea:	d110      	bne.n	8005b0e <MovePlayer+0xc2>
			if(current_room->west_room != 0x00){
 8005aec:	4b49      	ldr	r3, [pc, #292]	; (8005c14 <MovePlayer+0x1c8>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <MovePlayer+0xb6>
				current_room = current_room->west_room;
 8005af6:	4b47      	ldr	r3, [pc, #284]	; (8005c14 <MovePlayer+0x1c8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68da      	ldr	r2, [r3, #12]
 8005afc:	4b45      	ldr	r3, [pc, #276]	; (8005c14 <MovePlayer+0x1c8>)
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e02f      	b.n	8005b62 <MovePlayer+0x116>
			}
			else{
				PrintToConsole("You can't go west", 17);
 8005b02:	4b48      	ldr	r3, [pc, #288]	; (8005c24 <MovePlayer+0x1d8>)
 8005b04:	2111      	movs	r1, #17
 8005b06:	0018      	movs	r0, r3
 8005b08:	f001 f970 	bl	8006dec <PrintToConsole>
				return;
 8005b0c:	e07d      	b.n	8005c0a <MovePlayer+0x1be>
			}
		}
		else if(game_tokens[1] == LTKN_NAVD_UP){
 8005b0e:	4b40      	ldr	r3, [pc, #256]	; (8005c10 <MovePlayer+0x1c4>)
 8005b10:	785b      	ldrb	r3, [r3, #1]
 8005b12:	2b14      	cmp	r3, #20
 8005b14:	d110      	bne.n	8005b38 <MovePlayer+0xec>
			if(current_room->up_room != 0x00){
 8005b16:	4b3f      	ldr	r3, [pc, #252]	; (8005c14 <MovePlayer+0x1c8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d005      	beq.n	8005b2c <MovePlayer+0xe0>
				current_room = current_room->up_room;
 8005b20:	4b3c      	ldr	r3, [pc, #240]	; (8005c14 <MovePlayer+0x1c8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	4b3b      	ldr	r3, [pc, #236]	; (8005c14 <MovePlayer+0x1c8>)
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	e01a      	b.n	8005b62 <MovePlayer+0x116>
			}
			else{
				PrintToConsole("You can't go up", 15);
 8005b2c:	4b3e      	ldr	r3, [pc, #248]	; (8005c28 <MovePlayer+0x1dc>)
 8005b2e:	210f      	movs	r1, #15
 8005b30:	0018      	movs	r0, r3
 8005b32:	f001 f95b 	bl	8006dec <PrintToConsole>
				return;
 8005b36:	e068      	b.n	8005c0a <MovePlayer+0x1be>
			}
		}
		else if(game_tokens[1] == LTKN_NAVD_DOWN){
 8005b38:	4b35      	ldr	r3, [pc, #212]	; (8005c10 <MovePlayer+0x1c4>)
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	2b15      	cmp	r3, #21
 8005b3e:	d110      	bne.n	8005b62 <MovePlayer+0x116>
			if(current_room->down_room != 0x00){
 8005b40:	4b34      	ldr	r3, [pc, #208]	; (8005c14 <MovePlayer+0x1c8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <MovePlayer+0x10a>
				current_room = current_room->down_room;
 8005b4a:	4b32      	ldr	r3, [pc, #200]	; (8005c14 <MovePlayer+0x1c8>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	4b30      	ldr	r3, [pc, #192]	; (8005c14 <MovePlayer+0x1c8>)
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	e005      	b.n	8005b62 <MovePlayer+0x116>
			}
			else{
				PrintToConsole("You can't go down", 17);
 8005b56:	4b35      	ldr	r3, [pc, #212]	; (8005c2c <MovePlayer+0x1e0>)
 8005b58:	2111      	movs	r1, #17
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f001 f946 	bl	8006dec <PrintToConsole>
				return;
 8005b60:	e053      	b.n	8005c0a <MovePlayer+0x1be>
			}
		}
		PrintStrToConsole(current_room->flavortext);
 8005b62:	4b2c      	ldr	r3, [pc, #176]	; (8005c14 <MovePlayer+0x1c8>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f001 f99b 	bl	8006ea4 <PrintStrToConsole>
		for(uint8_t i = 0; i < current_room->item_count; i++){
 8005b6e:	1dfb      	adds	r3, r7, #7
 8005b70:	2200      	movs	r2, #0
 8005b72:	701a      	strb	r2, [r3, #0]
 8005b74:	e01b      	b.n	8005bae <MovePlayer+0x162>
			if(current_room->items[i]->state == ITM_NOT_PICKED_UP){
 8005b76:	4b27      	ldr	r3, [pc, #156]	; (8005c14 <MovePlayer+0x1c8>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6a1a      	ldr	r2, [r3, #32]
 8005b7c:	1dfb      	adds	r3, r7, #7
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	18d3      	adds	r3, r2, r3
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	78db      	ldrb	r3, [r3, #3]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d10b      	bne.n	8005ba4 <MovePlayer+0x158>
				PrintStrToConsole(current_room->items[i]->seen_text);
 8005b8c:	4b21      	ldr	r3, [pc, #132]	; (8005c14 <MovePlayer+0x1c8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6a1a      	ldr	r2, [r3, #32]
 8005b92:	1dfb      	adds	r3, r7, #7
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	18d3      	adds	r3, r2, r3
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f001 f980 	bl	8006ea4 <PrintStrToConsole>
		for(uint8_t i = 0; i < current_room->item_count; i++){
 8005ba4:	1dfb      	adds	r3, r7, #7
 8005ba6:	781a      	ldrb	r2, [r3, #0]
 8005ba8:	1dfb      	adds	r3, r7, #7
 8005baa:	3201      	adds	r2, #1
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	4b19      	ldr	r3, [pc, #100]	; (8005c14 <MovePlayer+0x1c8>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2228      	movs	r2, #40	; 0x28
 8005bb4:	5c9b      	ldrb	r3, [r3, r2]
 8005bb6:	1dfa      	adds	r2, r7, #7
 8005bb8:	7812      	ldrb	r2, [r2, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d3db      	bcc.n	8005b76 <MovePlayer+0x12a>
			}
		}
		for(uint8_t i = 0; i < current_room->object_count; i++){
 8005bbe:	1dbb      	adds	r3, r7, #6
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
 8005bc4:	e010      	b.n	8005be8 <MovePlayer+0x19c>
			PrintStrToConsole(current_room->objects[i]->seen_text);
 8005bc6:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <MovePlayer+0x1c8>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bcc:	1dbb      	adds	r3, r7, #6
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	18d3      	adds	r3, r2, r3
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f001 f963 	bl	8006ea4 <PrintStrToConsole>
		for(uint8_t i = 0; i < current_room->object_count; i++){
 8005bde:	1dbb      	adds	r3, r7, #6
 8005be0:	781a      	ldrb	r2, [r3, #0]
 8005be2:	1dbb      	adds	r3, r7, #6
 8005be4:	3201      	adds	r2, #1
 8005be6:	701a      	strb	r2, [r3, #0]
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <MovePlayer+0x1c8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2229      	movs	r2, #41	; 0x29
 8005bee:	5c9b      	ldrb	r3, [r3, r2]
 8005bf0:	1dba      	adds	r2, r7, #6
 8005bf2:	7812      	ldrb	r2, [r2, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d3e6      	bcc.n	8005bc6 <MovePlayer+0x17a>
		}
		current_state = GSTATE_MOVING;
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <MovePlayer+0x1e4>)
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	801a      	strh	r2, [r3, #0]
 8005bfe:	e004      	b.n	8005c0a <MovePlayer+0x1be>
	}
	else{
		PrintToConsole("You can't go that way", 21);
 8005c00:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <MovePlayer+0x1e8>)
 8005c02:	2115      	movs	r1, #21
 8005c04:	0018      	movs	r0, r3
 8005c06:	f001 f8f1 	bl	8006dec <PrintToConsole>
	}
}
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	b002      	add	sp, #8
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20000434 	.word	0x20000434
 8005c14:	20000430 	.word	0x20000430
 8005c18:	08008264 	.word	0x08008264
 8005c1c:	08008278 	.word	0x08008278
 8005c20:	0800828c 	.word	0x0800828c
 8005c24:	080082a0 	.word	0x080082a0
 8005c28:	080082b4 	.word	0x080082b4
 8005c2c:	080082c4 	.word	0x080082c4
 8005c30:	2000043c 	.word	0x2000043c
 8005c34:	080082d8 	.word	0x080082d8

08005c38 <UseItemStateMachine>:

void UseItemStateMachine(){
 8005c38:	b5b0      	push	{r4, r5, r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
	//Use a test item on a test object, unlocks the final room
	if(game_tokens[1] == LTKN_ITM_TEST && game_tokens[2] == LTKN_OBJ_TEST){
 8005c3c:	4b17      	ldr	r3, [pc, #92]	; (8005c9c <UseItemStateMachine+0x64>)
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	2b50      	cmp	r3, #80	; 0x50
 8005c42:	d128      	bne.n	8005c96 <UseItemStateMachine+0x5e>
 8005c44:	4b15      	ldr	r3, [pc, #84]	; (8005c9c <UseItemStateMachine+0x64>)
 8005c46:	789b      	ldrb	r3, [r3, #2]
 8005c48:	2b20      	cmp	r3, #32
 8005c4a:	d124      	bne.n	8005c96 <UseItemStateMachine+0x5e>
		//Link the two rooms
		GetRoomByToken(RTKN_TESTSTART)->up_room = GetRoomByToken(RTKN_TESTUP);
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	f000 fe3d 	bl	80068cc <GetRoomByToken>
 8005c52:	0004      	movs	r4, r0
 8005c54:	2007      	movs	r0, #7
 8005c56:	f000 fe39 	bl	80068cc <GetRoomByToken>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	6123      	str	r3, [r4, #16]
		GetRoomByToken(RTKN_TESTUP)->down_room = GetRoomByToken(RTKN_TESTSTART);
 8005c5e:	2007      	movs	r0, #7
 8005c60:	f000 fe34 	bl	80068cc <GetRoomByToken>
 8005c64:	0004      	movs	r4, r0
 8005c66:	2001      	movs	r0, #1
 8005c68:	f000 fe30 	bl	80068cc <GetRoomByToken>
 8005c6c:	0003      	movs	r3, r0
 8005c6e:	6163      	str	r3, [r4, #20]
		//Change the flavor test of the start room
		GetRoomByToken(RTKN_TESTSTART)->flavortext = rm_flvr_teststart_up_unlocked;
 8005c70:	2001      	movs	r0, #1
 8005c72:	f000 fe2b 	bl	80068cc <GetRoomByToken>
 8005c76:	0003      	movs	r3, r0
 8005c78:	4a09      	ldr	r2, [pc, #36]	; (8005ca0 <UseItemStateMachine+0x68>)
 8005c7a:	61da      	str	r2, [r3, #28]
		//Set the item as used
		GetItmByToken(game_tokens[1])->state = ITM_USED_UP;
 8005c7c:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <UseItemStateMachine+0x64>)
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	0018      	movs	r0, r3
 8005c82:	f000 f839 	bl	8005cf8 <GetItmByToken>
 8005c86:	0003      	movs	r3, r0
 8005c88:	2203      	movs	r2, #3
 8005c8a:	70da      	strb	r2, [r3, #3]
		//Print some text
		PrintToConsole("You hear something click in the start room", 42);
 8005c8c:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <UseItemStateMachine+0x6c>)
 8005c8e:	212a      	movs	r1, #42	; 0x2a
 8005c90:	0018      	movs	r0, r3
 8005c92:	f001 f8ab 	bl	8006dec <PrintToConsole>
	}
}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8005c9c:	20000434 	.word	0x20000434
 8005ca0:	08008494 	.word	0x08008494
 8005ca4:	080082f0 	.word	0x080082f0

08005ca8 <InitItms>:
//Item examine text
const char itm_testitm_exmn[] = "It's a test item. Use it on a test object.";
//Game items
struct itm itm_testitm;

void InitItms(){
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0

	itm_testitm.token = LTKN_ITM_TEST;
 8005cac:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <InitItms+0x3c>)
 8005cae:	2250      	movs	r2, #80	; 0x50
 8005cb0:	701a      	strb	r2, [r3, #0]
	itm_testitm.combine_token = ITM_NULL;
 8005cb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <InitItms+0x3c>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	705a      	strb	r2, [r3, #1]
	itm_testitm.object_token = LTKN_OBJ_TEST;
 8005cb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <InitItms+0x3c>)
 8005cba:	2220      	movs	r2, #32
 8005cbc:	709a      	strb	r2, [r3, #2]
	itm_testitm.state = ITM_NOT_PICKED_UP;
 8005cbe:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <InitItms+0x3c>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	70da      	strb	r2, [r3, #3]
	itm_testitm.name = itm_testitem_name;
 8005cc4:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <InitItms+0x3c>)
 8005cc6:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <InitItms+0x40>)
 8005cc8:	605a      	str	r2, [r3, #4]
	itm_testitm.seen_text = itm_testitm_seen;
 8005cca:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <InitItms+0x3c>)
 8005ccc:	4a07      	ldr	r2, [pc, #28]	; (8005cec <InitItms+0x44>)
 8005cce:	609a      	str	r2, [r3, #8]
	itm_testitm.examine_text = itm_testitm_exmn;
 8005cd0:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <InitItms+0x3c>)
 8005cd2:	4a07      	ldr	r2, [pc, #28]	; (8005cf0 <InitItms+0x48>)
 8005cd4:	60da      	str	r2, [r3, #12]
	game_itms[0] = &itm_testitm;
 8005cd6:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <InitItms+0x4c>)
 8005cd8:	4a02      	ldr	r2, [pc, #8]	; (8005ce4 <InitItms+0x3c>)
 8005cda:	601a      	str	r2, [r3, #0]
}
 8005cdc:	46c0      	nop			; (mov r8, r8)
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	20000840 	.word	0x20000840
 8005ce8:	080084d8 	.word	0x080084d8
 8005cec:	080084e4 	.word	0x080084e4
 8005cf0:	0800850c 	.word	0x0800850c
 8005cf4:	20000438 	.word	0x20000438

08005cf8 <GetItmByToken>:

struct itm* GetItmByToken(uint8_t token){
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	0002      	movs	r2, r0
 8005d00:	1dfb      	adds	r3, r7, #7
 8005d02:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < ITEM_COUNT; i++){
 8005d04:	230f      	movs	r3, #15
 8005d06:	18fb      	adds	r3, r7, r3
 8005d08:	2200      	movs	r2, #0
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	e017      	b.n	8005d3e <GetItmByToken+0x46>
		if(game_itms[i]->token == token){
 8005d0e:	230f      	movs	r3, #15
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	781a      	ldrb	r2, [r3, #0]
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <GetItmByToken+0x5c>)
 8005d16:	0092      	lsls	r2, r2, #2
 8005d18:	58d3      	ldr	r3, [r2, r3]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	1dfa      	adds	r2, r7, #7
 8005d1e:	7812      	ldrb	r2, [r2, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d106      	bne.n	8005d32 <GetItmByToken+0x3a>
			return game_itms[i];
 8005d24:	230f      	movs	r3, #15
 8005d26:	18fb      	adds	r3, r7, r3
 8005d28:	781a      	ldrb	r2, [r3, #0]
 8005d2a:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <GetItmByToken+0x5c>)
 8005d2c:	0092      	lsls	r2, r2, #2
 8005d2e:	58d3      	ldr	r3, [r2, r3]
 8005d30:	e00b      	b.n	8005d4a <GetItmByToken+0x52>
	for(uint8_t i = 0; i < ITEM_COUNT; i++){
 8005d32:	210f      	movs	r1, #15
 8005d34:	187b      	adds	r3, r7, r1
 8005d36:	781a      	ldrb	r2, [r3, #0]
 8005d38:	187b      	adds	r3, r7, r1
 8005d3a:	3201      	adds	r2, #1
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	230f      	movs	r3, #15
 8005d40:	18fb      	adds	r3, r7, r3
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0e2      	beq.n	8005d0e <GetItmByToken+0x16>
		}
	}
	return NULL;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	b004      	add	sp, #16
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	20000438 	.word	0x20000438

08005d58 <TokenizeUserInput>:
#include "lexer.h"

//Lexically analyze the user input
//Return 0xFF and set global vars if fully understood
//Else, return the index of the first character of the not understood word
uint8_t TokenizeUserInput(char *buf, uint8_t len){
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	000a      	movs	r2, r1
 8005d62:	1cfb      	adds	r3, r7, #3
 8005d64:	701a      	strb	r2, [r3, #0]
	//Clear the tokens
	memset(game_tokens, LTKN_TOKEN_NULL, MAX_TOKENS);
 8005d66:	4bcf      	ldr	r3, [pc, #828]	; (80060a4 <TokenizeUserInput+0x34c>)
 8005d68:	2203      	movs	r2, #3
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f001 fdb0 	bl	80078d2 <memset>
	uint8_t buf_index = 0;
 8005d72:	230f      	movs	r3, #15
 8005d74:	18fb      	adds	r3, r7, r3
 8005d76:	2200      	movs	r2, #0
 8005d78:	701a      	strb	r2, [r3, #0]
	uint8_t token_count = 0;
 8005d7a:	230e      	movs	r3, #14
 8005d7c:	18fb      	adds	r3, r7, r3
 8005d7e:	2200      	movs	r2, #0
 8005d80:	701a      	strb	r2, [r3, #0]
	while(buf[buf_index] != '\0' && token_count < MAX_TOKENS){
 8005d82:	e26a      	b.n	800625a <TokenizeUserInput+0x502>
		if(!strncmp(&buf[buf_index], "go", 2)){
 8005d84:	230f      	movs	r3, #15
 8005d86:	18fb      	adds	r3, r7, r3
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	18d3      	adds	r3, r2, r3
 8005d8e:	49c6      	ldr	r1, [pc, #792]	; (80060a8 <TokenizeUserInput+0x350>)
 8005d90:	2202      	movs	r2, #2
 8005d92:	0018      	movs	r0, r3
 8005d94:	f001 fdd8 	bl	8007948 <strncmp>
 8005d98:	1e03      	subs	r3, r0, #0
 8005d9a:	d10c      	bne.n	8005db6 <TokenizeUserInput+0x5e>
			game_tokens[token_count] = LTKN_ACT_GO;
 8005d9c:	230e      	movs	r3, #14
 8005d9e:	18fb      	adds	r3, r7, r3
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	4ac0      	ldr	r2, [pc, #768]	; (80060a4 <TokenizeUserInput+0x34c>)
 8005da4:	2101      	movs	r1, #1
 8005da6:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 3;
 8005da8:	220f      	movs	r2, #15
 8005daa:	18bb      	adds	r3, r7, r2
 8005dac:	18ba      	adds	r2, r7, r2
 8005dae:	7812      	ldrb	r2, [r2, #0]
 8005db0:	3203      	adds	r2, #3
 8005db2:	701a      	strb	r2, [r3, #0]
 8005db4:	e24b      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "use", 3)){
 8005db6:	230f      	movs	r3, #15
 8005db8:	18fb      	adds	r3, r7, r3
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	18d3      	adds	r3, r2, r3
 8005dc0:	49ba      	ldr	r1, [pc, #744]	; (80060ac <TokenizeUserInput+0x354>)
 8005dc2:	2203      	movs	r2, #3
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f001 fdbf 	bl	8007948 <strncmp>
 8005dca:	1e03      	subs	r3, r0, #0
 8005dcc:	d10c      	bne.n	8005de8 <TokenizeUserInput+0x90>
			game_tokens[token_count] = LTKN_ACT_USE;
 8005dce:	230e      	movs	r3, #14
 8005dd0:	18fb      	adds	r3, r7, r3
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	4ab3      	ldr	r2, [pc, #716]	; (80060a4 <TokenizeUserInput+0x34c>)
 8005dd6:	2102      	movs	r1, #2
 8005dd8:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 4;
 8005dda:	220f      	movs	r2, #15
 8005ddc:	18bb      	adds	r3, r7, r2
 8005dde:	18ba      	adds	r2, r7, r2
 8005de0:	7812      	ldrb	r2, [r2, #0]
 8005de2:	3204      	adds	r2, #4
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	e232      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "push", 4)){
 8005de8:	230f      	movs	r3, #15
 8005dea:	18fb      	adds	r3, r7, r3
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	18d3      	adds	r3, r2, r3
 8005df2:	49af      	ldr	r1, [pc, #700]	; (80060b0 <TokenizeUserInput+0x358>)
 8005df4:	2204      	movs	r2, #4
 8005df6:	0018      	movs	r0, r3
 8005df8:	f001 fda6 	bl	8007948 <strncmp>
 8005dfc:	1e03      	subs	r3, r0, #0
 8005dfe:	d10c      	bne.n	8005e1a <TokenizeUserInput+0xc2>
			game_tokens[token_count] = LTKN_ACT_PUSH;
 8005e00:	230e      	movs	r3, #14
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	4aa7      	ldr	r2, [pc, #668]	; (80060a4 <TokenizeUserInput+0x34c>)
 8005e08:	2103      	movs	r1, #3
 8005e0a:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8005e0c:	220f      	movs	r2, #15
 8005e0e:	18bb      	adds	r3, r7, r2
 8005e10:	18ba      	adds	r2, r7, r2
 8005e12:	7812      	ldrb	r2, [r2, #0]
 8005e14:	3205      	adds	r2, #5
 8005e16:	701a      	strb	r2, [r3, #0]
 8005e18:	e219      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "pull", 4)){
 8005e1a:	230f      	movs	r3, #15
 8005e1c:	18fb      	adds	r3, r7, r3
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	18d3      	adds	r3, r2, r3
 8005e24:	49a3      	ldr	r1, [pc, #652]	; (80060b4 <TokenizeUserInput+0x35c>)
 8005e26:	2204      	movs	r2, #4
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f001 fd8d 	bl	8007948 <strncmp>
 8005e2e:	1e03      	subs	r3, r0, #0
 8005e30:	d10c      	bne.n	8005e4c <TokenizeUserInput+0xf4>
			game_tokens[token_count] = LTKN_ACT_PULL;
 8005e32:	230e      	movs	r3, #14
 8005e34:	18fb      	adds	r3, r7, r3
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	4a9a      	ldr	r2, [pc, #616]	; (80060a4 <TokenizeUserInput+0x34c>)
 8005e3a:	2104      	movs	r1, #4
 8005e3c:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8005e3e:	220f      	movs	r2, #15
 8005e40:	18bb      	adds	r3, r7, r2
 8005e42:	18ba      	adds	r2, r7, r2
 8005e44:	7812      	ldrb	r2, [r2, #0]
 8005e46:	3205      	adds	r2, #5
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	e200      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "turn", 4)){
 8005e4c:	230f      	movs	r3, #15
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	18d3      	adds	r3, r2, r3
 8005e56:	4998      	ldr	r1, [pc, #608]	; (80060b8 <TokenizeUserInput+0x360>)
 8005e58:	2204      	movs	r2, #4
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f001 fd74 	bl	8007948 <strncmp>
 8005e60:	1e03      	subs	r3, r0, #0
 8005e62:	d10c      	bne.n	8005e7e <TokenizeUserInput+0x126>
			game_tokens[token_count] = LTKN_ACT_TURN;
 8005e64:	230e      	movs	r3, #14
 8005e66:	18fb      	adds	r3, r7, r3
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	4a8e      	ldr	r2, [pc, #568]	; (80060a4 <TokenizeUserInput+0x34c>)
 8005e6c:	2105      	movs	r1, #5
 8005e6e:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8005e70:	220f      	movs	r2, #15
 8005e72:	18bb      	adds	r3, r7, r2
 8005e74:	18ba      	adds	r2, r7, r2
 8005e76:	7812      	ldrb	r2, [r2, #0]
 8005e78:	3205      	adds	r2, #5
 8005e7a:	701a      	strb	r2, [r3, #0]
 8005e7c:	e1e7      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "location", 8)){
 8005e7e:	230f      	movs	r3, #15
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	18d3      	adds	r3, r2, r3
 8005e88:	498c      	ldr	r1, [pc, #560]	; (80060bc <TokenizeUserInput+0x364>)
 8005e8a:	2208      	movs	r2, #8
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f001 fd5b 	bl	8007948 <strncmp>
 8005e92:	1e03      	subs	r3, r0, #0
 8005e94:	d10c      	bne.n	8005eb0 <TokenizeUserInput+0x158>
			game_tokens[token_count] = LTKN_ACT_LOCATION;
 8005e96:	230e      	movs	r3, #14
 8005e98:	18fb      	adds	r3, r7, r3
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	4a81      	ldr	r2, [pc, #516]	; (80060a4 <TokenizeUserInput+0x34c>)
 8005e9e:	2106      	movs	r1, #6
 8005ea0:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 9;
 8005ea2:	220f      	movs	r2, #15
 8005ea4:	18bb      	adds	r3, r7, r2
 8005ea6:	18ba      	adds	r2, r7, r2
 8005ea8:	7812      	ldrb	r2, [r2, #0]
 8005eaa:	3209      	adds	r2, #9
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e1ce      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "say", 3)){
 8005eb0:	230f      	movs	r3, #15
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	18d3      	adds	r3, r2, r3
 8005eba:	4981      	ldr	r1, [pc, #516]	; (80060c0 <TokenizeUserInput+0x368>)
 8005ebc:	2203      	movs	r2, #3
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f001 fd42 	bl	8007948 <strncmp>
 8005ec4:	1e03      	subs	r3, r0, #0
 8005ec6:	d10c      	bne.n	8005ee2 <TokenizeUserInput+0x18a>
			game_tokens[token_count] = LTKN_ACT_SAY;
 8005ec8:	230e      	movs	r3, #14
 8005eca:	18fb      	adds	r3, r7, r3
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	4a75      	ldr	r2, [pc, #468]	; (80060a4 <TokenizeUserInput+0x34c>)
 8005ed0:	2107      	movs	r1, #7
 8005ed2:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 4;
 8005ed4:	220f      	movs	r2, #15
 8005ed6:	18bb      	adds	r3, r7, r2
 8005ed8:	18ba      	adds	r2, r7, r2
 8005eda:	7812      	ldrb	r2, [r2, #0]
 8005edc:	3204      	adds	r2, #4
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	e1b5      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "get", 3)){
 8005ee2:	230f      	movs	r3, #15
 8005ee4:	18fb      	adds	r3, r7, r3
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	18d3      	adds	r3, r2, r3
 8005eec:	4975      	ldr	r1, [pc, #468]	; (80060c4 <TokenizeUserInput+0x36c>)
 8005eee:	2203      	movs	r2, #3
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f001 fd29 	bl	8007948 <strncmp>
 8005ef6:	1e03      	subs	r3, r0, #0
 8005ef8:	d10c      	bne.n	8005f14 <TokenizeUserInput+0x1bc>
			game_tokens[token_count] = LTKN_ACT_GET;
 8005efa:	230e      	movs	r3, #14
 8005efc:	18fb      	adds	r3, r7, r3
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	4a68      	ldr	r2, [pc, #416]	; (80060a4 <TokenizeUserInput+0x34c>)
 8005f02:	2108      	movs	r1, #8
 8005f04:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 4;
 8005f06:	220f      	movs	r2, #15
 8005f08:	18bb      	adds	r3, r7, r2
 8005f0a:	18ba      	adds	r2, r7, r2
 8005f0c:	7812      	ldrb	r2, [r2, #0]
 8005f0e:	3204      	adds	r2, #4
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	e19c      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "mix", 3)){
 8005f14:	230f      	movs	r3, #15
 8005f16:	18fb      	adds	r3, r7, r3
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	18d3      	adds	r3, r2, r3
 8005f1e:	496a      	ldr	r1, [pc, #424]	; (80060c8 <TokenizeUserInput+0x370>)
 8005f20:	2203      	movs	r2, #3
 8005f22:	0018      	movs	r0, r3
 8005f24:	f001 fd10 	bl	8007948 <strncmp>
 8005f28:	1e03      	subs	r3, r0, #0
 8005f2a:	d10c      	bne.n	8005f46 <TokenizeUserInput+0x1ee>
			game_tokens[token_count] = LTKN_ACT_MIX;
 8005f2c:	230e      	movs	r3, #14
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	4a5c      	ldr	r2, [pc, #368]	; (80060a4 <TokenizeUserInput+0x34c>)
 8005f34:	2109      	movs	r1, #9
 8005f36:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 4;
 8005f38:	220f      	movs	r2, #15
 8005f3a:	18bb      	adds	r3, r7, r2
 8005f3c:	18ba      	adds	r2, r7, r2
 8005f3e:	7812      	ldrb	r2, [r2, #0]
 8005f40:	3204      	adds	r2, #4
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	e183      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "north", 5)){
 8005f46:	230f      	movs	r3, #15
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	18d3      	adds	r3, r2, r3
 8005f50:	495e      	ldr	r1, [pc, #376]	; (80060cc <TokenizeUserInput+0x374>)
 8005f52:	2205      	movs	r2, #5
 8005f54:	0018      	movs	r0, r3
 8005f56:	f001 fcf7 	bl	8007948 <strncmp>
 8005f5a:	1e03      	subs	r3, r0, #0
 8005f5c:	d10c      	bne.n	8005f78 <TokenizeUserInput+0x220>
			game_tokens[token_count] = LTKN_NAVD_NORTH;
 8005f5e:	230e      	movs	r3, #14
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	4a4f      	ldr	r2, [pc, #316]	; (80060a4 <TokenizeUserInput+0x34c>)
 8005f66:	2110      	movs	r1, #16
 8005f68:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 6;
 8005f6a:	220f      	movs	r2, #15
 8005f6c:	18bb      	adds	r3, r7, r2
 8005f6e:	18ba      	adds	r2, r7, r2
 8005f70:	7812      	ldrb	r2, [r2, #0]
 8005f72:	3206      	adds	r2, #6
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	e16a      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "south", 5)){
 8005f78:	230f      	movs	r3, #15
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	18d3      	adds	r3, r2, r3
 8005f82:	4953      	ldr	r1, [pc, #332]	; (80060d0 <TokenizeUserInput+0x378>)
 8005f84:	2205      	movs	r2, #5
 8005f86:	0018      	movs	r0, r3
 8005f88:	f001 fcde 	bl	8007948 <strncmp>
 8005f8c:	1e03      	subs	r3, r0, #0
 8005f8e:	d10c      	bne.n	8005faa <TokenizeUserInput+0x252>
			game_tokens[token_count] = LTKN_NAVD_SOUTH;
 8005f90:	230e      	movs	r3, #14
 8005f92:	18fb      	adds	r3, r7, r3
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	4a43      	ldr	r2, [pc, #268]	; (80060a4 <TokenizeUserInput+0x34c>)
 8005f98:	2111      	movs	r1, #17
 8005f9a:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 6;
 8005f9c:	220f      	movs	r2, #15
 8005f9e:	18bb      	adds	r3, r7, r2
 8005fa0:	18ba      	adds	r2, r7, r2
 8005fa2:	7812      	ldrb	r2, [r2, #0]
 8005fa4:	3206      	adds	r2, #6
 8005fa6:	701a      	strb	r2, [r3, #0]
 8005fa8:	e151      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "east", 4)){
 8005faa:	230f      	movs	r3, #15
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	18d3      	adds	r3, r2, r3
 8005fb4:	4947      	ldr	r1, [pc, #284]	; (80060d4 <TokenizeUserInput+0x37c>)
 8005fb6:	2204      	movs	r2, #4
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f001 fcc5 	bl	8007948 <strncmp>
 8005fbe:	1e03      	subs	r3, r0, #0
 8005fc0:	d10c      	bne.n	8005fdc <TokenizeUserInput+0x284>
			game_tokens[token_count] = LTKN_NAVD_EAST;
 8005fc2:	230e      	movs	r3, #14
 8005fc4:	18fb      	adds	r3, r7, r3
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	4a36      	ldr	r2, [pc, #216]	; (80060a4 <TokenizeUserInput+0x34c>)
 8005fca:	2112      	movs	r1, #18
 8005fcc:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8005fce:	220f      	movs	r2, #15
 8005fd0:	18bb      	adds	r3, r7, r2
 8005fd2:	18ba      	adds	r2, r7, r2
 8005fd4:	7812      	ldrb	r2, [r2, #0]
 8005fd6:	3205      	adds	r2, #5
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	e138      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "west", 4)){
 8005fdc:	230f      	movs	r3, #15
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	18d3      	adds	r3, r2, r3
 8005fe6:	493c      	ldr	r1, [pc, #240]	; (80060d8 <TokenizeUserInput+0x380>)
 8005fe8:	2204      	movs	r2, #4
 8005fea:	0018      	movs	r0, r3
 8005fec:	f001 fcac 	bl	8007948 <strncmp>
 8005ff0:	1e03      	subs	r3, r0, #0
 8005ff2:	d10c      	bne.n	800600e <TokenizeUserInput+0x2b6>
			game_tokens[token_count] = LTKN_NAVD_WEST;
 8005ff4:	230e      	movs	r3, #14
 8005ff6:	18fb      	adds	r3, r7, r3
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	4a2a      	ldr	r2, [pc, #168]	; (80060a4 <TokenizeUserInput+0x34c>)
 8005ffc:	2113      	movs	r1, #19
 8005ffe:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8006000:	220f      	movs	r2, #15
 8006002:	18bb      	adds	r3, r7, r2
 8006004:	18ba      	adds	r2, r7, r2
 8006006:	7812      	ldrb	r2, [r2, #0]
 8006008:	3205      	adds	r2, #5
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	e11f      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "up", 2)){
 800600e:	230f      	movs	r3, #15
 8006010:	18fb      	adds	r3, r7, r3
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	18d3      	adds	r3, r2, r3
 8006018:	4930      	ldr	r1, [pc, #192]	; (80060dc <TokenizeUserInput+0x384>)
 800601a:	2202      	movs	r2, #2
 800601c:	0018      	movs	r0, r3
 800601e:	f001 fc93 	bl	8007948 <strncmp>
 8006022:	1e03      	subs	r3, r0, #0
 8006024:	d10c      	bne.n	8006040 <TokenizeUserInput+0x2e8>
			game_tokens[token_count] = LTKN_NAVD_UP;
 8006026:	230e      	movs	r3, #14
 8006028:	18fb      	adds	r3, r7, r3
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	4a1d      	ldr	r2, [pc, #116]	; (80060a4 <TokenizeUserInput+0x34c>)
 800602e:	2114      	movs	r1, #20
 8006030:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 3;
 8006032:	220f      	movs	r2, #15
 8006034:	18bb      	adds	r3, r7, r2
 8006036:	18ba      	adds	r2, r7, r2
 8006038:	7812      	ldrb	r2, [r2, #0]
 800603a:	3203      	adds	r2, #3
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	e106      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "down", 4)){
 8006040:	230f      	movs	r3, #15
 8006042:	18fb      	adds	r3, r7, r3
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	18d3      	adds	r3, r2, r3
 800604a:	4925      	ldr	r1, [pc, #148]	; (80060e0 <TokenizeUserInput+0x388>)
 800604c:	2204      	movs	r2, #4
 800604e:	0018      	movs	r0, r3
 8006050:	f001 fc7a 	bl	8007948 <strncmp>
 8006054:	1e03      	subs	r3, r0, #0
 8006056:	d10c      	bne.n	8006072 <TokenizeUserInput+0x31a>
			game_tokens[token_count] = LTKN_NAVD_DOWN;
 8006058:	230e      	movs	r3, #14
 800605a:	18fb      	adds	r3, r7, r3
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	4a11      	ldr	r2, [pc, #68]	; (80060a4 <TokenizeUserInput+0x34c>)
 8006060:	2115      	movs	r1, #21
 8006062:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8006064:	220f      	movs	r2, #15
 8006066:	18bb      	adds	r3, r7, r2
 8006068:	18ba      	adds	r2, r7, r2
 800606a:	7812      	ldrb	r2, [r2, #0]
 800606c:	3205      	adds	r2, #5
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	e0ed      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "testobj", 7)){
 8006072:	230f      	movs	r3, #15
 8006074:	18fb      	adds	r3, r7, r3
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	18d3      	adds	r3, r2, r3
 800607c:	4919      	ldr	r1, [pc, #100]	; (80060e4 <TokenizeUserInput+0x38c>)
 800607e:	2207      	movs	r2, #7
 8006080:	0018      	movs	r0, r3
 8006082:	f001 fc61 	bl	8007948 <strncmp>
 8006086:	1e03      	subs	r3, r0, #0
 8006088:	d12e      	bne.n	80060e8 <TokenizeUserInput+0x390>
			game_tokens[token_count] = LTKN_OBJ_TEST;
 800608a:	230e      	movs	r3, #14
 800608c:	18fb      	adds	r3, r7, r3
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	4a04      	ldr	r2, [pc, #16]	; (80060a4 <TokenizeUserInput+0x34c>)
 8006092:	2120      	movs	r1, #32
 8006094:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 8;
 8006096:	220f      	movs	r2, #15
 8006098:	18bb      	adds	r3, r7, r2
 800609a:	18ba      	adds	r2, r7, r2
 800609c:	7812      	ldrb	r2, [r2, #0]
 800609e:	3208      	adds	r2, #8
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	e0d4      	b.n	800624e <TokenizeUserInput+0x4f6>
 80060a4:	20000434 	.word	0x20000434
 80060a8:	0800831c 	.word	0x0800831c
 80060ac:	08008320 	.word	0x08008320
 80060b0:	08008324 	.word	0x08008324
 80060b4:	0800832c 	.word	0x0800832c
 80060b8:	08008334 	.word	0x08008334
 80060bc:	0800833c 	.word	0x0800833c
 80060c0:	08008348 	.word	0x08008348
 80060c4:	0800834c 	.word	0x0800834c
 80060c8:	08008350 	.word	0x08008350
 80060cc:	08008354 	.word	0x08008354
 80060d0:	0800835c 	.word	0x0800835c
 80060d4:	08008364 	.word	0x08008364
 80060d8:	0800836c 	.word	0x0800836c
 80060dc:	08008374 	.word	0x08008374
 80060e0:	08008378 	.word	0x08008378
 80060e4:	08008380 	.word	0x08008380
		}
		else if(!strncmp(&buf[buf_index], "testitm", 7)){
 80060e8:	230f      	movs	r3, #15
 80060ea:	18fb      	adds	r3, r7, r3
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	18d3      	adds	r3, r2, r3
 80060f2:	4963      	ldr	r1, [pc, #396]	; (8006280 <TokenizeUserInput+0x528>)
 80060f4:	2207      	movs	r2, #7
 80060f6:	0018      	movs	r0, r3
 80060f8:	f001 fc26 	bl	8007948 <strncmp>
 80060fc:	1e03      	subs	r3, r0, #0
 80060fe:	d10c      	bne.n	800611a <TokenizeUserInput+0x3c2>
			game_tokens[token_count] = LTKN_ITM_TEST;
 8006100:	230e      	movs	r3, #14
 8006102:	18fb      	adds	r3, r7, r3
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	4a5f      	ldr	r2, [pc, #380]	; (8006284 <TokenizeUserInput+0x52c>)
 8006108:	2150      	movs	r1, #80	; 0x50
 800610a:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 8;
 800610c:	220f      	movs	r2, #15
 800610e:	18bb      	adds	r3, r7, r2
 8006110:	18ba      	adds	r2, r7, r2
 8006112:	7812      	ldrb	r2, [r2, #0]
 8006114:	3208      	adds	r2, #8
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	e099      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "testcommand", 11)){
 800611a:	230f      	movs	r3, #15
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	18d3      	adds	r3, r2, r3
 8006124:	4958      	ldr	r1, [pc, #352]	; (8006288 <TokenizeUserInput+0x530>)
 8006126:	220b      	movs	r2, #11
 8006128:	0018      	movs	r0, r3
 800612a:	f001 fc0d 	bl	8007948 <strncmp>
 800612e:	1e03      	subs	r3, r0, #0
 8006130:	d10c      	bne.n	800614c <TokenizeUserInput+0x3f4>
			game_tokens[token_count] = LTKN_CMD_TEST;
 8006132:	230e      	movs	r3, #14
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	4a52      	ldr	r2, [pc, #328]	; (8006284 <TokenizeUserInput+0x52c>)
 800613a:	2180      	movs	r1, #128	; 0x80
 800613c:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 12;
 800613e:	220f      	movs	r2, #15
 8006140:	18bb      	adds	r3, r7, r2
 8006142:	18ba      	adds	r2, r7, r2
 8006144:	7812      	ldrb	r2, [r2, #0]
 8006146:	320c      	adds	r2, #12
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	e080      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "left", 4)){
 800614c:	230f      	movs	r3, #15
 800614e:	18fb      	adds	r3, r7, r3
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	18d3      	adds	r3, r2, r3
 8006156:	494d      	ldr	r1, [pc, #308]	; (800628c <TokenizeUserInput+0x534>)
 8006158:	2204      	movs	r2, #4
 800615a:	0018      	movs	r0, r3
 800615c:	f001 fbf4 	bl	8007948 <strncmp>
 8006160:	1e03      	subs	r3, r0, #0
 8006162:	d10c      	bne.n	800617e <TokenizeUserInput+0x426>
			game_tokens[token_count] = LTKN_TURND_LEFT;
 8006164:	230e      	movs	r3, #14
 8006166:	18fb      	adds	r3, r7, r3
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	4a46      	ldr	r2, [pc, #280]	; (8006284 <TokenizeUserInput+0x52c>)
 800616c:	2116      	movs	r1, #22
 800616e:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8006170:	220f      	movs	r2, #15
 8006172:	18bb      	adds	r3, r7, r2
 8006174:	18ba      	adds	r2, r7, r2
 8006176:	7812      	ldrb	r2, [r2, #0]
 8006178:	3205      	adds	r2, #5
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	e067      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "right", 5)){
 800617e:	230f      	movs	r3, #15
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	18d3      	adds	r3, r2, r3
 8006188:	4941      	ldr	r1, [pc, #260]	; (8006290 <TokenizeUserInput+0x538>)
 800618a:	2205      	movs	r2, #5
 800618c:	0018      	movs	r0, r3
 800618e:	f001 fbdb 	bl	8007948 <strncmp>
 8006192:	1e03      	subs	r3, r0, #0
 8006194:	d10c      	bne.n	80061b0 <TokenizeUserInput+0x458>
			game_tokens[token_count] = LTKN_TURND_RIGHT;
 8006196:	230e      	movs	r3, #14
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	4a39      	ldr	r2, [pc, #228]	; (8006284 <TokenizeUserInput+0x52c>)
 800619e:	2117      	movs	r1, #23
 80061a0:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 6;
 80061a2:	220f      	movs	r2, #15
 80061a4:	18bb      	adds	r3, r7, r2
 80061a6:	18ba      	adds	r2, r7, r2
 80061a8:	7812      	ldrb	r2, [r2, #0]
 80061aa:	3206      	adds	r2, #6
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	e04e      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "help", 4)){
 80061b0:	230f      	movs	r3, #15
 80061b2:	18fb      	adds	r3, r7, r3
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	18d3      	adds	r3, r2, r3
 80061ba:	4936      	ldr	r1, [pc, #216]	; (8006294 <TokenizeUserInput+0x53c>)
 80061bc:	2204      	movs	r2, #4
 80061be:	0018      	movs	r0, r3
 80061c0:	f001 fbc2 	bl	8007948 <strncmp>
 80061c4:	1e03      	subs	r3, r0, #0
 80061c6:	d10c      	bne.n	80061e2 <TokenizeUserInput+0x48a>
			game_tokens[token_count] = LTKN_ACT_HELP;
 80061c8:	230e      	movs	r3, #14
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	4a2d      	ldr	r2, [pc, #180]	; (8006284 <TokenizeUserInput+0x52c>)
 80061d0:	210a      	movs	r1, #10
 80061d2:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 80061d4:	220f      	movs	r2, #15
 80061d6:	18bb      	adds	r3, r7, r2
 80061d8:	18ba      	adds	r2, r7, r2
 80061da:	7812      	ldrb	r2, [r2, #0]
 80061dc:	3205      	adds	r2, #5
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	e035      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "inventory", 9)){
 80061e2:	230f      	movs	r3, #15
 80061e4:	18fb      	adds	r3, r7, r3
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	18d3      	adds	r3, r2, r3
 80061ec:	492a      	ldr	r1, [pc, #168]	; (8006298 <TokenizeUserInput+0x540>)
 80061ee:	2209      	movs	r2, #9
 80061f0:	0018      	movs	r0, r3
 80061f2:	f001 fba9 	bl	8007948 <strncmp>
 80061f6:	1e03      	subs	r3, r0, #0
 80061f8:	d10c      	bne.n	8006214 <TokenizeUserInput+0x4bc>
			game_tokens[token_count] = LTKN_ACT_INVENTORY;
 80061fa:	230e      	movs	r3, #14
 80061fc:	18fb      	adds	r3, r7, r3
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	4a20      	ldr	r2, [pc, #128]	; (8006284 <TokenizeUserInput+0x52c>)
 8006202:	210b      	movs	r1, #11
 8006204:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 10;
 8006206:	220f      	movs	r2, #15
 8006208:	18bb      	adds	r3, r7, r2
 800620a:	18ba      	adds	r2, r7, r2
 800620c:	7812      	ldrb	r2, [r2, #0]
 800620e:	320a      	adds	r2, #10
 8006210:	701a      	strb	r2, [r3, #0]
 8006212:	e01c      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "examine", 7)){
 8006214:	230f      	movs	r3, #15
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	18d3      	adds	r3, r2, r3
 800621e:	491f      	ldr	r1, [pc, #124]	; (800629c <TokenizeUserInput+0x544>)
 8006220:	2207      	movs	r2, #7
 8006222:	0018      	movs	r0, r3
 8006224:	f001 fb90 	bl	8007948 <strncmp>
 8006228:	1e03      	subs	r3, r0, #0
 800622a:	d10c      	bne.n	8006246 <TokenizeUserInput+0x4ee>
			game_tokens[token_count] = LTKN_ACT_EXAMINE;
 800622c:	230e      	movs	r3, #14
 800622e:	18fb      	adds	r3, r7, r3
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	4a14      	ldr	r2, [pc, #80]	; (8006284 <TokenizeUserInput+0x52c>)
 8006234:	210c      	movs	r1, #12
 8006236:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 8;
 8006238:	220f      	movs	r2, #15
 800623a:	18bb      	adds	r3, r7, r2
 800623c:	18ba      	adds	r2, r7, r2
 800623e:	7812      	ldrb	r2, [r2, #0]
 8006240:	3208      	adds	r2, #8
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e003      	b.n	800624e <TokenizeUserInput+0x4f6>
		}
		else{
			return buf_index;
 8006246:	230f      	movs	r3, #15
 8006248:	18fb      	adds	r3, r7, r3
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	e014      	b.n	8006278 <TokenizeUserInput+0x520>
		}
		token_count++;
 800624e:	210e      	movs	r1, #14
 8006250:	187b      	adds	r3, r7, r1
 8006252:	781a      	ldrb	r2, [r3, #0]
 8006254:	187b      	adds	r3, r7, r1
 8006256:	3201      	adds	r2, #1
 8006258:	701a      	strb	r2, [r3, #0]
	while(buf[buf_index] != '\0' && token_count < MAX_TOKENS){
 800625a:	230f      	movs	r3, #15
 800625c:	18fb      	adds	r3, r7, r3
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	18d3      	adds	r3, r2, r3
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <TokenizeUserInput+0x51e>
 800626a:	230e      	movs	r3, #14
 800626c:	18fb      	adds	r3, r7, r3
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b02      	cmp	r3, #2
 8006272:	d800      	bhi.n	8006276 <TokenizeUserInput+0x51e>
 8006274:	e586      	b.n	8005d84 <TokenizeUserInput+0x2c>
	}
	return 0xFF;
 8006276:	23ff      	movs	r3, #255	; 0xff
}
 8006278:	0018      	movs	r0, r3
 800627a:	46bd      	mov	sp, r7
 800627c:	b004      	add	sp, #16
 800627e:	bd80      	pop	{r7, pc}
 8006280:	08008388 	.word	0x08008388
 8006284:	20000434 	.word	0x20000434
 8006288:	08008390 	.word	0x08008390
 800628c:	0800839c 	.word	0x0800839c
 8006290:	080083a4 	.word	0x080083a4
 8006294:	080083ac 	.word	0x080083ac
 8006298:	080083b4 	.word	0x080083b4
 800629c:	080083c0 	.word	0x080083c0

080062a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80062a4:	f7f9 ffbc 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80062a8:	f000 f814 	bl	80062d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80062ac:	f000 f8c0 	bl	8006430 <MX_GPIO_Init>
  MX_I2C1_Init();
 80062b0:	f000 f87e 	bl	80063b0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80062b4:	f000 fc32 	bl	8006b1c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  InitGame();
 80062b8:	f7ff f936 	bl	8005528 <InitGame>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	GameLoop();
 80062bc:	f7ff f9b0 	bl	8005620 <GameLoop>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(stopState){
 80062c0:	4b03      	ldr	r3, [pc, #12]	; (80062d0 <main+0x30>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0f8      	beq.n	80062bc <main+0x1c>
		DeepSleep();
 80062ca:	f000 f969 	bl	80065a0 <DeepSleep>
	GameLoop();
 80062ce:	e7f5      	b.n	80062bc <main+0x1c>
 80062d0:	200001f9 	.word	0x200001f9

080062d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062d4:	b590      	push	{r4, r7, lr}
 80062d6:	b09f      	sub	sp, #124	; 0x7c
 80062d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062da:	2440      	movs	r4, #64	; 0x40
 80062dc:	193b      	adds	r3, r7, r4
 80062de:	0018      	movs	r0, r3
 80062e0:	2338      	movs	r3, #56	; 0x38
 80062e2:	001a      	movs	r2, r3
 80062e4:	2100      	movs	r1, #0
 80062e6:	f001 faf4 	bl	80078d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062ea:	232c      	movs	r3, #44	; 0x2c
 80062ec:	18fb      	adds	r3, r7, r3
 80062ee:	0018      	movs	r0, r3
 80062f0:	2314      	movs	r3, #20
 80062f2:	001a      	movs	r2, r3
 80062f4:	2100      	movs	r1, #0
 80062f6:	f001 faec 	bl	80078d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80062fa:	1d3b      	adds	r3, r7, #4
 80062fc:	0018      	movs	r0, r3
 80062fe:	2328      	movs	r3, #40	; 0x28
 8006300:	001a      	movs	r2, r3
 8006302:	2100      	movs	r1, #0
 8006304:	f001 fae5 	bl	80078d2 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006308:	4b27      	ldr	r3, [pc, #156]	; (80063a8 <SystemClock_Config+0xd4>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a27      	ldr	r2, [pc, #156]	; (80063ac <SystemClock_Config+0xd8>)
 800630e:	401a      	ands	r2, r3
 8006310:	4b25      	ldr	r3, [pc, #148]	; (80063a8 <SystemClock_Config+0xd4>)
 8006312:	2180      	movs	r1, #128	; 0x80
 8006314:	0109      	lsls	r1, r1, #4
 8006316:	430a      	orrs	r2, r1
 8006318:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800631a:	0021      	movs	r1, r4
 800631c:	187b      	adds	r3, r7, r1
 800631e:	2222      	movs	r2, #34	; 0x22
 8006320:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006322:	187b      	adds	r3, r7, r1
 8006324:	2201      	movs	r2, #1
 8006326:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006328:	187b      	adds	r3, r7, r1
 800632a:	2210      	movs	r2, #16
 800632c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800632e:	187b      	adds	r3, r7, r1
 8006330:	2201      	movs	r2, #1
 8006332:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006334:	187b      	adds	r3, r7, r1
 8006336:	2200      	movs	r2, #0
 8006338:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800633a:	187b      	adds	r3, r7, r1
 800633c:	0018      	movs	r0, r3
 800633e:	f7fb fc33 	bl	8001ba8 <HAL_RCC_OscConfig>
 8006342:	1e03      	subs	r3, r0, #0
 8006344:	d001      	beq.n	800634a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8006346:	f000 f8d3 	bl	80064f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800634a:	212c      	movs	r1, #44	; 0x2c
 800634c:	187b      	adds	r3, r7, r1
 800634e:	220f      	movs	r2, #15
 8006350:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006352:	187b      	adds	r3, r7, r1
 8006354:	2201      	movs	r2, #1
 8006356:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006358:	187b      	adds	r3, r7, r1
 800635a:	2200      	movs	r2, #0
 800635c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800635e:	187b      	adds	r3, r7, r1
 8006360:	2200      	movs	r2, #0
 8006362:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006364:	187b      	adds	r3, r7, r1
 8006366:	2200      	movs	r2, #0
 8006368:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800636a:	187b      	adds	r3, r7, r1
 800636c:	2100      	movs	r1, #0
 800636e:	0018      	movs	r0, r3
 8006370:	f7fb ffea 	bl	8002348 <HAL_RCC_ClockConfig>
 8006374:	1e03      	subs	r3, r0, #0
 8006376:	d001      	beq.n	800637c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8006378:	f000 f8ba 	bl	80064f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 800637c:	1d3b      	adds	r3, r7, #4
 800637e:	2248      	movs	r2, #72	; 0x48
 8006380:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006382:	1d3b      	adds	r3, r7, #4
 8006384:	2200      	movs	r2, #0
 8006386:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006388:	1d3b      	adds	r3, r7, #4
 800638a:	2280      	movs	r2, #128	; 0x80
 800638c:	04d2      	lsls	r2, r2, #19
 800638e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006390:	1d3b      	adds	r3, r7, #4
 8006392:	0018      	movs	r0, r3
 8006394:	f7fc f986 	bl	80026a4 <HAL_RCCEx_PeriphCLKConfig>
 8006398:	1e03      	subs	r3, r0, #0
 800639a:	d001      	beq.n	80063a0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800639c:	f000 f8a8 	bl	80064f0 <Error_Handler>
  }
}
 80063a0:	46c0      	nop			; (mov r8, r8)
 80063a2:	46bd      	mov	sp, r7
 80063a4:	b01f      	add	sp, #124	; 0x7c
 80063a6:	bd90      	pop	{r4, r7, pc}
 80063a8:	40007000 	.word	0x40007000
 80063ac:	ffffe7ff 	.word	0xffffe7ff

080063b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80063b4:	4b1b      	ldr	r3, [pc, #108]	; (8006424 <MX_I2C1_Init+0x74>)
 80063b6:	4a1c      	ldr	r2, [pc, #112]	; (8006428 <MX_I2C1_Init+0x78>)
 80063b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80063ba:	4b1a      	ldr	r3, [pc, #104]	; (8006424 <MX_I2C1_Init+0x74>)
 80063bc:	4a1b      	ldr	r2, [pc, #108]	; (800642c <MX_I2C1_Init+0x7c>)
 80063be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80063c0:	4b18      	ldr	r3, [pc, #96]	; (8006424 <MX_I2C1_Init+0x74>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80063c6:	4b17      	ldr	r3, [pc, #92]	; (8006424 <MX_I2C1_Init+0x74>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80063cc:	4b15      	ldr	r3, [pc, #84]	; (8006424 <MX_I2C1_Init+0x74>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80063d2:	4b14      	ldr	r3, [pc, #80]	; (8006424 <MX_I2C1_Init+0x74>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80063d8:	4b12      	ldr	r3, [pc, #72]	; (8006424 <MX_I2C1_Init+0x74>)
 80063da:	2200      	movs	r2, #0
 80063dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80063de:	4b11      	ldr	r3, [pc, #68]	; (8006424 <MX_I2C1_Init+0x74>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80063e4:	4b0f      	ldr	r3, [pc, #60]	; (8006424 <MX_I2C1_Init+0x74>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80063ea:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <MX_I2C1_Init+0x74>)
 80063ec:	0018      	movs	r0, r3
 80063ee:	f7fa fa31 	bl	8000854 <HAL_I2C_Init>
 80063f2:	1e03      	subs	r3, r0, #0
 80063f4:	d001      	beq.n	80063fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80063f6:	f000 f87b 	bl	80064f0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80063fa:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <MX_I2C1_Init+0x74>)
 80063fc:	2100      	movs	r1, #0
 80063fe:	0018      	movs	r0, r3
 8006400:	f7fa fabe 	bl	8000980 <HAL_I2CEx_ConfigAnalogFilter>
 8006404:	1e03      	subs	r3, r0, #0
 8006406:	d001      	beq.n	800640c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006408:	f000 f872 	bl	80064f0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800640c:	4b05      	ldr	r3, [pc, #20]	; (8006424 <MX_I2C1_Init+0x74>)
 800640e:	2100      	movs	r1, #0
 8006410:	0018      	movs	r0, r3
 8006412:	f7fa fb01 	bl	8000a18 <HAL_I2CEx_ConfigDigitalFilter>
 8006416:	1e03      	subs	r3, r0, #0
 8006418:	d001      	beq.n	800641e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800641a:	f000 f869 	bl	80064f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	20000850 	.word	0x20000850
 8006428:	40005400 	.word	0x40005400
 800642c:	00303d5b 	.word	0x00303d5b

08006430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006430:	b590      	push	{r4, r7, lr}
 8006432:	b089      	sub	sp, #36	; 0x24
 8006434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006436:	240c      	movs	r4, #12
 8006438:	193b      	adds	r3, r7, r4
 800643a:	0018      	movs	r0, r3
 800643c:	2314      	movs	r3, #20
 800643e:	001a      	movs	r2, r3
 8006440:	2100      	movs	r1, #0
 8006442:	f001 fa46 	bl	80078d2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006446:	4b27      	ldr	r3, [pc, #156]	; (80064e4 <MX_GPIO_Init+0xb4>)
 8006448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644a:	4b26      	ldr	r3, [pc, #152]	; (80064e4 <MX_GPIO_Init+0xb4>)
 800644c:	2104      	movs	r1, #4
 800644e:	430a      	orrs	r2, r1
 8006450:	62da      	str	r2, [r3, #44]	; 0x2c
 8006452:	4b24      	ldr	r3, [pc, #144]	; (80064e4 <MX_GPIO_Init+0xb4>)
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	2204      	movs	r2, #4
 8006458:	4013      	ands	r3, r2
 800645a:	60bb      	str	r3, [r7, #8]
 800645c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800645e:	4b21      	ldr	r3, [pc, #132]	; (80064e4 <MX_GPIO_Init+0xb4>)
 8006460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006462:	4b20      	ldr	r3, [pc, #128]	; (80064e4 <MX_GPIO_Init+0xb4>)
 8006464:	2101      	movs	r1, #1
 8006466:	430a      	orrs	r2, r1
 8006468:	62da      	str	r2, [r3, #44]	; 0x2c
 800646a:	4b1e      	ldr	r3, [pc, #120]	; (80064e4 <MX_GPIO_Init+0xb4>)
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646e:	2201      	movs	r2, #1
 8006470:	4013      	ands	r3, r2
 8006472:	607b      	str	r3, [r7, #4]
 8006474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8006476:	23a0      	movs	r3, #160	; 0xa0
 8006478:	05db      	lsls	r3, r3, #23
 800647a:	2200      	movs	r2, #0
 800647c:	2120      	movs	r1, #32
 800647e:	0018      	movs	r0, r3
 8006480:	f7fa f9a4 	bl	80007cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006484:	193b      	adds	r3, r7, r4
 8006486:	2280      	movs	r2, #128	; 0x80
 8006488:	0192      	lsls	r2, r2, #6
 800648a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800648c:	193b      	adds	r3, r7, r4
 800648e:	4a16      	ldr	r2, [pc, #88]	; (80064e8 <MX_GPIO_Init+0xb8>)
 8006490:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006492:	193b      	adds	r3, r7, r4
 8006494:	2200      	movs	r2, #0
 8006496:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006498:	193b      	adds	r3, r7, r4
 800649a:	4a14      	ldr	r2, [pc, #80]	; (80064ec <MX_GPIO_Init+0xbc>)
 800649c:	0019      	movs	r1, r3
 800649e:	0010      	movs	r0, r2
 80064a0:	f7fa f816 	bl	80004d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80064a4:	0021      	movs	r1, r4
 80064a6:	187b      	adds	r3, r7, r1
 80064a8:	2220      	movs	r2, #32
 80064aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064ac:	187b      	adds	r3, r7, r1
 80064ae:	2201      	movs	r2, #1
 80064b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b2:	187b      	adds	r3, r7, r1
 80064b4:	2200      	movs	r2, #0
 80064b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064b8:	187b      	adds	r3, r7, r1
 80064ba:	2200      	movs	r2, #0
 80064bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80064be:	187a      	adds	r2, r7, r1
 80064c0:	23a0      	movs	r3, #160	; 0xa0
 80064c2:	05db      	lsls	r3, r3, #23
 80064c4:	0011      	movs	r1, r2
 80064c6:	0018      	movs	r0, r3
 80064c8:	f7fa f802 	bl	80004d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80064cc:	2200      	movs	r2, #0
 80064ce:	2100      	movs	r1, #0
 80064d0:	2007      	movs	r0, #7
 80064d2:	f7f9 ffcb 	bl	800046c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80064d6:	2007      	movs	r0, #7
 80064d8:	f7f9 ffdd 	bl	8000496 <HAL_NVIC_EnableIRQ>

}
 80064dc:	46c0      	nop			; (mov r8, r8)
 80064de:	46bd      	mov	sp, r7
 80064e0:	b009      	add	sp, #36	; 0x24
 80064e2:	bd90      	pop	{r4, r7, pc}
 80064e4:	40021000 	.word	0x40021000
 80064e8:	10210000 	.word	0x10210000
 80064ec:	50000800 	.word	0x50000800

080064f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80064f4:	46c0      	nop			; (mov r8, r8)
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <InitObjs>:
struct obj obj_testobject;
//Array of all the game objects
struct obj* game_objs[OBJECT_COUNT];


void InitObjs(){
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
	obj_testobject.token = LTKN_OBJ_TEST;
 8006500:	4b0a      	ldr	r3, [pc, #40]	; (800652c <InitObjs+0x30>)
 8006502:	2220      	movs	r2, #32
 8006504:	701a      	strb	r2, [r3, #0]
	obj_testobject.state = OBJ_UNTOUCHED;
 8006506:	4b09      	ldr	r3, [pc, #36]	; (800652c <InitObjs+0x30>)
 8006508:	2201      	movs	r2, #1
 800650a:	705a      	strb	r2, [r3, #1]
	obj_testobject.name = obj_testobject_name;
 800650c:	4b07      	ldr	r3, [pc, #28]	; (800652c <InitObjs+0x30>)
 800650e:	4a08      	ldr	r2, [pc, #32]	; (8006530 <InitObjs+0x34>)
 8006510:	605a      	str	r2, [r3, #4]
	obj_testobject.seen_text = obj_testobj_seen;
 8006512:	4b06      	ldr	r3, [pc, #24]	; (800652c <InitObjs+0x30>)
 8006514:	4a07      	ldr	r2, [pc, #28]	; (8006534 <InitObjs+0x38>)
 8006516:	609a      	str	r2, [r3, #8]
	obj_testobject.examine_text = obj_testobj_examine;
 8006518:	4b04      	ldr	r3, [pc, #16]	; (800652c <InitObjs+0x30>)
 800651a:	4a07      	ldr	r2, [pc, #28]	; (8006538 <InitObjs+0x3c>)
 800651c:	60da      	str	r2, [r3, #12]
	game_objs[0] = &obj_testobject;
 800651e:	4b07      	ldr	r3, [pc, #28]	; (800653c <InitObjs+0x40>)
 8006520:	4a02      	ldr	r2, [pc, #8]	; (800652c <InitObjs+0x30>)
 8006522:	601a      	str	r2, [r3, #0]
}
 8006524:	46c0      	nop			; (mov r8, r8)
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	46c0      	nop			; (mov r8, r8)
 800652c:	2000089c 	.word	0x2000089c
 8006530:	08008538 	.word	0x08008538
 8006534:	08008544 	.word	0x08008544
 8006538:	08008588 	.word	0x08008588
 800653c:	200008ac 	.word	0x200008ac

08006540 <GetObjByToken>:

struct obj* GetObjByToken(uint8_t token){
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	0002      	movs	r2, r0
 8006548:	1dfb      	adds	r3, r7, #7
 800654a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < OBJECT_COUNT; i++){
 800654c:	230f      	movs	r3, #15
 800654e:	18fb      	adds	r3, r7, r3
 8006550:	2200      	movs	r2, #0
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	e017      	b.n	8006586 <GetObjByToken+0x46>
		if(game_objs[i]->token == token){
 8006556:	230f      	movs	r3, #15
 8006558:	18fb      	adds	r3, r7, r3
 800655a:	781a      	ldrb	r2, [r3, #0]
 800655c:	4b0f      	ldr	r3, [pc, #60]	; (800659c <GetObjByToken+0x5c>)
 800655e:	0092      	lsls	r2, r2, #2
 8006560:	58d3      	ldr	r3, [r2, r3]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	1dfa      	adds	r2, r7, #7
 8006566:	7812      	ldrb	r2, [r2, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d106      	bne.n	800657a <GetObjByToken+0x3a>
			return game_objs[i];
 800656c:	230f      	movs	r3, #15
 800656e:	18fb      	adds	r3, r7, r3
 8006570:	781a      	ldrb	r2, [r3, #0]
 8006572:	4b0a      	ldr	r3, [pc, #40]	; (800659c <GetObjByToken+0x5c>)
 8006574:	0092      	lsls	r2, r2, #2
 8006576:	58d3      	ldr	r3, [r2, r3]
 8006578:	e00b      	b.n	8006592 <GetObjByToken+0x52>
	for(uint8_t i = 0; i < OBJECT_COUNT; i++){
 800657a:	210f      	movs	r1, #15
 800657c:	187b      	adds	r3, r7, r1
 800657e:	781a      	ldrb	r2, [r3, #0]
 8006580:	187b      	adds	r3, r7, r1
 8006582:	3201      	adds	r2, #1
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	230f      	movs	r3, #15
 8006588:	18fb      	adds	r3, r7, r3
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0e2      	beq.n	8006556 <GetObjByToken+0x16>
		}
	}
	return NULL;
 8006590:	2300      	movs	r3, #0
}
 8006592:	0018      	movs	r0, r3
 8006594:	46bd      	mov	sp, r7
 8006596:	b004      	add	sp, #16
 8006598:	bd80      	pop	{r7, pc}
 800659a:	46c0      	nop			; (mov r8, r8)
 800659c:	200008ac 	.word	0x200008ac

080065a0 <DeepSleep>:
#include "power.h"

void DeepSleep(){
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
	/* Pre sleep housekeeping */
	PrintToConsole("Sleep button pressed, Unplug from USB. Zzzzzz.....", 50);
 80065a4:	4b09      	ldr	r3, [pc, #36]	; (80065cc <DeepSleep+0x2c>)
 80065a6:	2132      	movs	r1, #50	; 0x32
 80065a8:	0018      	movs	r0, r3
 80065aa:	f000 fc1f 	bl	8006dec <PrintToConsole>
	//USB transmission is interrupt based, wait 10 milliseconds for it to transfer before killing it
	HAL_Delay(10);
 80065ae:	200a      	movs	r0, #10
 80065b0:	f7f9 fe96 	bl	80002e0 <HAL_Delay>

	// Chip goes to sleep here, waits for interrupt
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE);
 80065b4:	2102      	movs	r1, #2
 80065b6:	2001      	movs	r0, #1
 80065b8:	f7fb fac2 	bl	8001b40 <HAL_PWR_EnterSTOPMode>
	//Chip wakes up here

	/* Post wakeup housekeeping */
	SystemClock_Config();
 80065bc:	f7ff fe8a 	bl	80062d4 <SystemClock_Config>
	stopState = 0;
 80065c0:	4b03      	ldr	r3, [pc, #12]	; (80065d0 <DeepSleep+0x30>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	701a      	strb	r2, [r3, #0]
}
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	080083c8 	.word	0x080083c8
 80065d0:	200001f9 	.word	0x200001f9

080065d4 <InitRooms>:
//Room item lists
struct itm* rm_testeast_itms[1];
//Room object lists
struct obj* rm_testdown_objs[1];

void InitRooms(){
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
	//Initialize the list of all the game rooms
	game_rooms[0] = &rm_teststart;
 80065d8:	4ba4      	ldr	r3, [pc, #656]	; (800686c <InitRooms+0x298>)
 80065da:	4aa5      	ldr	r2, [pc, #660]	; (8006870 <InitRooms+0x29c>)
 80065dc:	601a      	str	r2, [r3, #0]
	game_rooms[1] = &rm_testnorth;
 80065de:	4ba3      	ldr	r3, [pc, #652]	; (800686c <InitRooms+0x298>)
 80065e0:	4aa4      	ldr	r2, [pc, #656]	; (8006874 <InitRooms+0x2a0>)
 80065e2:	605a      	str	r2, [r3, #4]
	game_rooms[2] = &rm_testeast;
 80065e4:	4ba1      	ldr	r3, [pc, #644]	; (800686c <InitRooms+0x298>)
 80065e6:	4aa4      	ldr	r2, [pc, #656]	; (8006878 <InitRooms+0x2a4>)
 80065e8:	609a      	str	r2, [r3, #8]
	game_rooms[3] = &rm_testsouth;
 80065ea:	4ba0      	ldr	r3, [pc, #640]	; (800686c <InitRooms+0x298>)
 80065ec:	4aa3      	ldr	r2, [pc, #652]	; (800687c <InitRooms+0x2a8>)
 80065ee:	60da      	str	r2, [r3, #12]
	game_rooms[4] = &rm_testwest;
 80065f0:	4b9e      	ldr	r3, [pc, #632]	; (800686c <InitRooms+0x298>)
 80065f2:	4aa3      	ldr	r2, [pc, #652]	; (8006880 <InitRooms+0x2ac>)
 80065f4:	611a      	str	r2, [r3, #16]
	game_rooms[5] = &rm_testdown;
 80065f6:	4b9d      	ldr	r3, [pc, #628]	; (800686c <InitRooms+0x298>)
 80065f8:	4aa2      	ldr	r2, [pc, #648]	; (8006884 <InitRooms+0x2b0>)
 80065fa:	615a      	str	r2, [r3, #20]
	game_rooms[6] = &rm_testup;
 80065fc:	4b9b      	ldr	r3, [pc, #620]	; (800686c <InitRooms+0x298>)
 80065fe:	4aa2      	ldr	r2, [pc, #648]	; (8006888 <InitRooms+0x2b4>)
 8006600:	619a      	str	r2, [r3, #24]
	//Init the start room
	rm_teststart.north_room = &rm_testnorth;
 8006602:	4b9b      	ldr	r3, [pc, #620]	; (8006870 <InitRooms+0x29c>)
 8006604:	4a9b      	ldr	r2, [pc, #620]	; (8006874 <InitRooms+0x2a0>)
 8006606:	601a      	str	r2, [r3, #0]
	rm_teststart.east_room = &rm_testeast;
 8006608:	4b99      	ldr	r3, [pc, #612]	; (8006870 <InitRooms+0x29c>)
 800660a:	4a9b      	ldr	r2, [pc, #620]	; (8006878 <InitRooms+0x2a4>)
 800660c:	605a      	str	r2, [r3, #4]
	rm_teststart.south_room = &rm_testsouth;
 800660e:	4b98      	ldr	r3, [pc, #608]	; (8006870 <InitRooms+0x29c>)
 8006610:	4a9a      	ldr	r2, [pc, #616]	; (800687c <InitRooms+0x2a8>)
 8006612:	609a      	str	r2, [r3, #8]
	rm_teststart.west_room = &rm_testwest;
 8006614:	4b96      	ldr	r3, [pc, #600]	; (8006870 <InitRooms+0x29c>)
 8006616:	4a9a      	ldr	r2, [pc, #616]	; (8006880 <InitRooms+0x2ac>)
 8006618:	60da      	str	r2, [r3, #12]
	rm_teststart.up_room = NULL; //Up room needs to be unlocked
 800661a:	4b95      	ldr	r3, [pc, #596]	; (8006870 <InitRooms+0x29c>)
 800661c:	2200      	movs	r2, #0
 800661e:	611a      	str	r2, [r3, #16]
	rm_teststart.down_room = &rm_testdown;
 8006620:	4b93      	ldr	r3, [pc, #588]	; (8006870 <InitRooms+0x29c>)
 8006622:	4a98      	ldr	r2, [pc, #608]	; (8006884 <InitRooms+0x2b0>)
 8006624:	615a      	str	r2, [r3, #20]
	rm_teststart.name = rm_name_teststart;
 8006626:	4b92      	ldr	r3, [pc, #584]	; (8006870 <InitRooms+0x29c>)
 8006628:	4a98      	ldr	r2, [pc, #608]	; (800688c <InitRooms+0x2b8>)
 800662a:	619a      	str	r2, [r3, #24]
	rm_teststart.flavortext = rm_flvr_teststart;
 800662c:	4b90      	ldr	r3, [pc, #576]	; (8006870 <InitRooms+0x29c>)
 800662e:	4a98      	ldr	r2, [pc, #608]	; (8006890 <InitRooms+0x2bc>)
 8006630:	61da      	str	r2, [r3, #28]
	rm_teststart.items = NULL;
 8006632:	4b8f      	ldr	r3, [pc, #572]	; (8006870 <InitRooms+0x29c>)
 8006634:	2200      	movs	r2, #0
 8006636:	621a      	str	r2, [r3, #32]
	rm_teststart.objects = NULL;
 8006638:	4b8d      	ldr	r3, [pc, #564]	; (8006870 <InitRooms+0x29c>)
 800663a:	2200      	movs	r2, #0
 800663c:	625a      	str	r2, [r3, #36]	; 0x24
	rm_teststart.item_count = 0;
 800663e:	4b8c      	ldr	r3, [pc, #560]	; (8006870 <InitRooms+0x29c>)
 8006640:	2228      	movs	r2, #40	; 0x28
 8006642:	2100      	movs	r1, #0
 8006644:	5499      	strb	r1, [r3, r2]
	rm_teststart.object_count = 0;
 8006646:	4b8a      	ldr	r3, [pc, #552]	; (8006870 <InitRooms+0x29c>)
 8006648:	2229      	movs	r2, #41	; 0x29
 800664a:	2100      	movs	r1, #0
 800664c:	5499      	strb	r1, [r3, r2]
	rm_teststart.token = RTKN_TESTSTART;
 800664e:	4b88      	ldr	r3, [pc, #544]	; (8006870 <InitRooms+0x29c>)
 8006650:	222a      	movs	r2, #42	; 0x2a
 8006652:	2101      	movs	r1, #1
 8006654:	5499      	strb	r1, [r3, r2]
	//Init the north room
	rm_testnorth.north_room = NULL;
 8006656:	4b87      	ldr	r3, [pc, #540]	; (8006874 <InitRooms+0x2a0>)
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]
	rm_testnorth.east_room = NULL;
 800665c:	4b85      	ldr	r3, [pc, #532]	; (8006874 <InitRooms+0x2a0>)
 800665e:	2200      	movs	r2, #0
 8006660:	605a      	str	r2, [r3, #4]
	rm_testnorth.south_room = &rm_teststart;
 8006662:	4b84      	ldr	r3, [pc, #528]	; (8006874 <InitRooms+0x2a0>)
 8006664:	4a82      	ldr	r2, [pc, #520]	; (8006870 <InitRooms+0x29c>)
 8006666:	609a      	str	r2, [r3, #8]
	rm_testnorth.west_room = NULL;
 8006668:	4b82      	ldr	r3, [pc, #520]	; (8006874 <InitRooms+0x2a0>)
 800666a:	2200      	movs	r2, #0
 800666c:	60da      	str	r2, [r3, #12]
	rm_testnorth.up_room = NULL;
 800666e:	4b81      	ldr	r3, [pc, #516]	; (8006874 <InitRooms+0x2a0>)
 8006670:	2200      	movs	r2, #0
 8006672:	611a      	str	r2, [r3, #16]
	rm_testnorth.down_room = NULL;
 8006674:	4b7f      	ldr	r3, [pc, #508]	; (8006874 <InitRooms+0x2a0>)
 8006676:	2200      	movs	r2, #0
 8006678:	615a      	str	r2, [r3, #20]
	rm_testnorth.name = rm_name_testnorth;
 800667a:	4b7e      	ldr	r3, [pc, #504]	; (8006874 <InitRooms+0x2a0>)
 800667c:	4a85      	ldr	r2, [pc, #532]	; (8006894 <InitRooms+0x2c0>)
 800667e:	619a      	str	r2, [r3, #24]
	rm_testnorth.flavortext = rm_flvr_testnorth;
 8006680:	4b7c      	ldr	r3, [pc, #496]	; (8006874 <InitRooms+0x2a0>)
 8006682:	4a85      	ldr	r2, [pc, #532]	; (8006898 <InitRooms+0x2c4>)
 8006684:	61da      	str	r2, [r3, #28]
	rm_testnorth.items = NULL;
 8006686:	4b7b      	ldr	r3, [pc, #492]	; (8006874 <InitRooms+0x2a0>)
 8006688:	2200      	movs	r2, #0
 800668a:	621a      	str	r2, [r3, #32]
	rm_testnorth.objects = NULL;
 800668c:	4b79      	ldr	r3, [pc, #484]	; (8006874 <InitRooms+0x2a0>)
 800668e:	2200      	movs	r2, #0
 8006690:	625a      	str	r2, [r3, #36]	; 0x24
	rm_testnorth.item_count = 0;
 8006692:	4b78      	ldr	r3, [pc, #480]	; (8006874 <InitRooms+0x2a0>)
 8006694:	2228      	movs	r2, #40	; 0x28
 8006696:	2100      	movs	r1, #0
 8006698:	5499      	strb	r1, [r3, r2]
	rm_testnorth.object_count = 0;
 800669a:	4b76      	ldr	r3, [pc, #472]	; (8006874 <InitRooms+0x2a0>)
 800669c:	2229      	movs	r2, #41	; 0x29
 800669e:	2100      	movs	r1, #0
 80066a0:	5499      	strb	r1, [r3, r2]
	rm_testnorth.token = RTKN_TESTNORTH;
 80066a2:	4b74      	ldr	r3, [pc, #464]	; (8006874 <InitRooms+0x2a0>)
 80066a4:	222a      	movs	r2, #42	; 0x2a
 80066a6:	2102      	movs	r1, #2
 80066a8:	5499      	strb	r1, [r3, r2]
	//Init the east room
	rm_testeast.north_room = NULL;
 80066aa:	4b73      	ldr	r3, [pc, #460]	; (8006878 <InitRooms+0x2a4>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]
	rm_testeast.east_room = NULL;
 80066b0:	4b71      	ldr	r3, [pc, #452]	; (8006878 <InitRooms+0x2a4>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	605a      	str	r2, [r3, #4]
	rm_testeast.south_room = NULL;
 80066b6:	4b70      	ldr	r3, [pc, #448]	; (8006878 <InitRooms+0x2a4>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	609a      	str	r2, [r3, #8]
	rm_testeast.west_room = &rm_teststart;
 80066bc:	4b6e      	ldr	r3, [pc, #440]	; (8006878 <InitRooms+0x2a4>)
 80066be:	4a6c      	ldr	r2, [pc, #432]	; (8006870 <InitRooms+0x29c>)
 80066c0:	60da      	str	r2, [r3, #12]
	rm_testeast.up_room = NULL;
 80066c2:	4b6d      	ldr	r3, [pc, #436]	; (8006878 <InitRooms+0x2a4>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	611a      	str	r2, [r3, #16]
	rm_testeast.down_room = NULL;
 80066c8:	4b6b      	ldr	r3, [pc, #428]	; (8006878 <InitRooms+0x2a4>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	615a      	str	r2, [r3, #20]
	rm_testeast.name = rm_name_testeast;
 80066ce:	4b6a      	ldr	r3, [pc, #424]	; (8006878 <InitRooms+0x2a4>)
 80066d0:	4a72      	ldr	r2, [pc, #456]	; (800689c <InitRooms+0x2c8>)
 80066d2:	619a      	str	r2, [r3, #24]
	rm_testeast.flavortext = rm_flvr_testeast;
 80066d4:	4b68      	ldr	r3, [pc, #416]	; (8006878 <InitRooms+0x2a4>)
 80066d6:	4a72      	ldr	r2, [pc, #456]	; (80068a0 <InitRooms+0x2cc>)
 80066d8:	61da      	str	r2, [r3, #28]
	rm_testeast.items = rm_testeast_itms;
 80066da:	4b67      	ldr	r3, [pc, #412]	; (8006878 <InitRooms+0x2a4>)
 80066dc:	4a71      	ldr	r2, [pc, #452]	; (80068a4 <InitRooms+0x2d0>)
 80066de:	621a      	str	r2, [r3, #32]
	rm_testeast.objects = NULL;
 80066e0:	4b65      	ldr	r3, [pc, #404]	; (8006878 <InitRooms+0x2a4>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	625a      	str	r2, [r3, #36]	; 0x24
	rm_testeast.item_count = 1;
 80066e6:	4b64      	ldr	r3, [pc, #400]	; (8006878 <InitRooms+0x2a4>)
 80066e8:	2228      	movs	r2, #40	; 0x28
 80066ea:	2101      	movs	r1, #1
 80066ec:	5499      	strb	r1, [r3, r2]
	rm_testeast.object_count = 0;
 80066ee:	4b62      	ldr	r3, [pc, #392]	; (8006878 <InitRooms+0x2a4>)
 80066f0:	2229      	movs	r2, #41	; 0x29
 80066f2:	2100      	movs	r1, #0
 80066f4:	5499      	strb	r1, [r3, r2]
	rm_testeast.token = RTKN_TESTEAST;
 80066f6:	4b60      	ldr	r3, [pc, #384]	; (8006878 <InitRooms+0x2a4>)
 80066f8:	222a      	movs	r2, #42	; 0x2a
 80066fa:	2103      	movs	r1, #3
 80066fc:	5499      	strb	r1, [r3, r2]
	rm_testeast_itms[0] = GetItmByToken(LTKN_ITM_TEST);
 80066fe:	2050      	movs	r0, #80	; 0x50
 8006700:	f7ff fafa 	bl	8005cf8 <GetItmByToken>
 8006704:	0002      	movs	r2, r0
 8006706:	4b67      	ldr	r3, [pc, #412]	; (80068a4 <InitRooms+0x2d0>)
 8006708:	601a      	str	r2, [r3, #0]
	//Init the south room
	rm_testsouth.north_room = &rm_teststart;
 800670a:	4b5c      	ldr	r3, [pc, #368]	; (800687c <InitRooms+0x2a8>)
 800670c:	4a58      	ldr	r2, [pc, #352]	; (8006870 <InitRooms+0x29c>)
 800670e:	601a      	str	r2, [r3, #0]
	rm_testsouth.east_room = NULL;
 8006710:	4b5a      	ldr	r3, [pc, #360]	; (800687c <InitRooms+0x2a8>)
 8006712:	2200      	movs	r2, #0
 8006714:	605a      	str	r2, [r3, #4]
	rm_testsouth.south_room = NULL;
 8006716:	4b59      	ldr	r3, [pc, #356]	; (800687c <InitRooms+0x2a8>)
 8006718:	2200      	movs	r2, #0
 800671a:	609a      	str	r2, [r3, #8]
	rm_testsouth.west_room = NULL;
 800671c:	4b57      	ldr	r3, [pc, #348]	; (800687c <InitRooms+0x2a8>)
 800671e:	2200      	movs	r2, #0
 8006720:	60da      	str	r2, [r3, #12]
	rm_testsouth.up_room = NULL;
 8006722:	4b56      	ldr	r3, [pc, #344]	; (800687c <InitRooms+0x2a8>)
 8006724:	2200      	movs	r2, #0
 8006726:	611a      	str	r2, [r3, #16]
	rm_testsouth.down_room = NULL;
 8006728:	4b54      	ldr	r3, [pc, #336]	; (800687c <InitRooms+0x2a8>)
 800672a:	2200      	movs	r2, #0
 800672c:	615a      	str	r2, [r3, #20]
	rm_testsouth.name = rm_name_testsouth;
 800672e:	4b53      	ldr	r3, [pc, #332]	; (800687c <InitRooms+0x2a8>)
 8006730:	4a5d      	ldr	r2, [pc, #372]	; (80068a8 <InitRooms+0x2d4>)
 8006732:	619a      	str	r2, [r3, #24]
	rm_testsouth.flavortext = rm_flvr_testsouth;
 8006734:	4b51      	ldr	r3, [pc, #324]	; (800687c <InitRooms+0x2a8>)
 8006736:	4a5d      	ldr	r2, [pc, #372]	; (80068ac <InitRooms+0x2d8>)
 8006738:	61da      	str	r2, [r3, #28]
	rm_testsouth.items = NULL;
 800673a:	4b50      	ldr	r3, [pc, #320]	; (800687c <InitRooms+0x2a8>)
 800673c:	2200      	movs	r2, #0
 800673e:	621a      	str	r2, [r3, #32]
	rm_testsouth.objects = NULL;
 8006740:	4b4e      	ldr	r3, [pc, #312]	; (800687c <InitRooms+0x2a8>)
 8006742:	2200      	movs	r2, #0
 8006744:	625a      	str	r2, [r3, #36]	; 0x24
	rm_testsouth.item_count = 0;
 8006746:	4b4d      	ldr	r3, [pc, #308]	; (800687c <InitRooms+0x2a8>)
 8006748:	2228      	movs	r2, #40	; 0x28
 800674a:	2100      	movs	r1, #0
 800674c:	5499      	strb	r1, [r3, r2]
	rm_testsouth.object_count = 0;
 800674e:	4b4b      	ldr	r3, [pc, #300]	; (800687c <InitRooms+0x2a8>)
 8006750:	2229      	movs	r2, #41	; 0x29
 8006752:	2100      	movs	r1, #0
 8006754:	5499      	strb	r1, [r3, r2]
	rm_testsouth.token = RTKN_TESTSOUTH;
 8006756:	4b49      	ldr	r3, [pc, #292]	; (800687c <InitRooms+0x2a8>)
 8006758:	222a      	movs	r2, #42	; 0x2a
 800675a:	2104      	movs	r1, #4
 800675c:	5499      	strb	r1, [r3, r2]
	//Init the west room
	rm_testwest.north_room = NULL;
 800675e:	4b48      	ldr	r3, [pc, #288]	; (8006880 <InitRooms+0x2ac>)
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]
	rm_testwest.east_room = &rm_teststart;
 8006764:	4b46      	ldr	r3, [pc, #280]	; (8006880 <InitRooms+0x2ac>)
 8006766:	4a42      	ldr	r2, [pc, #264]	; (8006870 <InitRooms+0x29c>)
 8006768:	605a      	str	r2, [r3, #4]
	rm_testwest.south_room = NULL;
 800676a:	4b45      	ldr	r3, [pc, #276]	; (8006880 <InitRooms+0x2ac>)
 800676c:	2200      	movs	r2, #0
 800676e:	609a      	str	r2, [r3, #8]
	rm_testwest.west_room = NULL;
 8006770:	4b43      	ldr	r3, [pc, #268]	; (8006880 <InitRooms+0x2ac>)
 8006772:	2200      	movs	r2, #0
 8006774:	60da      	str	r2, [r3, #12]
	rm_testwest.up_room = NULL;
 8006776:	4b42      	ldr	r3, [pc, #264]	; (8006880 <InitRooms+0x2ac>)
 8006778:	2200      	movs	r2, #0
 800677a:	611a      	str	r2, [r3, #16]
	rm_testwest.down_room = NULL;
 800677c:	4b40      	ldr	r3, [pc, #256]	; (8006880 <InitRooms+0x2ac>)
 800677e:	2200      	movs	r2, #0
 8006780:	615a      	str	r2, [r3, #20]
	rm_testwest.name = rm_name_testwest;
 8006782:	4b3f      	ldr	r3, [pc, #252]	; (8006880 <InitRooms+0x2ac>)
 8006784:	4a4a      	ldr	r2, [pc, #296]	; (80068b0 <InitRooms+0x2dc>)
 8006786:	619a      	str	r2, [r3, #24]
	rm_testwest.flavortext = rm_flvr_testwest;
 8006788:	4b3d      	ldr	r3, [pc, #244]	; (8006880 <InitRooms+0x2ac>)
 800678a:	4a4a      	ldr	r2, [pc, #296]	; (80068b4 <InitRooms+0x2e0>)
 800678c:	61da      	str	r2, [r3, #28]
	rm_testwest.items = NULL;
 800678e:	4b3c      	ldr	r3, [pc, #240]	; (8006880 <InitRooms+0x2ac>)
 8006790:	2200      	movs	r2, #0
 8006792:	621a      	str	r2, [r3, #32]
	rm_testwest.objects = NULL;
 8006794:	4b3a      	ldr	r3, [pc, #232]	; (8006880 <InitRooms+0x2ac>)
 8006796:	2200      	movs	r2, #0
 8006798:	625a      	str	r2, [r3, #36]	; 0x24
	rm_testwest.item_count = 0;
 800679a:	4b39      	ldr	r3, [pc, #228]	; (8006880 <InitRooms+0x2ac>)
 800679c:	2228      	movs	r2, #40	; 0x28
 800679e:	2100      	movs	r1, #0
 80067a0:	5499      	strb	r1, [r3, r2]
	rm_testwest.object_count = 0;
 80067a2:	4b37      	ldr	r3, [pc, #220]	; (8006880 <InitRooms+0x2ac>)
 80067a4:	2229      	movs	r2, #41	; 0x29
 80067a6:	2100      	movs	r1, #0
 80067a8:	5499      	strb	r1, [r3, r2]
	rm_testwest.token = RTKN_TESTWEST;
 80067aa:	4b35      	ldr	r3, [pc, #212]	; (8006880 <InitRooms+0x2ac>)
 80067ac:	222a      	movs	r2, #42	; 0x2a
 80067ae:	2105      	movs	r1, #5
 80067b0:	5499      	strb	r1, [r3, r2]
	//Init the down room
	rm_testdown.north_room = NULL;
 80067b2:	4b34      	ldr	r3, [pc, #208]	; (8006884 <InitRooms+0x2b0>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
	rm_testdown.east_room = NULL;
 80067b8:	4b32      	ldr	r3, [pc, #200]	; (8006884 <InitRooms+0x2b0>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	605a      	str	r2, [r3, #4]
	rm_testdown.south_room = NULL;
 80067be:	4b31      	ldr	r3, [pc, #196]	; (8006884 <InitRooms+0x2b0>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	609a      	str	r2, [r3, #8]
	rm_testdown.west_room = NULL;
 80067c4:	4b2f      	ldr	r3, [pc, #188]	; (8006884 <InitRooms+0x2b0>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	60da      	str	r2, [r3, #12]
	rm_testdown.up_room = &rm_teststart;
 80067ca:	4b2e      	ldr	r3, [pc, #184]	; (8006884 <InitRooms+0x2b0>)
 80067cc:	4a28      	ldr	r2, [pc, #160]	; (8006870 <InitRooms+0x29c>)
 80067ce:	611a      	str	r2, [r3, #16]
	rm_testdown.down_room = NULL;
 80067d0:	4b2c      	ldr	r3, [pc, #176]	; (8006884 <InitRooms+0x2b0>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	615a      	str	r2, [r3, #20]
	rm_testdown.name = rm_name_testdown;
 80067d6:	4b2b      	ldr	r3, [pc, #172]	; (8006884 <InitRooms+0x2b0>)
 80067d8:	4a37      	ldr	r2, [pc, #220]	; (80068b8 <InitRooms+0x2e4>)
 80067da:	619a      	str	r2, [r3, #24]
	rm_testdown.flavortext = rm_flvr_testdown;
 80067dc:	4b29      	ldr	r3, [pc, #164]	; (8006884 <InitRooms+0x2b0>)
 80067de:	4a37      	ldr	r2, [pc, #220]	; (80068bc <InitRooms+0x2e8>)
 80067e0:	61da      	str	r2, [r3, #28]
	rm_testdown.items = NULL;
 80067e2:	4b28      	ldr	r3, [pc, #160]	; (8006884 <InitRooms+0x2b0>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	621a      	str	r2, [r3, #32]
	rm_testdown.objects = rm_testdown_objs;
 80067e8:	4b26      	ldr	r3, [pc, #152]	; (8006884 <InitRooms+0x2b0>)
 80067ea:	4a35      	ldr	r2, [pc, #212]	; (80068c0 <InitRooms+0x2ec>)
 80067ec:	625a      	str	r2, [r3, #36]	; 0x24
	rm_testdown.item_count = 0;
 80067ee:	4b25      	ldr	r3, [pc, #148]	; (8006884 <InitRooms+0x2b0>)
 80067f0:	2228      	movs	r2, #40	; 0x28
 80067f2:	2100      	movs	r1, #0
 80067f4:	5499      	strb	r1, [r3, r2]
	rm_testdown.object_count = 1;
 80067f6:	4b23      	ldr	r3, [pc, #140]	; (8006884 <InitRooms+0x2b0>)
 80067f8:	2229      	movs	r2, #41	; 0x29
 80067fa:	2101      	movs	r1, #1
 80067fc:	5499      	strb	r1, [r3, r2]
	rm_testdown.token = RTKN_TESTDOWN;
 80067fe:	4b21      	ldr	r3, [pc, #132]	; (8006884 <InitRooms+0x2b0>)
 8006800:	222a      	movs	r2, #42	; 0x2a
 8006802:	2106      	movs	r1, #6
 8006804:	5499      	strb	r1, [r3, r2]
	rm_testdown_objs[0] = GetObjByToken(LTKN_OBJ_TEST);
 8006806:	2020      	movs	r0, #32
 8006808:	f7ff fe9a 	bl	8006540 <GetObjByToken>
 800680c:	0002      	movs	r2, r0
 800680e:	4b2c      	ldr	r3, [pc, #176]	; (80068c0 <InitRooms+0x2ec>)
 8006810:	601a      	str	r2, [r3, #0]
	//Init the up room
	rm_testup.north_room = NULL;
 8006812:	4b1d      	ldr	r3, [pc, #116]	; (8006888 <InitRooms+0x2b4>)
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]
	rm_testup.east_room = NULL;
 8006818:	4b1b      	ldr	r3, [pc, #108]	; (8006888 <InitRooms+0x2b4>)
 800681a:	2200      	movs	r2, #0
 800681c:	605a      	str	r2, [r3, #4]
	rm_testup.south_room = NULL;
 800681e:	4b1a      	ldr	r3, [pc, #104]	; (8006888 <InitRooms+0x2b4>)
 8006820:	2200      	movs	r2, #0
 8006822:	609a      	str	r2, [r3, #8]
	rm_testup.west_room = NULL;
 8006824:	4b18      	ldr	r3, [pc, #96]	; (8006888 <InitRooms+0x2b4>)
 8006826:	2200      	movs	r2, #0
 8006828:	60da      	str	r2, [r3, #12]
	rm_testup.up_room = NULL;
 800682a:	4b17      	ldr	r3, [pc, #92]	; (8006888 <InitRooms+0x2b4>)
 800682c:	2200      	movs	r2, #0
 800682e:	611a      	str	r2, [r3, #16]
	rm_testup.down_room = &rm_teststart;
 8006830:	4b15      	ldr	r3, [pc, #84]	; (8006888 <InitRooms+0x2b4>)
 8006832:	4a0f      	ldr	r2, [pc, #60]	; (8006870 <InitRooms+0x29c>)
 8006834:	615a      	str	r2, [r3, #20]
	rm_testup.name = rm_name_testup;
 8006836:	4b14      	ldr	r3, [pc, #80]	; (8006888 <InitRooms+0x2b4>)
 8006838:	4a22      	ldr	r2, [pc, #136]	; (80068c4 <InitRooms+0x2f0>)
 800683a:	619a      	str	r2, [r3, #24]
	rm_testup.flavortext = rm_flvr_testup;
 800683c:	4b12      	ldr	r3, [pc, #72]	; (8006888 <InitRooms+0x2b4>)
 800683e:	4a22      	ldr	r2, [pc, #136]	; (80068c8 <InitRooms+0x2f4>)
 8006840:	61da      	str	r2, [r3, #28]
	rm_testup.items = NULL;
 8006842:	4b11      	ldr	r3, [pc, #68]	; (8006888 <InitRooms+0x2b4>)
 8006844:	2200      	movs	r2, #0
 8006846:	621a      	str	r2, [r3, #32]
	rm_testup.objects = NULL;
 8006848:	4b0f      	ldr	r3, [pc, #60]	; (8006888 <InitRooms+0x2b4>)
 800684a:	2200      	movs	r2, #0
 800684c:	625a      	str	r2, [r3, #36]	; 0x24
	rm_testup.item_count = 0;
 800684e:	4b0e      	ldr	r3, [pc, #56]	; (8006888 <InitRooms+0x2b4>)
 8006850:	2228      	movs	r2, #40	; 0x28
 8006852:	2100      	movs	r1, #0
 8006854:	5499      	strb	r1, [r3, r2]
	rm_testup.object_count = 0;
 8006856:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <InitRooms+0x2b4>)
 8006858:	2229      	movs	r2, #41	; 0x29
 800685a:	2100      	movs	r1, #0
 800685c:	5499      	strb	r1, [r3, r2]
	rm_testup.token = RTKN_TESTUP;
 800685e:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <InitRooms+0x2b4>)
 8006860:	222a      	movs	r2, #42	; 0x2a
 8006862:	2107      	movs	r1, #7
 8006864:	5499      	strb	r1, [r3, r2]
}
 8006866:	46c0      	nop			; (mov r8, r8)
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	200008b0 	.word	0x200008b0
 8006870:	200008f8 	.word	0x200008f8
 8006874:	20000980 	.word	0x20000980
 8006878:	200008cc 	.word	0x200008cc
 800687c:	20000950 	.word	0x20000950
 8006880:	200009ac 	.word	0x200009ac
 8006884:	200009d8 	.word	0x200009d8
 8006888:	20000924 	.word	0x20000924
 800688c:	080085bc 	.word	0x080085bc
 8006890:	0800862c 	.word	0x0800862c
 8006894:	080085cc 	.word	0x080085cc
 8006898:	0800864c 	.word	0x0800864c
 800689c:	080085dc 	.word	0x080085dc
 80068a0:	08008688 	.word	0x08008688
 80068a4:	2000097c 	.word	0x2000097c
 80068a8:	080085ec 	.word	0x080085ec
 80068ac:	080086b0 	.word	0x080086b0
 80068b0:	080085fc 	.word	0x080085fc
 80068b4:	080086d8 	.word	0x080086d8
 80068b8:	0800860c 	.word	0x0800860c
 80068bc:	0800870c 	.word	0x0800870c
 80068c0:	20000a04 	.word	0x20000a04
 80068c4:	0800861c 	.word	0x0800861c
 80068c8:	08008740 	.word	0x08008740

080068cc <GetRoomByToken>:

struct room* GetRoomByToken(uint8_t token){
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	0002      	movs	r2, r0
 80068d4:	1dfb      	adds	r3, r7, #7
 80068d6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < ROOM_COUNT; i++){
 80068d8:	230f      	movs	r3, #15
 80068da:	18fb      	adds	r3, r7, r3
 80068dc:	2200      	movs	r2, #0
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	e018      	b.n	8006914 <GetRoomByToken+0x48>
		if(game_rooms[i]->token == token){
 80068e2:	230f      	movs	r3, #15
 80068e4:	18fb      	adds	r3, r7, r3
 80068e6:	781a      	ldrb	r2, [r3, #0]
 80068e8:	4b0f      	ldr	r3, [pc, #60]	; (8006928 <GetRoomByToken+0x5c>)
 80068ea:	0092      	lsls	r2, r2, #2
 80068ec:	58d3      	ldr	r3, [r2, r3]
 80068ee:	222a      	movs	r2, #42	; 0x2a
 80068f0:	5c9b      	ldrb	r3, [r3, r2]
 80068f2:	1dfa      	adds	r2, r7, #7
 80068f4:	7812      	ldrb	r2, [r2, #0]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d106      	bne.n	8006908 <GetRoomByToken+0x3c>
			return game_rooms[i];
 80068fa:	230f      	movs	r3, #15
 80068fc:	18fb      	adds	r3, r7, r3
 80068fe:	781a      	ldrb	r2, [r3, #0]
 8006900:	4b09      	ldr	r3, [pc, #36]	; (8006928 <GetRoomByToken+0x5c>)
 8006902:	0092      	lsls	r2, r2, #2
 8006904:	58d3      	ldr	r3, [r2, r3]
 8006906:	e00b      	b.n	8006920 <GetRoomByToken+0x54>
	for(uint8_t i = 0; i < ROOM_COUNT; i++){
 8006908:	210f      	movs	r1, #15
 800690a:	187b      	adds	r3, r7, r1
 800690c:	781a      	ldrb	r2, [r3, #0]
 800690e:	187b      	adds	r3, r7, r1
 8006910:	3201      	adds	r2, #1
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	230f      	movs	r3, #15
 8006916:	18fb      	adds	r3, r7, r3
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b06      	cmp	r3, #6
 800691c:	d9e1      	bls.n	80068e2 <GetRoomByToken+0x16>
		}
	}
	return NULL;
 800691e:	2300      	movs	r3, #0
}
 8006920:	0018      	movs	r0, r3
 8006922:	46bd      	mov	sp, r7
 8006924:	b004      	add	sp, #16
 8006926:	bd80      	pop	{r7, pc}
 8006928:	200008b0 	.word	0x200008b0

0800692c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006930:	4b07      	ldr	r3, [pc, #28]	; (8006950 <HAL_MspInit+0x24>)
 8006932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006934:	4b06      	ldr	r3, [pc, #24]	; (8006950 <HAL_MspInit+0x24>)
 8006936:	2101      	movs	r1, #1
 8006938:	430a      	orrs	r2, r1
 800693a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800693c:	4b04      	ldr	r3, [pc, #16]	; (8006950 <HAL_MspInit+0x24>)
 800693e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006940:	4b03      	ldr	r3, [pc, #12]	; (8006950 <HAL_MspInit+0x24>)
 8006942:	2180      	movs	r1, #128	; 0x80
 8006944:	0549      	lsls	r1, r1, #21
 8006946:	430a      	orrs	r2, r1
 8006948:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800694a:	46c0      	nop			; (mov r8, r8)
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40021000 	.word	0x40021000

08006954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800695c:	230c      	movs	r3, #12
 800695e:	18fb      	adds	r3, r7, r3
 8006960:	0018      	movs	r0, r3
 8006962:	2314      	movs	r3, #20
 8006964:	001a      	movs	r2, r3
 8006966:	2100      	movs	r1, #0
 8006968:	f000 ffb3 	bl	80078d2 <memset>
  if(hi2c->Instance==I2C1)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a18      	ldr	r2, [pc, #96]	; (80069d4 <HAL_I2C_MspInit+0x80>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d12a      	bne.n	80069cc <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006976:	4b18      	ldr	r3, [pc, #96]	; (80069d8 <HAL_I2C_MspInit+0x84>)
 8006978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697a:	4b17      	ldr	r3, [pc, #92]	; (80069d8 <HAL_I2C_MspInit+0x84>)
 800697c:	2101      	movs	r1, #1
 800697e:	430a      	orrs	r2, r1
 8006980:	62da      	str	r2, [r3, #44]	; 0x2c
 8006982:	4b15      	ldr	r3, [pc, #84]	; (80069d8 <HAL_I2C_MspInit+0x84>)
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	2201      	movs	r2, #1
 8006988:	4013      	ands	r3, r2
 800698a:	60bb      	str	r3, [r7, #8]
 800698c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800698e:	210c      	movs	r1, #12
 8006990:	187b      	adds	r3, r7, r1
 8006992:	22c0      	movs	r2, #192	; 0xc0
 8006994:	00d2      	lsls	r2, r2, #3
 8006996:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006998:	187b      	adds	r3, r7, r1
 800699a:	2212      	movs	r2, #18
 800699c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800699e:	187b      	adds	r3, r7, r1
 80069a0:	2201      	movs	r2, #1
 80069a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069a4:	187b      	adds	r3, r7, r1
 80069a6:	2203      	movs	r2, #3
 80069a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80069aa:	187b      	adds	r3, r7, r1
 80069ac:	2206      	movs	r2, #6
 80069ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069b0:	187a      	adds	r2, r7, r1
 80069b2:	23a0      	movs	r3, #160	; 0xa0
 80069b4:	05db      	lsls	r3, r3, #23
 80069b6:	0011      	movs	r1, r2
 80069b8:	0018      	movs	r0, r3
 80069ba:	f7f9 fd89 	bl	80004d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80069be:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <HAL_I2C_MspInit+0x84>)
 80069c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <HAL_I2C_MspInit+0x84>)
 80069c4:	2180      	movs	r1, #128	; 0x80
 80069c6:	0389      	lsls	r1, r1, #14
 80069c8:	430a      	orrs	r2, r1
 80069ca:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80069cc:	46c0      	nop			; (mov r8, r8)
 80069ce:	46bd      	mov	sp, r7
 80069d0:	b008      	add	sp, #32
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40005400 	.word	0x40005400
 80069d8:	40021000 	.word	0x40021000

080069dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80069e0:	46c0      	nop			; (mov r8, r8)
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069ea:	e7fe      	b.n	80069ea <HardFault_Handler+0x4>

080069ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80069f0:	46c0      	nop			; (mov r8, r8)
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a04:	f7f9 fc56 	bl	80002b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a08:	46c0      	nop			; (mov r8, r8)
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	stopState = 1;
 8006a14:	4b05      	ldr	r3, [pc, #20]	; (8006a2c <EXTI4_15_IRQHandler+0x1c>)
 8006a16:	2201      	movs	r2, #1
 8006a18:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006a1a:	2380      	movs	r3, #128	; 0x80
 8006a1c:	019b      	lsls	r3, r3, #6
 8006a1e:	0018      	movs	r0, r3
 8006a20:	f7f9 fef2 	bl	8000808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8006a24:	46c0      	nop			; (mov r8, r8)
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	200001f9 	.word	0x200001f9

08006a30 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006a34:	4b03      	ldr	r3, [pc, #12]	; (8006a44 <USB_IRQHandler+0x14>)
 8006a36:	0018      	movs	r0, r3
 8006a38:	f7fa f954 	bl	8000ce4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8006a3c:	46c0      	nop			; (mov r8, r8)
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	20000da8 	.word	0x20000da8

08006a48 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006a50:	4b11      	ldr	r3, [pc, #68]	; (8006a98 <_sbrk+0x50>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <_sbrk+0x16>
		heap_end = &end;
 8006a58:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <_sbrk+0x50>)
 8006a5a:	4a10      	ldr	r2, [pc, #64]	; (8006a9c <_sbrk+0x54>)
 8006a5c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006a5e:	4b0e      	ldr	r3, [pc, #56]	; (8006a98 <_sbrk+0x50>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006a64:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <_sbrk+0x50>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	18d3      	adds	r3, r2, r3
 8006a6c:	466a      	mov	r2, sp
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d907      	bls.n	8006a82 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006a72:	f000 fefb 	bl	800786c <__errno>
 8006a76:	0003      	movs	r3, r0
 8006a78:	220c      	movs	r2, #12
 8006a7a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	425b      	negs	r3, r3
 8006a80:	e006      	b.n	8006a90 <_sbrk+0x48>
	}

	heap_end += incr;
 8006a82:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <_sbrk+0x50>)
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	18d2      	adds	r2, r2, r3
 8006a8a:	4b03      	ldr	r3, [pc, #12]	; (8006a98 <_sbrk+0x50>)
 8006a8c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
}
 8006a90:	0018      	movs	r0, r3
 8006a92:	46bd      	mov	sp, r7
 8006a94:	b004      	add	sp, #16
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	200001fc 	.word	0x200001fc
 8006a9c:	20001220 	.word	0x20001220

08006aa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8006aa4:	4b17      	ldr	r3, [pc, #92]	; (8006b04 <SystemInit+0x64>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	4b16      	ldr	r3, [pc, #88]	; (8006b04 <SystemInit+0x64>)
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	0049      	lsls	r1, r1, #1
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8006ab2:	4b14      	ldr	r3, [pc, #80]	; (8006b04 <SystemInit+0x64>)
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	4b13      	ldr	r3, [pc, #76]	; (8006b04 <SystemInit+0x64>)
 8006ab8:	4913      	ldr	r1, [pc, #76]	; (8006b08 <SystemInit+0x68>)
 8006aba:	400a      	ands	r2, r1
 8006abc:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8006abe:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <SystemInit+0x64>)
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	4b10      	ldr	r3, [pc, #64]	; (8006b04 <SystemInit+0x64>)
 8006ac4:	4911      	ldr	r1, [pc, #68]	; (8006b0c <SystemInit+0x6c>)
 8006ac6:	400a      	ands	r2, r1
 8006ac8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006aca:	4b0e      	ldr	r3, [pc, #56]	; (8006b04 <SystemInit+0x64>)
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	4b0d      	ldr	r3, [pc, #52]	; (8006b04 <SystemInit+0x64>)
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	438a      	bics	r2, r1
 8006ad4:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <SystemInit+0x64>)
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <SystemInit+0x64>)
 8006adc:	490c      	ldr	r1, [pc, #48]	; (8006b10 <SystemInit+0x70>)
 8006ade:	400a      	ands	r2, r1
 8006ae0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8006ae2:	4b08      	ldr	r3, [pc, #32]	; (8006b04 <SystemInit+0x64>)
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	4b07      	ldr	r3, [pc, #28]	; (8006b04 <SystemInit+0x64>)
 8006ae8:	490a      	ldr	r1, [pc, #40]	; (8006b14 <SystemInit+0x74>)
 8006aea:	400a      	ands	r2, r1
 8006aec:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006aee:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <SystemInit+0x64>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006af4:	4b08      	ldr	r3, [pc, #32]	; (8006b18 <SystemInit+0x78>)
 8006af6:	2280      	movs	r2, #128	; 0x80
 8006af8:	0512      	lsls	r2, r2, #20
 8006afa:	609a      	str	r2, [r3, #8]
#endif
}
 8006afc:	46c0      	nop			; (mov r8, r8)
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	46c0      	nop			; (mov r8, r8)
 8006b04:	40021000 	.word	0x40021000
 8006b08:	88ff400c 	.word	0x88ff400c
 8006b0c:	fef6fff6 	.word	0xfef6fff6
 8006b10:	fffbffff 	.word	0xfffbffff
 8006b14:	ff02ffff 	.word	0xff02ffff
 8006b18:	e000ed00 	.word	0xe000ed00

08006b1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b20:	4914      	ldr	r1, [pc, #80]	; (8006b74 <MX_USB_DEVICE_Init+0x58>)
 8006b22:	4b15      	ldr	r3, [pc, #84]	; (8006b78 <MX_USB_DEVICE_Init+0x5c>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	0018      	movs	r0, r3
 8006b28:	f7fd fb8f 	bl	800424a <USBD_Init>
 8006b2c:	1e03      	subs	r3, r0, #0
 8006b2e:	d001      	beq.n	8006b34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b30:	f7ff fcde 	bl	80064f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b34:	4a11      	ldr	r2, [pc, #68]	; (8006b7c <MX_USB_DEVICE_Init+0x60>)
 8006b36:	4b10      	ldr	r3, [pc, #64]	; (8006b78 <MX_USB_DEVICE_Init+0x5c>)
 8006b38:	0011      	movs	r1, r2
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	f7fd fbb6 	bl	80042ac <USBD_RegisterClass>
 8006b40:	1e03      	subs	r3, r0, #0
 8006b42:	d001      	beq.n	8006b48 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8006b44:	f7ff fcd4 	bl	80064f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b48:	4a0d      	ldr	r2, [pc, #52]	; (8006b80 <MX_USB_DEVICE_Init+0x64>)
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	; (8006b78 <MX_USB_DEVICE_Init+0x5c>)
 8006b4c:	0011      	movs	r1, r2
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f7fd faca 	bl	80040e8 <USBD_CDC_RegisterInterface>
 8006b54:	1e03      	subs	r3, r0, #0
 8006b56:	d001      	beq.n	8006b5c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8006b58:	f7ff fcca 	bl	80064f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b5c:	4b06      	ldr	r3, [pc, #24]	; (8006b78 <MX_USB_DEVICE_Init+0x5c>)
 8006b5e:	0018      	movs	r0, r3
 8006b60:	f7fd fbc5 	bl	80042ee <USBD_Start>
 8006b64:	1e03      	subs	r3, r0, #0
 8006b66:	d001      	beq.n	8006b6c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8006b68:	f7ff fcc2 	bl	80064f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b6c:	46c0      	nop			; (mov r8, r8)
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	46c0      	nop			; (mov r8, r8)
 8006b74:	20000128 	.word	0x20000128
 8006b78:	20000a08 	.word	0x20000a08
 8006b7c:	2000000c 	.word	0x2000000c
 8006b80:	20000118 	.word	0x20000118

08006b84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006b88:	490b      	ldr	r1, [pc, #44]	; (8006bb8 <CDC_Init_FS+0x34>)
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <CDC_Init_FS+0x38>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	0018      	movs	r0, r3
 8006b90:	f7fd fac6 	bl	8004120 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006b94:	4a0a      	ldr	r2, [pc, #40]	; (8006bc0 <CDC_Init_FS+0x3c>)
 8006b96:	4b09      	ldr	r3, [pc, #36]	; (8006bbc <CDC_Init_FS+0x38>)
 8006b98:	0011      	movs	r1, r2
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	f7fd fadc 	bl	8004158 <USBD_CDC_SetRxBuffer>
  memset(UserData, '\0', USER_DATA_SIZE);
 8006ba0:	2380      	movs	r3, #128	; 0x80
 8006ba2:	005a      	lsls	r2, r3, #1
 8006ba4:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <CDC_Init_FS+0x40>)
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f000 fe92 	bl	80078d2 <memset>
  return (USBD_OK);
 8006bae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	20000640 	.word	0x20000640
 8006bbc:	20000a08 	.word	0x20000a08
 8006bc0:	20000ca4 	.word	0x20000ca4
 8006bc4:	20000ca8 	.word	0x20000ca8

08006bc8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006bcc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006bce:	0018      	movs	r0, r3
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6039      	str	r1, [r7, #0]
 8006bdc:	0011      	movs	r1, r2
 8006bde:	1dfb      	adds	r3, r7, #7
 8006be0:	1c02      	adds	r2, r0, #0
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	1d3b      	adds	r3, r7, #4
 8006be6:	1c0a      	adds	r2, r1, #0
 8006be8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006bea:	1dfb      	adds	r3, r7, #7
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	2b23      	cmp	r3, #35	; 0x23
 8006bf0:	d804      	bhi.n	8006bfc <CDC_Control_FS+0x28>
 8006bf2:	009a      	lsls	r2, r3, #2
 8006bf4:	4b04      	ldr	r3, [pc, #16]	; (8006c08 <CDC_Control_FS+0x34>)
 8006bf6:	18d3      	adds	r3, r2, r3
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006bfc:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8006bfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c00:	0018      	movs	r0, r3
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b002      	add	sp, #8
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	080087a4 	.word	0x080087a4

08006c0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	4b3d      	ldr	r3, [pc, #244]	; (8006d10 <CDC_Receive_FS+0x104>)
 8006c1a:	0011      	movs	r1, r2
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	f7fd fa9b 	bl	8004158 <USBD_CDC_SetRxBuffer>
  if(UserRxBufferFS[0] == '\r'){
 8006c22:	4b3c      	ldr	r3, [pc, #240]	; (8006d14 <CDC_Receive_FS+0x108>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	2b0d      	cmp	r3, #13
 8006c28:	d114      	bne.n	8006c54 <CDC_Receive_FS+0x48>
	  if(LocalEcho){
 8006c2a:	4b3b      	ldr	r3, [pc, #236]	; (8006d18 <CDC_Receive_FS+0x10c>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00b      	beq.n	8006c4c <CDC_Receive_FS+0x40>
		  uint8_t tmp[] = "\r\n";
 8006c34:	200c      	movs	r0, #12
 8006c36:	183b      	adds	r3, r7, r0
 8006c38:	4a38      	ldr	r2, [pc, #224]	; (8006d1c <CDC_Receive_FS+0x110>)
 8006c3a:	8811      	ldrh	r1, [r2, #0]
 8006c3c:	8019      	strh	r1, [r3, #0]
 8006c3e:	7892      	ldrb	r2, [r2, #2]
 8006c40:	709a      	strb	r2, [r3, #2]
		  CDC_Transmit_FS(tmp, 2);
 8006c42:	183b      	adds	r3, r7, r0
 8006c44:	2102      	movs	r1, #2
 8006c46:	0018      	movs	r0, r3
 8006c48:	f000 f872 	bl	8006d30 <CDC_Transmit_FS>
	  }
	  UserDataReady = 1;
 8006c4c:	4b34      	ldr	r3, [pc, #208]	; (8006d20 <CDC_Receive_FS+0x114>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e053      	b.n	8006cfc <CDC_Receive_FS+0xf0>
  }
  else if(UserRxBufferFS[0] == 0x7F){
 8006c54:	4b2f      	ldr	r3, [pc, #188]	; (8006d14 <CDC_Receive_FS+0x108>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b7f      	cmp	r3, #127	; 0x7f
 8006c5a:	d121      	bne.n	8006ca0 <CDC_Receive_FS+0x94>
	  if(LocalEcho){
 8006c5c:	4b2e      	ldr	r3, [pc, #184]	; (8006d18 <CDC_Receive_FS+0x10c>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <CDC_Receive_FS+0x72>
		  uint8_t tmp[] = {0x08, 0x20, 0x08};
 8006c66:	2008      	movs	r0, #8
 8006c68:	183b      	adds	r3, r7, r0
 8006c6a:	4a2e      	ldr	r2, [pc, #184]	; (8006d24 <CDC_Receive_FS+0x118>)
 8006c6c:	8811      	ldrh	r1, [r2, #0]
 8006c6e:	8019      	strh	r1, [r3, #0]
 8006c70:	7892      	ldrb	r2, [r2, #2]
 8006c72:	709a      	strb	r2, [r3, #2]
		  CDC_Transmit_FS(tmp, 3);
 8006c74:	183b      	adds	r3, r7, r0
 8006c76:	2103      	movs	r1, #3
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f000 f859 	bl	8006d30 <CDC_Transmit_FS>
	  }
	  if(UserDataIndex > 0){
 8006c7e:	4b2a      	ldr	r3, [pc, #168]	; (8006d28 <CDC_Receive_FS+0x11c>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d03a      	beq.n	8006cfc <CDC_Receive_FS+0xf0>
		  UserDataIndex--;
 8006c86:	4b28      	ldr	r3, [pc, #160]	; (8006d28 <CDC_Receive_FS+0x11c>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	4b26      	ldr	r3, [pc, #152]	; (8006d28 <CDC_Receive_FS+0x11c>)
 8006c90:	701a      	strb	r2, [r3, #0]
		  UserData[UserDataIndex] = '\0';
 8006c92:	4b25      	ldr	r3, [pc, #148]	; (8006d28 <CDC_Receive_FS+0x11c>)
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	001a      	movs	r2, r3
 8006c98:	4b24      	ldr	r3, [pc, #144]	; (8006d2c <CDC_Receive_FS+0x120>)
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	5499      	strb	r1, [r3, r2]
 8006c9e:	e02d      	b.n	8006cfc <CDC_Receive_FS+0xf0>
	  }
  }
  else if(UserRxBufferFS[0] >= 0x20 && UserRxBufferFS[0] <= 0x7E){
 8006ca0:	4b1c      	ldr	r3, [pc, #112]	; (8006d14 <CDC_Receive_FS+0x108>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2b1f      	cmp	r3, #31
 8006ca6:	d929      	bls.n	8006cfc <CDC_Receive_FS+0xf0>
 8006ca8:	4b1a      	ldr	r3, [pc, #104]	; (8006d14 <CDC_Receive_FS+0x108>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b7e      	cmp	r3, #126	; 0x7e
 8006cae:	d825      	bhi.n	8006cfc <CDC_Receive_FS+0xf0>
	  if(LocalEcho){
 8006cb0:	4b19      	ldr	r3, [pc, #100]	; (8006d18 <CDC_Receive_FS+0x10c>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d004      	beq.n	8006cc4 <CDC_Receive_FS+0xb8>
		  CDC_Transmit_FS(&UserRxBufferFS[0], 1);
 8006cba:	4b16      	ldr	r3, [pc, #88]	; (8006d14 <CDC_Receive_FS+0x108>)
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f000 f836 	bl	8006d30 <CDC_Transmit_FS>
	  }
	  UserData[UserDataIndex] = UserRxBufferFS[0];
 8006cc4:	4b18      	ldr	r3, [pc, #96]	; (8006d28 <CDC_Receive_FS+0x11c>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	001a      	movs	r2, r3
 8006cca:	4b12      	ldr	r3, [pc, #72]	; (8006d14 <CDC_Receive_FS+0x108>)
 8006ccc:	7819      	ldrb	r1, [r3, #0]
 8006cce:	4b17      	ldr	r3, [pc, #92]	; (8006d2c <CDC_Receive_FS+0x120>)
 8006cd0:	5499      	strb	r1, [r3, r2]
	  if(UserDataIndex < 255){
 8006cd2:	4b15      	ldr	r3, [pc, #84]	; (8006d28 <CDC_Receive_FS+0x11c>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2bff      	cmp	r3, #255	; 0xff
 8006cd8:	d006      	beq.n	8006ce8 <CDC_Receive_FS+0xdc>
		  UserDataIndex++;
 8006cda:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <CDC_Receive_FS+0x11c>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	4b11      	ldr	r3, [pc, #68]	; (8006d28 <CDC_Receive_FS+0x11c>)
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	e009      	b.n	8006cfc <CDC_Receive_FS+0xf0>
	  }
	  else{
		  memset(UserData, '\0', USER_DATA_SIZE);
 8006ce8:	2380      	movs	r3, #128	; 0x80
 8006cea:	005a      	lsls	r2, r3, #1
 8006cec:	4b0f      	ldr	r3, [pc, #60]	; (8006d2c <CDC_Receive_FS+0x120>)
 8006cee:	2100      	movs	r1, #0
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f000 fdee 	bl	80078d2 <memset>
		  UserDataIndex = 0;
 8006cf6:	4b0c      	ldr	r3, [pc, #48]	; (8006d28 <CDC_Receive_FS+0x11c>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	701a      	strb	r2, [r3, #0]
	  }
  }
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006cfc:	4b04      	ldr	r3, [pc, #16]	; (8006d10 <CDC_Receive_FS+0x104>)
 8006cfe:	0018      	movs	r0, r3
 8006d00:	f7fd fa75 	bl	80041ee <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006d04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d06:	0018      	movs	r0, r3
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	b004      	add	sp, #16
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	46c0      	nop			; (mov r8, r8)
 8006d10:	20000a08 	.word	0x20000a08
 8006d14:	20000ca4 	.word	0x20000ca4
 8006d18:	20000114 	.word	0x20000114
 8006d1c:	080083fc 	.word	0x080083fc
 8006d20:	20000200 	.word	0x20000200
 8006d24:	08008400 	.word	0x08008400
 8006d28:	20000201 	.word	0x20000201
 8006d2c:	20000ca8 	.word	0x20000ca8

08006d30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006d30:	b5b0      	push	{r4, r5, r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	000a      	movs	r2, r1
 8006d3a:	1cbb      	adds	r3, r7, #2
 8006d3c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8006d3e:	230f      	movs	r3, #15
 8006d40:	18fb      	adds	r3, r7, r3
 8006d42:	2200      	movs	r2, #0
 8006d44:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006d46:	4a11      	ldr	r2, [pc, #68]	; (8006d8c <CDC_Transmit_FS+0x5c>)
 8006d48:	23a4      	movs	r3, #164	; 0xa4
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	58d3      	ldr	r3, [r2, r3]
 8006d4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	2385      	movs	r3, #133	; 0x85
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	58d3      	ldr	r3, [r2, r3]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e010      	b.n	8006d82 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006d60:	1cbb      	adds	r3, r7, #2
 8006d62:	881a      	ldrh	r2, [r3, #0]
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <CDC_Transmit_FS+0x5c>)
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f7fd f9d9 	bl	8004120 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006d6e:	250f      	movs	r5, #15
 8006d70:	197c      	adds	r4, r7, r5
 8006d72:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <CDC_Transmit_FS+0x5c>)
 8006d74:	0018      	movs	r0, r3
 8006d76:	f7fd fa03 	bl	8004180 <USBD_CDC_TransmitPacket>
 8006d7a:	0003      	movs	r3, r0
 8006d7c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8006d7e:	197b      	adds	r3, r7, r5
 8006d80:	781b      	ldrb	r3, [r3, #0]
}
 8006d82:	0018      	movs	r0, r3
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b004      	add	sp, #16
 8006d88:	bdb0      	pop	{r4, r5, r7, pc}
 8006d8a:	46c0      	nop			; (mov r8, r8)
 8006d8c:	20000a08 	.word	0x20000a08

08006d90 <GetUserDataBuf>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
char* GetUserDataBuf(){
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
	return UserData;
 8006d94:	4b01      	ldr	r3, [pc, #4]	; (8006d9c <GetUserDataBuf+0xc>)
}
 8006d96:	0018      	movs	r0, r3
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	20000ca8 	.word	0x20000ca8

08006da0 <ClearUserDataBuf>:

void ClearUserDataBuf(){
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
	memset(UserData, '\0', USER_DATA_SIZE);
 8006da4:	2380      	movs	r3, #128	; 0x80
 8006da6:	005a      	lsls	r2, r3, #1
 8006da8:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <ClearUserDataBuf+0x24>)
 8006daa:	2100      	movs	r1, #0
 8006dac:	0018      	movs	r0, r3
 8006dae:	f000 fd90 	bl	80078d2 <memset>
	UserDataIndex = 0;
 8006db2:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <ClearUserDataBuf+0x28>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
	UserDataReady = 0;
 8006db8:	4b04      	ldr	r3, [pc, #16]	; (8006dcc <ClearUserDataBuf+0x2c>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	701a      	strb	r2, [r3, #0]
}
 8006dbe:	46c0      	nop			; (mov r8, r8)
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20000ca8 	.word	0x20000ca8
 8006dc8:	20000201 	.word	0x20000201
 8006dcc:	20000200 	.word	0x20000200

08006dd0 <ClearTxBuffer>:

void ClearTxBuffer(){
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
	memset(UserTxBufferFS, '\0', APP_TX_DATA_SIZE);
 8006dd4:	2380      	movs	r3, #128	; 0x80
 8006dd6:	009a      	lsls	r2, r3, #2
 8006dd8:	4b03      	ldr	r3, [pc, #12]	; (8006de8 <ClearTxBuffer+0x18>)
 8006dda:	2100      	movs	r1, #0
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f000 fd78 	bl	80078d2 <memset>
}
 8006de2:	46c0      	nop			; (mov r8, r8)
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20000640 	.word	0x20000640

08006dec <PrintToConsole>:

void PrintToConsole(const char* c, uint16_t size){
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	000a      	movs	r2, r1
 8006df6:	1cbb      	adds	r3, r7, #2
 8006df8:	801a      	strh	r2, [r3, #0]
	ClearTxBuffer();
 8006dfa:	f7ff ffe9 	bl	8006dd0 <ClearTxBuffer>
	uint16_t i = 0;
 8006dfe:	230e      	movs	r3, #14
 8006e00:	18fb      	adds	r3, r7, r3
 8006e02:	2200      	movs	r2, #0
 8006e04:	801a      	strh	r2, [r3, #0]
	while(i < size && i < APP_TX_DATA_SIZE - 3){
 8006e06:	e00e      	b.n	8006e26 <PrintToConsole+0x3a>
		UserTxBufferFS[i] = c[i];
 8006e08:	200e      	movs	r0, #14
 8006e0a:	183b      	adds	r3, r7, r0
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	18d2      	adds	r2, r2, r3
 8006e12:	183b      	adds	r3, r7, r0
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	7811      	ldrb	r1, [r2, #0]
 8006e18:	4a17      	ldr	r2, [pc, #92]	; (8006e78 <PrintToConsole+0x8c>)
 8006e1a:	54d1      	strb	r1, [r2, r3]
		i++;
 8006e1c:	183b      	adds	r3, r7, r0
 8006e1e:	881a      	ldrh	r2, [r3, #0]
 8006e20:	183b      	adds	r3, r7, r0
 8006e22:	3201      	adds	r2, #1
 8006e24:	801a      	strh	r2, [r3, #0]
	while(i < size && i < APP_TX_DATA_SIZE - 3){
 8006e26:	230e      	movs	r3, #14
 8006e28:	18fa      	adds	r2, r7, r3
 8006e2a:	1cbb      	adds	r3, r7, #2
 8006e2c:	8812      	ldrh	r2, [r2, #0]
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d206      	bcs.n	8006e42 <PrintToConsole+0x56>
 8006e34:	230e      	movs	r3, #14
 8006e36:	18fb      	adds	r3, r7, r3
 8006e38:	881a      	ldrh	r2, [r3, #0]
 8006e3a:	23fe      	movs	r3, #254	; 0xfe
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d9e2      	bls.n	8006e08 <PrintToConsole+0x1c>
	}
	UserTxBufferFS[i + 1] = '\r';
 8006e42:	200e      	movs	r0, #14
 8006e44:	183b      	adds	r3, r7, r0
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	4a0b      	ldr	r2, [pc, #44]	; (8006e78 <PrintToConsole+0x8c>)
 8006e4c:	210d      	movs	r1, #13
 8006e4e:	54d1      	strb	r1, [r2, r3]
	UserTxBufferFS[i + 2] = '\n';
 8006e50:	183b      	adds	r3, r7, r0
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	3302      	adds	r3, #2
 8006e56:	4a08      	ldr	r2, [pc, #32]	; (8006e78 <PrintToConsole+0x8c>)
 8006e58:	210a      	movs	r1, #10
 8006e5a:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS(UserTxBufferFS, i + 3);
 8006e5c:	183b      	adds	r3, r7, r0
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	3303      	adds	r3, #3
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <PrintToConsole+0x8c>)
 8006e66:	0011      	movs	r1, r2
 8006e68:	0018      	movs	r0, r3
 8006e6a:	f7ff ff61 	bl	8006d30 <CDC_Transmit_FS>
}
 8006e6e:	46c0      	nop			; (mov r8, r8)
 8006e70:	46bd      	mov	sp, r7
 8006e72:	b004      	add	sp, #16
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	20000640 	.word	0x20000640

08006e7c <CheckUserDataReady>:

uint8_t CheckUserDataReady(){
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
	return UserDataReady;
 8006e80:	4b02      	ldr	r3, [pc, #8]	; (8006e8c <CheckUserDataReady+0x10>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	b2db      	uxtb	r3, r3
}
 8006e86:	0018      	movs	r0, r3
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20000200 	.word	0x20000200

08006e90 <GetUserDataSize>:
}
void EnableLocalEcho(){
	LocalEcho = 1;
}

uint8_t GetUserDataSize(){
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
	return UserDataIndex;
 8006e94:	4b02      	ldr	r3, [pc, #8]	; (8006ea0 <GetUserDataSize+0x10>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
}
 8006e98:	0018      	movs	r0, r3
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	46c0      	nop			; (mov r8, r8)
 8006ea0:	20000201 	.word	0x20000201

08006ea4 <PrintStrToConsole>:

void PrintStrToConsole(char* c){
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
	ClearTxBuffer();
 8006eac:	f7ff ff90 	bl	8006dd0 <ClearTxBuffer>
	uint8_t i = 0;
 8006eb0:	230f      	movs	r3, #15
 8006eb2:	18fb      	adds	r3, r7, r3
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	701a      	strb	r2, [r3, #0]
	while(i < APP_TX_DATA_SIZE-3 && c[i] != '\0'){
 8006eb8:	e00e      	b.n	8006ed8 <PrintStrToConsole+0x34>
		UserTxBufferFS[i] = c[i];
 8006eba:	200f      	movs	r0, #15
 8006ebc:	183b      	adds	r3, r7, r0
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	18d2      	adds	r2, r2, r3
 8006ec4:	183b      	adds	r3, r7, r0
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	7811      	ldrb	r1, [r2, #0]
 8006eca:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <PrintStrToConsole+0x7c>)
 8006ecc:	54d1      	strb	r1, [r2, r3]
		i++;
 8006ece:	183b      	adds	r3, r7, r0
 8006ed0:	781a      	ldrb	r2, [r3, #0]
 8006ed2:	183b      	adds	r3, r7, r0
 8006ed4:	3201      	adds	r2, #1
 8006ed6:	701a      	strb	r2, [r3, #0]
	while(i < APP_TX_DATA_SIZE-3 && c[i] != '\0'){
 8006ed8:	230f      	movs	r3, #15
 8006eda:	18fb      	adds	r3, r7, r3
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	18d3      	adds	r3, r2, r3
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e8      	bne.n	8006eba <PrintStrToConsole+0x16>
	}
	UserTxBufferFS[i + 1] = '\r';
 8006ee8:	200f      	movs	r0, #15
 8006eea:	183b      	adds	r3, r7, r0
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	4a0b      	ldr	r2, [pc, #44]	; (8006f20 <PrintStrToConsole+0x7c>)
 8006ef2:	210d      	movs	r1, #13
 8006ef4:	54d1      	strb	r1, [r2, r3]
	UserTxBufferFS[i + 2] = '\n';
 8006ef6:	183b      	adds	r3, r7, r0
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	3302      	adds	r3, #2
 8006efc:	4a08      	ldr	r2, [pc, #32]	; (8006f20 <PrintStrToConsole+0x7c>)
 8006efe:	210a      	movs	r1, #10
 8006f00:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS(UserTxBufferFS, i + 3);
 8006f02:	183b      	adds	r3, r7, r0
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	3303      	adds	r3, #3
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <PrintStrToConsole+0x7c>)
 8006f0e:	0011      	movs	r1, r2
 8006f10:	0018      	movs	r0, r3
 8006f12:	f7ff ff0d 	bl	8006d30 <CDC_Transmit_FS>
}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	b004      	add	sp, #16
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	20000640 	.word	0x20000640

08006f24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a0a      	ldr	r2, [pc, #40]	; (8006f5c <HAL_PCD_MspInit+0x38>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d10e      	bne.n	8006f54 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006f36:	4b0a      	ldr	r3, [pc, #40]	; (8006f60 <HAL_PCD_MspInit+0x3c>)
 8006f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f3a:	4b09      	ldr	r3, [pc, #36]	; (8006f60 <HAL_PCD_MspInit+0x3c>)
 8006f3c:	2180      	movs	r1, #128	; 0x80
 8006f3e:	0409      	lsls	r1, r1, #16
 8006f40:	430a      	orrs	r2, r1
 8006f42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006f44:	2200      	movs	r2, #0
 8006f46:	2100      	movs	r1, #0
 8006f48:	201f      	movs	r0, #31
 8006f4a:	f7f9 fa8f 	bl	800046c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8006f4e:	201f      	movs	r0, #31
 8006f50:	f7f9 faa1 	bl	8000496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006f54:	46c0      	nop			; (mov r8, r8)
 8006f56:	46bd      	mov	sp, r7
 8006f58:	b002      	add	sp, #8
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40005c00 	.word	0x40005c00
 8006f60:	40021000 	.word	0x40021000

08006f64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	239c      	movs	r3, #156	; 0x9c
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	58d2      	ldr	r2, [r2, r3]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	218c      	movs	r1, #140	; 0x8c
 8006f78:	0089      	lsls	r1, r1, #2
 8006f7a:	468c      	mov	ip, r1
 8006f7c:	4463      	add	r3, ip
 8006f7e:	0019      	movs	r1, r3
 8006f80:	0010      	movs	r0, r2
 8006f82:	f7fd fa09 	bl	8004398 <USBD_LL_SetupStage>
}
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	b002      	add	sp, #8
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b082      	sub	sp, #8
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	000a      	movs	r2, r1
 8006f98:	1cfb      	adds	r3, r7, #3
 8006f9a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	239c      	movs	r3, #156	; 0x9c
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	58d0      	ldr	r0, [r2, r3]
 8006fa4:	1cfb      	adds	r3, r7, #3
 8006fa6:	781a      	ldrb	r2, [r3, #0]
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	239e      	movs	r3, #158	; 0x9e
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	0152      	lsls	r2, r2, #5
 8006fb0:	188a      	adds	r2, r1, r2
 8006fb2:	18d3      	adds	r3, r2, r3
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	1cfb      	adds	r3, r7, #3
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	0019      	movs	r1, r3
 8006fbc:	f7fd fa48 	bl	8004450 <USBD_LL_DataOutStage>
}
 8006fc0:	46c0      	nop			; (mov r8, r8)
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	b002      	add	sp, #8
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	000a      	movs	r2, r1
 8006fd2:	1cfb      	adds	r3, r7, #3
 8006fd4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	239c      	movs	r3, #156	; 0x9c
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	58d0      	ldr	r0, [r2, r3]
 8006fde:	1cfb      	adds	r3, r7, #3
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	015b      	lsls	r3, r3, #5
 8006fe6:	18d3      	adds	r3, r2, r3
 8006fe8:	333c      	adds	r3, #60	; 0x3c
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	1cfb      	adds	r3, r7, #3
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	0019      	movs	r1, r3
 8006ff2:	f7fd faaf 	bl	8004554 <USBD_LL_DataInStage>
}
 8006ff6:	46c0      	nop			; (mov r8, r8)
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	b002      	add	sp, #8
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	239c      	movs	r3, #156	; 0x9c
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	58d3      	ldr	r3, [r2, r3]
 800700e:	0018      	movs	r0, r3
 8007010:	f7fd fbe0 	bl	80047d4 <USBD_LL_SOF>
}
 8007014:	46c0      	nop			; (mov r8, r8)
 8007016:	46bd      	mov	sp, r7
 8007018:	b002      	add	sp, #8
 800701a:	bd80      	pop	{r7, pc}

0800701c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007024:	230f      	movs	r3, #15
 8007026:	18fb      	adds	r3, r7, r3
 8007028:	2201      	movs	r2, #1
 800702a:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d001      	beq.n	8007038 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007034:	f7ff fa5c 	bl	80064f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	239c      	movs	r3, #156	; 0x9c
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	58d2      	ldr	r2, [r2, r3]
 8007040:	230f      	movs	r3, #15
 8007042:	18fb      	adds	r3, r7, r3
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	0019      	movs	r1, r3
 8007048:	0010      	movs	r0, r2
 800704a:	f7fd fb88 	bl	800475e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	239c      	movs	r3, #156	; 0x9c
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	58d3      	ldr	r3, [r2, r3]
 8007056:	0018      	movs	r0, r3
 8007058:	f7fd fb39 	bl	80046ce <USBD_LL_Reset>
}
 800705c:	46c0      	nop			; (mov r8, r8)
 800705e:	46bd      	mov	sp, r7
 8007060:	b004      	add	sp, #16
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	239c      	movs	r3, #156	; 0x9c
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	58d3      	ldr	r3, [r2, r3]
 8007074:	0018      	movs	r0, r3
 8007076:	f7fd fb83 	bl	8004780 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007082:	4b05      	ldr	r3, [pc, #20]	; (8007098 <HAL_PCD_SuspendCallback+0x34>)
 8007084:	691a      	ldr	r2, [r3, #16]
 8007086:	4b04      	ldr	r3, [pc, #16]	; (8007098 <HAL_PCD_SuspendCallback+0x34>)
 8007088:	2106      	movs	r1, #6
 800708a:	430a      	orrs	r2, r1
 800708c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800708e:	46c0      	nop			; (mov r8, r8)
 8007090:	46bd      	mov	sp, r7
 8007092:	b002      	add	sp, #8
 8007094:	bd80      	pop	{r7, pc}
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	e000ed00 	.word	0xe000ed00

0800709c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d007      	beq.n	80070bc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070ac:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <HAL_PCD_ResumeCallback+0x38>)
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	4b08      	ldr	r3, [pc, #32]	; (80070d4 <HAL_PCD_ResumeCallback+0x38>)
 80070b2:	2106      	movs	r1, #6
 80070b4:	438a      	bics	r2, r1
 80070b6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80070b8:	f000 fa44 	bl	8007544 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	239c      	movs	r3, #156	; 0x9c
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	58d3      	ldr	r3, [r2, r3]
 80070c4:	0018      	movs	r0, r3
 80070c6:	f7fd fb73 	bl	80047b0 <USBD_LL_Resume>
}
 80070ca:	46c0      	nop			; (mov r8, r8)
 80070cc:	46bd      	mov	sp, r7
 80070ce:	b002      	add	sp, #8
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	46c0      	nop			; (mov r8, r8)
 80070d4:	e000ed00 	.word	0xe000ed00

080070d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80070e0:	4a2d      	ldr	r2, [pc, #180]	; (8007198 <USBD_LL_Init+0xc0>)
 80070e2:	239c      	movs	r3, #156	; 0x9c
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	23a6      	movs	r3, #166	; 0xa6
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4929      	ldr	r1, [pc, #164]	; (8007198 <USBD_LL_Init+0xc0>)
 80070f2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80070f4:	4b28      	ldr	r3, [pc, #160]	; (8007198 <USBD_LL_Init+0xc0>)
 80070f6:	4a29      	ldr	r2, [pc, #164]	; (800719c <USBD_LL_Init+0xc4>)
 80070f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80070fa:	4b27      	ldr	r3, [pc, #156]	; (8007198 <USBD_LL_Init+0xc0>)
 80070fc:	2208      	movs	r2, #8
 80070fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007100:	4b25      	ldr	r3, [pc, #148]	; (8007198 <USBD_LL_Init+0xc0>)
 8007102:	2202      	movs	r2, #2
 8007104:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007106:	4b24      	ldr	r3, [pc, #144]	; (8007198 <USBD_LL_Init+0xc0>)
 8007108:	2202      	movs	r2, #2
 800710a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800710c:	4b22      	ldr	r3, [pc, #136]	; (8007198 <USBD_LL_Init+0xc0>)
 800710e:	2200      	movs	r2, #0
 8007110:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007112:	4b21      	ldr	r3, [pc, #132]	; (8007198 <USBD_LL_Init+0xc0>)
 8007114:	2200      	movs	r2, #0
 8007116:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007118:	4b1f      	ldr	r3, [pc, #124]	; (8007198 <USBD_LL_Init+0xc0>)
 800711a:	2200      	movs	r2, #0
 800711c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800711e:	4b1e      	ldr	r3, [pc, #120]	; (8007198 <USBD_LL_Init+0xc0>)
 8007120:	0018      	movs	r0, r3
 8007122:	f7f9 fcc5 	bl	8000ab0 <HAL_PCD_Init>
 8007126:	1e03      	subs	r3, r0, #0
 8007128:	d001      	beq.n	800712e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800712a:	f7ff f9e1 	bl	80064f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	23a6      	movs	r3, #166	; 0xa6
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	58d0      	ldr	r0, [r2, r3]
 8007136:	2318      	movs	r3, #24
 8007138:	2200      	movs	r2, #0
 800713a:	2100      	movs	r1, #0
 800713c:	f7fa fc5e 	bl	80019fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	23a6      	movs	r3, #166	; 0xa6
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	58d0      	ldr	r0, [r2, r3]
 8007148:	2358      	movs	r3, #88	; 0x58
 800714a:	2200      	movs	r2, #0
 800714c:	2180      	movs	r1, #128	; 0x80
 800714e:	f7fa fc55 	bl	80019fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	23a6      	movs	r3, #166	; 0xa6
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	58d0      	ldr	r0, [r2, r3]
 800715a:	23c0      	movs	r3, #192	; 0xc0
 800715c:	2200      	movs	r2, #0
 800715e:	2181      	movs	r1, #129	; 0x81
 8007160:	f7fa fc4c 	bl	80019fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	23a6      	movs	r3, #166	; 0xa6
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	58d0      	ldr	r0, [r2, r3]
 800716c:	2388      	movs	r3, #136	; 0x88
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	2200      	movs	r2, #0
 8007172:	2101      	movs	r1, #1
 8007174:	f7fa fc42 	bl	80019fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	23a6      	movs	r3, #166	; 0xa6
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	58d0      	ldr	r0, [r2, r3]
 8007180:	2380      	movs	r3, #128	; 0x80
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	2200      	movs	r2, #0
 8007186:	2182      	movs	r1, #130	; 0x82
 8007188:	f7fa fc38 	bl	80019fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	0018      	movs	r0, r3
 8007190:	46bd      	mov	sp, r7
 8007192:	b002      	add	sp, #8
 8007194:	bd80      	pop	{r7, pc}
 8007196:	46c0      	nop			; (mov r8, r8)
 8007198:	20000da8 	.word	0x20000da8
 800719c:	40005c00 	.word	0x40005c00

080071a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80071a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071a8:	210f      	movs	r1, #15
 80071aa:	187b      	adds	r3, r7, r1
 80071ac:	2200      	movs	r2, #0
 80071ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071b0:	260e      	movs	r6, #14
 80071b2:	19bb      	adds	r3, r7, r6
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	23a6      	movs	r3, #166	; 0xa6
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	58d3      	ldr	r3, [r2, r3]
 80071c0:	000d      	movs	r5, r1
 80071c2:	187c      	adds	r4, r7, r1
 80071c4:	0018      	movs	r0, r3
 80071c6:	f7f9 fd67 	bl	8000c98 <HAL_PCD_Start>
 80071ca:	0003      	movs	r3, r0
 80071cc:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80071ce:	19bc      	adds	r4, r7, r6
 80071d0:	0029      	movs	r1, r5
 80071d2:	187b      	adds	r3, r7, r1
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	0018      	movs	r0, r3
 80071d8:	f000 f9bb 	bl	8007552 <USBD_Get_USB_Status>
 80071dc:	0003      	movs	r3, r0
 80071de:	7023      	strb	r3, [r4, #0]
  
  return usb_status;
 80071e0:	19bb      	adds	r3, r7, r6
 80071e2:	781b      	ldrb	r3, [r3, #0]
}
 80071e4:	0018      	movs	r0, r3
 80071e6:	46bd      	mov	sp, r7
 80071e8:	b005      	add	sp, #20
 80071ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071ec <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80071ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	000c      	movs	r4, r1
 80071f6:	0010      	movs	r0, r2
 80071f8:	0019      	movs	r1, r3
 80071fa:	1cfb      	adds	r3, r7, #3
 80071fc:	1c22      	adds	r2, r4, #0
 80071fe:	701a      	strb	r2, [r3, #0]
 8007200:	1cbb      	adds	r3, r7, #2
 8007202:	1c02      	adds	r2, r0, #0
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	003b      	movs	r3, r7
 8007208:	1c0a      	adds	r2, r1, #0
 800720a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800720c:	260f      	movs	r6, #15
 800720e:	19bb      	adds	r3, r7, r6
 8007210:	2200      	movs	r2, #0
 8007212:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007214:	250e      	movs	r5, #14
 8007216:	197b      	adds	r3, r7, r5
 8007218:	2200      	movs	r2, #0
 800721a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	23a6      	movs	r3, #166	; 0xa6
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	58d0      	ldr	r0, [r2, r3]
 8007224:	19bc      	adds	r4, r7, r6
 8007226:	1cbb      	adds	r3, r7, #2
 8007228:	781d      	ldrb	r5, [r3, #0]
 800722a:	003b      	movs	r3, r7
 800722c:	881a      	ldrh	r2, [r3, #0]
 800722e:	1cfb      	adds	r3, r7, #3
 8007230:	7819      	ldrb	r1, [r3, #0]
 8007232:	002b      	movs	r3, r5
 8007234:	f7f9 ff09 	bl	800104a <HAL_PCD_EP_Open>
 8007238:	0003      	movs	r3, r0
 800723a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800723c:	250e      	movs	r5, #14
 800723e:	197c      	adds	r4, r7, r5
 8007240:	19bb      	adds	r3, r7, r6
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	0018      	movs	r0, r3
 8007246:	f000 f984 	bl	8007552 <USBD_Get_USB_Status>
 800724a:	0003      	movs	r3, r0
 800724c:	7023      	strb	r3, [r4, #0]
 
  return usb_status;
 800724e:	197b      	adds	r3, r7, r5
 8007250:	781b      	ldrb	r3, [r3, #0]
}
 8007252:	0018      	movs	r0, r3
 8007254:	46bd      	mov	sp, r7
 8007256:	b005      	add	sp, #20
 8007258:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800725a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800725a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800725c:	b085      	sub	sp, #20
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	000a      	movs	r2, r1
 8007264:	1cfb      	adds	r3, r7, #3
 8007266:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007268:	210f      	movs	r1, #15
 800726a:	187b      	adds	r3, r7, r1
 800726c:	2200      	movs	r2, #0
 800726e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007270:	260e      	movs	r6, #14
 8007272:	19bb      	adds	r3, r7, r6
 8007274:	2200      	movs	r2, #0
 8007276:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	23a6      	movs	r3, #166	; 0xa6
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	58d2      	ldr	r2, [r2, r3]
 8007280:	000d      	movs	r5, r1
 8007282:	187c      	adds	r4, r7, r1
 8007284:	1cfb      	adds	r3, r7, #3
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	0019      	movs	r1, r3
 800728a:	0010      	movs	r0, r2
 800728c:	f7f9 ff4f 	bl	800112e <HAL_PCD_EP_Close>
 8007290:	0003      	movs	r3, r0
 8007292:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007294:	19bc      	adds	r4, r7, r6
 8007296:	0029      	movs	r1, r5
 8007298:	187b      	adds	r3, r7, r1
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	0018      	movs	r0, r3
 800729e:	f000 f958 	bl	8007552 <USBD_Get_USB_Status>
 80072a2:	0003      	movs	r3, r0
 80072a4:	7023      	strb	r3, [r4, #0]

  return usb_status;  
 80072a6:	19bb      	adds	r3, r7, r6
 80072a8:	781b      	ldrb	r3, [r3, #0]
}
 80072aa:	0018      	movs	r0, r3
 80072ac:	46bd      	mov	sp, r7
 80072ae:	b005      	add	sp, #20
 80072b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072b2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	000a      	movs	r2, r1
 80072bc:	1cfb      	adds	r3, r7, #3
 80072be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c0:	210f      	movs	r1, #15
 80072c2:	187b      	adds	r3, r7, r1
 80072c4:	2200      	movs	r2, #0
 80072c6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072c8:	260e      	movs	r6, #14
 80072ca:	19bb      	adds	r3, r7, r6
 80072cc:	2200      	movs	r2, #0
 80072ce:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	23a6      	movs	r3, #166	; 0xa6
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	58d2      	ldr	r2, [r2, r3]
 80072d8:	000d      	movs	r5, r1
 80072da:	187c      	adds	r4, r7, r1
 80072dc:	1cfb      	adds	r3, r7, #3
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	0019      	movs	r1, r3
 80072e2:	0010      	movs	r0, r2
 80072e4:	f7fa f804 	bl	80012f0 <HAL_PCD_EP_SetStall>
 80072e8:	0003      	movs	r3, r0
 80072ea:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072ec:	19bc      	adds	r4, r7, r6
 80072ee:	0029      	movs	r1, r5
 80072f0:	187b      	adds	r3, r7, r1
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	0018      	movs	r0, r3
 80072f6:	f000 f92c 	bl	8007552 <USBD_Get_USB_Status>
 80072fa:	0003      	movs	r3, r0
 80072fc:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 80072fe:	19bb      	adds	r3, r7, r6
 8007300:	781b      	ldrb	r3, [r3, #0]
}
 8007302:	0018      	movs	r0, r3
 8007304:	46bd      	mov	sp, r7
 8007306:	b005      	add	sp, #20
 8007308:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800730a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800730a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800730c:	b085      	sub	sp, #20
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	000a      	movs	r2, r1
 8007314:	1cfb      	adds	r3, r7, #3
 8007316:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007318:	210f      	movs	r1, #15
 800731a:	187b      	adds	r3, r7, r1
 800731c:	2200      	movs	r2, #0
 800731e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007320:	260e      	movs	r6, #14
 8007322:	19bb      	adds	r3, r7, r6
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	23a6      	movs	r3, #166	; 0xa6
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	58d2      	ldr	r2, [r2, r3]
 8007330:	000d      	movs	r5, r1
 8007332:	187c      	adds	r4, r7, r1
 8007334:	1cfb      	adds	r3, r7, #3
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	0019      	movs	r1, r3
 800733a:	0010      	movs	r0, r2
 800733c:	f7fa f83e 	bl	80013bc <HAL_PCD_EP_ClrStall>
 8007340:	0003      	movs	r3, r0
 8007342:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007344:	19bc      	adds	r4, r7, r6
 8007346:	0029      	movs	r1, r5
 8007348:	187b      	adds	r3, r7, r1
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	0018      	movs	r0, r3
 800734e:	f000 f900 	bl	8007552 <USBD_Get_USB_Status>
 8007352:	0003      	movs	r3, r0
 8007354:	7023      	strb	r3, [r4, #0]

  return usb_status; 
 8007356:	19bb      	adds	r3, r7, r6
 8007358:	781b      	ldrb	r3, [r3, #0]
}
 800735a:	0018      	movs	r0, r3
 800735c:	46bd      	mov	sp, r7
 800735e:	b005      	add	sp, #20
 8007360:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007362 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b084      	sub	sp, #16
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	000a      	movs	r2, r1
 800736c:	1cfb      	adds	r3, r7, #3
 800736e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	23a6      	movs	r3, #166	; 0xa6
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	58d3      	ldr	r3, [r2, r3]
 8007378:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800737a:	1cfb      	adds	r3, r7, #3
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	b25b      	sxtb	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	da0a      	bge.n	800739a <USBD_LL_IsStallEP+0x38>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007384:	1cfb      	adds	r3, r7, #3
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	227f      	movs	r2, #127	; 0x7f
 800738a:	4013      	ands	r3, r2
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	212a      	movs	r1, #42	; 0x2a
 8007390:	015b      	lsls	r3, r3, #5
 8007392:	18d3      	adds	r3, r2, r3
 8007394:	185b      	adds	r3, r3, r1
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	e00a      	b.n	80073b0 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800739a:	1cfb      	adds	r3, r7, #3
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	227f      	movs	r2, #127	; 0x7f
 80073a0:	401a      	ands	r2, r3
 80073a2:	68f9      	ldr	r1, [r7, #12]
 80073a4:	2395      	movs	r3, #149	; 0x95
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	0152      	lsls	r2, r2, #5
 80073aa:	188a      	adds	r2, r1, r2
 80073ac:	18d3      	adds	r3, r2, r3
 80073ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073b0:	0018      	movs	r0, r3
 80073b2:	46bd      	mov	sp, r7
 80073b4:	b004      	add	sp, #16
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	000a      	movs	r2, r1
 80073c2:	1cfb      	adds	r3, r7, #3
 80073c4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073c6:	210f      	movs	r1, #15
 80073c8:	187b      	adds	r3, r7, r1
 80073ca:	2200      	movs	r2, #0
 80073cc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073ce:	260e      	movs	r6, #14
 80073d0:	19bb      	adds	r3, r7, r6
 80073d2:	2200      	movs	r2, #0
 80073d4:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	23a6      	movs	r3, #166	; 0xa6
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	58d2      	ldr	r2, [r2, r3]
 80073de:	000d      	movs	r5, r1
 80073e0:	187c      	adds	r4, r7, r1
 80073e2:	1cfb      	adds	r3, r7, #3
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	0019      	movs	r1, r3
 80073e8:	0010      	movs	r0, r2
 80073ea:	f7f9 fe03 	bl	8000ff4 <HAL_PCD_SetAddress>
 80073ee:	0003      	movs	r3, r0
 80073f0:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80073f2:	19bc      	adds	r4, r7, r6
 80073f4:	0029      	movs	r1, r5
 80073f6:	187b      	adds	r3, r7, r1
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	0018      	movs	r0, r3
 80073fc:	f000 f8a9 	bl	8007552 <USBD_Get_USB_Status>
 8007400:	0003      	movs	r3, r0
 8007402:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8007404:	19bb      	adds	r3, r7, r6
 8007406:	781b      	ldrb	r3, [r3, #0]
}
 8007408:	0018      	movs	r0, r3
 800740a:	46bd      	mov	sp, r7
 800740c:	b005      	add	sp, #20
 800740e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007410 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	0008      	movs	r0, r1
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	0019      	movs	r1, r3
 800741e:	230b      	movs	r3, #11
 8007420:	18fb      	adds	r3, r7, r3
 8007422:	1c02      	adds	r2, r0, #0
 8007424:	701a      	strb	r2, [r3, #0]
 8007426:	2408      	movs	r4, #8
 8007428:	193b      	adds	r3, r7, r4
 800742a:	1c0a      	adds	r2, r1, #0
 800742c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800742e:	2117      	movs	r1, #23
 8007430:	187b      	adds	r3, r7, r1
 8007432:	2200      	movs	r2, #0
 8007434:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007436:	2516      	movs	r5, #22
 8007438:	197b      	adds	r3, r7, r5
 800743a:	2200      	movs	r2, #0
 800743c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	23a6      	movs	r3, #166	; 0xa6
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	58d0      	ldr	r0, [r2, r3]
 8007446:	193b      	adds	r3, r7, r4
 8007448:	881d      	ldrh	r5, [r3, #0]
 800744a:	000e      	movs	r6, r1
 800744c:	187c      	adds	r4, r7, r1
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	230b      	movs	r3, #11
 8007452:	18fb      	adds	r3, r7, r3
 8007454:	7819      	ldrb	r1, [r3, #0]
 8007456:	002b      	movs	r3, r5
 8007458:	f7f9 ff0a 	bl	8001270 <HAL_PCD_EP_Transmit>
 800745c:	0003      	movs	r3, r0
 800745e:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007460:	2516      	movs	r5, #22
 8007462:	197c      	adds	r4, r7, r5
 8007464:	0031      	movs	r1, r6
 8007466:	187b      	adds	r3, r7, r1
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	0018      	movs	r0, r3
 800746c:	f000 f871 	bl	8007552 <USBD_Get_USB_Status>
 8007470:	0003      	movs	r3, r0
 8007472:	7023      	strb	r3, [r4, #0]
  
  return usb_status;    
 8007474:	197b      	adds	r3, r7, r5
 8007476:	781b      	ldrb	r3, [r3, #0]
}
 8007478:	0018      	movs	r0, r3
 800747a:	46bd      	mov	sp, r7
 800747c:	b007      	add	sp, #28
 800747e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007480 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	0008      	movs	r0, r1
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	0019      	movs	r1, r3
 800748e:	230b      	movs	r3, #11
 8007490:	18fb      	adds	r3, r7, r3
 8007492:	1c02      	adds	r2, r0, #0
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	2408      	movs	r4, #8
 8007498:	193b      	adds	r3, r7, r4
 800749a:	1c0a      	adds	r2, r1, #0
 800749c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800749e:	2117      	movs	r1, #23
 80074a0:	187b      	adds	r3, r7, r1
 80074a2:	2200      	movs	r2, #0
 80074a4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074a6:	2516      	movs	r5, #22
 80074a8:	197b      	adds	r3, r7, r5
 80074aa:	2200      	movs	r2, #0
 80074ac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	23a6      	movs	r3, #166	; 0xa6
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	58d0      	ldr	r0, [r2, r3]
 80074b6:	193b      	adds	r3, r7, r4
 80074b8:	881d      	ldrh	r5, [r3, #0]
 80074ba:	000e      	movs	r6, r1
 80074bc:	187c      	adds	r4, r7, r1
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	230b      	movs	r3, #11
 80074c2:	18fb      	adds	r3, r7, r3
 80074c4:	7819      	ldrb	r1, [r3, #0]
 80074c6:	002b      	movs	r3, r5
 80074c8:	f7f9 fe7c 	bl	80011c4 <HAL_PCD_EP_Receive>
 80074cc:	0003      	movs	r3, r0
 80074ce:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80074d0:	2516      	movs	r5, #22
 80074d2:	197c      	adds	r4, r7, r5
 80074d4:	0031      	movs	r1, r6
 80074d6:	187b      	adds	r3, r7, r1
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	0018      	movs	r0, r3
 80074dc:	f000 f839 	bl	8007552 <USBD_Get_USB_Status>
 80074e0:	0003      	movs	r3, r0
 80074e2:	7023      	strb	r3, [r4, #0]
  	
  return usb_status; 
 80074e4:	197b      	adds	r3, r7, r5
 80074e6:	781b      	ldrb	r3, [r3, #0]
}
 80074e8:	0018      	movs	r0, r3
 80074ea:	46bd      	mov	sp, r7
 80074ec:	b007      	add	sp, #28
 80074ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	000a      	movs	r2, r1
 80074fa:	1cfb      	adds	r3, r7, #3
 80074fc:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	23a6      	movs	r3, #166	; 0xa6
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	58d2      	ldr	r2, [r2, r3]
 8007506:	1cfb      	adds	r3, r7, #3
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	0019      	movs	r1, r3
 800750c:	0010      	movs	r0, r2
 800750e:	f7f9 fe9a 	bl	8001246 <HAL_PCD_EP_GetRxCount>
 8007512:	0003      	movs	r3, r0
}
 8007514:	0018      	movs	r0, r3
 8007516:	46bd      	mov	sp, r7
 8007518:	b002      	add	sp, #8
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007524:	4b02      	ldr	r3, [pc, #8]	; (8007530 <USBD_static_malloc+0x14>)
}
 8007526:	0018      	movs	r0, r3
 8007528:	46bd      	mov	sp, r7
 800752a:	b002      	add	sp, #8
 800752c:	bd80      	pop	{r7, pc}
 800752e:	46c0      	nop			; (mov r8, r8)
 8007530:	20000204 	.word	0x20000204

08007534 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]

}
 800753c:	46c0      	nop			; (mov r8, r8)
 800753e:	46bd      	mov	sp, r7
 8007540:	b002      	add	sp, #8
 8007542:	bd80      	pop	{r7, pc}

08007544 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007548:	f7fe fec4 	bl	80062d4 <SystemClock_Config>
}
 800754c:	46c0      	nop			; (mov r8, r8)
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	0002      	movs	r2, r0
 800755a:	1dfb      	adds	r3, r7, #7
 800755c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800755e:	230f      	movs	r3, #15
 8007560:	18fb      	adds	r3, r7, r3
 8007562:	2200      	movs	r2, #0
 8007564:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007566:	1dfb      	adds	r3, r7, #7
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d00d      	beq.n	800758a <USBD_Get_USB_Status+0x38>
 800756e:	dc02      	bgt.n	8007576 <USBD_Get_USB_Status+0x24>
 8007570:	2b00      	cmp	r3, #0
 8007572:	d005      	beq.n	8007580 <USBD_Get_USB_Status+0x2e>
 8007574:	e018      	b.n	80075a8 <USBD_Get_USB_Status+0x56>
 8007576:	2b02      	cmp	r3, #2
 8007578:	d00c      	beq.n	8007594 <USBD_Get_USB_Status+0x42>
 800757a:	2b03      	cmp	r3, #3
 800757c:	d00f      	beq.n	800759e <USBD_Get_USB_Status+0x4c>
 800757e:	e013      	b.n	80075a8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007580:	230f      	movs	r3, #15
 8007582:	18fb      	adds	r3, r7, r3
 8007584:	2200      	movs	r2, #0
 8007586:	701a      	strb	r2, [r3, #0]
    break;
 8007588:	e013      	b.n	80075b2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800758a:	230f      	movs	r3, #15
 800758c:	18fb      	adds	r3, r7, r3
 800758e:	2202      	movs	r2, #2
 8007590:	701a      	strb	r2, [r3, #0]
    break;
 8007592:	e00e      	b.n	80075b2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007594:	230f      	movs	r3, #15
 8007596:	18fb      	adds	r3, r7, r3
 8007598:	2201      	movs	r2, #1
 800759a:	701a      	strb	r2, [r3, #0]
    break;
 800759c:	e009      	b.n	80075b2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800759e:	230f      	movs	r3, #15
 80075a0:	18fb      	adds	r3, r7, r3
 80075a2:	2202      	movs	r2, #2
 80075a4:	701a      	strb	r2, [r3, #0]
    break;
 80075a6:	e004      	b.n	80075b2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80075a8:	230f      	movs	r3, #15
 80075aa:	18fb      	adds	r3, r7, r3
 80075ac:	2202      	movs	r2, #2
 80075ae:	701a      	strb	r2, [r3, #0]
    break;
 80075b0:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80075b2:	230f      	movs	r3, #15
 80075b4:	18fb      	adds	r3, r7, r3
 80075b6:	781b      	ldrb	r3, [r3, #0]
}
 80075b8:	0018      	movs	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b004      	add	sp, #16
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	0002      	movs	r2, r0
 80075c8:	6039      	str	r1, [r7, #0]
 80075ca:	1dfb      	adds	r3, r7, #7
 80075cc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2212      	movs	r2, #18
 80075d2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80075d4:	4b02      	ldr	r3, [pc, #8]	; (80075e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80075d6:	0018      	movs	r0, r3
 80075d8:	46bd      	mov	sp, r7
 80075da:	b002      	add	sp, #8
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	20000144 	.word	0x20000144

080075e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	0002      	movs	r2, r0
 80075ec:	6039      	str	r1, [r7, #0]
 80075ee:	1dfb      	adds	r3, r7, #7
 80075f0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2204      	movs	r2, #4
 80075f6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80075f8:	4b02      	ldr	r3, [pc, #8]	; (8007604 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80075fa:	0018      	movs	r0, r3
 80075fc:	46bd      	mov	sp, r7
 80075fe:	b002      	add	sp, #8
 8007600:	bd80      	pop	{r7, pc}
 8007602:	46c0      	nop			; (mov r8, r8)
 8007604:	20000158 	.word	0x20000158

08007608 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	0002      	movs	r2, r0
 8007610:	6039      	str	r1, [r7, #0]
 8007612:	1dfb      	adds	r3, r7, #7
 8007614:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007616:	1dfb      	adds	r3, r7, #7
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d106      	bne.n	800762c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	4908      	ldr	r1, [pc, #32]	; (8007644 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007622:	4b09      	ldr	r3, [pc, #36]	; (8007648 <USBD_FS_ProductStrDescriptor+0x40>)
 8007624:	0018      	movs	r0, r3
 8007626:	f7fd fe81 	bl	800532c <USBD_GetString>
 800762a:	e005      	b.n	8007638 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	4905      	ldr	r1, [pc, #20]	; (8007644 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007630:	4b05      	ldr	r3, [pc, #20]	; (8007648 <USBD_FS_ProductStrDescriptor+0x40>)
 8007632:	0018      	movs	r0, r3
 8007634:	f7fd fe7a 	bl	800532c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007638:	4b02      	ldr	r3, [pc, #8]	; (8007644 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800763a:	0018      	movs	r0, r3
 800763c:	46bd      	mov	sp, r7
 800763e:	b002      	add	sp, #8
 8007640:	bd80      	pop	{r7, pc}
 8007642:	46c0      	nop			; (mov r8, r8)
 8007644:	2000101c 	.word	0x2000101c
 8007648:	08008404 	.word	0x08008404

0800764c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	0002      	movs	r2, r0
 8007654:	6039      	str	r1, [r7, #0]
 8007656:	1dfb      	adds	r3, r7, #7
 8007658:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	4904      	ldr	r1, [pc, #16]	; (8007670 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800765e:	4b05      	ldr	r3, [pc, #20]	; (8007674 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007660:	0018      	movs	r0, r3
 8007662:	f7fd fe63 	bl	800532c <USBD_GetString>
  return USBD_StrDesc;
 8007666:	4b02      	ldr	r3, [pc, #8]	; (8007670 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007668:	0018      	movs	r0, r3
 800766a:	46bd      	mov	sp, r7
 800766c:	b002      	add	sp, #8
 800766e:	bd80      	pop	{r7, pc}
 8007670:	2000101c 	.word	0x2000101c
 8007674:	0800840c 	.word	0x0800840c

08007678 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	0002      	movs	r2, r0
 8007680:	6039      	str	r1, [r7, #0]
 8007682:	1dfb      	adds	r3, r7, #7
 8007684:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	221a      	movs	r2, #26
 800768a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800768c:	f000 f84c 	bl	8007728 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8007690:	4b02      	ldr	r3, [pc, #8]	; (800769c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8007692:	0018      	movs	r0, r3
 8007694:	46bd      	mov	sp, r7
 8007696:	b002      	add	sp, #8
 8007698:	bd80      	pop	{r7, pc}
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	2000015c 	.word	0x2000015c

080076a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	0002      	movs	r2, r0
 80076a8:	6039      	str	r1, [r7, #0]
 80076aa:	1dfb      	adds	r3, r7, #7
 80076ac:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80076ae:	1dfb      	adds	r3, r7, #7
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d106      	bne.n	80076c4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	4908      	ldr	r1, [pc, #32]	; (80076dc <USBD_FS_ConfigStrDescriptor+0x3c>)
 80076ba:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <USBD_FS_ConfigStrDescriptor+0x40>)
 80076bc:	0018      	movs	r0, r3
 80076be:	f7fd fe35 	bl	800532c <USBD_GetString>
 80076c2:	e005      	b.n	80076d0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	4905      	ldr	r1, [pc, #20]	; (80076dc <USBD_FS_ConfigStrDescriptor+0x3c>)
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <USBD_FS_ConfigStrDescriptor+0x40>)
 80076ca:	0018      	movs	r0, r3
 80076cc:	f7fd fe2e 	bl	800532c <USBD_GetString>
  }
  return USBD_StrDesc;
 80076d0:	4b02      	ldr	r3, [pc, #8]	; (80076dc <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80076d2:	0018      	movs	r0, r3
 80076d4:	46bd      	mov	sp, r7
 80076d6:	b002      	add	sp, #8
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	46c0      	nop			; (mov r8, r8)
 80076dc:	2000101c 	.word	0x2000101c
 80076e0:	08008414 	.word	0x08008414

080076e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	0002      	movs	r2, r0
 80076ec:	6039      	str	r1, [r7, #0]
 80076ee:	1dfb      	adds	r3, r7, #7
 80076f0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80076f2:	1dfb      	adds	r3, r7, #7
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d106      	bne.n	8007708 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	4908      	ldr	r1, [pc, #32]	; (8007720 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80076fe:	4b09      	ldr	r3, [pc, #36]	; (8007724 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007700:	0018      	movs	r0, r3
 8007702:	f7fd fe13 	bl	800532c <USBD_GetString>
 8007706:	e005      	b.n	8007714 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	4905      	ldr	r1, [pc, #20]	; (8007720 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800770c:	4b05      	ldr	r3, [pc, #20]	; (8007724 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800770e:	0018      	movs	r0, r3
 8007710:	f7fd fe0c 	bl	800532c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007714:	4b02      	ldr	r3, [pc, #8]	; (8007720 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007716:	0018      	movs	r0, r3
 8007718:	46bd      	mov	sp, r7
 800771a:	b002      	add	sp, #8
 800771c:	bd80      	pop	{r7, pc}
 800771e:	46c0      	nop			; (mov r8, r8)
 8007720:	2000101c 	.word	0x2000101c
 8007724:	08008420 	.word	0x08008420

08007728 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800772e:	4b10      	ldr	r3, [pc, #64]	; (8007770 <Get_SerialNum+0x48>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007734:	4b0f      	ldr	r3, [pc, #60]	; (8007774 <Get_SerialNum+0x4c>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800773a:	4b0f      	ldr	r3, [pc, #60]	; (8007778 <Get_SerialNum+0x50>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	18d3      	adds	r3, r2, r3
 8007746:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800774e:	490b      	ldr	r1, [pc, #44]	; (800777c <Get_SerialNum+0x54>)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2208      	movs	r2, #8
 8007754:	0018      	movs	r0, r3
 8007756:	f000 f815 	bl	8007784 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800775a:	4909      	ldr	r1, [pc, #36]	; (8007780 <Get_SerialNum+0x58>)
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2204      	movs	r2, #4
 8007760:	0018      	movs	r0, r3
 8007762:	f000 f80f 	bl	8007784 <IntToUnicode>
  }
}
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	46bd      	mov	sp, r7
 800776a:	b004      	add	sp, #16
 800776c:	bd80      	pop	{r7, pc}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	1ff80050 	.word	0x1ff80050
 8007774:	1ff80054 	.word	0x1ff80054
 8007778:	1ff80058 	.word	0x1ff80058
 800777c:	2000015e 	.word	0x2000015e
 8007780:	2000016e 	.word	0x2000016e

08007784 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	1dfb      	adds	r3, r7, #7
 8007790:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8007792:	2117      	movs	r1, #23
 8007794:	187b      	adds	r3, r7, r1
 8007796:	2200      	movs	r2, #0
 8007798:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800779a:	187b      	adds	r3, r7, r1
 800779c:	2200      	movs	r2, #0
 800779e:	701a      	strb	r2, [r3, #0]
 80077a0:	e02f      	b.n	8007802 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	0f1b      	lsrs	r3, r3, #28
 80077a6:	2b09      	cmp	r3, #9
 80077a8:	d80d      	bhi.n	80077c6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	0f1b      	lsrs	r3, r3, #28
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	2317      	movs	r3, #23
 80077b2:	18fb      	adds	r3, r7, r3
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	0019      	movs	r1, r3
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	185b      	adds	r3, r3, r1
 80077be:	3230      	adds	r2, #48	; 0x30
 80077c0:	b2d2      	uxtb	r2, r2
 80077c2:	701a      	strb	r2, [r3, #0]
 80077c4:	e00c      	b.n	80077e0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	0f1b      	lsrs	r3, r3, #28
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	2317      	movs	r3, #23
 80077ce:	18fb      	adds	r3, r7, r3
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	0019      	movs	r1, r3
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	185b      	adds	r3, r3, r1
 80077da:	3237      	adds	r2, #55	; 0x37
 80077dc:	b2d2      	uxtb	r2, r2
 80077de:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	011b      	lsls	r3, r3, #4
 80077e4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077e6:	2117      	movs	r1, #23
 80077e8:	187b      	adds	r3, r7, r1
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	3301      	adds	r3, #1
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	18d3      	adds	r3, r2, r3
 80077f4:	2200      	movs	r2, #0
 80077f6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077f8:	187b      	adds	r3, r7, r1
 80077fa:	781a      	ldrb	r2, [r3, #0]
 80077fc:	187b      	adds	r3, r7, r1
 80077fe:	3201      	adds	r2, #1
 8007800:	701a      	strb	r2, [r3, #0]
 8007802:	2317      	movs	r3, #23
 8007804:	18fa      	adds	r2, r7, r3
 8007806:	1dfb      	adds	r3, r7, #7
 8007808:	7812      	ldrb	r2, [r2, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d3c8      	bcc.n	80077a2 <IntToUnicode+0x1e>
  }
}
 8007810:	46c0      	nop			; (mov r8, r8)
 8007812:	46bd      	mov	sp, r7
 8007814:	b006      	add	sp, #24
 8007816:	bd80      	pop	{r7, pc}

08007818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8007818:	480d      	ldr	r0, [pc, #52]	; (8007850 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800781a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800781c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800781e:	e003      	b.n	8007828 <LoopCopyDataInit>

08007820 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007820:	4b0c      	ldr	r3, [pc, #48]	; (8007854 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8007822:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007824:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007826:	3104      	adds	r1, #4

08007828 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8007828:	480b      	ldr	r0, [pc, #44]	; (8007858 <LoopForever+0xa>)
  ldr  r3, =_edata
 800782a:	4b0c      	ldr	r3, [pc, #48]	; (800785c <LoopForever+0xe>)
  adds  r2, r0, r1
 800782c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800782e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007830:	d3f6      	bcc.n	8007820 <CopyDataInit>
  ldr  r2, =_sbss
 8007832:	4a0b      	ldr	r2, [pc, #44]	; (8007860 <LoopForever+0x12>)
  b  LoopFillZerobss
 8007834:	e002      	b.n	800783c <LoopFillZerobss>

08007836 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8007836:	2300      	movs	r3, #0
  str  r3, [r2]
 8007838:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800783a:	3204      	adds	r2, #4

0800783c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800783c:	4b09      	ldr	r3, [pc, #36]	; (8007864 <LoopForever+0x16>)
  cmp  r2, r3
 800783e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007840:	d3f9      	bcc.n	8007836 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007842:	f7ff f92d 	bl	8006aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007846:	f000 f817 	bl	8007878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800784a:	f7fe fd29 	bl	80062a0 <main>

0800784e <LoopForever>:

LoopForever:
    b LoopForever
 800784e:	e7fe      	b.n	800784e <LoopForever>
   ldr   r0, =_estack
 8007850:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8007854:	08008870 	.word	0x08008870
  ldr  r0, =_sdata
 8007858:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800785c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8007860:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8007864:	20001220 	.word	0x20001220

08007868 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007868:	e7fe      	b.n	8007868 <ADC1_COMP_IRQHandler>
	...

0800786c <__errno>:
 800786c:	4b01      	ldr	r3, [pc, #4]	; (8007874 <__errno+0x8>)
 800786e:	6818      	ldr	r0, [r3, #0]
 8007870:	4770      	bx	lr
 8007872:	46c0      	nop			; (mov r8, r8)
 8007874:	20000178 	.word	0x20000178

08007878 <__libc_init_array>:
 8007878:	b570      	push	{r4, r5, r6, lr}
 800787a:	2600      	movs	r6, #0
 800787c:	4d0c      	ldr	r5, [pc, #48]	; (80078b0 <__libc_init_array+0x38>)
 800787e:	4c0d      	ldr	r4, [pc, #52]	; (80078b4 <__libc_init_array+0x3c>)
 8007880:	1b64      	subs	r4, r4, r5
 8007882:	10a4      	asrs	r4, r4, #2
 8007884:	42a6      	cmp	r6, r4
 8007886:	d109      	bne.n	800789c <__libc_init_array+0x24>
 8007888:	2600      	movs	r6, #0
 800788a:	f000 fc4d 	bl	8008128 <_init>
 800788e:	4d0a      	ldr	r5, [pc, #40]	; (80078b8 <__libc_init_array+0x40>)
 8007890:	4c0a      	ldr	r4, [pc, #40]	; (80078bc <__libc_init_array+0x44>)
 8007892:	1b64      	subs	r4, r4, r5
 8007894:	10a4      	asrs	r4, r4, #2
 8007896:	42a6      	cmp	r6, r4
 8007898:	d105      	bne.n	80078a6 <__libc_init_array+0x2e>
 800789a:	bd70      	pop	{r4, r5, r6, pc}
 800789c:	00b3      	lsls	r3, r6, #2
 800789e:	58eb      	ldr	r3, [r5, r3]
 80078a0:	4798      	blx	r3
 80078a2:	3601      	adds	r6, #1
 80078a4:	e7ee      	b.n	8007884 <__libc_init_array+0xc>
 80078a6:	00b3      	lsls	r3, r6, #2
 80078a8:	58eb      	ldr	r3, [r5, r3]
 80078aa:	4798      	blx	r3
 80078ac:	3601      	adds	r6, #1
 80078ae:	e7f2      	b.n	8007896 <__libc_init_array+0x1e>
 80078b0:	08008868 	.word	0x08008868
 80078b4:	08008868 	.word	0x08008868
 80078b8:	08008868 	.word	0x08008868
 80078bc:	0800886c 	.word	0x0800886c

080078c0 <memcpy>:
 80078c0:	2300      	movs	r3, #0
 80078c2:	b510      	push	{r4, lr}
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d100      	bne.n	80078ca <memcpy+0xa>
 80078c8:	bd10      	pop	{r4, pc}
 80078ca:	5ccc      	ldrb	r4, [r1, r3]
 80078cc:	54c4      	strb	r4, [r0, r3]
 80078ce:	3301      	adds	r3, #1
 80078d0:	e7f8      	b.n	80078c4 <memcpy+0x4>

080078d2 <memset>:
 80078d2:	0003      	movs	r3, r0
 80078d4:	1812      	adds	r2, r2, r0
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d100      	bne.n	80078dc <memset+0xa>
 80078da:	4770      	bx	lr
 80078dc:	7019      	strb	r1, [r3, #0]
 80078de:	3301      	adds	r3, #1
 80078e0:	e7f9      	b.n	80078d6 <memset+0x4>
	...

080078e4 <sniprintf>:
 80078e4:	b40c      	push	{r2, r3}
 80078e6:	b530      	push	{r4, r5, lr}
 80078e8:	4b16      	ldr	r3, [pc, #88]	; (8007944 <sniprintf+0x60>)
 80078ea:	b09d      	sub	sp, #116	; 0x74
 80078ec:	1e0c      	subs	r4, r1, #0
 80078ee:	681d      	ldr	r5, [r3, #0]
 80078f0:	da08      	bge.n	8007904 <sniprintf+0x20>
 80078f2:	238b      	movs	r3, #139	; 0x8b
 80078f4:	2001      	movs	r0, #1
 80078f6:	602b      	str	r3, [r5, #0]
 80078f8:	4240      	negs	r0, r0
 80078fa:	b01d      	add	sp, #116	; 0x74
 80078fc:	bc30      	pop	{r4, r5}
 80078fe:	bc08      	pop	{r3}
 8007900:	b002      	add	sp, #8
 8007902:	4718      	bx	r3
 8007904:	2382      	movs	r3, #130	; 0x82
 8007906:	a902      	add	r1, sp, #8
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	818b      	strh	r3, [r1, #12]
 800790c:	2300      	movs	r3, #0
 800790e:	9002      	str	r0, [sp, #8]
 8007910:	6108      	str	r0, [r1, #16]
 8007912:	429c      	cmp	r4, r3
 8007914:	d000      	beq.n	8007918 <sniprintf+0x34>
 8007916:	1e63      	subs	r3, r4, #1
 8007918:	608b      	str	r3, [r1, #8]
 800791a:	614b      	str	r3, [r1, #20]
 800791c:	2301      	movs	r3, #1
 800791e:	425b      	negs	r3, r3
 8007920:	81cb      	strh	r3, [r1, #14]
 8007922:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007924:	ab21      	add	r3, sp, #132	; 0x84
 8007926:	0028      	movs	r0, r5
 8007928:	9301      	str	r3, [sp, #4]
 800792a:	f000 f881 	bl	8007a30 <_svfiprintf_r>
 800792e:	1c43      	adds	r3, r0, #1
 8007930:	da01      	bge.n	8007936 <sniprintf+0x52>
 8007932:	238b      	movs	r3, #139	; 0x8b
 8007934:	602b      	str	r3, [r5, #0]
 8007936:	2c00      	cmp	r4, #0
 8007938:	d0df      	beq.n	80078fa <sniprintf+0x16>
 800793a:	2300      	movs	r3, #0
 800793c:	9a02      	ldr	r2, [sp, #8]
 800793e:	7013      	strb	r3, [r2, #0]
 8007940:	e7db      	b.n	80078fa <sniprintf+0x16>
 8007942:	46c0      	nop			; (mov r8, r8)
 8007944:	20000178 	.word	0x20000178

08007948 <strncmp>:
 8007948:	2300      	movs	r3, #0
 800794a:	b530      	push	{r4, r5, lr}
 800794c:	429a      	cmp	r2, r3
 800794e:	d00a      	beq.n	8007966 <strncmp+0x1e>
 8007950:	3a01      	subs	r2, #1
 8007952:	5cc4      	ldrb	r4, [r0, r3]
 8007954:	5ccd      	ldrb	r5, [r1, r3]
 8007956:	42ac      	cmp	r4, r5
 8007958:	d104      	bne.n	8007964 <strncmp+0x1c>
 800795a:	4293      	cmp	r3, r2
 800795c:	d002      	beq.n	8007964 <strncmp+0x1c>
 800795e:	3301      	adds	r3, #1
 8007960:	2c00      	cmp	r4, #0
 8007962:	d1f6      	bne.n	8007952 <strncmp+0xa>
 8007964:	1b63      	subs	r3, r4, r5
 8007966:	0018      	movs	r0, r3
 8007968:	bd30      	pop	{r4, r5, pc}
	...

0800796c <__ssputs_r>:
 800796c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800796e:	688e      	ldr	r6, [r1, #8]
 8007970:	b085      	sub	sp, #20
 8007972:	0007      	movs	r7, r0
 8007974:	000c      	movs	r4, r1
 8007976:	9203      	str	r2, [sp, #12]
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	429e      	cmp	r6, r3
 800797c:	d83c      	bhi.n	80079f8 <__ssputs_r+0x8c>
 800797e:	2390      	movs	r3, #144	; 0x90
 8007980:	898a      	ldrh	r2, [r1, #12]
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	421a      	tst	r2, r3
 8007986:	d034      	beq.n	80079f2 <__ssputs_r+0x86>
 8007988:	2503      	movs	r5, #3
 800798a:	6909      	ldr	r1, [r1, #16]
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	1a5b      	subs	r3, r3, r1
 8007990:	9302      	str	r3, [sp, #8]
 8007992:	6963      	ldr	r3, [r4, #20]
 8007994:	9802      	ldr	r0, [sp, #8]
 8007996:	435d      	muls	r5, r3
 8007998:	0feb      	lsrs	r3, r5, #31
 800799a:	195d      	adds	r5, r3, r5
 800799c:	9b01      	ldr	r3, [sp, #4]
 800799e:	106d      	asrs	r5, r5, #1
 80079a0:	3301      	adds	r3, #1
 80079a2:	181b      	adds	r3, r3, r0
 80079a4:	42ab      	cmp	r3, r5
 80079a6:	d900      	bls.n	80079aa <__ssputs_r+0x3e>
 80079a8:	001d      	movs	r5, r3
 80079aa:	0553      	lsls	r3, r2, #21
 80079ac:	d532      	bpl.n	8007a14 <__ssputs_r+0xa8>
 80079ae:	0029      	movs	r1, r5
 80079b0:	0038      	movs	r0, r7
 80079b2:	f000 fb19 	bl	8007fe8 <_malloc_r>
 80079b6:	1e06      	subs	r6, r0, #0
 80079b8:	d109      	bne.n	80079ce <__ssputs_r+0x62>
 80079ba:	230c      	movs	r3, #12
 80079bc:	603b      	str	r3, [r7, #0]
 80079be:	2340      	movs	r3, #64	; 0x40
 80079c0:	2001      	movs	r0, #1
 80079c2:	89a2      	ldrh	r2, [r4, #12]
 80079c4:	4240      	negs	r0, r0
 80079c6:	4313      	orrs	r3, r2
 80079c8:	81a3      	strh	r3, [r4, #12]
 80079ca:	b005      	add	sp, #20
 80079cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ce:	9a02      	ldr	r2, [sp, #8]
 80079d0:	6921      	ldr	r1, [r4, #16]
 80079d2:	f7ff ff75 	bl	80078c0 <memcpy>
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	4a14      	ldr	r2, [pc, #80]	; (8007a2c <__ssputs_r+0xc0>)
 80079da:	401a      	ands	r2, r3
 80079dc:	2380      	movs	r3, #128	; 0x80
 80079de:	4313      	orrs	r3, r2
 80079e0:	81a3      	strh	r3, [r4, #12]
 80079e2:	9b02      	ldr	r3, [sp, #8]
 80079e4:	6126      	str	r6, [r4, #16]
 80079e6:	18f6      	adds	r6, r6, r3
 80079e8:	6026      	str	r6, [r4, #0]
 80079ea:	6165      	str	r5, [r4, #20]
 80079ec:	9e01      	ldr	r6, [sp, #4]
 80079ee:	1aed      	subs	r5, r5, r3
 80079f0:	60a5      	str	r5, [r4, #8]
 80079f2:	9b01      	ldr	r3, [sp, #4]
 80079f4:	429e      	cmp	r6, r3
 80079f6:	d900      	bls.n	80079fa <__ssputs_r+0x8e>
 80079f8:	9e01      	ldr	r6, [sp, #4]
 80079fa:	0032      	movs	r2, r6
 80079fc:	9903      	ldr	r1, [sp, #12]
 80079fe:	6820      	ldr	r0, [r4, #0]
 8007a00:	f000 fa95 	bl	8007f2e <memmove>
 8007a04:	68a3      	ldr	r3, [r4, #8]
 8007a06:	2000      	movs	r0, #0
 8007a08:	1b9b      	subs	r3, r3, r6
 8007a0a:	60a3      	str	r3, [r4, #8]
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	199e      	adds	r6, r3, r6
 8007a10:	6026      	str	r6, [r4, #0]
 8007a12:	e7da      	b.n	80079ca <__ssputs_r+0x5e>
 8007a14:	002a      	movs	r2, r5
 8007a16:	0038      	movs	r0, r7
 8007a18:	f000 fb44 	bl	80080a4 <_realloc_r>
 8007a1c:	1e06      	subs	r6, r0, #0
 8007a1e:	d1e0      	bne.n	80079e2 <__ssputs_r+0x76>
 8007a20:	6921      	ldr	r1, [r4, #16]
 8007a22:	0038      	movs	r0, r7
 8007a24:	f000 fa96 	bl	8007f54 <_free_r>
 8007a28:	e7c7      	b.n	80079ba <__ssputs_r+0x4e>
 8007a2a:	46c0      	nop			; (mov r8, r8)
 8007a2c:	fffffb7f 	.word	0xfffffb7f

08007a30 <_svfiprintf_r>:
 8007a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a32:	b0a1      	sub	sp, #132	; 0x84
 8007a34:	9003      	str	r0, [sp, #12]
 8007a36:	001d      	movs	r5, r3
 8007a38:	898b      	ldrh	r3, [r1, #12]
 8007a3a:	000f      	movs	r7, r1
 8007a3c:	0016      	movs	r6, r2
 8007a3e:	061b      	lsls	r3, r3, #24
 8007a40:	d511      	bpl.n	8007a66 <_svfiprintf_r+0x36>
 8007a42:	690b      	ldr	r3, [r1, #16]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10e      	bne.n	8007a66 <_svfiprintf_r+0x36>
 8007a48:	2140      	movs	r1, #64	; 0x40
 8007a4a:	f000 facd 	bl	8007fe8 <_malloc_r>
 8007a4e:	6038      	str	r0, [r7, #0]
 8007a50:	6138      	str	r0, [r7, #16]
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d105      	bne.n	8007a62 <_svfiprintf_r+0x32>
 8007a56:	230c      	movs	r3, #12
 8007a58:	9a03      	ldr	r2, [sp, #12]
 8007a5a:	3801      	subs	r0, #1
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	b021      	add	sp, #132	; 0x84
 8007a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a62:	2340      	movs	r3, #64	; 0x40
 8007a64:	617b      	str	r3, [r7, #20]
 8007a66:	2300      	movs	r3, #0
 8007a68:	ac08      	add	r4, sp, #32
 8007a6a:	6163      	str	r3, [r4, #20]
 8007a6c:	3320      	adds	r3, #32
 8007a6e:	7663      	strb	r3, [r4, #25]
 8007a70:	3310      	adds	r3, #16
 8007a72:	76a3      	strb	r3, [r4, #26]
 8007a74:	9507      	str	r5, [sp, #28]
 8007a76:	0035      	movs	r5, r6
 8007a78:	782b      	ldrb	r3, [r5, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <_svfiprintf_r+0x52>
 8007a7e:	2b25      	cmp	r3, #37	; 0x25
 8007a80:	d146      	bne.n	8007b10 <_svfiprintf_r+0xe0>
 8007a82:	1bab      	subs	r3, r5, r6
 8007a84:	9305      	str	r3, [sp, #20]
 8007a86:	d00c      	beq.n	8007aa2 <_svfiprintf_r+0x72>
 8007a88:	0032      	movs	r2, r6
 8007a8a:	0039      	movs	r1, r7
 8007a8c:	9803      	ldr	r0, [sp, #12]
 8007a8e:	f7ff ff6d 	bl	800796c <__ssputs_r>
 8007a92:	1c43      	adds	r3, r0, #1
 8007a94:	d100      	bne.n	8007a98 <_svfiprintf_r+0x68>
 8007a96:	e0ae      	b.n	8007bf6 <_svfiprintf_r+0x1c6>
 8007a98:	6962      	ldr	r2, [r4, #20]
 8007a9a:	9b05      	ldr	r3, [sp, #20]
 8007a9c:	4694      	mov	ip, r2
 8007a9e:	4463      	add	r3, ip
 8007aa0:	6163      	str	r3, [r4, #20]
 8007aa2:	782b      	ldrb	r3, [r5, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d100      	bne.n	8007aaa <_svfiprintf_r+0x7a>
 8007aa8:	e0a5      	b.n	8007bf6 <_svfiprintf_r+0x1c6>
 8007aaa:	2201      	movs	r2, #1
 8007aac:	2300      	movs	r3, #0
 8007aae:	4252      	negs	r2, r2
 8007ab0:	6062      	str	r2, [r4, #4]
 8007ab2:	a904      	add	r1, sp, #16
 8007ab4:	3254      	adds	r2, #84	; 0x54
 8007ab6:	1852      	adds	r2, r2, r1
 8007ab8:	1c6e      	adds	r6, r5, #1
 8007aba:	6023      	str	r3, [r4, #0]
 8007abc:	60e3      	str	r3, [r4, #12]
 8007abe:	60a3      	str	r3, [r4, #8]
 8007ac0:	7013      	strb	r3, [r2, #0]
 8007ac2:	65a3      	str	r3, [r4, #88]	; 0x58
 8007ac4:	7831      	ldrb	r1, [r6, #0]
 8007ac6:	2205      	movs	r2, #5
 8007ac8:	4853      	ldr	r0, [pc, #332]	; (8007c18 <_svfiprintf_r+0x1e8>)
 8007aca:	f000 fa25 	bl	8007f18 <memchr>
 8007ace:	1c75      	adds	r5, r6, #1
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d11f      	bne.n	8007b14 <_svfiprintf_r+0xe4>
 8007ad4:	6822      	ldr	r2, [r4, #0]
 8007ad6:	06d3      	lsls	r3, r2, #27
 8007ad8:	d504      	bpl.n	8007ae4 <_svfiprintf_r+0xb4>
 8007ada:	2353      	movs	r3, #83	; 0x53
 8007adc:	a904      	add	r1, sp, #16
 8007ade:	185b      	adds	r3, r3, r1
 8007ae0:	2120      	movs	r1, #32
 8007ae2:	7019      	strb	r1, [r3, #0]
 8007ae4:	0713      	lsls	r3, r2, #28
 8007ae6:	d504      	bpl.n	8007af2 <_svfiprintf_r+0xc2>
 8007ae8:	2353      	movs	r3, #83	; 0x53
 8007aea:	a904      	add	r1, sp, #16
 8007aec:	185b      	adds	r3, r3, r1
 8007aee:	212b      	movs	r1, #43	; 0x2b
 8007af0:	7019      	strb	r1, [r3, #0]
 8007af2:	7833      	ldrb	r3, [r6, #0]
 8007af4:	2b2a      	cmp	r3, #42	; 0x2a
 8007af6:	d016      	beq.n	8007b26 <_svfiprintf_r+0xf6>
 8007af8:	0035      	movs	r5, r6
 8007afa:	2100      	movs	r1, #0
 8007afc:	200a      	movs	r0, #10
 8007afe:	68e3      	ldr	r3, [r4, #12]
 8007b00:	782a      	ldrb	r2, [r5, #0]
 8007b02:	1c6e      	adds	r6, r5, #1
 8007b04:	3a30      	subs	r2, #48	; 0x30
 8007b06:	2a09      	cmp	r2, #9
 8007b08:	d94e      	bls.n	8007ba8 <_svfiprintf_r+0x178>
 8007b0a:	2900      	cmp	r1, #0
 8007b0c:	d018      	beq.n	8007b40 <_svfiprintf_r+0x110>
 8007b0e:	e010      	b.n	8007b32 <_svfiprintf_r+0x102>
 8007b10:	3501      	adds	r5, #1
 8007b12:	e7b1      	b.n	8007a78 <_svfiprintf_r+0x48>
 8007b14:	4b40      	ldr	r3, [pc, #256]	; (8007c18 <_svfiprintf_r+0x1e8>)
 8007b16:	6822      	ldr	r2, [r4, #0]
 8007b18:	1ac0      	subs	r0, r0, r3
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	4083      	lsls	r3, r0
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	002e      	movs	r6, r5
 8007b24:	e7ce      	b.n	8007ac4 <_svfiprintf_r+0x94>
 8007b26:	9b07      	ldr	r3, [sp, #28]
 8007b28:	1d19      	adds	r1, r3, #4
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	9107      	str	r1, [sp, #28]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	db01      	blt.n	8007b36 <_svfiprintf_r+0x106>
 8007b32:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b34:	e004      	b.n	8007b40 <_svfiprintf_r+0x110>
 8007b36:	425b      	negs	r3, r3
 8007b38:	60e3      	str	r3, [r4, #12]
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	6023      	str	r3, [r4, #0]
 8007b40:	782b      	ldrb	r3, [r5, #0]
 8007b42:	2b2e      	cmp	r3, #46	; 0x2e
 8007b44:	d10a      	bne.n	8007b5c <_svfiprintf_r+0x12c>
 8007b46:	786b      	ldrb	r3, [r5, #1]
 8007b48:	2b2a      	cmp	r3, #42	; 0x2a
 8007b4a:	d135      	bne.n	8007bb8 <_svfiprintf_r+0x188>
 8007b4c:	9b07      	ldr	r3, [sp, #28]
 8007b4e:	3502      	adds	r5, #2
 8007b50:	1d1a      	adds	r2, r3, #4
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	9207      	str	r2, [sp, #28]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	db2b      	blt.n	8007bb2 <_svfiprintf_r+0x182>
 8007b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b5c:	4e2f      	ldr	r6, [pc, #188]	; (8007c1c <_svfiprintf_r+0x1ec>)
 8007b5e:	7829      	ldrb	r1, [r5, #0]
 8007b60:	2203      	movs	r2, #3
 8007b62:	0030      	movs	r0, r6
 8007b64:	f000 f9d8 	bl	8007f18 <memchr>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d006      	beq.n	8007b7a <_svfiprintf_r+0x14a>
 8007b6c:	2340      	movs	r3, #64	; 0x40
 8007b6e:	1b80      	subs	r0, r0, r6
 8007b70:	4083      	lsls	r3, r0
 8007b72:	6822      	ldr	r2, [r4, #0]
 8007b74:	3501      	adds	r5, #1
 8007b76:	4313      	orrs	r3, r2
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	7829      	ldrb	r1, [r5, #0]
 8007b7c:	2206      	movs	r2, #6
 8007b7e:	4828      	ldr	r0, [pc, #160]	; (8007c20 <_svfiprintf_r+0x1f0>)
 8007b80:	1c6e      	adds	r6, r5, #1
 8007b82:	7621      	strb	r1, [r4, #24]
 8007b84:	f000 f9c8 	bl	8007f18 <memchr>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d03c      	beq.n	8007c06 <_svfiprintf_r+0x1d6>
 8007b8c:	4b25      	ldr	r3, [pc, #148]	; (8007c24 <_svfiprintf_r+0x1f4>)
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d125      	bne.n	8007bde <_svfiprintf_r+0x1ae>
 8007b92:	2207      	movs	r2, #7
 8007b94:	9b07      	ldr	r3, [sp, #28]
 8007b96:	3307      	adds	r3, #7
 8007b98:	4393      	bics	r3, r2
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	9307      	str	r3, [sp, #28]
 8007b9e:	6963      	ldr	r3, [r4, #20]
 8007ba0:	9a04      	ldr	r2, [sp, #16]
 8007ba2:	189b      	adds	r3, r3, r2
 8007ba4:	6163      	str	r3, [r4, #20]
 8007ba6:	e766      	b.n	8007a76 <_svfiprintf_r+0x46>
 8007ba8:	4343      	muls	r3, r0
 8007baa:	2101      	movs	r1, #1
 8007bac:	189b      	adds	r3, r3, r2
 8007bae:	0035      	movs	r5, r6
 8007bb0:	e7a6      	b.n	8007b00 <_svfiprintf_r+0xd0>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	425b      	negs	r3, r3
 8007bb6:	e7d0      	b.n	8007b5a <_svfiprintf_r+0x12a>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	200a      	movs	r0, #10
 8007bbc:	001a      	movs	r2, r3
 8007bbe:	3501      	adds	r5, #1
 8007bc0:	6063      	str	r3, [r4, #4]
 8007bc2:	7829      	ldrb	r1, [r5, #0]
 8007bc4:	1c6e      	adds	r6, r5, #1
 8007bc6:	3930      	subs	r1, #48	; 0x30
 8007bc8:	2909      	cmp	r1, #9
 8007bca:	d903      	bls.n	8007bd4 <_svfiprintf_r+0x1a4>
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0c5      	beq.n	8007b5c <_svfiprintf_r+0x12c>
 8007bd0:	9209      	str	r2, [sp, #36]	; 0x24
 8007bd2:	e7c3      	b.n	8007b5c <_svfiprintf_r+0x12c>
 8007bd4:	4342      	muls	r2, r0
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	1852      	adds	r2, r2, r1
 8007bda:	0035      	movs	r5, r6
 8007bdc:	e7f1      	b.n	8007bc2 <_svfiprintf_r+0x192>
 8007bde:	ab07      	add	r3, sp, #28
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	003a      	movs	r2, r7
 8007be4:	4b10      	ldr	r3, [pc, #64]	; (8007c28 <_svfiprintf_r+0x1f8>)
 8007be6:	0021      	movs	r1, r4
 8007be8:	9803      	ldr	r0, [sp, #12]
 8007bea:	e000      	b.n	8007bee <_svfiprintf_r+0x1be>
 8007bec:	bf00      	nop
 8007bee:	9004      	str	r0, [sp, #16]
 8007bf0:	9b04      	ldr	r3, [sp, #16]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	d1d3      	bne.n	8007b9e <_svfiprintf_r+0x16e>
 8007bf6:	89bb      	ldrh	r3, [r7, #12]
 8007bf8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007bfa:	065b      	lsls	r3, r3, #25
 8007bfc:	d400      	bmi.n	8007c00 <_svfiprintf_r+0x1d0>
 8007bfe:	e72e      	b.n	8007a5e <_svfiprintf_r+0x2e>
 8007c00:	2001      	movs	r0, #1
 8007c02:	4240      	negs	r0, r0
 8007c04:	e72b      	b.n	8007a5e <_svfiprintf_r+0x2e>
 8007c06:	ab07      	add	r3, sp, #28
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	003a      	movs	r2, r7
 8007c0c:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <_svfiprintf_r+0x1f8>)
 8007c0e:	0021      	movs	r1, r4
 8007c10:	9803      	ldr	r0, [sp, #12]
 8007c12:	f000 f879 	bl	8007d08 <_printf_i>
 8007c16:	e7ea      	b.n	8007bee <_svfiprintf_r+0x1be>
 8007c18:	08008834 	.word	0x08008834
 8007c1c:	0800883a 	.word	0x0800883a
 8007c20:	0800883e 	.word	0x0800883e
 8007c24:	00000000 	.word	0x00000000
 8007c28:	0800796d 	.word	0x0800796d

08007c2c <_printf_common>:
 8007c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c2e:	0015      	movs	r5, r2
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	688a      	ldr	r2, [r1, #8]
 8007c34:	690b      	ldr	r3, [r1, #16]
 8007c36:	9000      	str	r0, [sp, #0]
 8007c38:	000c      	movs	r4, r1
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	da00      	bge.n	8007c40 <_printf_common+0x14>
 8007c3e:	0013      	movs	r3, r2
 8007c40:	0022      	movs	r2, r4
 8007c42:	602b      	str	r3, [r5, #0]
 8007c44:	3243      	adds	r2, #67	; 0x43
 8007c46:	7812      	ldrb	r2, [r2, #0]
 8007c48:	2a00      	cmp	r2, #0
 8007c4a:	d001      	beq.n	8007c50 <_printf_common+0x24>
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	602b      	str	r3, [r5, #0]
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	069b      	lsls	r3, r3, #26
 8007c54:	d502      	bpl.n	8007c5c <_printf_common+0x30>
 8007c56:	682b      	ldr	r3, [r5, #0]
 8007c58:	3302      	adds	r3, #2
 8007c5a:	602b      	str	r3, [r5, #0]
 8007c5c:	2706      	movs	r7, #6
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	401f      	ands	r7, r3
 8007c62:	d027      	beq.n	8007cb4 <_printf_common+0x88>
 8007c64:	0023      	movs	r3, r4
 8007c66:	3343      	adds	r3, #67	; 0x43
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	1e5a      	subs	r2, r3, #1
 8007c6c:	4193      	sbcs	r3, r2
 8007c6e:	6822      	ldr	r2, [r4, #0]
 8007c70:	0692      	lsls	r2, r2, #26
 8007c72:	d430      	bmi.n	8007cd6 <_printf_common+0xaa>
 8007c74:	0022      	movs	r2, r4
 8007c76:	9901      	ldr	r1, [sp, #4]
 8007c78:	3243      	adds	r2, #67	; 0x43
 8007c7a:	9800      	ldr	r0, [sp, #0]
 8007c7c:	9e08      	ldr	r6, [sp, #32]
 8007c7e:	47b0      	blx	r6
 8007c80:	1c43      	adds	r3, r0, #1
 8007c82:	d025      	beq.n	8007cd0 <_printf_common+0xa4>
 8007c84:	2306      	movs	r3, #6
 8007c86:	6820      	ldr	r0, [r4, #0]
 8007c88:	682a      	ldr	r2, [r5, #0]
 8007c8a:	68e1      	ldr	r1, [r4, #12]
 8007c8c:	4003      	ands	r3, r0
 8007c8e:	2500      	movs	r5, #0
 8007c90:	2b04      	cmp	r3, #4
 8007c92:	d103      	bne.n	8007c9c <_printf_common+0x70>
 8007c94:	1a8d      	subs	r5, r1, r2
 8007c96:	43eb      	mvns	r3, r5
 8007c98:	17db      	asrs	r3, r3, #31
 8007c9a:	401d      	ands	r5, r3
 8007c9c:	68a3      	ldr	r3, [r4, #8]
 8007c9e:	6922      	ldr	r2, [r4, #16]
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	dd01      	ble.n	8007ca8 <_printf_common+0x7c>
 8007ca4:	1a9b      	subs	r3, r3, r2
 8007ca6:	18ed      	adds	r5, r5, r3
 8007ca8:	2700      	movs	r7, #0
 8007caa:	42bd      	cmp	r5, r7
 8007cac:	d120      	bne.n	8007cf0 <_printf_common+0xc4>
 8007cae:	2000      	movs	r0, #0
 8007cb0:	e010      	b.n	8007cd4 <_printf_common+0xa8>
 8007cb2:	3701      	adds	r7, #1
 8007cb4:	68e3      	ldr	r3, [r4, #12]
 8007cb6:	682a      	ldr	r2, [r5, #0]
 8007cb8:	1a9b      	subs	r3, r3, r2
 8007cba:	42bb      	cmp	r3, r7
 8007cbc:	ddd2      	ble.n	8007c64 <_printf_common+0x38>
 8007cbe:	0022      	movs	r2, r4
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	3219      	adds	r2, #25
 8007cc4:	9901      	ldr	r1, [sp, #4]
 8007cc6:	9800      	ldr	r0, [sp, #0]
 8007cc8:	9e08      	ldr	r6, [sp, #32]
 8007cca:	47b0      	blx	r6
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d1f0      	bne.n	8007cb2 <_printf_common+0x86>
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	4240      	negs	r0, r0
 8007cd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007cd6:	2030      	movs	r0, #48	; 0x30
 8007cd8:	18e1      	adds	r1, r4, r3
 8007cda:	3143      	adds	r1, #67	; 0x43
 8007cdc:	7008      	strb	r0, [r1, #0]
 8007cde:	0021      	movs	r1, r4
 8007ce0:	1c5a      	adds	r2, r3, #1
 8007ce2:	3145      	adds	r1, #69	; 0x45
 8007ce4:	7809      	ldrb	r1, [r1, #0]
 8007ce6:	18a2      	adds	r2, r4, r2
 8007ce8:	3243      	adds	r2, #67	; 0x43
 8007cea:	3302      	adds	r3, #2
 8007cec:	7011      	strb	r1, [r2, #0]
 8007cee:	e7c1      	b.n	8007c74 <_printf_common+0x48>
 8007cf0:	0022      	movs	r2, r4
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	321a      	adds	r2, #26
 8007cf6:	9901      	ldr	r1, [sp, #4]
 8007cf8:	9800      	ldr	r0, [sp, #0]
 8007cfa:	9e08      	ldr	r6, [sp, #32]
 8007cfc:	47b0      	blx	r6
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	d0e6      	beq.n	8007cd0 <_printf_common+0xa4>
 8007d02:	3701      	adds	r7, #1
 8007d04:	e7d1      	b.n	8007caa <_printf_common+0x7e>
	...

08007d08 <_printf_i>:
 8007d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d0a:	b089      	sub	sp, #36	; 0x24
 8007d0c:	9204      	str	r2, [sp, #16]
 8007d0e:	000a      	movs	r2, r1
 8007d10:	3243      	adds	r2, #67	; 0x43
 8007d12:	9305      	str	r3, [sp, #20]
 8007d14:	9003      	str	r0, [sp, #12]
 8007d16:	9202      	str	r2, [sp, #8]
 8007d18:	7e0a      	ldrb	r2, [r1, #24]
 8007d1a:	000c      	movs	r4, r1
 8007d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d1e:	2a6e      	cmp	r2, #110	; 0x6e
 8007d20:	d100      	bne.n	8007d24 <_printf_i+0x1c>
 8007d22:	e086      	b.n	8007e32 <_printf_i+0x12a>
 8007d24:	d81f      	bhi.n	8007d66 <_printf_i+0x5e>
 8007d26:	2a63      	cmp	r2, #99	; 0x63
 8007d28:	d033      	beq.n	8007d92 <_printf_i+0x8a>
 8007d2a:	d808      	bhi.n	8007d3e <_printf_i+0x36>
 8007d2c:	2a00      	cmp	r2, #0
 8007d2e:	d100      	bne.n	8007d32 <_printf_i+0x2a>
 8007d30:	e08c      	b.n	8007e4c <_printf_i+0x144>
 8007d32:	2a58      	cmp	r2, #88	; 0x58
 8007d34:	d04d      	beq.n	8007dd2 <_printf_i+0xca>
 8007d36:	0025      	movs	r5, r4
 8007d38:	3542      	adds	r5, #66	; 0x42
 8007d3a:	702a      	strb	r2, [r5, #0]
 8007d3c:	e030      	b.n	8007da0 <_printf_i+0x98>
 8007d3e:	2a64      	cmp	r2, #100	; 0x64
 8007d40:	d001      	beq.n	8007d46 <_printf_i+0x3e>
 8007d42:	2a69      	cmp	r2, #105	; 0x69
 8007d44:	d1f7      	bne.n	8007d36 <_printf_i+0x2e>
 8007d46:	6819      	ldr	r1, [r3, #0]
 8007d48:	6825      	ldr	r5, [r4, #0]
 8007d4a:	1d0a      	adds	r2, r1, #4
 8007d4c:	0628      	lsls	r0, r5, #24
 8007d4e:	d529      	bpl.n	8007da4 <_printf_i+0x9c>
 8007d50:	6808      	ldr	r0, [r1, #0]
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	2800      	cmp	r0, #0
 8007d56:	da03      	bge.n	8007d60 <_printf_i+0x58>
 8007d58:	232d      	movs	r3, #45	; 0x2d
 8007d5a:	9a02      	ldr	r2, [sp, #8]
 8007d5c:	4240      	negs	r0, r0
 8007d5e:	7013      	strb	r3, [r2, #0]
 8007d60:	4e6b      	ldr	r6, [pc, #428]	; (8007f10 <_printf_i+0x208>)
 8007d62:	270a      	movs	r7, #10
 8007d64:	e04f      	b.n	8007e06 <_printf_i+0xfe>
 8007d66:	2a73      	cmp	r2, #115	; 0x73
 8007d68:	d074      	beq.n	8007e54 <_printf_i+0x14c>
 8007d6a:	d808      	bhi.n	8007d7e <_printf_i+0x76>
 8007d6c:	2a6f      	cmp	r2, #111	; 0x6f
 8007d6e:	d01f      	beq.n	8007db0 <_printf_i+0xa8>
 8007d70:	2a70      	cmp	r2, #112	; 0x70
 8007d72:	d1e0      	bne.n	8007d36 <_printf_i+0x2e>
 8007d74:	2220      	movs	r2, #32
 8007d76:	6809      	ldr	r1, [r1, #0]
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	6022      	str	r2, [r4, #0]
 8007d7c:	e003      	b.n	8007d86 <_printf_i+0x7e>
 8007d7e:	2a75      	cmp	r2, #117	; 0x75
 8007d80:	d016      	beq.n	8007db0 <_printf_i+0xa8>
 8007d82:	2a78      	cmp	r2, #120	; 0x78
 8007d84:	d1d7      	bne.n	8007d36 <_printf_i+0x2e>
 8007d86:	0022      	movs	r2, r4
 8007d88:	2178      	movs	r1, #120	; 0x78
 8007d8a:	3245      	adds	r2, #69	; 0x45
 8007d8c:	7011      	strb	r1, [r2, #0]
 8007d8e:	4e61      	ldr	r6, [pc, #388]	; (8007f14 <_printf_i+0x20c>)
 8007d90:	e022      	b.n	8007dd8 <_printf_i+0xd0>
 8007d92:	0025      	movs	r5, r4
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	3542      	adds	r5, #66	; 0x42
 8007d98:	1d11      	adds	r1, r2, #4
 8007d9a:	6019      	str	r1, [r3, #0]
 8007d9c:	6813      	ldr	r3, [r2, #0]
 8007d9e:	702b      	strb	r3, [r5, #0]
 8007da0:	2301      	movs	r3, #1
 8007da2:	e065      	b.n	8007e70 <_printf_i+0x168>
 8007da4:	6808      	ldr	r0, [r1, #0]
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	0669      	lsls	r1, r5, #25
 8007daa:	d5d3      	bpl.n	8007d54 <_printf_i+0x4c>
 8007dac:	b200      	sxth	r0, r0
 8007dae:	e7d1      	b.n	8007d54 <_printf_i+0x4c>
 8007db0:	6819      	ldr	r1, [r3, #0]
 8007db2:	6825      	ldr	r5, [r4, #0]
 8007db4:	1d08      	adds	r0, r1, #4
 8007db6:	6018      	str	r0, [r3, #0]
 8007db8:	6808      	ldr	r0, [r1, #0]
 8007dba:	062e      	lsls	r6, r5, #24
 8007dbc:	d505      	bpl.n	8007dca <_printf_i+0xc2>
 8007dbe:	4e54      	ldr	r6, [pc, #336]	; (8007f10 <_printf_i+0x208>)
 8007dc0:	2708      	movs	r7, #8
 8007dc2:	2a6f      	cmp	r2, #111	; 0x6f
 8007dc4:	d01b      	beq.n	8007dfe <_printf_i+0xf6>
 8007dc6:	270a      	movs	r7, #10
 8007dc8:	e019      	b.n	8007dfe <_printf_i+0xf6>
 8007dca:	066d      	lsls	r5, r5, #25
 8007dcc:	d5f7      	bpl.n	8007dbe <_printf_i+0xb6>
 8007dce:	b280      	uxth	r0, r0
 8007dd0:	e7f5      	b.n	8007dbe <_printf_i+0xb6>
 8007dd2:	3145      	adds	r1, #69	; 0x45
 8007dd4:	4e4e      	ldr	r6, [pc, #312]	; (8007f10 <_printf_i+0x208>)
 8007dd6:	700a      	strb	r2, [r1, #0]
 8007dd8:	6818      	ldr	r0, [r3, #0]
 8007dda:	6822      	ldr	r2, [r4, #0]
 8007ddc:	1d01      	adds	r1, r0, #4
 8007dde:	6800      	ldr	r0, [r0, #0]
 8007de0:	6019      	str	r1, [r3, #0]
 8007de2:	0615      	lsls	r5, r2, #24
 8007de4:	d521      	bpl.n	8007e2a <_printf_i+0x122>
 8007de6:	07d3      	lsls	r3, r2, #31
 8007de8:	d502      	bpl.n	8007df0 <_printf_i+0xe8>
 8007dea:	2320      	movs	r3, #32
 8007dec:	431a      	orrs	r2, r3
 8007dee:	6022      	str	r2, [r4, #0]
 8007df0:	2710      	movs	r7, #16
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d103      	bne.n	8007dfe <_printf_i+0xf6>
 8007df6:	2320      	movs	r3, #32
 8007df8:	6822      	ldr	r2, [r4, #0]
 8007dfa:	439a      	bics	r2, r3
 8007dfc:	6022      	str	r2, [r4, #0]
 8007dfe:	0023      	movs	r3, r4
 8007e00:	2200      	movs	r2, #0
 8007e02:	3343      	adds	r3, #67	; 0x43
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	6863      	ldr	r3, [r4, #4]
 8007e08:	60a3      	str	r3, [r4, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	db58      	blt.n	8007ec0 <_printf_i+0x1b8>
 8007e0e:	2204      	movs	r2, #4
 8007e10:	6821      	ldr	r1, [r4, #0]
 8007e12:	4391      	bics	r1, r2
 8007e14:	6021      	str	r1, [r4, #0]
 8007e16:	2800      	cmp	r0, #0
 8007e18:	d154      	bne.n	8007ec4 <_printf_i+0x1bc>
 8007e1a:	9d02      	ldr	r5, [sp, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d05a      	beq.n	8007ed6 <_printf_i+0x1ce>
 8007e20:	0025      	movs	r5, r4
 8007e22:	7833      	ldrb	r3, [r6, #0]
 8007e24:	3542      	adds	r5, #66	; 0x42
 8007e26:	702b      	strb	r3, [r5, #0]
 8007e28:	e055      	b.n	8007ed6 <_printf_i+0x1ce>
 8007e2a:	0655      	lsls	r5, r2, #25
 8007e2c:	d5db      	bpl.n	8007de6 <_printf_i+0xde>
 8007e2e:	b280      	uxth	r0, r0
 8007e30:	e7d9      	b.n	8007de6 <_printf_i+0xde>
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	680d      	ldr	r5, [r1, #0]
 8007e36:	1d10      	adds	r0, r2, #4
 8007e38:	6949      	ldr	r1, [r1, #20]
 8007e3a:	6018      	str	r0, [r3, #0]
 8007e3c:	6813      	ldr	r3, [r2, #0]
 8007e3e:	062e      	lsls	r6, r5, #24
 8007e40:	d501      	bpl.n	8007e46 <_printf_i+0x13e>
 8007e42:	6019      	str	r1, [r3, #0]
 8007e44:	e002      	b.n	8007e4c <_printf_i+0x144>
 8007e46:	066d      	lsls	r5, r5, #25
 8007e48:	d5fb      	bpl.n	8007e42 <_printf_i+0x13a>
 8007e4a:	8019      	strh	r1, [r3, #0]
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	9d02      	ldr	r5, [sp, #8]
 8007e50:	6123      	str	r3, [r4, #16]
 8007e52:	e04f      	b.n	8007ef4 <_printf_i+0x1ec>
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	1d11      	adds	r1, r2, #4
 8007e58:	6019      	str	r1, [r3, #0]
 8007e5a:	6815      	ldr	r5, [r2, #0]
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	6862      	ldr	r2, [r4, #4]
 8007e60:	0028      	movs	r0, r5
 8007e62:	f000 f859 	bl	8007f18 <memchr>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d001      	beq.n	8007e6e <_printf_i+0x166>
 8007e6a:	1b40      	subs	r0, r0, r5
 8007e6c:	6060      	str	r0, [r4, #4]
 8007e6e:	6863      	ldr	r3, [r4, #4]
 8007e70:	6123      	str	r3, [r4, #16]
 8007e72:	2300      	movs	r3, #0
 8007e74:	9a02      	ldr	r2, [sp, #8]
 8007e76:	7013      	strb	r3, [r2, #0]
 8007e78:	e03c      	b.n	8007ef4 <_printf_i+0x1ec>
 8007e7a:	6923      	ldr	r3, [r4, #16]
 8007e7c:	002a      	movs	r2, r5
 8007e7e:	9904      	ldr	r1, [sp, #16]
 8007e80:	9803      	ldr	r0, [sp, #12]
 8007e82:	9d05      	ldr	r5, [sp, #20]
 8007e84:	47a8      	blx	r5
 8007e86:	1c43      	adds	r3, r0, #1
 8007e88:	d03e      	beq.n	8007f08 <_printf_i+0x200>
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	079b      	lsls	r3, r3, #30
 8007e8e:	d415      	bmi.n	8007ebc <_printf_i+0x1b4>
 8007e90:	9b07      	ldr	r3, [sp, #28]
 8007e92:	68e0      	ldr	r0, [r4, #12]
 8007e94:	4298      	cmp	r0, r3
 8007e96:	da39      	bge.n	8007f0c <_printf_i+0x204>
 8007e98:	0018      	movs	r0, r3
 8007e9a:	e037      	b.n	8007f0c <_printf_i+0x204>
 8007e9c:	0022      	movs	r2, r4
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	3219      	adds	r2, #25
 8007ea2:	9904      	ldr	r1, [sp, #16]
 8007ea4:	9803      	ldr	r0, [sp, #12]
 8007ea6:	9e05      	ldr	r6, [sp, #20]
 8007ea8:	47b0      	blx	r6
 8007eaa:	1c43      	adds	r3, r0, #1
 8007eac:	d02c      	beq.n	8007f08 <_printf_i+0x200>
 8007eae:	3501      	adds	r5, #1
 8007eb0:	68e3      	ldr	r3, [r4, #12]
 8007eb2:	9a07      	ldr	r2, [sp, #28]
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	42ab      	cmp	r3, r5
 8007eb8:	dcf0      	bgt.n	8007e9c <_printf_i+0x194>
 8007eba:	e7e9      	b.n	8007e90 <_printf_i+0x188>
 8007ebc:	2500      	movs	r5, #0
 8007ebe:	e7f7      	b.n	8007eb0 <_printf_i+0x1a8>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	d0ad      	beq.n	8007e20 <_printf_i+0x118>
 8007ec4:	9d02      	ldr	r5, [sp, #8]
 8007ec6:	0039      	movs	r1, r7
 8007ec8:	f7f8 f9a4 	bl	8000214 <__aeabi_uidivmod>
 8007ecc:	5c73      	ldrb	r3, [r6, r1]
 8007ece:	3d01      	subs	r5, #1
 8007ed0:	702b      	strb	r3, [r5, #0]
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d1f7      	bne.n	8007ec6 <_printf_i+0x1be>
 8007ed6:	2f08      	cmp	r7, #8
 8007ed8:	d109      	bne.n	8007eee <_printf_i+0x1e6>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	07db      	lsls	r3, r3, #31
 8007ede:	d506      	bpl.n	8007eee <_printf_i+0x1e6>
 8007ee0:	6863      	ldr	r3, [r4, #4]
 8007ee2:	6922      	ldr	r2, [r4, #16]
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	dc02      	bgt.n	8007eee <_printf_i+0x1e6>
 8007ee8:	2330      	movs	r3, #48	; 0x30
 8007eea:	3d01      	subs	r5, #1
 8007eec:	702b      	strb	r3, [r5, #0]
 8007eee:	9b02      	ldr	r3, [sp, #8]
 8007ef0:	1b5b      	subs	r3, r3, r5
 8007ef2:	6123      	str	r3, [r4, #16]
 8007ef4:	9b05      	ldr	r3, [sp, #20]
 8007ef6:	aa07      	add	r2, sp, #28
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	0021      	movs	r1, r4
 8007efc:	9b04      	ldr	r3, [sp, #16]
 8007efe:	9803      	ldr	r0, [sp, #12]
 8007f00:	f7ff fe94 	bl	8007c2c <_printf_common>
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	d1b8      	bne.n	8007e7a <_printf_i+0x172>
 8007f08:	2001      	movs	r0, #1
 8007f0a:	4240      	negs	r0, r0
 8007f0c:	b009      	add	sp, #36	; 0x24
 8007f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f10:	08008845 	.word	0x08008845
 8007f14:	08008856 	.word	0x08008856

08007f18 <memchr>:
 8007f18:	b2c9      	uxtb	r1, r1
 8007f1a:	1882      	adds	r2, r0, r2
 8007f1c:	4290      	cmp	r0, r2
 8007f1e:	d101      	bne.n	8007f24 <memchr+0xc>
 8007f20:	2000      	movs	r0, #0
 8007f22:	4770      	bx	lr
 8007f24:	7803      	ldrb	r3, [r0, #0]
 8007f26:	428b      	cmp	r3, r1
 8007f28:	d0fb      	beq.n	8007f22 <memchr+0xa>
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	e7f6      	b.n	8007f1c <memchr+0x4>

08007f2e <memmove>:
 8007f2e:	b510      	push	{r4, lr}
 8007f30:	4288      	cmp	r0, r1
 8007f32:	d902      	bls.n	8007f3a <memmove+0xc>
 8007f34:	188b      	adds	r3, r1, r2
 8007f36:	4298      	cmp	r0, r3
 8007f38:	d303      	bcc.n	8007f42 <memmove+0x14>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	e007      	b.n	8007f4e <memmove+0x20>
 8007f3e:	5c8b      	ldrb	r3, [r1, r2]
 8007f40:	5483      	strb	r3, [r0, r2]
 8007f42:	3a01      	subs	r2, #1
 8007f44:	d2fb      	bcs.n	8007f3e <memmove+0x10>
 8007f46:	bd10      	pop	{r4, pc}
 8007f48:	5ccc      	ldrb	r4, [r1, r3]
 8007f4a:	54c4      	strb	r4, [r0, r3]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d1fa      	bne.n	8007f48 <memmove+0x1a>
 8007f52:	e7f8      	b.n	8007f46 <memmove+0x18>

08007f54 <_free_r>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	0005      	movs	r5, r0
 8007f58:	2900      	cmp	r1, #0
 8007f5a:	d010      	beq.n	8007f7e <_free_r+0x2a>
 8007f5c:	1f0c      	subs	r4, r1, #4
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	da00      	bge.n	8007f66 <_free_r+0x12>
 8007f64:	18e4      	adds	r4, r4, r3
 8007f66:	0028      	movs	r0, r5
 8007f68:	f000 f8d4 	bl	8008114 <__malloc_lock>
 8007f6c:	4a1d      	ldr	r2, [pc, #116]	; (8007fe4 <_free_r+0x90>)
 8007f6e:	6813      	ldr	r3, [r2, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d105      	bne.n	8007f80 <_free_r+0x2c>
 8007f74:	6063      	str	r3, [r4, #4]
 8007f76:	6014      	str	r4, [r2, #0]
 8007f78:	0028      	movs	r0, r5
 8007f7a:	f000 f8cc 	bl	8008116 <__malloc_unlock>
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	d909      	bls.n	8007f98 <_free_r+0x44>
 8007f84:	6821      	ldr	r1, [r4, #0]
 8007f86:	1860      	adds	r0, r4, r1
 8007f88:	4283      	cmp	r3, r0
 8007f8a:	d1f3      	bne.n	8007f74 <_free_r+0x20>
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	1841      	adds	r1, r0, r1
 8007f92:	6021      	str	r1, [r4, #0]
 8007f94:	e7ee      	b.n	8007f74 <_free_r+0x20>
 8007f96:	0013      	movs	r3, r2
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	2a00      	cmp	r2, #0
 8007f9c:	d001      	beq.n	8007fa2 <_free_r+0x4e>
 8007f9e:	42a2      	cmp	r2, r4
 8007fa0:	d9f9      	bls.n	8007f96 <_free_r+0x42>
 8007fa2:	6819      	ldr	r1, [r3, #0]
 8007fa4:	1858      	adds	r0, r3, r1
 8007fa6:	42a0      	cmp	r0, r4
 8007fa8:	d10b      	bne.n	8007fc2 <_free_r+0x6e>
 8007faa:	6820      	ldr	r0, [r4, #0]
 8007fac:	1809      	adds	r1, r1, r0
 8007fae:	1858      	adds	r0, r3, r1
 8007fb0:	6019      	str	r1, [r3, #0]
 8007fb2:	4282      	cmp	r2, r0
 8007fb4:	d1e0      	bne.n	8007f78 <_free_r+0x24>
 8007fb6:	6810      	ldr	r0, [r2, #0]
 8007fb8:	6852      	ldr	r2, [r2, #4]
 8007fba:	1841      	adds	r1, r0, r1
 8007fbc:	6019      	str	r1, [r3, #0]
 8007fbe:	605a      	str	r2, [r3, #4]
 8007fc0:	e7da      	b.n	8007f78 <_free_r+0x24>
 8007fc2:	42a0      	cmp	r0, r4
 8007fc4:	d902      	bls.n	8007fcc <_free_r+0x78>
 8007fc6:	230c      	movs	r3, #12
 8007fc8:	602b      	str	r3, [r5, #0]
 8007fca:	e7d5      	b.n	8007f78 <_free_r+0x24>
 8007fcc:	6821      	ldr	r1, [r4, #0]
 8007fce:	1860      	adds	r0, r4, r1
 8007fd0:	4282      	cmp	r2, r0
 8007fd2:	d103      	bne.n	8007fdc <_free_r+0x88>
 8007fd4:	6810      	ldr	r0, [r2, #0]
 8007fd6:	6852      	ldr	r2, [r2, #4]
 8007fd8:	1841      	adds	r1, r0, r1
 8007fda:	6021      	str	r1, [r4, #0]
 8007fdc:	6062      	str	r2, [r4, #4]
 8007fde:	605c      	str	r4, [r3, #4]
 8007fe0:	e7ca      	b.n	8007f78 <_free_r+0x24>
 8007fe2:	46c0      	nop			; (mov r8, r8)
 8007fe4:	20000424 	.word	0x20000424

08007fe8 <_malloc_r>:
 8007fe8:	2303      	movs	r3, #3
 8007fea:	b570      	push	{r4, r5, r6, lr}
 8007fec:	1ccd      	adds	r5, r1, #3
 8007fee:	439d      	bics	r5, r3
 8007ff0:	3508      	adds	r5, #8
 8007ff2:	0006      	movs	r6, r0
 8007ff4:	2d0c      	cmp	r5, #12
 8007ff6:	d21e      	bcs.n	8008036 <_malloc_r+0x4e>
 8007ff8:	250c      	movs	r5, #12
 8007ffa:	42a9      	cmp	r1, r5
 8007ffc:	d81d      	bhi.n	800803a <_malloc_r+0x52>
 8007ffe:	0030      	movs	r0, r6
 8008000:	f000 f888 	bl	8008114 <__malloc_lock>
 8008004:	4a25      	ldr	r2, [pc, #148]	; (800809c <_malloc_r+0xb4>)
 8008006:	6814      	ldr	r4, [r2, #0]
 8008008:	0021      	movs	r1, r4
 800800a:	2900      	cmp	r1, #0
 800800c:	d119      	bne.n	8008042 <_malloc_r+0x5a>
 800800e:	4c24      	ldr	r4, [pc, #144]	; (80080a0 <_malloc_r+0xb8>)
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d103      	bne.n	800801e <_malloc_r+0x36>
 8008016:	0030      	movs	r0, r6
 8008018:	f000 f86a 	bl	80080f0 <_sbrk_r>
 800801c:	6020      	str	r0, [r4, #0]
 800801e:	0029      	movs	r1, r5
 8008020:	0030      	movs	r0, r6
 8008022:	f000 f865 	bl	80080f0 <_sbrk_r>
 8008026:	1c43      	adds	r3, r0, #1
 8008028:	d12b      	bne.n	8008082 <_malloc_r+0x9a>
 800802a:	230c      	movs	r3, #12
 800802c:	0030      	movs	r0, r6
 800802e:	6033      	str	r3, [r6, #0]
 8008030:	f000 f871 	bl	8008116 <__malloc_unlock>
 8008034:	e003      	b.n	800803e <_malloc_r+0x56>
 8008036:	2d00      	cmp	r5, #0
 8008038:	dadf      	bge.n	8007ffa <_malloc_r+0x12>
 800803a:	230c      	movs	r3, #12
 800803c:	6033      	str	r3, [r6, #0]
 800803e:	2000      	movs	r0, #0
 8008040:	bd70      	pop	{r4, r5, r6, pc}
 8008042:	680b      	ldr	r3, [r1, #0]
 8008044:	1b5b      	subs	r3, r3, r5
 8008046:	d419      	bmi.n	800807c <_malloc_r+0x94>
 8008048:	2b0b      	cmp	r3, #11
 800804a:	d903      	bls.n	8008054 <_malloc_r+0x6c>
 800804c:	600b      	str	r3, [r1, #0]
 800804e:	18cc      	adds	r4, r1, r3
 8008050:	6025      	str	r5, [r4, #0]
 8008052:	e003      	b.n	800805c <_malloc_r+0x74>
 8008054:	684b      	ldr	r3, [r1, #4]
 8008056:	428c      	cmp	r4, r1
 8008058:	d10d      	bne.n	8008076 <_malloc_r+0x8e>
 800805a:	6013      	str	r3, [r2, #0]
 800805c:	0030      	movs	r0, r6
 800805e:	f000 f85a 	bl	8008116 <__malloc_unlock>
 8008062:	0020      	movs	r0, r4
 8008064:	2207      	movs	r2, #7
 8008066:	300b      	adds	r0, #11
 8008068:	1d23      	adds	r3, r4, #4
 800806a:	4390      	bics	r0, r2
 800806c:	1ac3      	subs	r3, r0, r3
 800806e:	d0e7      	beq.n	8008040 <_malloc_r+0x58>
 8008070:	425a      	negs	r2, r3
 8008072:	50e2      	str	r2, [r4, r3]
 8008074:	e7e4      	b.n	8008040 <_malloc_r+0x58>
 8008076:	6063      	str	r3, [r4, #4]
 8008078:	000c      	movs	r4, r1
 800807a:	e7ef      	b.n	800805c <_malloc_r+0x74>
 800807c:	000c      	movs	r4, r1
 800807e:	6849      	ldr	r1, [r1, #4]
 8008080:	e7c3      	b.n	800800a <_malloc_r+0x22>
 8008082:	2303      	movs	r3, #3
 8008084:	1cc4      	adds	r4, r0, #3
 8008086:	439c      	bics	r4, r3
 8008088:	42a0      	cmp	r0, r4
 800808a:	d0e1      	beq.n	8008050 <_malloc_r+0x68>
 800808c:	1a21      	subs	r1, r4, r0
 800808e:	0030      	movs	r0, r6
 8008090:	f000 f82e 	bl	80080f0 <_sbrk_r>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d1db      	bne.n	8008050 <_malloc_r+0x68>
 8008098:	e7c7      	b.n	800802a <_malloc_r+0x42>
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	20000424 	.word	0x20000424
 80080a0:	20000428 	.word	0x20000428

080080a4 <_realloc_r>:
 80080a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a6:	0007      	movs	r7, r0
 80080a8:	000d      	movs	r5, r1
 80080aa:	0016      	movs	r6, r2
 80080ac:	2900      	cmp	r1, #0
 80080ae:	d105      	bne.n	80080bc <_realloc_r+0x18>
 80080b0:	0011      	movs	r1, r2
 80080b2:	f7ff ff99 	bl	8007fe8 <_malloc_r>
 80080b6:	0004      	movs	r4, r0
 80080b8:	0020      	movs	r0, r4
 80080ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080bc:	2a00      	cmp	r2, #0
 80080be:	d103      	bne.n	80080c8 <_realloc_r+0x24>
 80080c0:	f7ff ff48 	bl	8007f54 <_free_r>
 80080c4:	0034      	movs	r4, r6
 80080c6:	e7f7      	b.n	80080b8 <_realloc_r+0x14>
 80080c8:	f000 f826 	bl	8008118 <_malloc_usable_size_r>
 80080cc:	002c      	movs	r4, r5
 80080ce:	42b0      	cmp	r0, r6
 80080d0:	d2f2      	bcs.n	80080b8 <_realloc_r+0x14>
 80080d2:	0031      	movs	r1, r6
 80080d4:	0038      	movs	r0, r7
 80080d6:	f7ff ff87 	bl	8007fe8 <_malloc_r>
 80080da:	1e04      	subs	r4, r0, #0
 80080dc:	d0ec      	beq.n	80080b8 <_realloc_r+0x14>
 80080de:	0029      	movs	r1, r5
 80080e0:	0032      	movs	r2, r6
 80080e2:	f7ff fbed 	bl	80078c0 <memcpy>
 80080e6:	0029      	movs	r1, r5
 80080e8:	0038      	movs	r0, r7
 80080ea:	f7ff ff33 	bl	8007f54 <_free_r>
 80080ee:	e7e3      	b.n	80080b8 <_realloc_r+0x14>

080080f0 <_sbrk_r>:
 80080f0:	2300      	movs	r3, #0
 80080f2:	b570      	push	{r4, r5, r6, lr}
 80080f4:	4c06      	ldr	r4, [pc, #24]	; (8008110 <_sbrk_r+0x20>)
 80080f6:	0005      	movs	r5, r0
 80080f8:	0008      	movs	r0, r1
 80080fa:	6023      	str	r3, [r4, #0]
 80080fc:	f7fe fca4 	bl	8006a48 <_sbrk>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	d103      	bne.n	800810c <_sbrk_r+0x1c>
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d000      	beq.n	800810c <_sbrk_r+0x1c>
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	bd70      	pop	{r4, r5, r6, pc}
 800810e:	46c0      	nop			; (mov r8, r8)
 8008110:	2000121c 	.word	0x2000121c

08008114 <__malloc_lock>:
 8008114:	4770      	bx	lr

08008116 <__malloc_unlock>:
 8008116:	4770      	bx	lr

08008118 <_malloc_usable_size_r>:
 8008118:	1f0b      	subs	r3, r1, #4
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	1f18      	subs	r0, r3, #4
 800811e:	2b00      	cmp	r3, #0
 8008120:	da01      	bge.n	8008126 <_malloc_usable_size_r+0xe>
 8008122:	580b      	ldr	r3, [r1, r0]
 8008124:	18c0      	adds	r0, r0, r3
 8008126:	4770      	bx	lr

08008128 <_init>:
 8008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812e:	bc08      	pop	{r3}
 8008130:	469e      	mov	lr, r3
 8008132:	4770      	bx	lr

08008134 <_fini>:
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	46c0      	nop			; (mov r8, r8)
 8008138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813a:	bc08      	pop	{r3}
 800813c:	469e      	mov	lr, r3
 800813e:	4770      	bx	lr
