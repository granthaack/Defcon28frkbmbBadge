
lixie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  0800839c  0800839c  0001839c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e84  08008e84  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008e84  08008e84  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e84  08008e84  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e84  08008e84  00018e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e88  08008e88  00018e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc0  200001dc  08009068  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000119c  08009068  0002119c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019db1  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003eca  00000000  00000000  00039fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001008  00000000  00000000  0003de80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  0003ee88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018344  00000000  00000000  0003fca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011f32  00000000  00000000  00057fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007db53  00000000  00000000  00069f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7a71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038d8  00000000  00000000  000e7aec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008384 	.word	0x08008384

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08008384 	.word	0x08008384

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <HAL_Init+0x3c>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <HAL_Init+0x3c>)
 8000232:	2140      	movs	r1, #64	; 0x40
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000238:	2000      	movs	r0, #0
 800023a:	f000 f811 	bl	8000260 <HAL_InitTick>
 800023e:	1e03      	subs	r3, r0, #0
 8000240:	d003      	beq.n	800024a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
 8000248:	e001      	b.n	800024e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800024a:	f006 fc91 	bl	8006b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800024e:	1dfb      	adds	r3, r7, #7
 8000250:	781b      	ldrb	r3, [r3, #0]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	40022000 	.word	0x40022000

08000260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000268:	230f      	movs	r3, #15
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <HAL_InitTick+0x50>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	23fa      	movs	r3, #250	; 0xfa
 8000276:	0099      	lsls	r1, r3, #2
 8000278:	0010      	movs	r0, r2
 800027a:	f7ff ff45 	bl	8000108 <__udivsi3>
 800027e:	0003      	movs	r3, r0
 8000280:	0018      	movs	r0, r3
 8000282:	f000 f918 	bl	80004b6 <HAL_SYSTICK_Config>
 8000286:	1e03      	subs	r3, r0, #0
 8000288:	d004      	beq.n	8000294 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800028a:	230f      	movs	r3, #15
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
 8000292:	e006      	b.n	80002a2 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	2301      	movs	r3, #1
 8000298:	425b      	negs	r3, r3
 800029a:	2200      	movs	r2, #0
 800029c:	0018      	movs	r0, r3
 800029e:	f000 f8e5 	bl	800046c <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80002a2:	230f      	movs	r3, #15
 80002a4:	18fb      	adds	r3, r7, r3
 80002a6:	781b      	ldrb	r3, [r3, #0]
}
 80002a8:	0018      	movs	r0, r3
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b004      	add	sp, #16
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000110 	.word	0x20000110

080002b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  uwTick++;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <HAL_IncTick+0x14>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	1c5a      	adds	r2, r3, #1
 80002be:	4b02      	ldr	r3, [pc, #8]	; (80002c8 <HAL_IncTick+0x14>)
 80002c0:	601a      	str	r2, [r3, #0]
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	2000042c 	.word	0x2000042c

080002cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  return uwTick;
 80002d0:	4b02      	ldr	r3, [pc, #8]	; (80002dc <HAL_GetTick+0x10>)
 80002d2:	681b      	ldr	r3, [r3, #0]
}
 80002d4:	0018      	movs	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	2000042c 	.word	0x2000042c

080002e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002e8:	f7ff fff0 	bl	80002cc <HAL_GetTick>
 80002ec:	0003      	movs	r3, r0
 80002ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	3301      	adds	r3, #1
 80002f8:	d002      	beq.n	8000300 <HAL_Delay+0x20>
  {
    wait++;
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	3301      	adds	r3, #1
 80002fe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000300:	46c0      	nop			; (mov r8, r8)
 8000302:	f7ff ffe3 	bl	80002cc <HAL_GetTick>
 8000306:	0002      	movs	r2, r0
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	1ad3      	subs	r3, r2, r3
 800030c:	68fa      	ldr	r2, [r7, #12]
 800030e:	429a      	cmp	r2, r3
 8000310:	d8f7      	bhi.n	8000302 <HAL_Delay+0x22>
  {
  }
}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	b004      	add	sp, #16
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	0002      	movs	r2, r0
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	001a      	movs	r2, r3
 800032e:	231f      	movs	r3, #31
 8000330:	401a      	ands	r2, r3
 8000332:	4b04      	ldr	r3, [pc, #16]	; (8000344 <NVIC_EnableIRQ+0x28>)
 8000334:	2101      	movs	r1, #1
 8000336:	4091      	lsls	r1, r2
 8000338:	000a      	movs	r2, r1
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b002      	add	sp, #8
 8000342:	bd80      	pop	{r7, pc}
 8000344:	e000e100 	.word	0xe000e100

08000348 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	0002      	movs	r2, r0
 8000350:	6039      	str	r1, [r7, #0]
 8000352:	1dfb      	adds	r3, r7, #7
 8000354:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000356:	1dfb      	adds	r3, r7, #7
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b7f      	cmp	r3, #127	; 0x7f
 800035c:	d932      	bls.n	80003c4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800035e:	4a2f      	ldr	r2, [pc, #188]	; (800041c <NVIC_SetPriority+0xd4>)
 8000360:	1dfb      	adds	r3, r7, #7
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	0019      	movs	r1, r3
 8000366:	230f      	movs	r3, #15
 8000368:	400b      	ands	r3, r1
 800036a:	3b08      	subs	r3, #8
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	3306      	adds	r3, #6
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	18d3      	adds	r3, r2, r3
 8000374:	3304      	adds	r3, #4
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	1dfa      	adds	r2, r7, #7
 800037a:	7812      	ldrb	r2, [r2, #0]
 800037c:	0011      	movs	r1, r2
 800037e:	2203      	movs	r2, #3
 8000380:	400a      	ands	r2, r1
 8000382:	00d2      	lsls	r2, r2, #3
 8000384:	21ff      	movs	r1, #255	; 0xff
 8000386:	4091      	lsls	r1, r2
 8000388:	000a      	movs	r2, r1
 800038a:	43d2      	mvns	r2, r2
 800038c:	401a      	ands	r2, r3
 800038e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	019b      	lsls	r3, r3, #6
 8000394:	22ff      	movs	r2, #255	; 0xff
 8000396:	401a      	ands	r2, r3
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	0018      	movs	r0, r3
 800039e:	2303      	movs	r3, #3
 80003a0:	4003      	ands	r3, r0
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003a6:	481d      	ldr	r0, [pc, #116]	; (800041c <NVIC_SetPriority+0xd4>)
 80003a8:	1dfb      	adds	r3, r7, #7
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	001c      	movs	r4, r3
 80003ae:	230f      	movs	r3, #15
 80003b0:	4023      	ands	r3, r4
 80003b2:	3b08      	subs	r3, #8
 80003b4:	089b      	lsrs	r3, r3, #2
 80003b6:	430a      	orrs	r2, r1
 80003b8:	3306      	adds	r3, #6
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	18c3      	adds	r3, r0, r3
 80003be:	3304      	adds	r3, #4
 80003c0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80003c2:	e027      	b.n	8000414 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003c4:	4a16      	ldr	r2, [pc, #88]	; (8000420 <NVIC_SetPriority+0xd8>)
 80003c6:	1dfb      	adds	r3, r7, #7
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	b25b      	sxtb	r3, r3
 80003cc:	089b      	lsrs	r3, r3, #2
 80003ce:	33c0      	adds	r3, #192	; 0xc0
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	589b      	ldr	r3, [r3, r2]
 80003d4:	1dfa      	adds	r2, r7, #7
 80003d6:	7812      	ldrb	r2, [r2, #0]
 80003d8:	0011      	movs	r1, r2
 80003da:	2203      	movs	r2, #3
 80003dc:	400a      	ands	r2, r1
 80003de:	00d2      	lsls	r2, r2, #3
 80003e0:	21ff      	movs	r1, #255	; 0xff
 80003e2:	4091      	lsls	r1, r2
 80003e4:	000a      	movs	r2, r1
 80003e6:	43d2      	mvns	r2, r2
 80003e8:	401a      	ands	r2, r3
 80003ea:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	019b      	lsls	r3, r3, #6
 80003f0:	22ff      	movs	r2, #255	; 0xff
 80003f2:	401a      	ands	r2, r3
 80003f4:	1dfb      	adds	r3, r7, #7
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	0018      	movs	r0, r3
 80003fa:	2303      	movs	r3, #3
 80003fc:	4003      	ands	r3, r0
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000402:	4807      	ldr	r0, [pc, #28]	; (8000420 <NVIC_SetPriority+0xd8>)
 8000404:	1dfb      	adds	r3, r7, #7
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	b25b      	sxtb	r3, r3
 800040a:	089b      	lsrs	r3, r3, #2
 800040c:	430a      	orrs	r2, r1
 800040e:	33c0      	adds	r3, #192	; 0xc0
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	501a      	str	r2, [r3, r0]
}
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b003      	add	sp, #12
 800041a:	bd90      	pop	{r4, r7, pc}
 800041c:	e000ed00 	.word	0xe000ed00
 8000420:	e000e100 	.word	0xe000e100

08000424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3b01      	subs	r3, #1
 8000430:	4a0c      	ldr	r2, [pc, #48]	; (8000464 <SysTick_Config+0x40>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d901      	bls.n	800043a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000436:	2301      	movs	r3, #1
 8000438:	e010      	b.n	800045c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <SysTick_Config+0x44>)
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	3a01      	subs	r2, #1
 8000440:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000442:	2301      	movs	r3, #1
 8000444:	425b      	negs	r3, r3
 8000446:	2103      	movs	r1, #3
 8000448:	0018      	movs	r0, r3
 800044a:	f7ff ff7d 	bl	8000348 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <SysTick_Config+0x44>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <SysTick_Config+0x44>)
 8000456:	2207      	movs	r2, #7
 8000458:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800045a:	2300      	movs	r3, #0
}
 800045c:	0018      	movs	r0, r3
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}
 8000464:	00ffffff 	.word	0x00ffffff
 8000468:	e000e010 	.word	0xe000e010

0800046c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	60b9      	str	r1, [r7, #8]
 8000474:	607a      	str	r2, [r7, #4]
 8000476:	210f      	movs	r1, #15
 8000478:	187b      	adds	r3, r7, r1
 800047a:	1c02      	adds	r2, r0, #0
 800047c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800047e:	68ba      	ldr	r2, [r7, #8]
 8000480:	187b      	adds	r3, r7, r1
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	b25b      	sxtb	r3, r3
 8000486:	0011      	movs	r1, r2
 8000488:	0018      	movs	r0, r3
 800048a:	f7ff ff5d 	bl	8000348 <NVIC_SetPriority>
}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b004      	add	sp, #16
 8000494:	bd80      	pop	{r7, pc}

08000496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	b082      	sub	sp, #8
 800049a:	af00      	add	r7, sp, #0
 800049c:	0002      	movs	r2, r0
 800049e:	1dfb      	adds	r3, r7, #7
 80004a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	b25b      	sxtb	r3, r3
 80004a8:	0018      	movs	r0, r3
 80004aa:	f7ff ff37 	bl	800031c <NVIC_EnableIRQ>
}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	0018      	movs	r0, r3
 80004c2:	f7ff ffaf 	bl	8000424 <SysTick_Config>
 80004c6:	0003      	movs	r3, r0
}
 80004c8:	0018      	movs	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b002      	add	sp, #8
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80004e6:	e155      	b.n	8000794 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2101      	movs	r1, #1
 80004ee:	697a      	ldr	r2, [r7, #20]
 80004f0:	4091      	lsls	r1, r2
 80004f2:	000a      	movs	r2, r1
 80004f4:	4013      	ands	r3, r2
 80004f6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d100      	bne.n	8000500 <HAL_GPIO_Init+0x30>
 80004fe:	e146      	b.n	800078e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	2b02      	cmp	r3, #2
 8000506:	d003      	beq.n	8000510 <HAL_GPIO_Init+0x40>
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	2b12      	cmp	r3, #18
 800050e:	d123      	bne.n	8000558 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	08da      	lsrs	r2, r3, #3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	3208      	adds	r2, #8
 8000518:	0092      	lsls	r2, r2, #2
 800051a:	58d3      	ldr	r3, [r2, r3]
 800051c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	2207      	movs	r2, #7
 8000522:	4013      	ands	r3, r2
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	220f      	movs	r2, #15
 8000528:	409a      	lsls	r2, r3
 800052a:	0013      	movs	r3, r2
 800052c:	43da      	mvns	r2, r3
 800052e:	693b      	ldr	r3, [r7, #16]
 8000530:	4013      	ands	r3, r2
 8000532:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	691a      	ldr	r2, [r3, #16]
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	2107      	movs	r1, #7
 800053c:	400b      	ands	r3, r1
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	409a      	lsls	r2, r3
 8000542:	0013      	movs	r3, r2
 8000544:	693a      	ldr	r2, [r7, #16]
 8000546:	4313      	orrs	r3, r2
 8000548:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	08da      	lsrs	r2, r3, #3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3208      	adds	r2, #8
 8000552:	0092      	lsls	r2, r2, #2
 8000554:	6939      	ldr	r1, [r7, #16]
 8000556:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d00b      	beq.n	8000578 <HAL_GPIO_Init+0xa8>
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d007      	beq.n	8000578 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800056c:	2b11      	cmp	r3, #17
 800056e:	d003      	beq.n	8000578 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	2b12      	cmp	r3, #18
 8000576:	d130      	bne.n	80005da <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	2203      	movs	r2, #3
 8000584:	409a      	lsls	r2, r3
 8000586:	0013      	movs	r3, r2
 8000588:	43da      	mvns	r2, r3
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	4013      	ands	r3, r2
 800058e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	409a      	lsls	r2, r3
 800059a:	0013      	movs	r3, r2
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	4313      	orrs	r3, r2
 80005a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005ae:	2201      	movs	r2, #1
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	409a      	lsls	r2, r3
 80005b4:	0013      	movs	r3, r2
 80005b6:	43da      	mvns	r2, r3
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	4013      	ands	r3, r2
 80005bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	091b      	lsrs	r3, r3, #4
 80005c4:	2201      	movs	r2, #1
 80005c6:	401a      	ands	r2, r3
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	409a      	lsls	r2, r3
 80005cc:	0013      	movs	r3, r2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	2203      	movs	r2, #3
 80005e6:	409a      	lsls	r2, r3
 80005e8:	0013      	movs	r3, r2
 80005ea:	43da      	mvns	r2, r3
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	4013      	ands	r3, r2
 80005f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	2203      	movs	r2, #3
 80005f8:	401a      	ands	r2, r3
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	409a      	lsls	r2, r3
 8000600:	0013      	movs	r3, r2
 8000602:	693a      	ldr	r2, [r7, #16]
 8000604:	4313      	orrs	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	2203      	movs	r2, #3
 800061a:	409a      	lsls	r2, r3
 800061c:	0013      	movs	r3, r2
 800061e:	43da      	mvns	r2, r3
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	4013      	ands	r3, r2
 8000624:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	689a      	ldr	r2, [r3, #8]
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	409a      	lsls	r2, r3
 8000630:	0013      	movs	r3, r2
 8000632:	693a      	ldr	r2, [r7, #16]
 8000634:	4313      	orrs	r3, r2
 8000636:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	685a      	ldr	r2, [r3, #4]
 8000642:	2380      	movs	r3, #128	; 0x80
 8000644:	055b      	lsls	r3, r3, #21
 8000646:	4013      	ands	r3, r2
 8000648:	d100      	bne.n	800064c <HAL_GPIO_Init+0x17c>
 800064a:	e0a0      	b.n	800078e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064c:	4b57      	ldr	r3, [pc, #348]	; (80007ac <HAL_GPIO_Init+0x2dc>)
 800064e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000650:	4b56      	ldr	r3, [pc, #344]	; (80007ac <HAL_GPIO_Init+0x2dc>)
 8000652:	2101      	movs	r1, #1
 8000654:	430a      	orrs	r2, r1
 8000656:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000658:	4a55      	ldr	r2, [pc, #340]	; (80007b0 <HAL_GPIO_Init+0x2e0>)
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	089b      	lsrs	r3, r3, #2
 800065e:	3302      	adds	r3, #2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	589b      	ldr	r3, [r3, r2]
 8000664:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	2203      	movs	r2, #3
 800066a:	4013      	ands	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	220f      	movs	r2, #15
 8000670:	409a      	lsls	r2, r3
 8000672:	0013      	movs	r3, r2
 8000674:	43da      	mvns	r2, r3
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	4013      	ands	r3, r2
 800067a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	23a0      	movs	r3, #160	; 0xa0
 8000680:	05db      	lsls	r3, r3, #23
 8000682:	429a      	cmp	r2, r3
 8000684:	d01f      	beq.n	80006c6 <HAL_GPIO_Init+0x1f6>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a4a      	ldr	r2, [pc, #296]	; (80007b4 <HAL_GPIO_Init+0x2e4>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d019      	beq.n	80006c2 <HAL_GPIO_Init+0x1f2>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a49      	ldr	r2, [pc, #292]	; (80007b8 <HAL_GPIO_Init+0x2e8>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d013      	beq.n	80006be <HAL_GPIO_Init+0x1ee>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a48      	ldr	r2, [pc, #288]	; (80007bc <HAL_GPIO_Init+0x2ec>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d00d      	beq.n	80006ba <HAL_GPIO_Init+0x1ea>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a47      	ldr	r2, [pc, #284]	; (80007c0 <HAL_GPIO_Init+0x2f0>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d007      	beq.n	80006b6 <HAL_GPIO_Init+0x1e6>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a46      	ldr	r2, [pc, #280]	; (80007c4 <HAL_GPIO_Init+0x2f4>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d101      	bne.n	80006b2 <HAL_GPIO_Init+0x1e2>
 80006ae:	2305      	movs	r3, #5
 80006b0:	e00a      	b.n	80006c8 <HAL_GPIO_Init+0x1f8>
 80006b2:	2306      	movs	r3, #6
 80006b4:	e008      	b.n	80006c8 <HAL_GPIO_Init+0x1f8>
 80006b6:	2304      	movs	r3, #4
 80006b8:	e006      	b.n	80006c8 <HAL_GPIO_Init+0x1f8>
 80006ba:	2303      	movs	r3, #3
 80006bc:	e004      	b.n	80006c8 <HAL_GPIO_Init+0x1f8>
 80006be:	2302      	movs	r3, #2
 80006c0:	e002      	b.n	80006c8 <HAL_GPIO_Init+0x1f8>
 80006c2:	2301      	movs	r3, #1
 80006c4:	e000      	b.n	80006c8 <HAL_GPIO_Init+0x1f8>
 80006c6:	2300      	movs	r3, #0
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	2103      	movs	r1, #3
 80006cc:	400a      	ands	r2, r1
 80006ce:	0092      	lsls	r2, r2, #2
 80006d0:	4093      	lsls	r3, r2
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006d8:	4935      	ldr	r1, [pc, #212]	; (80007b0 <HAL_GPIO_Init+0x2e0>)
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	089b      	lsrs	r3, r3, #2
 80006de:	3302      	adds	r3, #2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006e6:	4b38      	ldr	r3, [pc, #224]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	43da      	mvns	r2, r3
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	4013      	ands	r3, r2
 80006f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	685a      	ldr	r2, [r3, #4]
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	025b      	lsls	r3, r3, #9
 80006fe:	4013      	ands	r3, r2
 8000700:	d003      	beq.n	800070a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	4313      	orrs	r3, r2
 8000708:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800070a:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 800070c:	693a      	ldr	r2, [r7, #16]
 800070e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000710:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	43da      	mvns	r2, r3
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	4013      	ands	r3, r2
 800071e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	685a      	ldr	r2, [r3, #4]
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	029b      	lsls	r3, r3, #10
 8000728:	4013      	ands	r3, r2
 800072a:	d003      	beq.n	8000734 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	4313      	orrs	r3, r2
 8000732:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	43da      	mvns	r2, r3
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	4013      	ands	r3, r2
 8000748:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	035b      	lsls	r3, r3, #13
 8000752:	4013      	ands	r3, r2
 8000754:	d003      	beq.n	800075e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4313      	orrs	r3, r2
 800075c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 8000760:	693a      	ldr	r2, [r7, #16]
 8000762:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	43da      	mvns	r2, r3
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	4013      	ands	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	039b      	lsls	r3, r3, #14
 800077c:	4013      	ands	r3, r2
 800077e:	d003      	beq.n	8000788 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000780:	693a      	ldr	r2, [r7, #16]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4313      	orrs	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_GPIO_Init+0x2f8>)
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	3301      	adds	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	40da      	lsrs	r2, r3
 800079c:	1e13      	subs	r3, r2, #0
 800079e:	d000      	beq.n	80007a2 <HAL_GPIO_Init+0x2d2>
 80007a0:	e6a2      	b.n	80004e8 <HAL_GPIO_Init+0x18>
  }
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b006      	add	sp, #24
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010000 	.word	0x40010000
 80007b4:	50000400 	.word	0x50000400
 80007b8:	50000800 	.word	0x50000800
 80007bc:	50000c00 	.word	0x50000c00
 80007c0:	50001000 	.word	0x50001000
 80007c4:	50001c00 	.word	0x50001c00
 80007c8:	40010400 	.word	0x40010400

080007cc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	0008      	movs	r0, r1
 80007d6:	0011      	movs	r1, r2
 80007d8:	1cbb      	adds	r3, r7, #2
 80007da:	1c02      	adds	r2, r0, #0
 80007dc:	801a      	strh	r2, [r3, #0]
 80007de:	1c7b      	adds	r3, r7, #1
 80007e0:	1c0a      	adds	r2, r1, #0
 80007e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80007e4:	1c7b      	adds	r3, r7, #1
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d004      	beq.n	80007f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007ec:	1cbb      	adds	r3, r7, #2
 80007ee:	881a      	ldrh	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80007f4:	e003      	b.n	80007fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80007f6:	1cbb      	adds	r3, r7, #2
 80007f8:	881a      	ldrh	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b002      	add	sp, #8
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
 800080e:	000a      	movs	r2, r1
 8000810:	1cbb      	adds	r3, r7, #2
 8000812:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	695a      	ldr	r2, [r3, #20]
 8000818:	1cbb      	adds	r3, r7, #2
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	405a      	eors	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	615a      	str	r2, [r3, #20]
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	0002      	movs	r2, r0
 8000834:	1dbb      	adds	r3, r7, #6
 8000836:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	1dba      	adds	r2, r7, #6
 800083e:	8812      	ldrh	r2, [r2, #0]
 8000840:	4013      	ands	r3, r2
 8000842:	d008      	beq.n	8000856 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000846:	1dba      	adds	r2, r7, #6
 8000848:	8812      	ldrh	r2, [r2, #0]
 800084a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800084c:	1dbb      	adds	r3, r7, #6
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	0018      	movs	r0, r3
 8000852:	f000 f807 	bl	8000864 <HAL_GPIO_EXTI_Callback>
  }
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b002      	add	sp, #8
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40010400 	.word	0x40010400

08000864 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	0002      	movs	r2, r0
 800086c:	1dbb      	adds	r3, r7, #6
 800086e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}

08000878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d101      	bne.n	800088a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e082      	b.n	8000990 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2241      	movs	r2, #65	; 0x41
 800088e:	5c9b      	ldrb	r3, [r3, r2]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	d107      	bne.n	80008a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2240      	movs	r2, #64	; 0x40
 800089a:	2100      	movs	r1, #0
 800089c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	0018      	movs	r0, r3
 80008a2:	f006 f979 	bl	8006b98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2241      	movs	r2, #65	; 0x41
 80008aa:	2124      	movs	r1, #36	; 0x24
 80008ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2101      	movs	r1, #1
 80008ba:	438a      	bics	r2, r1
 80008bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	685a      	ldr	r2, [r3, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4934      	ldr	r1, [pc, #208]	; (8000998 <HAL_I2C_Init+0x120>)
 80008c8:	400a      	ands	r2, r1
 80008ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	689a      	ldr	r2, [r3, #8]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4931      	ldr	r1, [pc, #196]	; (800099c <HAL_I2C_Init+0x124>)
 80008d8:	400a      	ands	r2, r1
 80008da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d108      	bne.n	80008f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0209      	lsls	r1, r1, #8
 80008f0:	430a      	orrs	r2, r1
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	e007      	b.n	8000906 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	689a      	ldr	r2, [r3, #8]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2184      	movs	r1, #132	; 0x84
 8000900:	0209      	lsls	r1, r1, #8
 8000902:	430a      	orrs	r2, r1
 8000904:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d104      	bne.n	8000918 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	0112      	lsls	r2, r2, #4
 8000916:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	491f      	ldr	r1, [pc, #124]	; (80009a0 <HAL_I2C_Init+0x128>)
 8000924:	430a      	orrs	r2, r1
 8000926:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68da      	ldr	r2, [r3, #12]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	491a      	ldr	r1, [pc, #104]	; (800099c <HAL_I2C_Init+0x124>)
 8000934:	400a      	ands	r2, r1
 8000936:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	691a      	ldr	r2, [r3, #16]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	431a      	orrs	r2, r3
 8000942:	0011      	movs	r1, r2
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	021a      	lsls	r2, r3, #8
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	430a      	orrs	r2, r1
 8000950:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69d9      	ldr	r1, [r3, #28]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a1a      	ldr	r2, [r3, #32]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	430a      	orrs	r2, r1
 8000960:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2101      	movs	r1, #1
 800096e:	430a      	orrs	r2, r1
 8000970:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2200      	movs	r2, #0
 8000976:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2241      	movs	r2, #65	; 0x41
 800097c:	2120      	movs	r1, #32
 800097e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2242      	movs	r2, #66	; 0x42
 800098a:	2100      	movs	r1, #0
 800098c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800098e:	2300      	movs	r3, #0
}
 8000990:	0018      	movs	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	b002      	add	sp, #8
 8000996:	bd80      	pop	{r7, pc}
 8000998:	f0ffffff 	.word	0xf0ffffff
 800099c:	ffff7fff 	.word	0xffff7fff
 80009a0:	02008000 	.word	0x02008000

080009a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2241      	movs	r2, #65	; 0x41
 80009b2:	5c9b      	ldrb	r3, [r3, r2]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b20      	cmp	r3, #32
 80009b8:	d138      	bne.n	8000a2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2240      	movs	r2, #64	; 0x40
 80009be:	5c9b      	ldrb	r3, [r3, r2]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d101      	bne.n	80009c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80009c4:	2302      	movs	r3, #2
 80009c6:	e032      	b.n	8000a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2240      	movs	r2, #64	; 0x40
 80009cc:	2101      	movs	r1, #1
 80009ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2241      	movs	r2, #65	; 0x41
 80009d4:	2124      	movs	r1, #36	; 0x24
 80009d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2101      	movs	r1, #1
 80009e4:	438a      	bics	r2, r1
 80009e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4911      	ldr	r1, [pc, #68]	; (8000a38 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80009f4:	400a      	ands	r2, r1
 80009f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	6819      	ldr	r1, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	683a      	ldr	r2, [r7, #0]
 8000a04:	430a      	orrs	r2, r1
 8000a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2101      	movs	r1, #1
 8000a14:	430a      	orrs	r2, r1
 8000a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2241      	movs	r2, #65	; 0x41
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2240      	movs	r2, #64	; 0x40
 8000a24:	2100      	movs	r1, #0
 8000a26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e000      	b.n	8000a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000a2c:	2302      	movs	r3, #2
  }
}
 8000a2e:	0018      	movs	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	ffffefff 	.word	0xffffefff

08000a3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2241      	movs	r2, #65	; 0x41
 8000a4a:	5c9b      	ldrb	r3, [r3, r2]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b20      	cmp	r3, #32
 8000a50:	d139      	bne.n	8000ac6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2240      	movs	r2, #64	; 0x40
 8000a56:	5c9b      	ldrb	r3, [r3, r2]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d101      	bne.n	8000a60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	e033      	b.n	8000ac8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2240      	movs	r2, #64	; 0x40
 8000a64:	2101      	movs	r1, #1
 8000a66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2241      	movs	r2, #65	; 0x41
 8000a6c:	2124      	movs	r1, #36	; 0x24
 8000a6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	438a      	bics	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2101      	movs	r1, #1
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2241      	movs	r2, #65	; 0x41
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2240      	movs	r2, #64	; 0x40
 8000abe:	2100      	movs	r1, #0
 8000ac0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e000      	b.n	8000ac8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000ac6:	2302      	movs	r3, #2
  }
}
 8000ac8:	0018      	movs	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b004      	add	sp, #16
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	fffff0ff 	.word	0xfffff0ff

08000ad4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad6:	b08b      	sub	sp, #44	; 0x2c
 8000ad8:	af06      	add	r7, sp, #24
 8000ada:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e0e4      	b.n	8000cb0 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a73      	ldr	r2, [pc, #460]	; (8000cb8 <HAL_PCD_Init+0x1e4>)
 8000aea:	5c9b      	ldrb	r3, [r3, r2]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d108      	bne.n	8000b04 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	238a      	movs	r3, #138	; 0x8a
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	2100      	movs	r1, #0
 8000afa:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	0018      	movs	r0, r3
 8000b00:	f006 fb3e 	bl	8007180 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a6c      	ldr	r2, [pc, #432]	; (8000cb8 <HAL_PCD_Init+0x1e4>)
 8000b08:	2103      	movs	r1, #3
 8000b0a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	0018      	movs	r0, r3
 8000b12:	f001 ff67 	bl	80029e4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b16:	230f      	movs	r3, #15
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	e043      	b.n	8000ba8 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b20:	200f      	movs	r0, #15
 8000b22:	183b      	adds	r3, r7, r0
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	2129      	movs	r1, #41	; 0x29
 8000b2a:	015b      	lsls	r3, r3, #5
 8000b2c:	18d3      	adds	r3, r2, r3
 8000b2e:	185b      	adds	r3, r3, r1
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b34:	183b      	adds	r3, r7, r0
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	2128      	movs	r1, #40	; 0x28
 8000b3c:	015b      	lsls	r3, r3, #5
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	185b      	adds	r3, r3, r1
 8000b42:	183a      	adds	r2, r7, r0
 8000b44:	7812      	ldrb	r2, [r2, #0]
 8000b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b48:	183b      	adds	r3, r7, r0
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	183a      	adds	r2, r7, r0
 8000b4e:	7812      	ldrb	r2, [r2, #0]
 8000b50:	b291      	uxth	r1, r2
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	015b      	lsls	r3, r3, #5
 8000b56:	18d3      	adds	r3, r2, r3
 8000b58:	3336      	adds	r3, #54	; 0x36
 8000b5a:	1c0a      	adds	r2, r1, #0
 8000b5c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b5e:	183b      	adds	r3, r7, r0
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	212b      	movs	r1, #43	; 0x2b
 8000b66:	015b      	lsls	r3, r3, #5
 8000b68:	18d3      	adds	r3, r2, r3
 8000b6a:	185b      	adds	r3, r3, r1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b70:	183b      	adds	r3, r7, r0
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	015b      	lsls	r3, r3, #5
 8000b78:	18d3      	adds	r3, r2, r3
 8000b7a:	3338      	adds	r3, #56	; 0x38
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b80:	183b      	adds	r3, r7, r0
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	015b      	lsls	r3, r3, #5
 8000b88:	18d3      	adds	r3, r2, r3
 8000b8a:	333c      	adds	r3, #60	; 0x3c
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b90:	183b      	adds	r3, r7, r0
 8000b92:	781a      	ldrb	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3202      	adds	r2, #2
 8000b98:	0152      	lsls	r2, r2, #5
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b9e:	183b      	adds	r3, r7, r0
 8000ba0:	781a      	ldrb	r2, [r3, #0]
 8000ba2:	183b      	adds	r3, r7, r0
 8000ba4:	3201      	adds	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	230f      	movs	r3, #15
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d3b4      	bcc.n	8000b20 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	e03f      	b.n	8000c40 <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000bc0:	200f      	movs	r0, #15
 8000bc2:	183b      	adds	r3, r7, r0
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	232a      	movs	r3, #42	; 0x2a
 8000bca:	33ff      	adds	r3, #255	; 0xff
 8000bcc:	0152      	lsls	r2, r2, #5
 8000bce:	188a      	adds	r2, r1, r2
 8000bd0:	18d3      	adds	r3, r2, r3
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000bd6:	183b      	adds	r3, r7, r0
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	2394      	movs	r3, #148	; 0x94
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	0152      	lsls	r2, r2, #5
 8000be2:	188a      	adds	r2, r1, r2
 8000be4:	18d3      	adds	r3, r2, r3
 8000be6:	183a      	adds	r2, r7, r0
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000bec:	183b      	adds	r3, r7, r0
 8000bee:	781a      	ldrb	r2, [r3, #0]
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	232c      	movs	r3, #44	; 0x2c
 8000bf4:	33ff      	adds	r3, #255	; 0xff
 8000bf6:	0152      	lsls	r2, r2, #5
 8000bf8:	188a      	adds	r2, r1, r2
 8000bfa:	18d3      	adds	r3, r2, r3
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c00:	183b      	adds	r3, r7, r0
 8000c02:	781a      	ldrb	r2, [r3, #0]
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	239c      	movs	r3, #156	; 0x9c
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	0152      	lsls	r2, r2, #5
 8000c0c:	188a      	adds	r2, r1, r2
 8000c0e:	18d3      	adds	r3, r2, r3
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c14:	183b      	adds	r3, r7, r0
 8000c16:	781a      	ldrb	r2, [r3, #0]
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	239e      	movs	r3, #158	; 0x9e
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	0152      	lsls	r2, r2, #5
 8000c20:	188a      	adds	r2, r1, r2
 8000c22:	18d3      	adds	r3, r2, r3
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c28:	183b      	adds	r3, r7, r0
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	320a      	adds	r2, #10
 8000c30:	0152      	lsls	r2, r2, #5
 8000c32:	2100      	movs	r1, #0
 8000c34:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c36:	183b      	adds	r3, r7, r0
 8000c38:	781a      	ldrb	r2, [r3, #0]
 8000c3a:	183b      	adds	r3, r7, r0
 8000c3c:	3201      	adds	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	230f      	movs	r3, #15
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d3b8      	bcc.n	8000bc0 <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	466a      	mov	r2, sp
 8000c56:	0011      	movs	r1, r2
 8000c58:	001a      	movs	r2, r3
 8000c5a:	3210      	adds	r2, #16
 8000c5c:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000c5e:	c170      	stmia	r1!, {r4, r5, r6}
 8000c60:	ca30      	ldmia	r2!, {r4, r5}
 8000c62:	c130      	stmia	r1!, {r4, r5}
 8000c64:	6859      	ldr	r1, [r3, #4]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	f001 fedb 	bl	8002a24 <USB_DevInit>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d005      	beq.n	8000c7e <HAL_PCD_Init+0x1aa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_PCD_Init+0x1e4>)
 8000c76:	2102      	movs	r1, #2
 8000c78:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e018      	b.n	8000cb0 <HAL_PCD_Init+0x1dc>
  }

  hpcd->USB_Address = 0U;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2224      	movs	r2, #36	; 0x24
 8000c82:	2100      	movs	r1, #0
 8000c84:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <HAL_PCD_Init+0x1e4>)
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d103      	bne.n	8000c9e <HAL_PCD_Init+0x1ca>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f000 ff2e 	bl	8001afa <HAL_PCDEx_ActivateLPM>
  }


  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a1b      	ldr	r3, [r3, #32]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d103      	bne.n	8000cae <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f000 ff01 	bl	8001ab0 <HAL_PCDEx_ActivateBCD>
  }

  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b005      	add	sp, #20
 8000cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb8:	00000229 	.word	0x00000229

08000cbc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	238a      	movs	r3, #138	; 0x8a
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d101      	bne.n	8000cd4 <HAL_PCD_Start+0x18>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	e014      	b.n	8000cfe <HAL_PCD_Start+0x42>
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	238a      	movs	r3, #138	; 0x8a
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	2101      	movs	r1, #1
 8000cdc:	54d1      	strb	r1, [r2, r3]
  (void)USB_DevConnect(hpcd->Instance);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f002 fec6 	bl	8003a74 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	0018      	movs	r0, r3
 8000cee:	f001 fe5f 	bl	80029b0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	238a      	movs	r3, #138	; 0x8a
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	0018      	movs	r0, r3
 8000d16:	f002 fec3 	bl	8003aa0 <USB_ReadInterrupts>
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	021b      	lsls	r3, r3, #8
 8000d20:	401a      	ands	r2, r3
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d103      	bne.n	8000d32 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f000 fbaf 	bl	8001490 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	0018      	movs	r0, r3
 8000d38:	f002 feb2 	bl	8003aa0 <USB_ReadInterrupts>
 8000d3c:	0002      	movs	r2, r0
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	401a      	ands	r2, r3
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d114      	bne.n	8000d76 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2244      	movs	r2, #68	; 0x44
 8000d52:	5a9b      	ldrh	r3, [r3, r2]
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	49a8      	ldr	r1, [pc, #672]	; (8000ffc <HAL_PCD_IRQHandler+0x2f4>)
 8000d5c:	400a      	ands	r2, r1
 8000d5e:	b291      	uxth	r1, r2
 8000d60:	2244      	movs	r2, #68	; 0x44
 8000d62:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	0018      	movs	r0, r3
 8000d68:	f006 fa86 	bl	8007278 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2100      	movs	r1, #0
 8000d70:	0018      	movs	r0, r3
 8000d72:	f000 f951 	bl	8001018 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f002 fe90 	bl	8003aa0 <USB_ReadInterrupts>
 8000d80:	0002      	movs	r2, r0
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	01db      	lsls	r3, r3, #7
 8000d86:	401a      	ands	r2, r3
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	01db      	lsls	r3, r3, #7
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d10b      	bne.n	8000da8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2244      	movs	r2, #68	; 0x44
 8000d96:	5a9b      	ldrh	r3, [r3, r2]
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4998      	ldr	r1, [pc, #608]	; (8001000 <HAL_PCD_IRQHandler+0x2f8>)
 8000da0:	400a      	ands	r2, r1
 8000da2:	b291      	uxth	r1, r2
 8000da4:	2244      	movs	r2, #68	; 0x44
 8000da6:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	0018      	movs	r0, r3
 8000dae:	f002 fe77 	bl	8003aa0 <USB_ReadInterrupts>
 8000db2:	0002      	movs	r2, r0
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	019b      	lsls	r3, r3, #6
 8000db8:	401a      	ands	r2, r3
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	019b      	lsls	r3, r3, #6
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d10b      	bne.n	8000dda <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2244      	movs	r2, #68	; 0x44
 8000dc8:	5a9b      	ldrh	r3, [r3, r2]
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	498c      	ldr	r1, [pc, #560]	; (8001004 <HAL_PCD_IRQHandler+0x2fc>)
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	b291      	uxth	r1, r2
 8000dd6:	2244      	movs	r2, #68	; 0x44
 8000dd8:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	0018      	movs	r0, r3
 8000de0:	f002 fe5e 	bl	8003aa0 <USB_ReadInterrupts>
 8000de4:	0002      	movs	r2, r0
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	015b      	lsls	r3, r3, #5
 8000dea:	401a      	ands	r2, r3
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	015b      	lsls	r3, r3, #5
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d137      	bne.n	8000e64 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2240      	movs	r2, #64	; 0x40
 8000dfa:	5a9b      	ldrh	r3, [r3, r2]
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2104      	movs	r1, #4
 8000e04:	438a      	bics	r2, r1
 8000e06:	b291      	uxth	r1, r2
 8000e08:	2240      	movs	r2, #64	; 0x40
 8000e0a:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2240      	movs	r2, #64	; 0x40
 8000e12:	5a9b      	ldrh	r3, [r3, r2]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2108      	movs	r1, #8
 8000e1c:	438a      	bics	r2, r1
 8000e1e:	b291      	uxth	r1, r2
 8000e20:	2240      	movs	r2, #64	; 0x40
 8000e22:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	2398      	movs	r3, #152	; 0x98
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	5cd3      	ldrb	r3, [r2, r3]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d109      	bne.n	8000e44 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	2398      	movs	r3, #152	; 0x98
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	2100      	movs	r1, #0
 8000e38:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 fe85 	bl	8001b4e <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	0018      	movs	r0, r3
 8000e48:	f006 fa56 	bl	80072f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2244      	movs	r2, #68	; 0x44
 8000e52:	5a9b      	ldrh	r3, [r3, r2]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	496b      	ldr	r1, [pc, #428]	; (8001008 <HAL_PCD_IRQHandler+0x300>)
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	b291      	uxth	r1, r2
 8000e60:	2244      	movs	r2, #68	; 0x44
 8000e62:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f002 fe19 	bl	8003aa0 <USB_ReadInterrupts>
 8000e6e:	0002      	movs	r2, r0
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	401a      	ands	r2, r3
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	011b      	lsls	r3, r3, #4
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d134      	bne.n	8000ee8 <HAL_PCD_IRQHandler+0x1e0>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2240      	movs	r2, #64	; 0x40
 8000e84:	5a9b      	ldrh	r3, [r3, r2]
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2108      	movs	r1, #8
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	b291      	uxth	r1, r2
 8000e92:	2240      	movs	r2, #64	; 0x40
 8000e94:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2244      	movs	r2, #68	; 0x44
 8000e9c:	5a9b      	ldrh	r3, [r3, r2]
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4959      	ldr	r1, [pc, #356]	; (800100c <HAL_PCD_IRQHandler+0x304>)
 8000ea6:	400a      	ands	r2, r1
 8000ea8:	b291      	uxth	r1, r2
 8000eaa:	2244      	movs	r2, #68	; 0x44
 8000eac:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2240      	movs	r2, #64	; 0x40
 8000eb4:	5a9b      	ldrh	r3, [r3, r2]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	b291      	uxth	r1, r2
 8000ec2:	2240      	movs	r2, #64	; 0x40
 8000ec4:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f002 fde8 	bl	8003aa0 <USB_ReadInterrupts>
 8000ed0:	0002      	movs	r2, r0
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	015b      	lsls	r3, r3, #5
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	015b      	lsls	r3, r3, #5
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d003      	beq.n	8000ee8 <HAL_PCD_IRQHandler+0x1e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f006 f9ec 	bl	80072c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	0018      	movs	r0, r3
 8000eee:	f002 fdd7 	bl	8003aa0 <USB_ReadInterrupts>
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b80      	cmp	r3, #128	; 0x80
 8000efa:	d145      	bne.n	8000f88 <HAL_PCD_IRQHandler+0x280>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2244      	movs	r2, #68	; 0x44
 8000f02:	5a9b      	ldrh	r3, [r3, r2]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2180      	movs	r1, #128	; 0x80
 8000f0c:	438a      	bics	r2, r1
 8000f0e:	b291      	uxth	r1, r2
 8000f10:	2244      	movs	r2, #68	; 0x44
 8000f12:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	2398      	movs	r3, #152	; 0x98
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	5cd3      	ldrb	r3, [r2, r3]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d12f      	bne.n	8000f80 <HAL_PCD_IRQHandler+0x278>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2240      	movs	r2, #64	; 0x40
 8000f26:	5a9b      	ldrh	r3, [r3, r2]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2104      	movs	r1, #4
 8000f30:	430a      	orrs	r2, r1
 8000f32:	b291      	uxth	r1, r2
 8000f34:	2240      	movs	r2, #64	; 0x40
 8000f36:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2240      	movs	r2, #64	; 0x40
 8000f3e:	5a9b      	ldrh	r3, [r3, r2]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2108      	movs	r1, #8
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	b291      	uxth	r1, r2
 8000f4c:	2240      	movs	r2, #64	; 0x40
 8000f4e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	2398      	movs	r3, #152	; 0x98
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	2101      	movs	r1, #1
 8000f58:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2254      	movs	r2, #84	; 0x54
 8000f60:	5a9b      	ldrh	r3, [r3, r2]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	223c      	movs	r2, #60	; 0x3c
 8000f68:	4013      	ands	r3, r2
 8000f6a:	0019      	movs	r1, r3
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	2399      	movs	r3, #153	; 0x99
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2101      	movs	r1, #1
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f000 fde8 	bl	8001b4e <HAL_PCDEx_LPM_Callback>
 8000f7e:	e003      	b.n	8000f88 <HAL_PCD_IRQHandler+0x280>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	0018      	movs	r0, r3
 8000f84:	f006 f99c 	bl	80072c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f002 fd87 	bl	8003aa0 <USB_ReadInterrupts>
 8000f92:	0002      	movs	r2, r0
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	401a      	ands	r2, r3
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d10f      	bne.n	8000fc2 <HAL_PCD_IRQHandler+0x2ba>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2244      	movs	r2, #68	; 0x44
 8000fa8:	5a9b      	ldrh	r3, [r3, r2]
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4917      	ldr	r1, [pc, #92]	; (8001010 <HAL_PCD_IRQHandler+0x308>)
 8000fb2:	400a      	ands	r2, r1
 8000fb4:	b291      	uxth	r1, r2
 8000fb6:	2244      	movs	r2, #68	; 0x44
 8000fb8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f006 f94c 	bl	800725a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f002 fd6a 	bl	8003aa0 <USB_ReadInterrupts>
 8000fcc:	0002      	movs	r2, r0
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d10b      	bne.n	8000ff4 <HAL_PCD_IRQHandler+0x2ec>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2244      	movs	r2, #68	; 0x44
 8000fe2:	5a9b      	ldrh	r3, [r3, r2]
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	490a      	ldr	r1, [pc, #40]	; (8001014 <HAL_PCD_IRQHandler+0x30c>)
 8000fec:	400a      	ands	r2, r1
 8000fee:	b291      	uxth	r1, r2
 8000ff0:	2244      	movs	r2, #68	; 0x44
 8000ff2:	5299      	strh	r1, [r3, r2]
  }
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	fffffbff 	.word	0xfffffbff
 8001000:	ffffbfff 	.word	0xffffbfff
 8001004:	ffffdfff 	.word	0xffffdfff
 8001008:	ffffefff 	.word	0xffffefff
 800100c:	fffff7ff 	.word	0xfffff7ff
 8001010:	fffffdff 	.word	0xfffffdff
 8001014:	fffffeff 	.word	0xfffffeff

08001018 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	000a      	movs	r2, r1
 8001022:	1cfb      	adds	r3, r7, #3
 8001024:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	238a      	movs	r3, #138	; 0x8a
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	5cd3      	ldrb	r3, [r2, r3]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d101      	bne.n	8001036 <HAL_PCD_SetAddress+0x1e>
 8001032:	2302      	movs	r3, #2
 8001034:	e017      	b.n	8001066 <HAL_PCD_SetAddress+0x4e>
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	238a      	movs	r3, #138	; 0x8a
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	2101      	movs	r1, #1
 800103e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	1cfa      	adds	r2, r7, #3
 8001044:	2124      	movs	r1, #36	; 0x24
 8001046:	7812      	ldrb	r2, [r2, #0]
 8001048:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	1cfb      	adds	r3, r7, #3
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	0019      	movs	r1, r3
 8001054:	0010      	movs	r0, r2
 8001056:	f002 fcf9 	bl	8003a4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	238a      	movs	r3, #138	; 0x8a
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	2100      	movs	r1, #0
 8001062:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800106e:	b590      	push	{r4, r7, lr}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	000c      	movs	r4, r1
 8001078:	0010      	movs	r0, r2
 800107a:	0019      	movs	r1, r3
 800107c:	1cfb      	adds	r3, r7, #3
 800107e:	1c22      	adds	r2, r4, #0
 8001080:	701a      	strb	r2, [r3, #0]
 8001082:	003b      	movs	r3, r7
 8001084:	1c02      	adds	r2, r0, #0
 8001086:	801a      	strh	r2, [r3, #0]
 8001088:	1cbb      	adds	r3, r7, #2
 800108a:	1c0a      	adds	r2, r1, #0
 800108c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800108e:	230b      	movs	r3, #11
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001096:	1cfb      	adds	r3, r7, #3
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b25b      	sxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	da0c      	bge.n	80010ba <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010a0:	1cfb      	adds	r3, r7, #3
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2207      	movs	r2, #7
 80010a6:	4013      	ands	r3, r2
 80010a8:	015b      	lsls	r3, r3, #5
 80010aa:	3328      	adds	r3, #40	; 0x28
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	18d3      	adds	r3, r2, r3
 80010b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2201      	movs	r2, #1
 80010b6:	705a      	strb	r2, [r3, #1]
 80010b8:	e00c      	b.n	80010d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010ba:	1cfb      	adds	r3, r7, #3
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2207      	movs	r2, #7
 80010c0:	4013      	ands	r3, r2
 80010c2:	015b      	lsls	r3, r3, #5
 80010c4:	3329      	adds	r3, #41	; 0x29
 80010c6:	33ff      	adds	r3, #255	; 0xff
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	18d3      	adds	r3, r2, r3
 80010cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010d4:	1cfb      	adds	r3, r7, #3
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2207      	movs	r2, #7
 80010da:	4013      	ands	r3, r2
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010e2:	003b      	movs	r3, r7
 80010e4:	881a      	ldrh	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1cba      	adds	r2, r7, #2
 80010ee:	7812      	ldrb	r2, [r2, #0]
 80010f0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	785b      	ldrb	r3, [r3, #1]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d004      	beq.n	8001104 <HAL_PCD_EP_Open+0x96>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001104:	1cbb      	adds	r3, r7, #2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d102      	bne.n	8001112 <HAL_PCD_EP_Open+0xa4>
  {
    ep->data_pid_start = 0U;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2200      	movs	r2, #0
 8001110:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	238a      	movs	r3, #138	; 0x8a
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	5cd3      	ldrb	r3, [r2, r3]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d101      	bne.n	8001122 <HAL_PCD_EP_Open+0xb4>
 800111e:	2302      	movs	r3, #2
 8001120:	e013      	b.n	800114a <HAL_PCD_EP_Open+0xdc>
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	238a      	movs	r3, #138	; 0x8a
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	2101      	movs	r1, #1
 800112a:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	0011      	movs	r1, r2
 8001134:	0018      	movs	r0, r3
 8001136:	f001 fca5 	bl	8002a84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	238a      	movs	r3, #138	; 0x8a
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	2100      	movs	r1, #0
 8001142:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001144:	230b      	movs	r3, #11
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	781b      	ldrb	r3, [r3, #0]
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b005      	add	sp, #20
 8001150:	bd90      	pop	{r4, r7, pc}

08001152 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	000a      	movs	r2, r1
 800115c:	1cfb      	adds	r3, r7, #3
 800115e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001160:	1cfb      	adds	r3, r7, #3
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b25b      	sxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	da0c      	bge.n	8001184 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800116a:	1cfb      	adds	r3, r7, #3
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2207      	movs	r2, #7
 8001170:	4013      	ands	r3, r2
 8001172:	015b      	lsls	r3, r3, #5
 8001174:	3328      	adds	r3, #40	; 0x28
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	18d3      	adds	r3, r2, r3
 800117a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2201      	movs	r2, #1
 8001180:	705a      	strb	r2, [r3, #1]
 8001182:	e00c      	b.n	800119e <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001184:	1cfb      	adds	r3, r7, #3
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2207      	movs	r2, #7
 800118a:	4013      	ands	r3, r2
 800118c:	015b      	lsls	r3, r3, #5
 800118e:	3329      	adds	r3, #41	; 0x29
 8001190:	33ff      	adds	r3, #255	; 0xff
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	18d3      	adds	r3, r2, r3
 8001196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2200      	movs	r2, #0
 800119c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800119e:	1cfb      	adds	r3, r7, #3
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2207      	movs	r2, #7
 80011a4:	4013      	ands	r3, r2
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	238a      	movs	r3, #138	; 0x8a
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d101      	bne.n	80011bc <HAL_PCD_EP_Close+0x6a>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e011      	b.n	80011e0 <HAL_PCD_EP_Close+0x8e>
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	238a      	movs	r3, #138	; 0x8a
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	2101      	movs	r1, #1
 80011c4:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	0011      	movs	r1, r2
 80011ce:	0018      	movs	r0, r3
 80011d0:	f001 ff48 	bl	8003064 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	238a      	movs	r3, #138	; 0x8a
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	2100      	movs	r1, #0
 80011dc:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b004      	add	sp, #16
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	200b      	movs	r0, #11
 80011f6:	183b      	adds	r3, r7, r0
 80011f8:	1c0a      	adds	r2, r1, #0
 80011fa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011fc:	0001      	movs	r1, r0
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2207      	movs	r2, #7
 8001204:	4013      	ands	r3, r2
 8001206:	015b      	lsls	r3, r3, #5
 8001208:	3329      	adds	r3, #41	; 0x29
 800120a:	33ff      	adds	r3, #255	; 0xff
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	18d3      	adds	r3, r2, r3
 8001210:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2200      	movs	r2, #0
 8001228:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800122a:	187b      	adds	r3, r7, r1
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2207      	movs	r2, #7
 8001230:	4013      	ands	r3, r2
 8001232:	b2da      	uxtb	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001238:	187b      	adds	r3, r7, r1
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2207      	movs	r2, #7
 800123e:	4013      	ands	r3, r2
 8001240:	d107      	bne.n	8001252 <HAL_PCD_EP_Receive+0x6a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	0011      	movs	r1, r2
 800124a:	0018      	movs	r0, r3
 800124c:	f002 f880 	bl	8003350 <USB_EPStartXfer>
 8001250:	e006      	b.n	8001260 <HAL_PCD_EP_Receive+0x78>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	0011      	movs	r1, r2
 800125a:	0018      	movs	r0, r3
 800125c:	f002 f878 	bl	8003350 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	0018      	movs	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	b006      	add	sp, #24
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	000a      	movs	r2, r1
 8001274:	1cfb      	adds	r3, r7, #3
 8001276:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001278:	1cfb      	adds	r3, r7, #3
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2207      	movs	r2, #7
 800127e:	4013      	ands	r3, r2
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	330a      	adds	r3, #10
 8001284:	015b      	lsls	r3, r3, #5
 8001286:	18d3      	adds	r3, r2, r3
 8001288:	3304      	adds	r3, #4
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	b002      	add	sp, #8
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	200b      	movs	r0, #11
 80012a2:	183b      	adds	r3, r7, r0
 80012a4:	1c0a      	adds	r2, r1, #0
 80012a6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012a8:	0001      	movs	r1, r0
 80012aa:	187b      	adds	r3, r7, r1
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2207      	movs	r2, #7
 80012b0:	4013      	ands	r3, r2
 80012b2:	015b      	lsls	r3, r3, #5
 80012b4:	3328      	adds	r3, #40	; 0x28
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	18d3      	adds	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	2201      	movs	r2, #1
 80012d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2207      	movs	r2, #7
 80012da:	4013      	ands	r3, r2
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012e2:	187b      	adds	r3, r7, r1
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2207      	movs	r2, #7
 80012e8:	4013      	ands	r3, r2
 80012ea:	d107      	bne.n	80012fc <HAL_PCD_EP_Transmit+0x68>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	0011      	movs	r1, r2
 80012f4:	0018      	movs	r0, r3
 80012f6:	f002 f82b 	bl	8003350 <USB_EPStartXfer>
 80012fa:	e006      	b.n	800130a <HAL_PCD_EP_Transmit+0x76>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	0011      	movs	r1, r2
 8001304:	0018      	movs	r0, r3
 8001306:	f002 f823 	bl	8003350 <USB_EPStartXfer>
  }

  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	b006      	add	sp, #24
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	000a      	movs	r2, r1
 800131e:	1cfb      	adds	r3, r7, #3
 8001320:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001322:	1cfb      	adds	r3, r7, #3
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2207      	movs	r2, #7
 8001328:	401a      	ands	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	429a      	cmp	r2, r3
 8001330:	d901      	bls.n	8001336 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e050      	b.n	80013d8 <HAL_PCD_EP_SetStall+0xc4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001336:	1cfb      	adds	r3, r7, #3
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b25b      	sxtb	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	da0c      	bge.n	800135a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001340:	1cfb      	adds	r3, r7, #3
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2207      	movs	r2, #7
 8001346:	4013      	ands	r3, r2
 8001348:	015b      	lsls	r3, r3, #5
 800134a:	3328      	adds	r3, #40	; 0x28
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	18d3      	adds	r3, r2, r3
 8001350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2201      	movs	r2, #1
 8001356:	705a      	strb	r2, [r3, #1]
 8001358:	e00a      	b.n	8001370 <HAL_PCD_EP_SetStall+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800135a:	1cfb      	adds	r3, r7, #3
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	015b      	lsls	r3, r3, #5
 8001360:	3329      	adds	r3, #41	; 0x29
 8001362:	33ff      	adds	r3, #255	; 0xff
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	18d3      	adds	r3, r2, r3
 8001368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2201      	movs	r2, #1
 8001374:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001376:	1cfb      	adds	r3, r7, #3
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2207      	movs	r2, #7
 800137c:	4013      	ands	r3, r2
 800137e:	b2da      	uxtb	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	238a      	movs	r3, #138	; 0x8a
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	5cd3      	ldrb	r3, [r2, r3]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_PCD_EP_SetStall+0x80>
 8001390:	2302      	movs	r3, #2
 8001392:	e021      	b.n	80013d8 <HAL_PCD_EP_SetStall+0xc4>
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	238a      	movs	r3, #138	; 0x8a
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	2101      	movs	r1, #1
 800139c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	0011      	movs	r1, r2
 80013a6:	0018      	movs	r0, r3
 80013a8:	f002 fa82 	bl	80038b0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013ac:	1cfb      	adds	r3, r7, #3
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2207      	movs	r2, #7
 80013b2:	4013      	ands	r3, r2
 80013b4:	d10a      	bne.n	80013cc <HAL_PCD_EP_SetStall+0xb8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	218c      	movs	r1, #140	; 0x8c
 80013be:	0089      	lsls	r1, r1, #2
 80013c0:	468c      	mov	ip, r1
 80013c2:	4463      	add	r3, ip
 80013c4:	0019      	movs	r1, r3
 80013c6:	0010      	movs	r0, r2
 80013c8:	f002 fb78 	bl	8003abc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	238a      	movs	r3, #138	; 0x8a
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	2100      	movs	r1, #0
 80013d4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b004      	add	sp, #16
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	000a      	movs	r2, r1
 80013ea:	1cfb      	adds	r3, r7, #3
 80013ec:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013ee:	1cfb      	adds	r3, r7, #3
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	220f      	movs	r2, #15
 80013f4:	401a      	ands	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d901      	bls.n	8001402 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e042      	b.n	8001488 <HAL_PCD_EP_ClrStall+0xa8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001402:	1cfb      	adds	r3, r7, #3
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b25b      	sxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	da0c      	bge.n	8001426 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800140c:	1cfb      	adds	r3, r7, #3
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2207      	movs	r2, #7
 8001412:	4013      	ands	r3, r2
 8001414:	015b      	lsls	r3, r3, #5
 8001416:	3328      	adds	r3, #40	; 0x28
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	18d3      	adds	r3, r2, r3
 800141c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2201      	movs	r2, #1
 8001422:	705a      	strb	r2, [r3, #1]
 8001424:	e00c      	b.n	8001440 <HAL_PCD_EP_ClrStall+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001426:	1cfb      	adds	r3, r7, #3
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2207      	movs	r2, #7
 800142c:	4013      	ands	r3, r2
 800142e:	015b      	lsls	r3, r3, #5
 8001430:	3329      	adds	r3, #41	; 0x29
 8001432:	33ff      	adds	r3, #255	; 0xff
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	18d3      	adds	r3, r2, r3
 8001438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2200      	movs	r2, #0
 800143e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2200      	movs	r2, #0
 8001444:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001446:	1cfb      	adds	r3, r7, #3
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2207      	movs	r2, #7
 800144c:	4013      	ands	r3, r2
 800144e:	b2da      	uxtb	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	238a      	movs	r3, #138	; 0x8a
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	5cd3      	ldrb	r3, [r2, r3]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_PCD_EP_ClrStall+0x84>
 8001460:	2302      	movs	r3, #2
 8001462:	e011      	b.n	8001488 <HAL_PCD_EP_ClrStall+0xa8>
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	238a      	movs	r3, #138	; 0x8a
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	2101      	movs	r1, #1
 800146c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	0011      	movs	r1, r2
 8001476:	0018      	movs	r0, r3
 8001478:	f002 fa5c 	bl	8003934 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	238a      	movs	r3, #138	; 0x8a
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	2100      	movs	r1, #0
 8001484:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	b004      	add	sp, #16
 800148e:	bd80      	pop	{r7, pc}

08001490 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001498:	e2a7      	b.n	80019ea <PCD_EP_ISR_Handler+0x55a>
  {
    wIstr = hpcd->Instance->ISTR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	2016      	movs	r0, #22
 80014a0:	183b      	adds	r3, r7, r0
 80014a2:	2144      	movs	r1, #68	; 0x44
 80014a4:	5a52      	ldrh	r2, [r2, r1]
 80014a6:	801a      	strh	r2, [r3, #0]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80014a8:	183b      	adds	r3, r7, r0
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	2015      	movs	r0, #21
 80014b0:	183b      	adds	r3, r7, r0
 80014b2:	210f      	movs	r1, #15
 80014b4:	400a      	ands	r2, r1
 80014b6:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80014b8:	183b      	adds	r3, r7, r0
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d000      	beq.n	80014c2 <PCD_EP_ISR_Handler+0x32>
 80014c0:	e135      	b.n	800172e <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80014c2:	2316      	movs	r3, #22
 80014c4:	18fb      	adds	r3, r7, r3
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	2210      	movs	r2, #16
 80014ca:	4013      	ands	r3, r2
 80014cc:	d14e      	bne.n	800156c <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	4ade      	ldr	r2, [pc, #888]	; (8001850 <PCD_EP_ISR_Handler+0x3c0>)
 80014d8:	4013      	ands	r3, r2
 80014da:	b29c      	uxth	r4, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4adc      	ldr	r2, [pc, #880]	; (8001854 <PCD_EP_ISR_Handler+0x3c4>)
 80014e2:	4322      	orrs	r2, r4
 80014e4:	b292      	uxth	r2, r2
 80014e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3328      	adds	r3, #40	; 0x28
 80014ec:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2250      	movs	r2, #80	; 0x50
 80014f4:	5a9b      	ldrh	r3, [r3, r2]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	001a      	movs	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	18d2      	adds	r2, r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	18d3      	adds	r3, r2, r3
 8001508:	4ad3      	ldr	r2, [pc, #844]	; (8001858 <PCD_EP_ISR_Handler+0x3c8>)
 800150a:	4694      	mov	ip, r2
 800150c:	4463      	add	r3, ip
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	059b      	lsls	r3, r3, #22
 8001512:	0d9a      	lsrs	r2, r3, #22
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	695a      	ldr	r2, [r3, #20]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	18d2      	adds	r2, r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2100      	movs	r1, #0
 800152a:	0018      	movs	r0, r3
 800152c:	f005 fe7a 	bl	8007224 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2224      	movs	r2, #36	; 0x24
 8001534:	5c9b      	ldrb	r3, [r3, r2]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <PCD_EP_ISR_Handler+0xae>
 800153c:	e255      	b.n	80019ea <PCD_EP_ISR_Handler+0x55a>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d000      	beq.n	8001548 <PCD_EP_ISR_Handler+0xb8>
 8001546:	e250      	b.n	80019ea <PCD_EP_ISR_Handler+0x55a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2224      	movs	r2, #36	; 0x24
 800154c:	5c9b      	ldrb	r3, [r3, r2]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	4252      	negs	r2, r2
 8001554:	4313      	orrs	r3, r2
 8001556:	b2da      	uxtb	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	b291      	uxth	r1, r2
 800155e:	224c      	movs	r2, #76	; 0x4c
 8001560:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2224      	movs	r2, #36	; 0x24
 8001566:	2100      	movs	r1, #0
 8001568:	5499      	strb	r1, [r3, r2]
 800156a:	e23e      	b.n	80019ea <PCD_EP_ISR_Handler+0x55a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3329      	adds	r3, #41	; 0x29
 8001570:	33ff      	adds	r3, #255	; 0xff
 8001572:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2112      	movs	r1, #18
 800157a:	187b      	adds	r3, r7, r1
 800157c:	8812      	ldrh	r2, [r2, #0]
 800157e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001580:	187b      	adds	r3, r7, r1
 8001582:	881a      	ldrh	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	4013      	ands	r3, r2
 800158a:	d033      	beq.n	80015f4 <PCD_EP_ISR_Handler+0x164>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2250      	movs	r2, #80	; 0x50
 8001592:	5a9b      	ldrh	r3, [r3, r2]
 8001594:	b29b      	uxth	r3, r3
 8001596:	001a      	movs	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	18d2      	adds	r2, r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	18d3      	adds	r3, r2, r3
 80015a6:	4aad      	ldr	r2, [pc, #692]	; (800185c <PCD_EP_ISR_Handler+0x3cc>)
 80015a8:	4694      	mov	ip, r2
 80015aa:	4463      	add	r3, ip
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	059b      	lsls	r3, r3, #22
 80015b0:	0d9a      	lsrs	r2, r3, #22
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	228c      	movs	r2, #140	; 0x8c
 80015be:	0092      	lsls	r2, r2, #2
 80015c0:	1899      	adds	r1, r3, r2
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	88da      	ldrh	r2, [r3, #6]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	f002 fac3 	bl	8003b56 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	4aa1      	ldr	r2, [pc, #644]	; (8001860 <PCD_EP_ISR_Handler+0x3d0>)
 80015da:	4013      	ands	r3, r2
 80015dc:	b29c      	uxth	r4, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	4322      	orrs	r2, r4
 80015e6:	b292      	uxth	r2, r2
 80015e8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	0018      	movs	r0, r3
 80015ee:	f005 fde7 	bl	80071c0 <HAL_PCD_SetupStageCallback>
 80015f2:	e1fa      	b.n	80019ea <PCD_EP_ISR_Handler+0x55a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015f4:	2312      	movs	r3, #18
 80015f6:	18fb      	adds	r3, r7, r3
 80015f8:	2200      	movs	r2, #0
 80015fa:	5e9b      	ldrsh	r3, [r3, r2]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db00      	blt.n	8001602 <PCD_EP_ISR_Handler+0x172>
 8001600:	e1f3      	b.n	80019ea <PCD_EP_ISR_Handler+0x55a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	b29b      	uxth	r3, r3
 800160a:	4a95      	ldr	r2, [pc, #596]	; (8001860 <PCD_EP_ISR_Handler+0x3d0>)
 800160c:	4013      	ands	r3, r2
 800160e:	b29c      	uxth	r4, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	4322      	orrs	r2, r4
 8001618:	b292      	uxth	r2, r2
 800161a:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2250      	movs	r2, #80	; 0x50
 8001622:	5a9b      	ldrh	r3, [r3, r2]
 8001624:	b29b      	uxth	r3, r3
 8001626:	001a      	movs	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	18d2      	adds	r2, r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	4a89      	ldr	r2, [pc, #548]	; (800185c <PCD_EP_ISR_Handler+0x3cc>)
 8001638:	4694      	mov	ip, r2
 800163a:	4463      	add	r3, ip
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	059b      	lsls	r3, r3, #22
 8001640:	0d9a      	lsrs	r2, r3, #22
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 0U)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d011      	beq.n	8001672 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6959      	ldr	r1, [r3, #20]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	88da      	ldrh	r2, [r3, #6]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	b29b      	uxth	r3, r3
 8001660:	f002 fa79 	bl	8003b56 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	695a      	ldr	r2, [r3, #20]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	18d2      	adds	r2, r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	615a      	str	r2, [r3, #20]

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2100      	movs	r1, #0
 8001676:	0018      	movs	r0, r3
 8001678:	f005 fdb7 	bl	80071ea <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	001c      	movs	r4, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2250      	movs	r2, #80	; 0x50
 8001688:	5a9b      	ldrh	r3, [r3, r2]
 800168a:	b29b      	uxth	r3, r3
 800168c:	18e4      	adds	r4, r4, r3
 800168e:	4b73      	ldr	r3, [pc, #460]	; (800185c <PCD_EP_ISR_Handler+0x3cc>)
 8001690:	18e3      	adds	r3, r4, r3
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10e      	bne.n	80016ba <PCD_EP_ISR_Handler+0x22a>
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	4a70      	ldr	r2, [pc, #448]	; (8001864 <PCD_EP_ISR_Handler+0x3d4>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	801a      	strh	r2, [r3, #0]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	4a69      	ldr	r2, [pc, #420]	; (8001854 <PCD_EP_ISR_Handler+0x3c4>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	801a      	strh	r2, [r3, #0]
 80016b8:	e023      	b.n	8001702 <PCD_EP_ISR_Handler+0x272>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	2b3d      	cmp	r3, #61	; 0x3d
 80016c0:	d812      	bhi.n	80016e8 <PCD_EP_ISR_Handler+0x258>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2201      	movs	r2, #1
 80016d0:	4013      	ands	r3, r2
 80016d2:	d002      	beq.n	80016da <PCD_EP_ISR_Handler+0x24a>
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	3301      	adds	r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	029b      	lsls	r3, r3, #10
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	801a      	strh	r2, [r3, #0]
 80016e6:	e00c      	b.n	8001702 <PCD_EP_ISR_Handler+0x272>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	095b      	lsrs	r3, r3, #5
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	029b      	lsls	r3, r3, #10
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4a56      	ldr	r2, [pc, #344]	; (8001854 <PCD_EP_ISR_Handler+0x3c4>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	b29b      	uxth	r3, r3
 800170a:	4a57      	ldr	r2, [pc, #348]	; (8001868 <PCD_EP_ISR_Handler+0x3d8>)
 800170c:	4013      	ands	r3, r2
 800170e:	b29c      	uxth	r4, r3
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	015b      	lsls	r3, r3, #5
 8001714:	4063      	eors	r3, r4
 8001716:	b29c      	uxth	r4, r3
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	019b      	lsls	r3, r3, #6
 800171c:	4063      	eors	r3, r4
 800171e:	b29c      	uxth	r4, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a51      	ldr	r2, [pc, #324]	; (800186c <PCD_EP_ISR_Handler+0x3dc>)
 8001726:	4322      	orrs	r2, r4
 8001728:	b292      	uxth	r2, r2
 800172a:	801a      	strh	r2, [r3, #0]
 800172c:	e15d      	b.n	80019ea <PCD_EP_ISR_Handler+0x55a>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	001a      	movs	r2, r3
 8001734:	2315      	movs	r3, #21
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	18d2      	adds	r2, r2, r3
 800173e:	2112      	movs	r1, #18
 8001740:	187b      	adds	r3, r7, r1
 8001742:	8812      	ldrh	r2, [r2, #0]
 8001744:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001746:	187b      	adds	r3, r7, r1
 8001748:	2200      	movs	r2, #0
 800174a:	5e9b      	ldrsh	r3, [r3, r2]
 800174c:	2b00      	cmp	r3, #0
 800174e:	db00      	blt.n	8001752 <PCD_EP_ISR_Handler+0x2c2>
 8001750:	e0f5      	b.n	800193e <PCD_EP_ISR_Handler+0x4ae>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	001a      	movs	r2, r3
 8001758:	2115      	movs	r1, #21
 800175a:	187b      	adds	r3, r7, r1
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	18d3      	adds	r3, r2, r3
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	4a3e      	ldr	r2, [pc, #248]	; (8001860 <PCD_EP_ISR_Handler+0x3d0>)
 8001768:	4013      	ands	r3, r2
 800176a:	b29c      	uxth	r4, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	001a      	movs	r2, r3
 8001772:	187b      	adds	r3, r7, r1
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	18d3      	adds	r3, r2, r3
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	4322      	orrs	r2, r4
 800177e:	b292      	uxth	r2, r2
 8001780:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001782:	187b      	adds	r3, r7, r1
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	015b      	lsls	r3, r3, #5
 8001788:	3329      	adds	r3, #41	; 0x29
 800178a:	33ff      	adds	r3, #255	; 0xff
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	18d3      	adds	r3, r2, r3
 8001790:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	7b1b      	ldrb	r3, [r3, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d126      	bne.n	80017e8 <PCD_EP_ISR_Handler+0x358>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2250      	movs	r2, #80	; 0x50
 80017a0:	5a9b      	ldrh	r3, [r3, r2]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	001a      	movs	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	18d2      	adds	r2, r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	18d3      	adds	r3, r2, r3
 80017b4:	4a29      	ldr	r2, [pc, #164]	; (800185c <PCD_EP_ISR_Handler+0x3cc>)
 80017b6:	4694      	mov	ip, r2
 80017b8:	4463      	add	r3, ip
 80017ba:	881a      	ldrh	r2, [r3, #0]
 80017bc:	211e      	movs	r1, #30
 80017be:	187b      	adds	r3, r7, r1
 80017c0:	0592      	lsls	r2, r2, #22
 80017c2:	0d92      	lsrs	r2, r2, #22
 80017c4:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d100      	bne.n	80017d0 <PCD_EP_ISR_Handler+0x340>
 80017ce:	e08b      	b.n	80018e8 <PCD_EP_ISR_Handler+0x458>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6959      	ldr	r1, [r3, #20]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	88da      	ldrh	r2, [r3, #6]
 80017dc:	231e      	movs	r3, #30
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	f002 f9b8 	bl	8003b56 <USB_ReadPMA>
 80017e6:	e07f      	b.n	80018e8 <PCD_EP_ISR_Handler+0x458>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	001a      	movs	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	18d3      	adds	r3, r2, r3
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	001a      	movs	r2, r3
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	01db      	lsls	r3, r3, #7
 8001800:	4013      	ands	r3, r2
 8001802:	d035      	beq.n	8001870 <PCD_EP_ISR_Handler+0x3e0>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2250      	movs	r2, #80	; 0x50
 800180a:	5a9b      	ldrh	r3, [r3, r2]
 800180c:	b29b      	uxth	r3, r3
 800180e:	001a      	movs	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	18d2      	adds	r2, r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	18d3      	adds	r3, r2, r3
 800181e:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <PCD_EP_ISR_Handler+0x3c8>)
 8001820:	4694      	mov	ip, r2
 8001822:	4463      	add	r3, ip
 8001824:	881a      	ldrh	r2, [r3, #0]
 8001826:	211e      	movs	r1, #30
 8001828:	187b      	adds	r3, r7, r1
 800182a:	0592      	lsls	r2, r2, #22
 800182c:	0d92      	lsrs	r2, r2, #22
 800182e:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8001830:	187b      	adds	r3, r7, r1
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d040      	beq.n	80018ba <PCD_EP_ISR_Handler+0x42a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6959      	ldr	r1, [r3, #20]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	891a      	ldrh	r2, [r3, #8]
 8001844:	231e      	movs	r3, #30
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	f002 f984 	bl	8003b56 <USB_ReadPMA>
 800184e:	e034      	b.n	80018ba <PCD_EP_ISR_Handler+0x42a>
 8001850:	ffff8f0f 	.word	0xffff8f0f
 8001854:	ffff8000 	.word	0xffff8000
 8001858:	00000402 	.word	0x00000402
 800185c:	00000406 	.word	0x00000406
 8001860:	00000f8f 	.word	0x00000f8f
 8001864:	ffff83ff 	.word	0xffff83ff
 8001868:	ffffbf8f 	.word	0xffffbf8f
 800186c:	ffff8080 	.word	0xffff8080
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2250      	movs	r2, #80	; 0x50
 8001876:	5a9b      	ldrh	r3, [r3, r2]
 8001878:	b29b      	uxth	r3, r3
 800187a:	001a      	movs	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	18d2      	adds	r2, r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	18d3      	adds	r3, r2, r3
 800188a:	4a5f      	ldr	r2, [pc, #380]	; (8001a08 <PCD_EP_ISR_Handler+0x578>)
 800188c:	4694      	mov	ip, r2
 800188e:	4463      	add	r3, ip
 8001890:	881a      	ldrh	r2, [r3, #0]
 8001892:	211e      	movs	r1, #30
 8001894:	187b      	adds	r3, r7, r1
 8001896:	0592      	lsls	r2, r2, #22
 8001898:	0d92      	lsrs	r2, r2, #22
 800189a:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 800189c:	187b      	adds	r3, r7, r1
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00a      	beq.n	80018ba <PCD_EP_ISR_Handler+0x42a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6959      	ldr	r1, [r3, #20]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	895a      	ldrh	r2, [r3, #10]
 80018b0:	231e      	movs	r3, #30
 80018b2:	18fb      	adds	r3, r7, r3
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	f002 f94e 	bl	8003b56 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	001a      	movs	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	18d3      	adds	r3, r2, r3
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4a4f      	ldr	r2, [pc, #316]	; (8001a0c <PCD_EP_ISR_Handler+0x57c>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	b29c      	uxth	r4, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	001a      	movs	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	18d3      	adds	r3, r2, r3
 80018e0:	4a4b      	ldr	r2, [pc, #300]	; (8001a10 <PCD_EP_ISR_Handler+0x580>)
 80018e2:	4322      	orrs	r2, r4
 80018e4:	b292      	uxth	r2, r2
 80018e6:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	69da      	ldr	r2, [r3, #28]
 80018ec:	211e      	movs	r1, #30
 80018ee:	187b      	adds	r3, r7, r1
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	18d2      	adds	r2, r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	18d2      	adds	r2, r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d006      	beq.n	800191c <PCD_EP_ISR_Handler+0x48c>
 800190e:	231e      	movs	r3, #30
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	881a      	ldrh	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <PCD_EP_ISR_Handler+0x49c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0011      	movs	r1, r2
 8001924:	0018      	movs	r0, r3
 8001926:	f005 fc60 	bl	80071ea <HAL_PCD_DataOutStageCallback>
 800192a:	e008      	b.n	800193e <PCD_EP_ISR_Handler+0x4ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	7819      	ldrb	r1, [r3, #0]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fc55 	bl	80011e8 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800193e:	2312      	movs	r3, #18
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	2280      	movs	r2, #128	; 0x80
 8001946:	4013      	ands	r3, r2
 8001948:	d04f      	beq.n	80019ea <PCD_EP_ISR_Handler+0x55a>
      {
        ep = &hpcd->IN_ep[epindex];
 800194a:	2115      	movs	r1, #21
 800194c:	187b      	adds	r3, r7, r1
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	015b      	lsls	r3, r3, #5
 8001952:	3328      	adds	r3, #40	; 0x28
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	18d3      	adds	r3, r2, r3
 8001958:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	001a      	movs	r2, r3
 8001960:	187b      	adds	r3, r7, r1
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	18d3      	adds	r3, r2, r3
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	4a29      	ldr	r2, [pc, #164]	; (8001a14 <PCD_EP_ISR_Handler+0x584>)
 800196e:	4013      	ands	r3, r2
 8001970:	b29c      	uxth	r4, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	001a      	movs	r2, r3
 8001978:	187b      	adds	r3, r7, r1
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	18d3      	adds	r3, r2, r3
 8001980:	4a25      	ldr	r2, [pc, #148]	; (8001a18 <PCD_EP_ISR_Handler+0x588>)
 8001982:	4322      	orrs	r2, r4
 8001984:	b292      	uxth	r2, r2
 8001986:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2250      	movs	r2, #80	; 0x50
 800198e:	5a9b      	ldrh	r3, [r3, r2]
 8001990:	b29b      	uxth	r3, r3
 8001992:	001a      	movs	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	18d2      	adds	r2, r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	18d3      	adds	r3, r2, r3
 80019a2:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <PCD_EP_ISR_Handler+0x58c>)
 80019a4:	4694      	mov	ip, r2
 80019a6:	4463      	add	r3, ip
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	059b      	lsls	r3, r3, #22
 80019ac:	0d9a      	lsrs	r2, r3, #22
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	18d2      	adds	r2, r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d107      	bne.n	80019d8 <PCD_EP_ISR_Handler+0x548>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	781a      	ldrb	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	0011      	movs	r1, r2
 80019d0:	0018      	movs	r0, r3
 80019d2:	f005 fc27 	bl	8007224 <HAL_PCD_DataInStageCallback>
 80019d6:	e008      	b.n	80019ea <PCD_EP_ISR_Handler+0x55a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	7819      	ldrb	r1, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fc55 	bl	8001294 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2244      	movs	r2, #68	; 0x44
 80019f0:	5a9b      	ldrh	r3, [r3, r2]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	da00      	bge.n	80019fc <PCD_EP_ISR_Handler+0x56c>
 80019fa:	e54e      	b.n	800149a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	0018      	movs	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b009      	add	sp, #36	; 0x24
 8001a04:	bd90      	pop	{r4, r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	00000406 	.word	0x00000406
 8001a0c:	ffff8f8f 	.word	0xffff8f8f
 8001a10:	ffff80c0 	.word	0xffff80c0
 8001a14:	ffff8f0f 	.word	0xffff8f0f
 8001a18:	ffff8000 	.word	0xffff8000
 8001a1c:	00000402 	.word	0x00000402

08001a20 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	0008      	movs	r0, r1
 8001a2a:	0011      	movs	r1, r2
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	240a      	movs	r4, #10
 8001a30:	193b      	adds	r3, r7, r4
 8001a32:	1c02      	adds	r2, r0, #0
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	2308      	movs	r3, #8
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	1c0a      	adds	r2, r1, #0
 8001a3c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001a3e:	193b      	adds	r3, r7, r4
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	4013      	ands	r3, r2
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00a      	beq.n	8001a62 <HAL_PCDEx_PMAConfig+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a4c:	230a      	movs	r3, #10
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	2207      	movs	r2, #7
 8001a54:	4013      	ands	r3, r2
 8001a56:	015b      	lsls	r3, r3, #5
 8001a58:	3328      	adds	r3, #40	; 0x28
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	18d3      	adds	r3, r2, r3
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e008      	b.n	8001a74 <HAL_PCDEx_PMAConfig+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a62:	230a      	movs	r3, #10
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	015b      	lsls	r3, r3, #5
 8001a6a:	3329      	adds	r3, #41	; 0x29
 8001a6c:	33ff      	adds	r3, #255	; 0xff
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	18d3      	adds	r3, r2, r3
 8001a72:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001a74:	2308      	movs	r3, #8
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d107      	bne.n	8001a8e <HAL_PCDEx_PMAConfig+0x6e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2200      	movs	r2, #0
 8001a82:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	80da      	strh	r2, [r3, #6]
 8001a8c:	e00b      	b.n	8001aa6 <HAL_PCDEx_PMAConfig+0x86>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	2201      	movs	r2, #1
 8001a92:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	0c1b      	lsrs	r3, r3, #16
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b007      	add	sp, #28
 8001aae:	bd90      	pop	{r4, r7, pc}

08001ab0 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	239b      	movs	r3, #155	; 0x9b
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	50d1      	str	r1, [r2, r3]

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2258      	movs	r2, #88	; 0x58
 8001acc:	5a9b      	ldrh	r3, [r3, r2]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	b299      	uxth	r1, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2258      	movs	r2, #88	; 0x58
 8001ada:	5299      	strh	r1, [r3, r2]
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2258      	movs	r2, #88	; 0x58
 8001ae0:	5a9b      	ldrh	r3, [r3, r2]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	b299      	uxth	r1, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2258      	movs	r2, #88	; 0x58
 8001aee:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b004      	add	sp, #16
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	239a      	movs	r3, #154	; 0x9a
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	2101      	movs	r1, #1
 8001b10:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	2398      	movs	r3, #152	; 0x98
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	2100      	movs	r1, #0
 8001b1a:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2254      	movs	r2, #84	; 0x54
 8001b20:	5a9b      	ldrh	r3, [r3, r2]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	2201      	movs	r2, #1
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b299      	uxth	r1, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2254      	movs	r2, #84	; 0x54
 8001b2e:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2254      	movs	r2, #84	; 0x54
 8001b34:	5a9b      	ldrh	r3, [r3, r2]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	2202      	movs	r2, #2
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b299      	uxth	r1, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2254      	movs	r2, #84	; 0x54
 8001b42:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b004      	add	sp, #16
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	000a      	movs	r2, r1
 8001b58:	1cfb      	adds	r3, r7, #3
 8001b5a:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b002      	add	sp, #8
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	000a      	movs	r2, r1
 8001b6e:	1cfb      	adds	r3, r7, #3
 8001b70:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001b76:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_PWR_EnterSTOPMode+0x60>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	4393      	bics	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_PWR_EnterSTOPMode+0x60>)
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_PWR_EnterSTOPMode+0x64>)
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_PWR_EnterSTOPMode+0x64>)
 8001b98:	2104      	movs	r1, #4
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001b9e:	1cfb      	adds	r3, r7, #3
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_PWR_EnterSTOPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8001ba6:	bf30      	wfi
 8001ba8:	e002      	b.n	8001bb0 <HAL_PWR_EnterSTOPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8001baa:	bf40      	sev
  __ASM volatile ("wfe");
 8001bac:	bf20      	wfe
 8001bae:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_PWR_EnterSTOPMode+0x64>)
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <HAL_PWR_EnterSTOPMode+0x64>)
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	438a      	bics	r2, r1
 8001bba:	611a      	str	r2, [r3, #16]

}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b004      	add	sp, #16
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b5b0      	push	{r4, r5, r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f000 fbbc 	bl	8002358 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be0:	4bc8      	ldr	r3, [pc, #800]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	220c      	movs	r2, #12
 8001be6:	4013      	ands	r3, r2
 8001be8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bea:	4bc6      	ldr	r3, [pc, #792]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	025b      	lsls	r3, r3, #9
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d100      	bne.n	8001c02 <HAL_RCC_OscConfig+0x36>
 8001c00:	e07e      	b.n	8001d00 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d007      	beq.n	8001c18 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d112      	bne.n	8001c34 <HAL_RCC_OscConfig+0x68>
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	025b      	lsls	r3, r3, #9
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d10d      	bne.n	8001c34 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	4bba      	ldr	r3, [pc, #744]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	029b      	lsls	r3, r3, #10
 8001c20:	4013      	ands	r3, r2
 8001c22:	d100      	bne.n	8001c26 <HAL_RCC_OscConfig+0x5a>
 8001c24:	e06b      	b.n	8001cfe <HAL_RCC_OscConfig+0x132>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d167      	bne.n	8001cfe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f000 fb92 	bl	8002358 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	025b      	lsls	r3, r3, #9
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d107      	bne.n	8001c50 <HAL_RCC_OscConfig+0x84>
 8001c40:	4bb0      	ldr	r3, [pc, #704]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4baf      	ldr	r3, [pc, #700]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c46:	2180      	movs	r1, #128	; 0x80
 8001c48:	0249      	lsls	r1, r1, #9
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e027      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	23a0      	movs	r3, #160	; 0xa0
 8001c56:	02db      	lsls	r3, r3, #11
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d10e      	bne.n	8001c7a <HAL_RCC_OscConfig+0xae>
 8001c5c:	4ba9      	ldr	r3, [pc, #676]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4ba8      	ldr	r3, [pc, #672]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	02c9      	lsls	r1, r1, #11
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	4ba6      	ldr	r3, [pc, #664]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4ba5      	ldr	r3, [pc, #660]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c70:	2180      	movs	r1, #128	; 0x80
 8001c72:	0249      	lsls	r1, r1, #9
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e012      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c7a:	4ba2      	ldr	r3, [pc, #648]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4ba1      	ldr	r3, [pc, #644]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c80:	49a1      	ldr	r1, [pc, #644]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c82:	400a      	ands	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	4b9f      	ldr	r3, [pc, #636]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	025b      	lsls	r3, r3, #9
 8001c8e:	4013      	ands	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4b9b      	ldr	r3, [pc, #620]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b9a      	ldr	r3, [pc, #616]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c9a:	499c      	ldr	r1, [pc, #624]	; (8001f0c <HAL_RCC_OscConfig+0x340>)
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d015      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7fe fb10 	bl	80002cc <HAL_GetTick>
 8001cac:	0003      	movs	r3, r0
 8001cae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cb0:	e009      	b.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb2:	f7fe fb0b 	bl	80002cc <HAL_GetTick>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b64      	cmp	r3, #100	; 0x64
 8001cbe:	d902      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	f000 fb49 	bl	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cc6:	4b8f      	ldr	r3, [pc, #572]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	029b      	lsls	r3, r3, #10
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d0ef      	beq.n	8001cb2 <HAL_RCC_OscConfig+0xe6>
 8001cd2:	e015      	b.n	8001d00 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7fe fafa 	bl	80002cc <HAL_GetTick>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cde:	f7fe faf5 	bl	80002cc <HAL_GetTick>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b64      	cmp	r3, #100	; 0x64
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e333      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cf0:	4b84      	ldr	r3, [pc, #528]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	029b      	lsls	r3, r3, #10
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d1f0      	bne.n	8001cde <HAL_RCC_OscConfig+0x112>
 8001cfc:	e000      	b.n	8001d00 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2202      	movs	r2, #2
 8001d06:	4013      	ands	r3, r2
 8001d08:	d100      	bne.n	8001d0c <HAL_RCC_OscConfig+0x140>
 8001d0a:	e098      	b.n	8001e3e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	2220      	movs	r2, #32
 8001d16:	4013      	ands	r3, r2
 8001d18:	d009      	beq.n	8001d2e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001d1a:	4b7a      	ldr	r3, [pc, #488]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4b79      	ldr	r3, [pc, #484]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d20:	2120      	movs	r1, #32
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	2220      	movs	r2, #32
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d13d      	bne.n	8001db6 <HAL_RCC_OscConfig+0x1ea>
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d13a      	bne.n	8001db6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d40:	4b70      	ldr	r3, [pc, #448]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2204      	movs	r2, #4
 8001d46:	4013      	ands	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_RCC_OscConfig+0x188>
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e301      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b6b      	ldr	r3, [pc, #428]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a6d      	ldr	r2, [pc, #436]	; (8001f10 <HAL_RCC_OscConfig+0x344>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	021a      	lsls	r2, r3, #8
 8001d64:	4b67      	ldr	r3, [pc, #412]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d6a:	4b66      	ldr	r3, [pc, #408]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2209      	movs	r2, #9
 8001d70:	4393      	bics	r3, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	4b63      	ldr	r3, [pc, #396]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d7c:	f000 fc20 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8001d80:	0001      	movs	r1, r0
 8001d82:	4b60      	ldr	r3, [pc, #384]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	220f      	movs	r2, #15
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	4a61      	ldr	r2, [pc, #388]	; (8001f14 <HAL_RCC_OscConfig+0x348>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	000a      	movs	r2, r1
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	4b60      	ldr	r3, [pc, #384]	; (8001f18 <HAL_RCC_OscConfig+0x34c>)
 8001d96:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001d98:	2513      	movs	r5, #19
 8001d9a:	197c      	adds	r4, r7, r5
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7fe fa5f 	bl	8000260 <HAL_InitTick>
 8001da2:	0003      	movs	r3, r0
 8001da4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001da6:	197b      	adds	r3, r7, r5
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d047      	beq.n	8001e3e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001dae:	2313      	movs	r3, #19
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	e2d0      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d027      	beq.n	8001e0c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001dbc:	4b51      	ldr	r3, [pc, #324]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2209      	movs	r2, #9
 8001dc2:	4393      	bics	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7fe fa7d 	bl	80002cc <HAL_GetTick>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd8:	f7fe fa78 	bl	80002cc <HAL_GetTick>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e2b6      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dea:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2204      	movs	r2, #4
 8001df0:	4013      	ands	r3, r2
 8001df2:	d0f1      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df4:	4b43      	ldr	r3, [pc, #268]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a45      	ldr	r2, [pc, #276]	; (8001f10 <HAL_RCC_OscConfig+0x344>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	021a      	lsls	r2, r3, #8
 8001e04:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e06:	430a      	orrs	r2, r1
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	e018      	b.n	8001e3e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0c:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b3c      	ldr	r3, [pc, #240]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e12:	2101      	movs	r1, #1
 8001e14:	438a      	bics	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7fe fa58 	bl	80002cc <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e22:	f7fe fa53 	bl	80002cc <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e291      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e34:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d1f1      	bne.n	8001e22 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2210      	movs	r2, #16
 8001e44:	4013      	ands	r3, r2
 8001e46:	d100      	bne.n	8001e4a <HAL_RCC_OscConfig+0x27e>
 8001e48:	e09f      	b.n	8001f8a <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d13f      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e50:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_OscConfig+0x29c>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e277      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e68:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a2b      	ldr	r2, [pc, #172]	; (8001f1c <HAL_RCC_OscConfig+0x350>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	0019      	movs	r1, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	0a19      	lsrs	r1, r3, #8
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	061a      	lsls	r2, r3, #24
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	0b5b      	lsrs	r3, r3, #13
 8001e96:	3301      	adds	r3, #1
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	0212      	lsls	r2, r2, #8
 8001e9c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	210f      	movs	r1, #15
 8001ea6:	400b      	ands	r3, r1
 8001ea8:	491a      	ldr	r1, [pc, #104]	; (8001f14 <HAL_RCC_OscConfig+0x348>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_RCC_OscConfig+0x34c>)
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001eb2:	2513      	movs	r5, #19
 8001eb4:	197c      	adds	r4, r7, r5
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7fe f9d2 	bl	8000260 <HAL_InitTick>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ec0:	197b      	adds	r3, r7, r5
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d060      	beq.n	8001f8a <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001ec8:	2313      	movs	r3, #19
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	e243      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d03e      	beq.n	8001f56 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	0049      	lsls	r1, r1, #1
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7fe f9f1 	bl	80002cc <HAL_GetTick>
 8001eea:	0003      	movs	r3, r0
 8001eec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001eee:	e017      	b.n	8001f20 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ef0:	f7fe f9ec 	bl	80002cc <HAL_GetTick>
 8001ef4:	0002      	movs	r2, r0
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d910      	bls.n	8001f20 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e22a      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	40021000 	.word	0x40021000
 8001f08:	fffeffff 	.word	0xfffeffff
 8001f0c:	fffbffff 	.word	0xfffbffff
 8001f10:	ffffe0ff 	.word	0xffffe0ff
 8001f14:	08008da4 	.word	0x08008da4
 8001f18:	20000110 	.word	0x20000110
 8001f1c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f20:	4bc6      	ldr	r3, [pc, #792]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d0e1      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f2c:	4bc3      	ldr	r3, [pc, #780]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4ac3      	ldr	r2, [pc, #780]	; (8002240 <HAL_RCC_OscConfig+0x674>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f3a:	4bc0      	ldr	r3, [pc, #768]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f40:	4bbe      	ldr	r3, [pc, #760]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	0a19      	lsrs	r1, r3, #8
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	061a      	lsls	r2, r3, #24
 8001f4e:	4bbb      	ldr	r3, [pc, #748]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f50:	430a      	orrs	r2, r1
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	e019      	b.n	8001f8a <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f56:	4bb9      	ldr	r3, [pc, #740]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4bb8      	ldr	r3, [pc, #736]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f5c:	49b9      	ldr	r1, [pc, #740]	; (8002244 <HAL_RCC_OscConfig+0x678>)
 8001f5e:	400a      	ands	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7fe f9b3 	bl	80002cc <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f6c:	f7fe f9ae 	bl	80002cc <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1ec      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f7e:	4baf      	ldr	r3, [pc, #700]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2208      	movs	r2, #8
 8001f90:	4013      	ands	r3, r2
 8001f92:	d036      	beq.n	8002002 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d019      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9c:	4ba7      	ldr	r3, [pc, #668]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001f9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fa0:	4ba6      	ldr	r3, [pc, #664]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7fe f990 	bl	80002cc <HAL_GetTick>
 8001fac:	0003      	movs	r3, r0
 8001fae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb2:	f7fe f98b 	bl	80002cc <HAL_GetTick>
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e1c9      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fc4:	4b9d      	ldr	r3, [pc, #628]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc8:	2202      	movs	r2, #2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d0f1      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x3e6>
 8001fce:	e018      	b.n	8002002 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd0:	4b9a      	ldr	r3, [pc, #616]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd4:	4b99      	ldr	r3, [pc, #612]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	438a      	bics	r2, r1
 8001fda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7fe f976 	bl	80002cc <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe6:	f7fe f971 	bl	80002cc <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e1af      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ff8:	4b90      	ldr	r3, [pc, #576]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8001ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d1f1      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2204      	movs	r2, #4
 8002008:	4013      	ands	r3, r2
 800200a:	d100      	bne.n	800200e <HAL_RCC_OscConfig+0x442>
 800200c:	e0af      	b.n	800216e <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200e:	2323      	movs	r3, #35	; 0x23
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002016:	4b89      	ldr	r3, [pc, #548]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	055b      	lsls	r3, r3, #21
 800201e:	4013      	ands	r3, r2
 8002020:	d10a      	bne.n	8002038 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	4b86      	ldr	r3, [pc, #536]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002026:	4b85      	ldr	r3, [pc, #532]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	0549      	lsls	r1, r1, #21
 800202c:	430a      	orrs	r2, r1
 800202e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002030:	2323      	movs	r3, #35	; 0x23
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	4b83      	ldr	r3, [pc, #524]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4013      	ands	r3, r2
 8002042:	d11a      	bne.n	800207a <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002044:	4b80      	ldr	r3, [pc, #512]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b7f      	ldr	r3, [pc, #508]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	0049      	lsls	r1, r1, #1
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002052:	f7fe f93b 	bl	80002cc <HAL_GetTick>
 8002056:	0003      	movs	r3, r0
 8002058:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205c:	f7fe f936 	bl	80002cc <HAL_GetTick>
 8002060:	0002      	movs	r2, r0
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e174      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4013      	ands	r3, r2
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	429a      	cmp	r2, r3
 8002084:	d107      	bne.n	8002096 <HAL_RCC_OscConfig+0x4ca>
 8002086:	4b6d      	ldr	r3, [pc, #436]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800208a:	4b6c      	ldr	r3, [pc, #432]	; (800223c <HAL_RCC_OscConfig+0x670>)
 800208c:	2180      	movs	r1, #128	; 0x80
 800208e:	0049      	lsls	r1, r1, #1
 8002090:	430a      	orrs	r2, r1
 8002092:	651a      	str	r2, [r3, #80]	; 0x50
 8002094:	e031      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
 800209e:	4b67      	ldr	r3, [pc, #412]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020a2:	4b66      	ldr	r3, [pc, #408]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020a4:	4967      	ldr	r1, [pc, #412]	; (8002244 <HAL_RCC_OscConfig+0x678>)
 80020a6:	400a      	ands	r2, r1
 80020a8:	651a      	str	r2, [r3, #80]	; 0x50
 80020aa:	4b64      	ldr	r3, [pc, #400]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ae:	4b63      	ldr	r3, [pc, #396]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020b0:	4966      	ldr	r1, [pc, #408]	; (800224c <HAL_RCC_OscConfig+0x680>)
 80020b2:	400a      	ands	r2, r1
 80020b4:	651a      	str	r2, [r3, #80]	; 0x50
 80020b6:	e020      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	23a0      	movs	r3, #160	; 0xa0
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d10e      	bne.n	80020e2 <HAL_RCC_OscConfig+0x516>
 80020c4:	4b5d      	ldr	r3, [pc, #372]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020c8:	4b5c      	ldr	r3, [pc, #368]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	00c9      	lsls	r1, r1, #3
 80020ce:	430a      	orrs	r2, r1
 80020d0:	651a      	str	r2, [r3, #80]	; 0x50
 80020d2:	4b5a      	ldr	r3, [pc, #360]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020d6:	4b59      	ldr	r3, [pc, #356]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	0049      	lsls	r1, r1, #1
 80020dc:	430a      	orrs	r2, r1
 80020de:	651a      	str	r2, [r3, #80]	; 0x50
 80020e0:	e00b      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
 80020e2:	4b56      	ldr	r3, [pc, #344]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020e6:	4b55      	ldr	r3, [pc, #340]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020e8:	4956      	ldr	r1, [pc, #344]	; (8002244 <HAL_RCC_OscConfig+0x678>)
 80020ea:	400a      	ands	r2, r1
 80020ec:	651a      	str	r2, [r3, #80]	; 0x50
 80020ee:	4b53      	ldr	r3, [pc, #332]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020f2:	4b52      	ldr	r3, [pc, #328]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80020f4:	4955      	ldr	r1, [pc, #340]	; (800224c <HAL_RCC_OscConfig+0x680>)
 80020f6:	400a      	ands	r2, r1
 80020f8:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d015      	beq.n	800212e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7fe f8e3 	bl	80002cc <HAL_GetTick>
 8002106:	0003      	movs	r3, r0
 8002108:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800210a:	e009      	b.n	8002120 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210c:	f7fe f8de 	bl	80002cc <HAL_GetTick>
 8002110:	0002      	movs	r2, r0
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	4a4e      	ldr	r2, [pc, #312]	; (8002250 <HAL_RCC_OscConfig+0x684>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e11b      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002120:	4b46      	ldr	r3, [pc, #280]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002122:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4013      	ands	r3, r2
 800212a:	d0ef      	beq.n	800210c <HAL_RCC_OscConfig+0x540>
 800212c:	e014      	b.n	8002158 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7fe f8cd 	bl	80002cc <HAL_GetTick>
 8002132:	0003      	movs	r3, r0
 8002134:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002136:	e009      	b.n	800214c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002138:	f7fe f8c8 	bl	80002cc <HAL_GetTick>
 800213c:	0002      	movs	r2, r0
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	4a43      	ldr	r2, [pc, #268]	; (8002250 <HAL_RCC_OscConfig+0x684>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e105      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800214c:	4b3b      	ldr	r3, [pc, #236]	; (800223c <HAL_RCC_OscConfig+0x670>)
 800214e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4013      	ands	r3, r2
 8002156:	d1ef      	bne.n	8002138 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002158:	2323      	movs	r3, #35	; 0x23
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d105      	bne.n	800216e <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002162:	4b36      	ldr	r3, [pc, #216]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002166:	4b35      	ldr	r3, [pc, #212]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002168:	493a      	ldr	r1, [pc, #232]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 800216a:	400a      	ands	r2, r1
 800216c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2220      	movs	r2, #32
 8002174:	4013      	ands	r3, r2
 8002176:	d049      	beq.n	800220c <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d026      	beq.n	80021ce <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002180:	4b2e      	ldr	r3, [pc, #184]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002186:	2101      	movs	r1, #1
 8002188:	430a      	orrs	r2, r1
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	4b2b      	ldr	r3, [pc, #172]	; (800223c <HAL_RCC_OscConfig+0x670>)
 800218e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002192:	2101      	movs	r1, #1
 8002194:	430a      	orrs	r2, r1
 8002196:	635a      	str	r2, [r3, #52]	; 0x34
 8002198:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <HAL_RCC_OscConfig+0x68c>)
 800219a:	6a1a      	ldr	r2, [r3, #32]
 800219c:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <HAL_RCC_OscConfig+0x68c>)
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	0189      	lsls	r1, r1, #6
 80021a2:	430a      	orrs	r2, r1
 80021a4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7fe f891 	bl	80002cc <HAL_GetTick>
 80021aa:	0003      	movs	r3, r0
 80021ac:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b0:	f7fe f88c 	bl	80002cc <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0ca      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2202      	movs	r2, #2
 80021c8:	4013      	ands	r3, r2
 80021ca:	d0f1      	beq.n	80021b0 <HAL_RCC_OscConfig+0x5e4>
 80021cc:	e01e      	b.n	800220c <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <HAL_RCC_OscConfig+0x670>)
 80021d4:	2101      	movs	r1, #1
 80021d6:	438a      	bics	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <HAL_RCC_OscConfig+0x68c>)
 80021dc:	6a1a      	ldr	r2, [r3, #32]
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <HAL_RCC_OscConfig+0x68c>)
 80021e0:	491e      	ldr	r1, [pc, #120]	; (800225c <HAL_RCC_OscConfig+0x690>)
 80021e2:	400a      	ands	r2, r1
 80021e4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7fe f871 	bl	80002cc <HAL_GetTick>
 80021ea:	0003      	movs	r3, r0
 80021ec:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f0:	f7fe f86c 	bl	80002cc <HAL_GetTick>
 80021f4:	0002      	movs	r2, r0
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0aa      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2202      	movs	r2, #2
 8002208:	4013      	ands	r3, r2
 800220a:	d1f1      	bne.n	80021f0 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	d100      	bne.n	8002216 <HAL_RCC_OscConfig+0x64a>
 8002214:	e09f      	b.n	8002356 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	2b0c      	cmp	r3, #12
 800221a:	d100      	bne.n	800221e <HAL_RCC_OscConfig+0x652>
 800221c:	e078      	b.n	8002310 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	2b02      	cmp	r3, #2
 8002224:	d159      	bne.n	80022da <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RCC_OscConfig+0x670>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <HAL_RCC_OscConfig+0x670>)
 800222c:	490c      	ldr	r1, [pc, #48]	; (8002260 <HAL_RCC_OscConfig+0x694>)
 800222e:	400a      	ands	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7fe f84b 	bl	80002cc <HAL_GetTick>
 8002236:	0003      	movs	r3, r0
 8002238:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800223a:	e01c      	b.n	8002276 <HAL_RCC_OscConfig+0x6aa>
 800223c:	40021000 	.word	0x40021000
 8002240:	ffff1fff 	.word	0xffff1fff
 8002244:	fffffeff 	.word	0xfffffeff
 8002248:	40007000 	.word	0x40007000
 800224c:	fffffbff 	.word	0xfffffbff
 8002250:	00001388 	.word	0x00001388
 8002254:	efffffff 	.word	0xefffffff
 8002258:	40010000 	.word	0x40010000
 800225c:	ffffdfff 	.word	0xffffdfff
 8002260:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002264:	f7fe f832 	bl	80002cc <HAL_GetTick>
 8002268:	0002      	movs	r2, r0
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e070      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002276:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	049b      	lsls	r3, r3, #18
 800227e:	4013      	ands	r3, r2
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002282:	4b37      	ldr	r3, [pc, #220]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	4a37      	ldr	r2, [pc, #220]	; (8002364 <HAL_RCC_OscConfig+0x798>)
 8002288:	4013      	ands	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229a:	431a      	orrs	r2, r3
 800229c:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 800229e:	430a      	orrs	r2, r1
 80022a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a2:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b2e      	ldr	r3, [pc, #184]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 80022a8:	2180      	movs	r1, #128	; 0x80
 80022aa:	0449      	lsls	r1, r1, #17
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe f80c 	bl	80002cc <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ba:	f7fe f807 	bl	80002cc <HAL_GetTick>
 80022be:	0002      	movs	r2, r0
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e045      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	049b      	lsls	r3, r3, #18
 80022d4:	4013      	ands	r3, r2
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x6ee>
 80022d8:	e03d      	b.n	8002356 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022da:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 80022e0:	4921      	ldr	r1, [pc, #132]	; (8002368 <HAL_RCC_OscConfig+0x79c>)
 80022e2:	400a      	ands	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7fd fff1 	bl	80002cc <HAL_GetTick>
 80022ea:	0003      	movs	r3, r0
 80022ec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fd ffec 	bl	80002cc <HAL_GetTick>
 80022f4:	0002      	movs	r2, r0
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e02a      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	049b      	lsls	r3, r3, #18
 800230a:	4013      	ands	r3, r2
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x724>
 800230e:	e022      	b.n	8002356 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e01d      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_RCC_OscConfig+0x794>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	025b      	lsls	r3, r3, #9
 8002328:	401a      	ands	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	429a      	cmp	r2, r3
 8002330:	d10f      	bne.n	8002352 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	23f0      	movs	r3, #240	; 0xf0
 8002336:	039b      	lsls	r3, r3, #14
 8002338:	401a      	ands	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d107      	bne.n	8002352 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	23c0      	movs	r3, #192	; 0xc0
 8002346:	041b      	lsls	r3, r3, #16
 8002348:	401a      	ands	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b00a      	add	sp, #40	; 0x28
 800235e:	bdb0      	pop	{r4, r5, r7, pc}
 8002360:	40021000 	.word	0x40021000
 8002364:	ff02ffff 	.word	0xff02ffff
 8002368:	feffffff 	.word	0xfeffffff

0800236c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800236c:	b5b0      	push	{r4, r5, r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e10d      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002380:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2201      	movs	r2, #1
 8002386:	4013      	ands	r3, r2
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d911      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b85      	ldr	r3, [pc, #532]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2201      	movs	r2, #1
 8002394:	4393      	bics	r3, r2
 8002396:	0019      	movs	r1, r3
 8002398:	4b82      	ldr	r3, [pc, #520]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a0:	4b80      	ldr	r3, [pc, #512]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2201      	movs	r2, #1
 80023a6:	4013      	ands	r3, r2
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d001      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0f4      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2202      	movs	r2, #2
 80023b8:	4013      	ands	r3, r2
 80023ba:	d009      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b7a      	ldr	r3, [pc, #488]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	22f0      	movs	r2, #240	; 0xf0
 80023c2:	4393      	bics	r3, r2
 80023c4:	0019      	movs	r1, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	4b77      	ldr	r3, [pc, #476]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 80023cc:	430a      	orrs	r2, r1
 80023ce:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	d100      	bne.n	80023dc <HAL_RCC_ClockConfig+0x70>
 80023da:	e089      	b.n	80024f0 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023e4:	4b70      	ldr	r3, [pc, #448]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	029b      	lsls	r3, r3, #10
 80023ec:	4013      	ands	r3, r2
 80023ee:	d120      	bne.n	8002432 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0d3      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d107      	bne.n	800240c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023fc:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	049b      	lsls	r3, r3, #18
 8002404:	4013      	ands	r3, r2
 8002406:	d114      	bne.n	8002432 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0c7      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d106      	bne.n	8002422 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002414:	4b64      	ldr	r3, [pc, #400]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2204      	movs	r2, #4
 800241a:	4013      	ands	r3, r2
 800241c:	d109      	bne.n	8002432 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0bc      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002422:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4013      	ands	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0b4      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002432:	4b5d      	ldr	r3, [pc, #372]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2203      	movs	r2, #3
 8002438:	4393      	bics	r3, r2
 800243a:	0019      	movs	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 8002442:	430a      	orrs	r2, r1
 8002444:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002446:	f7fd ff41 	bl	80002cc <HAL_GetTick>
 800244a:	0003      	movs	r3, r0
 800244c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d111      	bne.n	800247a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002456:	e009      	b.n	800246c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7fd ff38 	bl	80002cc <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	4a52      	ldr	r2, [pc, #328]	; (80025ac <HAL_RCC_ClockConfig+0x240>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e097      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800246c:	4b4e      	ldr	r3, [pc, #312]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	220c      	movs	r2, #12
 8002472:	4013      	ands	r3, r2
 8002474:	2b08      	cmp	r3, #8
 8002476:	d1ef      	bne.n	8002458 <HAL_RCC_ClockConfig+0xec>
 8002478:	e03a      	b.n	80024f0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d111      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002482:	e009      	b.n	8002498 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7fd ff22 	bl	80002cc <HAL_GetTick>
 8002488:	0002      	movs	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	4a47      	ldr	r2, [pc, #284]	; (80025ac <HAL_RCC_ClockConfig+0x240>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e081      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002498:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	220c      	movs	r2, #12
 800249e:	4013      	ands	r3, r2
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	d1ef      	bne.n	8002484 <HAL_RCC_ClockConfig+0x118>
 80024a4:	e024      	b.n	80024f0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d11b      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ae:	e009      	b.n	80024c4 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fd ff0c 	bl	80002cc <HAL_GetTick>
 80024b4:	0002      	movs	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	4a3c      	ldr	r2, [pc, #240]	; (80025ac <HAL_RCC_ClockConfig+0x240>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e06b      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c4:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	220c      	movs	r2, #12
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d1ef      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x144>
 80024d0:	e00e      	b.n	80024f0 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d2:	f7fd fefb 	bl	80002cc <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	4a33      	ldr	r2, [pc, #204]	; (80025ac <HAL_RCC_ClockConfig+0x240>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e05a      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80024e6:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	220c      	movs	r2, #12
 80024ec:	4013      	ands	r3, r2
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f0:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2201      	movs	r2, #1
 80024f6:	4013      	ands	r3, r2
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d211      	bcs.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2201      	movs	r2, #1
 8002504:	4393      	bics	r3, r2
 8002506:	0019      	movs	r1, r3
 8002508:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCC_ClockConfig+0x238>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2201      	movs	r2, #1
 8002516:	4013      	ands	r3, r2
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d001      	beq.n	8002522 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e03c      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2204      	movs	r2, #4
 8002528:	4013      	ands	r3, r2
 800252a:	d009      	beq.n	8002540 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252c:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <HAL_RCC_ClockConfig+0x244>)
 8002532:	4013      	ands	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 800253c:	430a      	orrs	r2, r1
 800253e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2208      	movs	r2, #8
 8002546:	4013      	ands	r3, r2
 8002548:	d00a      	beq.n	8002560 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800254a:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <HAL_RCC_ClockConfig+0x248>)
 8002550:	4013      	ands	r3, r2
 8002552:	0019      	movs	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	00da      	lsls	r2, r3, #3
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 800255c:	430a      	orrs	r2, r1
 800255e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002560:	f000 f82e 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8002564:	0001      	movs	r1, r0
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <HAL_RCC_ClockConfig+0x23c>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	220f      	movs	r2, #15
 800256e:	4013      	ands	r3, r2
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <HAL_RCC_ClockConfig+0x24c>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	000a      	movs	r2, r1
 8002576:	40da      	lsrs	r2, r3
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_RCC_ClockConfig+0x250>)
 800257a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800257c:	250b      	movs	r5, #11
 800257e:	197c      	adds	r4, r7, r5
 8002580:	2000      	movs	r0, #0
 8002582:	f7fd fe6d 	bl	8000260 <HAL_InitTick>
 8002586:	0003      	movs	r3, r0
 8002588:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800258a:	197b      	adds	r3, r7, r5
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002592:	230b      	movs	r3, #11
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	e000      	b.n	800259c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b004      	add	sp, #16
 80025a2:	bdb0      	pop	{r4, r5, r7, pc}
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	00001388 	.word	0x00001388
 80025b0:	fffff8ff 	.word	0xfffff8ff
 80025b4:	ffffc7ff 	.word	0xffffc7ff
 80025b8:	08008da4 	.word	0x08008da4
 80025bc:	20000110 	.word	0x20000110

080025c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	220c      	movs	r2, #12
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d00e      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x34>
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	d00f      	beq.n	80025fa <HAL_RCC_GetSysClockFreq+0x3a>
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d157      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025de:	4b35      	ldr	r3, [pc, #212]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2210      	movs	r2, #16
 80025e4:	4013      	ands	r3, r2
 80025e6:	d002      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80025e8:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ea:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80025ec:	e05d      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80025ee:	4b33      	ldr	r3, [pc, #204]	; (80026bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80025f0:	613b      	str	r3, [r7, #16]
      break;
 80025f2:	e05a      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f4:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80025f6:	613b      	str	r3, [r7, #16]
      break;
 80025f8:	e057      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	0c9b      	lsrs	r3, r3, #18
 80025fe:	220f      	movs	r2, #15
 8002600:	4013      	ands	r3, r2
 8002602:	4a30      	ldr	r2, [pc, #192]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002604:	5cd3      	ldrb	r3, [r2, r3]
 8002606:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	0d9b      	lsrs	r3, r3, #22
 800260c:	2203      	movs	r2, #3
 800260e:	4013      	ands	r3, r2
 8002610:	3301      	adds	r3, #1
 8002612:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	025b      	lsls	r3, r3, #9
 800261c:	4013      	ands	r3, r2
 800261e:	d00f      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	000a      	movs	r2, r1
 8002624:	0152      	lsls	r2, r2, #5
 8002626:	1a52      	subs	r2, r2, r1
 8002628:	0193      	lsls	r3, r2, #6
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	185b      	adds	r3, r3, r1
 8002630:	025b      	lsls	r3, r3, #9
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	0018      	movs	r0, r3
 8002636:	f7fd fd67 	bl	8000108 <__udivsi3>
 800263a:	0003      	movs	r3, r0
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e023      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002640:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2210      	movs	r2, #16
 8002646:	4013      	ands	r3, r2
 8002648:	d00f      	beq.n	800266a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	000a      	movs	r2, r1
 800264e:	0152      	lsls	r2, r2, #5
 8002650:	1a52      	subs	r2, r2, r1
 8002652:	0193      	lsls	r3, r2, #6
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	185b      	adds	r3, r3, r1
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	0018      	movs	r0, r3
 8002660:	f7fd fd52 	bl	8000108 <__udivsi3>
 8002664:	0003      	movs	r3, r0
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	e00e      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800266a:	68b9      	ldr	r1, [r7, #8]
 800266c:	000a      	movs	r2, r1
 800266e:	0152      	lsls	r2, r2, #5
 8002670:	1a52      	subs	r2, r2, r1
 8002672:	0193      	lsls	r3, r2, #6
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	185b      	adds	r3, r3, r1
 800267a:	029b      	lsls	r3, r3, #10
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	0018      	movs	r0, r3
 8002680:	f7fd fd42 	bl	8000108 <__udivsi3>
 8002684:	0003      	movs	r3, r0
 8002686:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	613b      	str	r3, [r7, #16]
      break;
 800268c:	e00d      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	0b5b      	lsrs	r3, r3, #13
 8002694:	2207      	movs	r2, #7
 8002696:	4013      	ands	r3, r2
 8002698:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	3301      	adds	r3, #1
 800269e:	2280      	movs	r2, #128	; 0x80
 80026a0:	0212      	lsls	r2, r2, #8
 80026a2:	409a      	lsls	r2, r3
 80026a4:	0013      	movs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
      break;
 80026a8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80026aa:	693b      	ldr	r3, [r7, #16]
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b006      	add	sp, #24
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	003d0900 	.word	0x003d0900
 80026bc:	00f42400 	.word	0x00f42400
 80026c0:	007a1200 	.word	0x007a1200
 80026c4:	08008db4 	.word	0x08008db4

080026c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2220      	movs	r2, #32
 80026d6:	4013      	ands	r3, r2
 80026d8:	d106      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	4013      	ands	r3, r2
 80026e4:	d100      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80026e6:	e0dd      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80026e8:	2317      	movs	r3, #23
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f0:	4ba4      	ldr	r3, [pc, #656]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	055b      	lsls	r3, r3, #21
 80026f8:	4013      	ands	r3, r2
 80026fa:	d10a      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fc:	4ba1      	ldr	r3, [pc, #644]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002700:	4ba0      	ldr	r3, [pc, #640]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002702:	2180      	movs	r1, #128	; 0x80
 8002704:	0549      	lsls	r1, r1, #21
 8002706:	430a      	orrs	r2, r1
 8002708:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800270a:	2317      	movs	r3, #23
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002712:	4b9d      	ldr	r3, [pc, #628]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4013      	ands	r3, r2
 800271c:	d11a      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800271e:	4b9a      	ldr	r3, [pc, #616]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4b99      	ldr	r3, [pc, #612]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	0049      	lsls	r1, r1, #1
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272c:	f7fd fdce 	bl	80002cc <HAL_GetTick>
 8002730:	0003      	movs	r3, r0
 8002732:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	e008      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002736:	f7fd fdc9 	bl	80002cc <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b64      	cmp	r3, #100	; 0x64
 8002742:	d901      	bls.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e118      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	4b8f      	ldr	r3, [pc, #572]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4013      	ands	r3, r2
 8002752:	d0f0      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002754:	4b8b      	ldr	r3, [pc, #556]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	23c0      	movs	r3, #192	; 0xc0
 800275a:	039b      	lsls	r3, r3, #14
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	23c0      	movs	r3, #192	; 0xc0
 8002766:	039b      	lsls	r3, r3, #14
 8002768:	4013      	ands	r3, r2
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	429a      	cmp	r2, r3
 800276e:	d107      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	23c0      	movs	r3, #192	; 0xc0
 8002776:	039b      	lsls	r3, r3, #14
 8002778:	4013      	ands	r3, r2
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	429a      	cmp	r2, r3
 800277e:	d013      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	23c0      	movs	r3, #192	; 0xc0
 8002786:	029b      	lsls	r3, r3, #10
 8002788:	401a      	ands	r2, r3
 800278a:	23c0      	movs	r3, #192	; 0xc0
 800278c:	029b      	lsls	r3, r3, #10
 800278e:	429a      	cmp	r2, r3
 8002790:	d10a      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002792:	4b7c      	ldr	r3, [pc, #496]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	029b      	lsls	r3, r3, #10
 800279a:	401a      	ands	r2, r3
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	029b      	lsls	r3, r3, #10
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d101      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0e8      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80027a8:	4b76      	ldr	r3, [pc, #472]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ac:	23c0      	movs	r3, #192	; 0xc0
 80027ae:	029b      	lsls	r3, r3, #10
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d049      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	23c0      	movs	r3, #192	; 0xc0
 80027c0:	029b      	lsls	r3, r3, #10
 80027c2:	4013      	ands	r3, r2
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d004      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2220      	movs	r2, #32
 80027d0:	4013      	ands	r3, r2
 80027d2:	d10d      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	23c0      	movs	r3, #192	; 0xc0
 80027da:	029b      	lsls	r3, r3, #10
 80027dc:	4013      	ands	r3, r2
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d034      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	4013      	ands	r3, r2
 80027ee:	d02e      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027f0:	4b64      	ldr	r3, [pc, #400]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f4:	4a65      	ldr	r2, [pc, #404]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027fa:	4b62      	ldr	r3, [pc, #392]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027fe:	4b61      	ldr	r3, [pc, #388]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	0309      	lsls	r1, r1, #12
 8002804:	430a      	orrs	r2, r1
 8002806:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002808:	4b5e      	ldr	r3, [pc, #376]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800280a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800280c:	4b5d      	ldr	r3, [pc, #372]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800280e:	4960      	ldr	r1, [pc, #384]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002810:	400a      	ands	r2, r1
 8002812:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002814:	4b5b      	ldr	r3, [pc, #364]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4013      	ands	r3, r2
 8002822:	d014      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fd fd52 	bl	80002cc <HAL_GetTick>
 8002828:	0003      	movs	r3, r0
 800282a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800282c:	e009      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7fd fd4d 	bl	80002cc <HAL_GetTick>
 8002832:	0002      	movs	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	4a56      	ldr	r2, [pc, #344]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e09b      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002842:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4013      	ands	r3, r2
 800284c:	d0ef      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	23c0      	movs	r3, #192	; 0xc0
 8002854:	029b      	lsls	r3, r3, #10
 8002856:	401a      	ands	r2, r3
 8002858:	23c0      	movs	r3, #192	; 0xc0
 800285a:	029b      	lsls	r3, r3, #10
 800285c:	429a      	cmp	r2, r3
 800285e:	d10c      	bne.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002860:	4b48      	ldr	r3, [pc, #288]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a4c      	ldr	r2, [pc, #304]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002866:	4013      	ands	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	23c0      	movs	r3, #192	; 0xc0
 8002870:	039b      	lsls	r3, r3, #14
 8002872:	401a      	ands	r2, r3
 8002874:	4b43      	ldr	r3, [pc, #268]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002876:	430a      	orrs	r2, r1
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800287c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	23c0      	movs	r3, #192	; 0xc0
 8002884:	029b      	lsls	r3, r3, #10
 8002886:	401a      	ands	r2, r3
 8002888:	4b3e      	ldr	r3, [pc, #248]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800288a:	430a      	orrs	r2, r1
 800288c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800288e:	2317      	movs	r3, #23
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d105      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002898:	4b3a      	ldr	r3, [pc, #232]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800289a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800289c:	4b39      	ldr	r3, [pc, #228]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800289e:	493f      	ldr	r1, [pc, #252]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2201      	movs	r2, #1
 80028aa:	4013      	ands	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ae:	4b35      	ldr	r3, [pc, #212]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	2203      	movs	r2, #3
 80028b4:	4393      	bics	r3, r2
 80028b6:	0019      	movs	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	4b31      	ldr	r3, [pc, #196]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028be:	430a      	orrs	r2, r1
 80028c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2202      	movs	r2, #2
 80028c8:	4013      	ands	r3, r2
 80028ca:	d009      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028cc:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d0:	220c      	movs	r2, #12
 80028d2:	4393      	bics	r3, r2
 80028d4:	0019      	movs	r1, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028dc:	430a      	orrs	r2, r1
 80028de:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2204      	movs	r2, #4
 80028e6:	4013      	ands	r3, r2
 80028e8:	d009      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028ea:	4b26      	ldr	r3, [pc, #152]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ee:	4a2c      	ldr	r2, [pc, #176]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	0019      	movs	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	4b22      	ldr	r3, [pc, #136]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028fa:	430a      	orrs	r2, r1
 80028fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2208      	movs	r2, #8
 8002904:	4013      	ands	r3, r2
 8002906:	d009      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002908:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800290a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290c:	4a25      	ldr	r2, [pc, #148]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800290e:	4013      	ands	r3, r2
 8002910:	0019      	movs	r1, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002918:	430a      	orrs	r2, r1
 800291a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4013      	ands	r3, r2
 8002926:	d009      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002928:	4b16      	ldr	r3, [pc, #88]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800292a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292c:	4a17      	ldr	r2, [pc, #92]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800292e:	4013      	ands	r3, r2
 8002930:	0019      	movs	r1, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	4b13      	ldr	r3, [pc, #76]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002938:	430a      	orrs	r2, r1
 800293a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2240      	movs	r2, #64	; 0x40
 8002942:	4013      	ands	r3, r2
 8002944:	d009      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002946:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	4a17      	ldr	r2, [pc, #92]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800294c:	4013      	ands	r3, r2
 800294e:	0019      	movs	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002956:	430a      	orrs	r2, r1
 8002958:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2280      	movs	r2, #128	; 0x80
 8002960:	4013      	ands	r3, r2
 8002962:	d009      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002964:	4b07      	ldr	r3, [pc, #28]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002968:	4a10      	ldr	r2, [pc, #64]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800296a:	4013      	ands	r3, r2
 800296c:	0019      	movs	r1, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1a      	ldr	r2, [r3, #32]
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002974:	430a      	orrs	r2, r1
 8002976:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	0018      	movs	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	b006      	add	sp, #24
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	40021000 	.word	0x40021000
 8002988:	40007000 	.word	0x40007000
 800298c:	fffcffff 	.word	0xfffcffff
 8002990:	fff7ffff 	.word	0xfff7ffff
 8002994:	00001388 	.word	0x00001388
 8002998:	ffcfffff 	.word	0xffcfffff
 800299c:	efffffff 	.word	0xefffffff
 80029a0:	fffff3ff 	.word	0xfffff3ff
 80029a4:	ffffcfff 	.word	0xffffcfff
 80029a8:	fbffffff 	.word	0xfbffffff
 80029ac:	fff3ffff 	.word	0xfff3ffff

080029b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029b8:	210e      	movs	r1, #14
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <USB_EnableGlobalInt+0x30>)
 80029be:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2240      	movs	r2, #64	; 0x40
 80029c4:	5a9b      	ldrh	r3, [r3, r2]
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b299      	uxth	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b004      	add	sp, #16
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	ffffbf80 	.word	0xffffbf80

080029e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029ec:	210e      	movs	r1, #14
 80029ee:	187b      	adds	r3, r7, r1
 80029f0:	4a0b      	ldr	r2, [pc, #44]	; (8002a20 <USB_DisableGlobalInt+0x3c>)
 80029f2:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2240      	movs	r2, #64	; 0x40
 80029f8:	5a9b      	ldrh	r3, [r3, r2]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	b21b      	sxth	r3, r3
 80029fe:	187a      	adds	r2, r7, r1
 8002a00:	2100      	movs	r1, #0
 8002a02:	5e52      	ldrsh	r2, [r2, r1]
 8002a04:	43d2      	mvns	r2, r2
 8002a06:	b212      	sxth	r2, r2
 8002a08:	4013      	ands	r3, r2
 8002a0a:	b21b      	sxth	r3, r3
 8002a0c:	b299      	uxth	r1, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2240      	movs	r2, #64	; 0x40
 8002a12:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	0018      	movs	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b004      	add	sp, #16
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	ffffbf80 	.word	0xffffbf80

08002a24 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a24:	b084      	sub	sp, #16
 8002a26:	b590      	push	{r4, r7, lr}
 8002a28:	46c6      	mov	lr, r8
 8002a2a:	b500      	push	{lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	2004      	movs	r0, #4
 8002a34:	2410      	movs	r4, #16
 8002a36:	46a4      	mov	ip, r4
 8002a38:	2408      	movs	r4, #8
 8002a3a:	46a0      	mov	r8, r4
 8002a3c:	44b8      	add	r8, r7
 8002a3e:	44c4      	add	ip, r8
 8002a40:	4460      	add	r0, ip
 8002a42:	6001      	str	r1, [r0, #0]
 8002a44:	6042      	str	r2, [r0, #4]
 8002a46:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2240      	movs	r2, #64	; 0x40
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2240      	movs	r2, #64	; 0x40
 8002a54:	2100      	movs	r1, #0
 8002a56:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2244      	movs	r2, #68	; 0x44
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2250      	movs	r2, #80	; 0x50
 8002a64:	2100      	movs	r1, #0
 8002a66:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f7ff ffa0 	bl	80029b0 <USB_EnableGlobalInt>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b002      	add	sp, #8
 8002a78:	bc04      	pop	{r2}
 8002a7a:	4690      	mov	r8, r2
 8002a7c:	bc90      	pop	{r4, r7}
 8002a7e:	bc08      	pop	{r3}
 8002a80:	b004      	add	sp, #16
 8002a82:	4718      	bx	r3

08002a84 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002a8e:	2317      	movs	r3, #23
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	18d3      	adds	r3, r2, r3
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	2314      	movs	r3, #20
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	49ae      	ldr	r1, [pc, #696]	; (8002d64 <USB_ActivateEndpoint+0x2e0>)
 8002aaa:	400a      	ands	r2, r1
 8002aac:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	78db      	ldrb	r3, [r3, #3]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d020      	beq.n	8002af8 <USB_ActivateEndpoint+0x74>
 8002ab6:	dc02      	bgt.n	8002abe <USB_ActivateEndpoint+0x3a>
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <USB_ActivateEndpoint+0x44>
 8002abc:	e025      	b.n	8002b0a <USB_ActivateEndpoint+0x86>
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d00b      	beq.n	8002ada <USB_ActivateEndpoint+0x56>
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d00f      	beq.n	8002ae6 <USB_ActivateEndpoint+0x62>
 8002ac6:	e020      	b.n	8002b0a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002ac8:	2214      	movs	r2, #20
 8002aca:	18bb      	adds	r3, r7, r2
 8002acc:	18ba      	adds	r2, r7, r2
 8002ace:	8812      	ldrh	r2, [r2, #0]
 8002ad0:	2180      	movs	r1, #128	; 0x80
 8002ad2:	0089      	lsls	r1, r1, #2
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	801a      	strh	r2, [r3, #0]
      break;
 8002ad8:	e01c      	b.n	8002b14 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8002ada:	2214      	movs	r2, #20
 8002adc:	18bb      	adds	r3, r7, r2
 8002ade:	18ba      	adds	r2, r7, r2
 8002ae0:	8812      	ldrh	r2, [r2, #0]
 8002ae2:	801a      	strh	r2, [r3, #0]
      break;
 8002ae4:	e016      	b.n	8002b14 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002ae6:	2214      	movs	r2, #20
 8002ae8:	18bb      	adds	r3, r7, r2
 8002aea:	18ba      	adds	r2, r7, r2
 8002aec:	8812      	ldrh	r2, [r2, #0]
 8002aee:	21c0      	movs	r1, #192	; 0xc0
 8002af0:	00c9      	lsls	r1, r1, #3
 8002af2:	430a      	orrs	r2, r1
 8002af4:	801a      	strh	r2, [r3, #0]
      break;
 8002af6:	e00d      	b.n	8002b14 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002af8:	2214      	movs	r2, #20
 8002afa:	18bb      	adds	r3, r7, r2
 8002afc:	18ba      	adds	r2, r7, r2
 8002afe:	8812      	ldrh	r2, [r2, #0]
 8002b00:	2180      	movs	r1, #128	; 0x80
 8002b02:	00c9      	lsls	r1, r1, #3
 8002b04:	430a      	orrs	r2, r1
 8002b06:	801a      	strh	r2, [r3, #0]
      break;
 8002b08:	e004      	b.n	8002b14 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8002b0a:	2317      	movs	r3, #23
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
      break;
 8002b12:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	18d3      	adds	r3, r2, r3
 8002b1e:	2214      	movs	r2, #20
 8002b20:	18ba      	adds	r2, r7, r2
 8002b22:	8812      	ldrh	r2, [r2, #0]
 8002b24:	4990      	ldr	r1, [pc, #576]	; (8002d68 <USB_ActivateEndpoint+0x2e4>)
 8002b26:	430a      	orrs	r2, r1
 8002b28:	b292      	uxth	r2, r2
 8002b2a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	18d3      	adds	r3, r2, r3
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	b21b      	sxth	r3, r3
 8002b3c:	4a8b      	ldr	r2, [pc, #556]	; (8002d6c <USB_ActivateEndpoint+0x2e8>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	b21a      	sxth	r2, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	b21b      	sxth	r3, r3
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	b21b      	sxth	r3, r3
 8002b4c:	b29c      	uxth	r4, r3
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	18d3      	adds	r3, r2, r3
 8002b58:	4a83      	ldr	r2, [pc, #524]	; (8002d68 <USB_ActivateEndpoint+0x2e4>)
 8002b5a:	4322      	orrs	r2, r4
 8002b5c:	b292      	uxth	r2, r2
 8002b5e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	7b1b      	ldrb	r3, [r3, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d000      	beq.n	8002b6a <USB_ActivateEndpoint+0xe6>
 8002b68:	e112      	b.n	8002d90 <USB_ActivateEndpoint+0x30c>
  {
    if (ep->is_in != 0U)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	785b      	ldrb	r3, [r3, #1]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d062      	beq.n	8002c38 <USB_ActivateEndpoint+0x1b4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b72:	687c      	ldr	r4, [r7, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2250      	movs	r2, #80	; 0x50
 8002b78:	5a9b      	ldrh	r3, [r3, r2]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	18e4      	adds	r4, r4, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	18e3      	adds	r3, r4, r3
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	00d2      	lsls	r2, r2, #3
 8002b8a:	4694      	mov	ip, r2
 8002b8c:	4463      	add	r3, ip
 8002b8e:	001c      	movs	r4, r3
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	88db      	ldrh	r3, [r3, #6]
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	18db      	adds	r3, r3, r3
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	18d3      	adds	r3, r2, r3
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	b29c      	uxth	r4, r3
 8002bac:	0022      	movs	r2, r4
 8002bae:	2340      	movs	r3, #64	; 0x40
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d012      	beq.n	8002bda <USB_ActivateEndpoint+0x156>
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	18d3      	adds	r3, r2, r3
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	4a6a      	ldr	r2, [pc, #424]	; (8002d6c <USB_ActivateEndpoint+0x2e8>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	b29c      	uxth	r4, r3
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	18d3      	adds	r3, r2, r3
 8002bd2:	4a67      	ldr	r2, [pc, #412]	; (8002d70 <USB_ActivateEndpoint+0x2ec>)
 8002bd4:	4322      	orrs	r2, r4
 8002bd6:	b292      	uxth	r2, r2
 8002bd8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	78db      	ldrb	r3, [r3, #3]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d016      	beq.n	8002c10 <USB_ActivateEndpoint+0x18c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	18d3      	adds	r3, r2, r3
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	4a60      	ldr	r2, [pc, #384]	; (8002d74 <USB_ActivateEndpoint+0x2f0>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	b29c      	uxth	r4, r3
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	4063      	eors	r3, r4
 8002bfa:	b29c      	uxth	r4, r3
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	18d3      	adds	r3, r2, r3
 8002c06:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <USB_ActivateEndpoint+0x2e4>)
 8002c08:	4322      	orrs	r2, r4
 8002c0a:	b292      	uxth	r2, r2
 8002c0c:	801a      	strh	r2, [r3, #0]
 8002c0e:	e212      	b.n	8003036 <USB_ActivateEndpoint+0x5b2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	18d3      	adds	r3, r2, r3
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4a55      	ldr	r2, [pc, #340]	; (8002d74 <USB_ActivateEndpoint+0x2f0>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	b29c      	uxth	r4, r3
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	18d3      	adds	r3, r2, r3
 8002c2e:	4a4e      	ldr	r2, [pc, #312]	; (8002d68 <USB_ActivateEndpoint+0x2e4>)
 8002c30:	4322      	orrs	r2, r4
 8002c32:	b292      	uxth	r2, r2
 8002c34:	801a      	strh	r2, [r3, #0]
 8002c36:	e1fe      	b.n	8003036 <USB_ActivateEndpoint+0x5b2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002c38:	687c      	ldr	r4, [r7, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2250      	movs	r2, #80	; 0x50
 8002c3e:	5a9b      	ldrh	r3, [r3, r2]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	18e4      	adds	r4, r4, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	18e3      	adds	r3, r4, r3
 8002c4c:	4a4a      	ldr	r2, [pc, #296]	; (8002d78 <USB_ActivateEndpoint+0x2f4>)
 8002c4e:	4694      	mov	ip, r2
 8002c50:	4463      	add	r3, ip
 8002c52:	001c      	movs	r4, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	88db      	ldrh	r3, [r3, #6]
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	18db      	adds	r3, r3, r3
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002c62:	687c      	ldr	r4, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2250      	movs	r2, #80	; 0x50
 8002c68:	5a9b      	ldrh	r3, [r3, r2]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	18e4      	adds	r4, r4, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	18e3      	adds	r3, r4, r3
 8002c76:	4a41      	ldr	r2, [pc, #260]	; (8002d7c <USB_ActivateEndpoint+0x2f8>)
 8002c78:	4694      	mov	ip, r2
 8002c7a:	4463      	add	r3, ip
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10e      	bne.n	8002ca4 <USB_ActivateEndpoint+0x220>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	4a3d      	ldr	r2, [pc, #244]	; (8002d80 <USB_ActivateEndpoint+0x2fc>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	801a      	strh	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	4a3a      	ldr	r2, [pc, #232]	; (8002d84 <USB_ActivateEndpoint+0x300>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	801a      	strh	r2, [r3, #0]
 8002ca2:	e023      	b.n	8002cec <USB_ActivateEndpoint+0x268>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	2b3d      	cmp	r3, #61	; 0x3d
 8002caa:	d812      	bhi.n	8002cd2 <USB_ActivateEndpoint+0x24e>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d002      	beq.n	8002cc4 <USB_ActivateEndpoint+0x240>
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	029b      	lsls	r3, r3, #10
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	801a      	strh	r2, [r3, #0]
 8002cd0:	e00c      	b.n	8002cec <USB_ActivateEndpoint+0x268>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	029b      	lsls	r3, r3, #10
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	4a28      	ldr	r2, [pc, #160]	; (8002d84 <USB_ActivateEndpoint+0x300>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	18d3      	adds	r3, r2, r3
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	b29c      	uxth	r4, r3
 8002cfa:	0022      	movs	r2, r4
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	01db      	lsls	r3, r3, #7
 8002d00:	4013      	ands	r3, r2
 8002d02:	d012      	beq.n	8002d2a <USB_ActivateEndpoint+0x2a6>
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	18d3      	adds	r3, r2, r3
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	4a16      	ldr	r2, [pc, #88]	; (8002d6c <USB_ActivateEndpoint+0x2e8>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	b29c      	uxth	r4, r3
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	18d3      	adds	r3, r2, r3
 8002d22:	4a19      	ldr	r2, [pc, #100]	; (8002d88 <USB_ActivateEndpoint+0x304>)
 8002d24:	4322      	orrs	r2, r4
 8002d26:	b292      	uxth	r2, r2
 8002d28:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	18d3      	adds	r3, r2, r3
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <USB_ActivateEndpoint+0x308>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	b29c      	uxth	r4, r3
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	015b      	lsls	r3, r3, #5
 8002d42:	4063      	eors	r3, r4
 8002d44:	b29c      	uxth	r4, r3
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	019b      	lsls	r3, r3, #6
 8002d4a:	4063      	eors	r3, r4
 8002d4c:	b29c      	uxth	r4, r3
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	18d3      	adds	r3, r2, r3
 8002d58:	4a03      	ldr	r2, [pc, #12]	; (8002d68 <USB_ActivateEndpoint+0x2e4>)
 8002d5a:	4322      	orrs	r2, r4
 8002d5c:	b292      	uxth	r2, r2
 8002d5e:	801a      	strh	r2, [r3, #0]
 8002d60:	e169      	b.n	8003036 <USB_ActivateEndpoint+0x5b2>
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	ffff898f 	.word	0xffff898f
 8002d68:	ffff8080 	.word	0xffff8080
 8002d6c:	ffff8f8f 	.word	0xffff8f8f
 8002d70:	ffff80c0 	.word	0xffff80c0
 8002d74:	ffff8fbf 	.word	0xffff8fbf
 8002d78:	00000404 	.word	0x00000404
 8002d7c:	00000406 	.word	0x00000406
 8002d80:	ffff83ff 	.word	0xffff83ff
 8002d84:	ffff8000 	.word	0xffff8000
 8002d88:	ffffc080 	.word	0xffffc080
 8002d8c:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	18d3      	adds	r3, r2, r3
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	4aa9      	ldr	r2, [pc, #676]	; (8003044 <USB_ActivateEndpoint+0x5c0>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	b29c      	uxth	r4, r3
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	18d3      	adds	r3, r2, r3
 8002dae:	4aa6      	ldr	r2, [pc, #664]	; (8003048 <USB_ActivateEndpoint+0x5c4>)
 8002db0:	4322      	orrs	r2, r4
 8002db2:	b292      	uxth	r2, r2
 8002db4:	801a      	strh	r2, [r3, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002db6:	687c      	ldr	r4, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2250      	movs	r2, #80	; 0x50
 8002dbc:	5a9b      	ldrh	r3, [r3, r2]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	18e4      	adds	r4, r4, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	18e3      	adds	r3, r4, r3
 8002dca:	2280      	movs	r2, #128	; 0x80
 8002dcc:	00d2      	lsls	r2, r2, #3
 8002dce:	4694      	mov	ip, r2
 8002dd0:	4463      	add	r3, ip
 8002dd2:	001c      	movs	r4, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	891b      	ldrh	r3, [r3, #8]
 8002dd8:	085b      	lsrs	r3, r3, #1
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	18db      	adds	r3, r3, r3
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	8023      	strh	r3, [r4, #0]
 8002de2:	687c      	ldr	r4, [r7, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2250      	movs	r2, #80	; 0x50
 8002de8:	5a9b      	ldrh	r3, [r3, r2]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	18e4      	adds	r4, r4, r3
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	18e3      	adds	r3, r4, r3
 8002df6:	4a95      	ldr	r2, [pc, #596]	; (800304c <USB_ActivateEndpoint+0x5c8>)
 8002df8:	4694      	mov	ip, r2
 8002dfa:	4463      	add	r3, ip
 8002dfc:	001c      	movs	r4, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	895b      	ldrh	r3, [r3, #10]
 8002e02:	085b      	lsrs	r3, r3, #1
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	18db      	adds	r3, r3, r3
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	785b      	ldrb	r3, [r3, #1]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d000      	beq.n	8002e16 <USB_ActivateEndpoint+0x392>
 8002e14:	e07e      	b.n	8002f14 <USB_ActivateEndpoint+0x490>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	18d3      	adds	r3, r2, r3
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	b29c      	uxth	r4, r3
 8002e24:	0022      	movs	r2, r4
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	01db      	lsls	r3, r3, #7
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d012      	beq.n	8002e54 <USB_ActivateEndpoint+0x3d0>
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	18d3      	adds	r3, r2, r3
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4a81      	ldr	r2, [pc, #516]	; (8003044 <USB_ActivateEndpoint+0x5c0>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	b29c      	uxth	r4, r3
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	18d3      	adds	r3, r2, r3
 8002e4c:	4a80      	ldr	r2, [pc, #512]	; (8003050 <USB_ActivateEndpoint+0x5cc>)
 8002e4e:	4322      	orrs	r2, r4
 8002e50:	b292      	uxth	r2, r2
 8002e52:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	18d3      	adds	r3, r2, r3
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b29c      	uxth	r4, r3
 8002e62:	0022      	movs	r2, r4
 8002e64:	2340      	movs	r3, #64	; 0x40
 8002e66:	4013      	ands	r3, r2
 8002e68:	d012      	beq.n	8002e90 <USB_ActivateEndpoint+0x40c>
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	18d3      	adds	r3, r2, r3
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	4a72      	ldr	r2, [pc, #456]	; (8003044 <USB_ActivateEndpoint+0x5c0>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	b29c      	uxth	r4, r3
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	18d3      	adds	r3, r2, r3
 8002e88:	4a72      	ldr	r2, [pc, #456]	; (8003054 <USB_ActivateEndpoint+0x5d0>)
 8002e8a:	4322      	orrs	r2, r4
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	18d3      	adds	r3, r2, r3
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	4a69      	ldr	r2, [pc, #420]	; (8003044 <USB_ActivateEndpoint+0x5c0>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	b29c      	uxth	r4, r3
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	18d3      	adds	r3, r2, r3
 8002eae:	4a69      	ldr	r2, [pc, #420]	; (8003054 <USB_ActivateEndpoint+0x5d0>)
 8002eb0:	4322      	orrs	r2, r4
 8002eb2:	b292      	uxth	r2, r2
 8002eb4:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	18d3      	adds	r3, r2, r3
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	4a64      	ldr	r2, [pc, #400]	; (8003058 <USB_ActivateEndpoint+0x5d4>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	b29c      	uxth	r4, r3
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	015b      	lsls	r3, r3, #5
 8002ece:	4063      	eors	r3, r4
 8002ed0:	b29c      	uxth	r4, r3
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	4063      	eors	r3, r4
 8002ed8:	b29c      	uxth	r4, r3
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	18d3      	adds	r3, r2, r3
 8002ee4:	4a5d      	ldr	r2, [pc, #372]	; (800305c <USB_ActivateEndpoint+0x5d8>)
 8002ee6:	4322      	orrs	r2, r4
 8002ee8:	b292      	uxth	r2, r2
 8002eea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	18d3      	adds	r3, r2, r3
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4a59      	ldr	r2, [pc, #356]	; (8003060 <USB_ActivateEndpoint+0x5dc>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	b29c      	uxth	r4, r3
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	18d3      	adds	r3, r2, r3
 8002f0a:	4a54      	ldr	r2, [pc, #336]	; (800305c <USB_ActivateEndpoint+0x5d8>)
 8002f0c:	4322      	orrs	r2, r4
 8002f0e:	b292      	uxth	r2, r2
 8002f10:	801a      	strh	r2, [r3, #0]
 8002f12:	e090      	b.n	8003036 <USB_ActivateEndpoint+0x5b2>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	18d3      	adds	r3, r2, r3
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	b29c      	uxth	r4, r3
 8002f22:	0022      	movs	r2, r4
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	01db      	lsls	r3, r3, #7
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d012      	beq.n	8002f52 <USB_ActivateEndpoint+0x4ce>
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	18d3      	adds	r3, r2, r3
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	4a42      	ldr	r2, [pc, #264]	; (8003044 <USB_ActivateEndpoint+0x5c0>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	b29c      	uxth	r4, r3
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	18d3      	adds	r3, r2, r3
 8002f4a:	4a41      	ldr	r2, [pc, #260]	; (8003050 <USB_ActivateEndpoint+0x5cc>)
 8002f4c:	4322      	orrs	r2, r4
 8002f4e:	b292      	uxth	r2, r2
 8002f50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	18d3      	adds	r3, r2, r3
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	b29c      	uxth	r4, r3
 8002f60:	0022      	movs	r2, r4
 8002f62:	2340      	movs	r3, #64	; 0x40
 8002f64:	4013      	ands	r3, r2
 8002f66:	d012      	beq.n	8002f8e <USB_ActivateEndpoint+0x50a>
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	18d3      	adds	r3, r2, r3
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	4a33      	ldr	r2, [pc, #204]	; (8003044 <USB_ActivateEndpoint+0x5c0>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	b29c      	uxth	r4, r3
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	18d3      	adds	r3, r2, r3
 8002f86:	4a33      	ldr	r2, [pc, #204]	; (8003054 <USB_ActivateEndpoint+0x5d0>)
 8002f88:	4322      	orrs	r2, r4
 8002f8a:	b292      	uxth	r2, r2
 8002f8c:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	18d3      	adds	r3, r2, r3
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	4a29      	ldr	r2, [pc, #164]	; (8003044 <USB_ActivateEndpoint+0x5c0>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	b29c      	uxth	r4, r3
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	18d3      	adds	r3, r2, r3
 8002fac:	4a28      	ldr	r2, [pc, #160]	; (8003050 <USB_ActivateEndpoint+0x5cc>)
 8002fae:	4322      	orrs	r2, r4
 8002fb0:	b292      	uxth	r2, r2
 8002fb2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	78db      	ldrb	r3, [r3, #3]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d016      	beq.n	8002fea <USB_ActivateEndpoint+0x566>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	18d3      	adds	r3, r2, r3
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	4a25      	ldr	r2, [pc, #148]	; (8003060 <USB_ActivateEndpoint+0x5dc>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	b29c      	uxth	r4, r3
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	4063      	eors	r3, r4
 8002fd4:	b29c      	uxth	r4, r3
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	18d3      	adds	r3, r2, r3
 8002fe0:	4a1e      	ldr	r2, [pc, #120]	; (800305c <USB_ActivateEndpoint+0x5d8>)
 8002fe2:	4322      	orrs	r2, r4
 8002fe4:	b292      	uxth	r2, r2
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	e012      	b.n	8003010 <USB_ActivateEndpoint+0x58c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	18d3      	adds	r3, r2, r3
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4a19      	ldr	r2, [pc, #100]	; (8003060 <USB_ActivateEndpoint+0x5dc>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	b29c      	uxth	r4, r3
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	18d3      	adds	r3, r2, r3
 8003008:	4a14      	ldr	r2, [pc, #80]	; (800305c <USB_ActivateEndpoint+0x5d8>)
 800300a:	4322      	orrs	r2, r4
 800300c:	b292      	uxth	r2, r2
 800300e:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	18d3      	adds	r3, r2, r3
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	4a0e      	ldr	r2, [pc, #56]	; (8003058 <USB_ActivateEndpoint+0x5d4>)
 8003020:	4013      	ands	r3, r2
 8003022:	b29c      	uxth	r4, r3
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	18d3      	adds	r3, r2, r3
 800302e:	4a0b      	ldr	r2, [pc, #44]	; (800305c <USB_ActivateEndpoint+0x5d8>)
 8003030:	4322      	orrs	r2, r4
 8003032:	b292      	uxth	r2, r2
 8003034:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8003036:	2317      	movs	r3, #23
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	781b      	ldrb	r3, [r3, #0]
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b007      	add	sp, #28
 8003042:	bd90      	pop	{r4, r7, pc}
 8003044:	ffff8f8f 	.word	0xffff8f8f
 8003048:	ffff8180 	.word	0xffff8180
 800304c:	00000404 	.word	0x00000404
 8003050:	ffffc080 	.word	0xffffc080
 8003054:	ffff80c0 	.word	0xffff80c0
 8003058:	ffffbf8f 	.word	0xffffbf8f
 800305c:	ffff8080 	.word	0xffff8080
 8003060:	ffff8fbf 	.word	0xffff8fbf

08003064 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003064:	b590      	push	{r4, r7, lr}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	7b1b      	ldrb	r3, [r3, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d168      	bne.n	8003148 <USB_DeactivateEndpoint+0xe4>
  {
    if (ep->is_in != 0U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d031      	beq.n	80030e2 <USB_DeactivateEndpoint+0x7e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	18d3      	adds	r3, r2, r3
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	b29c      	uxth	r4, r3
 800308c:	0022      	movs	r2, r4
 800308e:	2340      	movs	r3, #64	; 0x40
 8003090:	4013      	ands	r3, r2
 8003092:	d012      	beq.n	80030ba <USB_DeactivateEndpoint+0x56>
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	18d3      	adds	r3, r2, r3
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	4aa5      	ldr	r2, [pc, #660]	; (8003338 <USB_DeactivateEndpoint+0x2d4>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	b29c      	uxth	r4, r3
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	18d3      	adds	r3, r2, r3
 80030b2:	4aa2      	ldr	r2, [pc, #648]	; (800333c <USB_DeactivateEndpoint+0x2d8>)
 80030b4:	4322      	orrs	r2, r4
 80030b6:	b292      	uxth	r2, r2
 80030b8:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	18d3      	adds	r3, r2, r3
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	4a9d      	ldr	r2, [pc, #628]	; (8003340 <USB_DeactivateEndpoint+0x2dc>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	b29c      	uxth	r4, r3
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	18d3      	adds	r3, r2, r3
 80030d8:	4a9a      	ldr	r2, [pc, #616]	; (8003344 <USB_DeactivateEndpoint+0x2e0>)
 80030da:	4322      	orrs	r2, r4
 80030dc:	b292      	uxth	r2, r2
 80030de:	801a      	strh	r2, [r3, #0]
 80030e0:	e124      	b.n	800332c <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	18d3      	adds	r3, r2, r3
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	b29c      	uxth	r4, r3
 80030f0:	0022      	movs	r2, r4
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	01db      	lsls	r3, r3, #7
 80030f6:	4013      	ands	r3, r2
 80030f8:	d012      	beq.n	8003120 <USB_DeactivateEndpoint+0xbc>
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	18d3      	adds	r3, r2, r3
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	4a8b      	ldr	r2, [pc, #556]	; (8003338 <USB_DeactivateEndpoint+0x2d4>)
 800310a:	4013      	ands	r3, r2
 800310c:	b29c      	uxth	r4, r3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	18d3      	adds	r3, r2, r3
 8003118:	4a8b      	ldr	r2, [pc, #556]	; (8003348 <USB_DeactivateEndpoint+0x2e4>)
 800311a:	4322      	orrs	r2, r4
 800311c:	b292      	uxth	r2, r2
 800311e:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	18d3      	adds	r3, r2, r3
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	4a87      	ldr	r2, [pc, #540]	; (800334c <USB_DeactivateEndpoint+0x2e8>)
 8003130:	4013      	ands	r3, r2
 8003132:	b29c      	uxth	r4, r3
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	18d3      	adds	r3, r2, r3
 800313e:	4a81      	ldr	r2, [pc, #516]	; (8003344 <USB_DeactivateEndpoint+0x2e0>)
 8003140:	4322      	orrs	r2, r4
 8003142:	b292      	uxth	r2, r2
 8003144:	801a      	strh	r2, [r3, #0]
 8003146:	e0f1      	b.n	800332c <USB_DeactivateEndpoint+0x2c8>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	785b      	ldrb	r3, [r3, #1]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d000      	beq.n	8003152 <USB_DeactivateEndpoint+0xee>
 8003150:	e076      	b.n	8003240 <USB_DeactivateEndpoint+0x1dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	18d3      	adds	r3, r2, r3
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29c      	uxth	r4, r3
 8003160:	0022      	movs	r2, r4
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	01db      	lsls	r3, r3, #7
 8003166:	4013      	ands	r3, r2
 8003168:	d012      	beq.n	8003190 <USB_DeactivateEndpoint+0x12c>
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	18d3      	adds	r3, r2, r3
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	4a6f      	ldr	r2, [pc, #444]	; (8003338 <USB_DeactivateEndpoint+0x2d4>)
 800317a:	4013      	ands	r3, r2
 800317c:	b29c      	uxth	r4, r3
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	18d3      	adds	r3, r2, r3
 8003188:	4a6f      	ldr	r2, [pc, #444]	; (8003348 <USB_DeactivateEndpoint+0x2e4>)
 800318a:	4322      	orrs	r2, r4
 800318c:	b292      	uxth	r2, r2
 800318e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	18d3      	adds	r3, r2, r3
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	b29c      	uxth	r4, r3
 800319e:	0022      	movs	r2, r4
 80031a0:	2340      	movs	r3, #64	; 0x40
 80031a2:	4013      	ands	r3, r2
 80031a4:	d012      	beq.n	80031cc <USB_DeactivateEndpoint+0x168>
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	18d3      	adds	r3, r2, r3
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	4a60      	ldr	r2, [pc, #384]	; (8003338 <USB_DeactivateEndpoint+0x2d4>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	b29c      	uxth	r4, r3
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	18d3      	adds	r3, r2, r3
 80031c4:	4a5d      	ldr	r2, [pc, #372]	; (800333c <USB_DeactivateEndpoint+0x2d8>)
 80031c6:	4322      	orrs	r2, r4
 80031c8:	b292      	uxth	r2, r2
 80031ca:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	18d3      	adds	r3, r2, r3
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	4a57      	ldr	r2, [pc, #348]	; (8003338 <USB_DeactivateEndpoint+0x2d4>)
 80031dc:	4013      	ands	r3, r2
 80031de:	b29c      	uxth	r4, r3
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	18d3      	adds	r3, r2, r3
 80031ea:	4a54      	ldr	r2, [pc, #336]	; (800333c <USB_DeactivateEndpoint+0x2d8>)
 80031ec:	4322      	orrs	r2, r4
 80031ee:	b292      	uxth	r2, r2
 80031f0:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	18d3      	adds	r3, r2, r3
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4a52      	ldr	r2, [pc, #328]	; (800334c <USB_DeactivateEndpoint+0x2e8>)
 8003202:	4013      	ands	r3, r2
 8003204:	b29c      	uxth	r4, r3
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	18d3      	adds	r3, r2, r3
 8003210:	4a4c      	ldr	r2, [pc, #304]	; (8003344 <USB_DeactivateEndpoint+0x2e0>)
 8003212:	4322      	orrs	r2, r4
 8003214:	b292      	uxth	r2, r2
 8003216:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	18d3      	adds	r3, r2, r3
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	4a46      	ldr	r2, [pc, #280]	; (8003340 <USB_DeactivateEndpoint+0x2dc>)
 8003228:	4013      	ands	r3, r2
 800322a:	b29c      	uxth	r4, r3
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	18d3      	adds	r3, r2, r3
 8003236:	4a43      	ldr	r2, [pc, #268]	; (8003344 <USB_DeactivateEndpoint+0x2e0>)
 8003238:	4322      	orrs	r2, r4
 800323a:	b292      	uxth	r2, r2
 800323c:	801a      	strh	r2, [r3, #0]
 800323e:	e075      	b.n	800332c <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	18d3      	adds	r3, r2, r3
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	b29c      	uxth	r4, r3
 800324e:	0022      	movs	r2, r4
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	01db      	lsls	r3, r3, #7
 8003254:	4013      	ands	r3, r2
 8003256:	d012      	beq.n	800327e <USB_DeactivateEndpoint+0x21a>
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	18d3      	adds	r3, r2, r3
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	4a34      	ldr	r2, [pc, #208]	; (8003338 <USB_DeactivateEndpoint+0x2d4>)
 8003268:	4013      	ands	r3, r2
 800326a:	b29c      	uxth	r4, r3
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	18d3      	adds	r3, r2, r3
 8003276:	4a34      	ldr	r2, [pc, #208]	; (8003348 <USB_DeactivateEndpoint+0x2e4>)
 8003278:	4322      	orrs	r2, r4
 800327a:	b292      	uxth	r2, r2
 800327c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	18d3      	adds	r3, r2, r3
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b29c      	uxth	r4, r3
 800328c:	0022      	movs	r2, r4
 800328e:	2340      	movs	r3, #64	; 0x40
 8003290:	4013      	ands	r3, r2
 8003292:	d012      	beq.n	80032ba <USB_DeactivateEndpoint+0x256>
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	18d3      	adds	r3, r2, r3
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	4a25      	ldr	r2, [pc, #148]	; (8003338 <USB_DeactivateEndpoint+0x2d4>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	b29c      	uxth	r4, r3
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	18d3      	adds	r3, r2, r3
 80032b2:	4a22      	ldr	r2, [pc, #136]	; (800333c <USB_DeactivateEndpoint+0x2d8>)
 80032b4:	4322      	orrs	r2, r4
 80032b6:	b292      	uxth	r2, r2
 80032b8:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	18d3      	adds	r3, r2, r3
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	4a1b      	ldr	r2, [pc, #108]	; (8003338 <USB_DeactivateEndpoint+0x2d4>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	b29c      	uxth	r4, r3
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	18d3      	adds	r3, r2, r3
 80032d8:	4a1b      	ldr	r2, [pc, #108]	; (8003348 <USB_DeactivateEndpoint+0x2e4>)
 80032da:	4322      	orrs	r2, r4
 80032dc:	b292      	uxth	r2, r2
 80032de:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	18d3      	adds	r3, r2, r3
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	4a14      	ldr	r2, [pc, #80]	; (8003340 <USB_DeactivateEndpoint+0x2dc>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	b29c      	uxth	r4, r3
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	18d3      	adds	r3, r2, r3
 80032fe:	4a11      	ldr	r2, [pc, #68]	; (8003344 <USB_DeactivateEndpoint+0x2e0>)
 8003300:	4322      	orrs	r2, r4
 8003302:	b292      	uxth	r2, r2
 8003304:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	18d3      	adds	r3, r2, r3
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	b29b      	uxth	r3, r3
 8003314:	4a0d      	ldr	r2, [pc, #52]	; (800334c <USB_DeactivateEndpoint+0x2e8>)
 8003316:	4013      	ands	r3, r2
 8003318:	b29c      	uxth	r4, r3
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	18d3      	adds	r3, r2, r3
 8003324:	4a07      	ldr	r2, [pc, #28]	; (8003344 <USB_DeactivateEndpoint+0x2e0>)
 8003326:	4322      	orrs	r2, r4
 8003328:	b292      	uxth	r2, r2
 800332a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	0018      	movs	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	b003      	add	sp, #12
 8003334:	bd90      	pop	{r4, r7, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	ffff8f8f 	.word	0xffff8f8f
 800333c:	ffff80c0 	.word	0xffff80c0
 8003340:	ffff8fbf 	.word	0xffff8fbf
 8003344:	ffff8080 	.word	0xffff8080
 8003348:	ffffc080 	.word	0xffffc080
 800334c:	ffffbf8f 	.word	0xffffbf8f

08003350 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b095      	sub	sp, #84	; 0x54
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	785b      	ldrb	r3, [r3, #1]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d000      	beq.n	8003364 <USB_EPStartXfer+0x14>
 8003362:	e155      	b.n	8003610 <USB_EPStartXfer+0x2c0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	699a      	ldr	r2, [r3, #24]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	429a      	cmp	r2, r3
 800336e:	d909      	bls.n	8003384 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800337c:	1ad2      	subs	r2, r2, r3
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	619a      	str	r2, [r3, #24]
 8003382:	e005      	b.n	8003390 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2200      	movs	r2, #0
 800338e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	7b1b      	ldrb	r3, [r3, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d11b      	bne.n	80033d0 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6959      	ldr	r1, [r3, #20]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	88da      	ldrh	r2, [r3, #6]
 80033a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fb93 	bl	8003ad0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80033aa:	687c      	ldr	r4, [r7, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2250      	movs	r2, #80	; 0x50
 80033b0:	5a9b      	ldrh	r3, [r3, r2]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	18e4      	adds	r4, r4, r3
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	18e3      	adds	r3, r4, r3
 80033be:	4ad4      	ldr	r2, [pc, #848]	; (8003710 <USB_EPStartXfer+0x3c0>)
 80033c0:	4694      	mov	ip, r2
 80033c2:	4463      	add	r3, ip
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	801a      	strh	r2, [r3, #0]
 80033ce:	e105      	b.n	80035dc <USB_EPStartXfer+0x28c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	18d3      	adds	r3, r2, r3
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	001a      	movs	r2, r3
 80033e0:	2340      	movs	r3, #64	; 0x40
 80033e2:	4013      	ands	r3, r2
 80033e4:	d060      	beq.n	80034a8 <USB_EPStartXfer+0x158>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80033e6:	687c      	ldr	r4, [r7, #4]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	785b      	ldrb	r3, [r3, #1]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d140      	bne.n	8003472 <USB_EPStartXfer+0x122>
 80033f0:	687c      	ldr	r4, [r7, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2250      	movs	r2, #80	; 0x50
 80033f6:	5a9b      	ldrh	r3, [r3, r2]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	18e4      	adds	r4, r4, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	18e3      	adds	r3, r4, r3
 8003404:	4ac3      	ldr	r2, [pc, #780]	; (8003714 <USB_EPStartXfer+0x3c4>)
 8003406:	4694      	mov	ip, r2
 8003408:	4463      	add	r3, ip
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10e      	bne.n	8003430 <USB_EPStartXfer+0xe0>
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	4ac0      	ldr	r2, [pc, #768]	; (8003718 <USB_EPStartXfer+0x3c8>)
 8003418:	4013      	ands	r3, r2
 800341a:	b29a      	uxth	r2, r3
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	801a      	strh	r2, [r3, #0]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	4abd      	ldr	r2, [pc, #756]	; (800371c <USB_EPStartXfer+0x3cc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	b29a      	uxth	r2, r3
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	801a      	strh	r2, [r3, #0]
 800342e:	e035      	b.n	800349c <USB_EPStartXfer+0x14c>
 8003430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003432:	2b3d      	cmp	r3, #61	; 0x3d
 8003434:	d810      	bhi.n	8003458 <USB_EPStartXfer+0x108>
 8003436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	647b      	str	r3, [r7, #68]	; 0x44
 800343c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800343e:	2201      	movs	r2, #1
 8003440:	4013      	ands	r3, r2
 8003442:	d002      	beq.n	800344a <USB_EPStartXfer+0xfa>
 8003444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003446:	3301      	adds	r3, #1
 8003448:	647b      	str	r3, [r7, #68]	; 0x44
 800344a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344c:	b29b      	uxth	r3, r3
 800344e:	029b      	lsls	r3, r3, #10
 8003450:	b29a      	uxth	r2, r3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	801a      	strh	r2, [r3, #0]
 8003456:	e021      	b.n	800349c <USB_EPStartXfer+0x14c>
 8003458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	647b      	str	r3, [r7, #68]	; 0x44
 800345e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003460:	b29b      	uxth	r3, r3
 8003462:	029b      	lsls	r3, r3, #10
 8003464:	b29b      	uxth	r3, r3
 8003466:	4aad      	ldr	r2, [pc, #692]	; (800371c <USB_EPStartXfer+0x3cc>)
 8003468:	4313      	orrs	r3, r2
 800346a:	b29a      	uxth	r2, r3
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	801a      	strh	r2, [r3, #0]
 8003470:	e014      	b.n	800349c <USB_EPStartXfer+0x14c>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	785b      	ldrb	r3, [r3, #1]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d110      	bne.n	800349c <USB_EPStartXfer+0x14c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2250      	movs	r2, #80	; 0x50
 800347e:	5a9b      	ldrh	r3, [r3, r2]
 8003480:	b29b      	uxth	r3, r3
 8003482:	18e4      	adds	r4, r4, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	18e3      	adds	r3, r4, r3
 800348c:	4aa1      	ldr	r2, [pc, #644]	; (8003714 <USB_EPStartXfer+0x3c4>)
 800348e:	4694      	mov	ip, r2
 8003490:	4463      	add	r3, ip
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003496:	b29a      	uxth	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800349c:	234e      	movs	r3, #78	; 0x4e
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	8952      	ldrh	r2, [r2, #10]
 80034a4:	801a      	strh	r2, [r3, #0]
 80034a6:	e05f      	b.n	8003568 <USB_EPStartXfer+0x218>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	785b      	ldrb	r3, [r3, #1]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d140      	bne.n	8003532 <USB_EPStartXfer+0x1e2>
 80034b0:	687c      	ldr	r4, [r7, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2250      	movs	r2, #80	; 0x50
 80034b6:	5a9b      	ldrh	r3, [r3, r2]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	18e4      	adds	r4, r4, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	18e3      	adds	r3, r4, r3
 80034c4:	4a92      	ldr	r2, [pc, #584]	; (8003710 <USB_EPStartXfer+0x3c0>)
 80034c6:	4694      	mov	ip, r2
 80034c8:	4463      	add	r3, ip
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10e      	bne.n	80034f0 <USB_EPStartXfer+0x1a0>
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	4a90      	ldr	r2, [pc, #576]	; (8003718 <USB_EPStartXfer+0x3c8>)
 80034d8:	4013      	ands	r3, r2
 80034da:	b29a      	uxth	r2, r3
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	801a      	strh	r2, [r3, #0]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	4a8d      	ldr	r2, [pc, #564]	; (800371c <USB_EPStartXfer+0x3cc>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	801a      	strh	r2, [r3, #0]
 80034ee:	e036      	b.n	800355e <USB_EPStartXfer+0x20e>
 80034f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f2:	2b3d      	cmp	r3, #61	; 0x3d
 80034f4:	d810      	bhi.n	8003518 <USB_EPStartXfer+0x1c8>
 80034f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	643b      	str	r3, [r7, #64]	; 0x40
 80034fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fe:	2201      	movs	r2, #1
 8003500:	4013      	ands	r3, r2
 8003502:	d002      	beq.n	800350a <USB_EPStartXfer+0x1ba>
 8003504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003506:	3301      	adds	r3, #1
 8003508:	643b      	str	r3, [r7, #64]	; 0x40
 800350a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350c:	b29b      	uxth	r3, r3
 800350e:	029b      	lsls	r3, r3, #10
 8003510:	b29a      	uxth	r2, r3
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	801a      	strh	r2, [r3, #0]
 8003516:	e022      	b.n	800355e <USB_EPStartXfer+0x20e>
 8003518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	643b      	str	r3, [r7, #64]	; 0x40
 800351e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003520:	b29b      	uxth	r3, r3
 8003522:	029b      	lsls	r3, r3, #10
 8003524:	b29b      	uxth	r3, r3
 8003526:	4a7d      	ldr	r2, [pc, #500]	; (800371c <USB_EPStartXfer+0x3cc>)
 8003528:	4313      	orrs	r3, r2
 800352a:	b29a      	uxth	r2, r3
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	801a      	strh	r2, [r3, #0]
 8003530:	e015      	b.n	800355e <USB_EPStartXfer+0x20e>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	785b      	ldrb	r3, [r3, #1]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d111      	bne.n	800355e <USB_EPStartXfer+0x20e>
 800353a:	687c      	ldr	r4, [r7, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2250      	movs	r2, #80	; 0x50
 8003540:	5a9b      	ldrh	r3, [r3, r2]
 8003542:	b29b      	uxth	r3, r3
 8003544:	18e4      	adds	r4, r4, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	18e3      	adds	r3, r4, r3
 800354e:	4a70      	ldr	r2, [pc, #448]	; (8003710 <USB_EPStartXfer+0x3c0>)
 8003550:	4694      	mov	ip, r2
 8003552:	4463      	add	r3, ip
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003558:	b29a      	uxth	r2, r3
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800355e:	234e      	movs	r3, #78	; 0x4e
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	8912      	ldrh	r2, [r2, #8]
 8003566:	801a      	strh	r2, [r3, #0]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	6959      	ldr	r1, [r3, #20]
 800356c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800356e:	b29c      	uxth	r4, r3
 8003570:	234e      	movs	r3, #78	; 0x4e
 8003572:	18fb      	adds	r3, r7, r3
 8003574:	881a      	ldrh	r2, [r3, #0]
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	0023      	movs	r3, r4
 800357a:	f000 faa9 	bl	8003ad0 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	785b      	ldrb	r3, [r3, #1]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d113      	bne.n	80035ae <USB_EPStartXfer+0x25e>
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	18d3      	adds	r3, r2, r3
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	4a62      	ldr	r2, [pc, #392]	; (8003720 <USB_EPStartXfer+0x3d0>)
 8003596:	4013      	ands	r3, r2
 8003598:	b29c      	uxth	r4, r3
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	18d3      	adds	r3, r2, r3
 80035a4:	4a5f      	ldr	r2, [pc, #380]	; (8003724 <USB_EPStartXfer+0x3d4>)
 80035a6:	4322      	orrs	r2, r4
 80035a8:	b292      	uxth	r2, r2
 80035aa:	801a      	strh	r2, [r3, #0]
 80035ac:	e016      	b.n	80035dc <USB_EPStartXfer+0x28c>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	785b      	ldrb	r3, [r3, #1]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d112      	bne.n	80035dc <USB_EPStartXfer+0x28c>
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	18d3      	adds	r3, r2, r3
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	4a56      	ldr	r2, [pc, #344]	; (8003720 <USB_EPStartXfer+0x3d0>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	b29c      	uxth	r4, r3
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	18d3      	adds	r3, r2, r3
 80035d4:	4a54      	ldr	r2, [pc, #336]	; (8003728 <USB_EPStartXfer+0x3d8>)
 80035d6:	4322      	orrs	r2, r4
 80035d8:	b292      	uxth	r2, r2
 80035da:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	18d3      	adds	r3, r2, r3
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	4a50      	ldr	r2, [pc, #320]	; (800372c <USB_EPStartXfer+0x3dc>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	b29c      	uxth	r4, r3
 80035f0:	2310      	movs	r3, #16
 80035f2:	4063      	eors	r3, r4
 80035f4:	b29c      	uxth	r4, r3
 80035f6:	2320      	movs	r3, #32
 80035f8:	4063      	eors	r3, r4
 80035fa:	b29c      	uxth	r4, r3
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	18d3      	adds	r3, r2, r3
 8003606:	4a4a      	ldr	r2, [pc, #296]	; (8003730 <USB_EPStartXfer+0x3e0>)
 8003608:	4322      	orrs	r2, r4
 800360a:	b292      	uxth	r2, r2
 800360c:	801a      	strh	r2, [r3, #0]
 800360e:	e13e      	b.n	800388e <USB_EPStartXfer+0x53e>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	699a      	ldr	r2, [r3, #24]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	429a      	cmp	r2, r3
 800361a:	d909      	bls.n	8003630 <USB_EPStartXfer+0x2e0>
    {
      len = ep->maxpacket;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003628:	1ad2      	subs	r2, r2, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	619a      	str	r2, [r3, #24]
 800362e:	e005      	b.n	800363c <USB_EPStartXfer+0x2ec>
    }
    else
    {
      len = ep->xfer_len;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2200      	movs	r2, #0
 800363a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	7b1b      	ldrb	r3, [r3, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d140      	bne.n	80036c6 <USB_EPStartXfer+0x376>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003644:	687c      	ldr	r4, [r7, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2250      	movs	r2, #80	; 0x50
 800364a:	5a9b      	ldrh	r3, [r3, r2]
 800364c:	b29b      	uxth	r3, r3
 800364e:	18e4      	adds	r4, r4, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	18e3      	adds	r3, r4, r3
 8003658:	4a2e      	ldr	r2, [pc, #184]	; (8003714 <USB_EPStartXfer+0x3c4>)
 800365a:	4694      	mov	ip, r2
 800365c:	4463      	add	r3, ip
 800365e:	623b      	str	r3, [r7, #32]
 8003660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10e      	bne.n	8003684 <USB_EPStartXfer+0x334>
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	4a2b      	ldr	r2, [pc, #172]	; (8003718 <USB_EPStartXfer+0x3c8>)
 800366c:	4013      	ands	r3, r2
 800366e:	b29a      	uxth	r2, r3
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	4a28      	ldr	r2, [pc, #160]	; (800371c <USB_EPStartXfer+0x3cc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	b29a      	uxth	r2, r3
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	801a      	strh	r2, [r3, #0]
 8003682:	e0e9      	b.n	8003858 <USB_EPStartXfer+0x508>
 8003684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003686:	2b3d      	cmp	r3, #61	; 0x3d
 8003688:	d810      	bhi.n	80036ac <USB_EPStartXfer+0x35c>
 800368a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003692:	2201      	movs	r2, #1
 8003694:	4013      	ands	r3, r2
 8003696:	d002      	beq.n	800369e <USB_EPStartXfer+0x34e>
 8003698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369a:	3301      	adds	r3, #1
 800369c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800369e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	029b      	lsls	r3, r3, #10
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	801a      	strh	r2, [r3, #0]
 80036aa:	e0d5      	b.n	8003858 <USB_EPStartXfer+0x508>
 80036ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	029b      	lsls	r3, r3, #10
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	4a18      	ldr	r2, [pc, #96]	; (800371c <USB_EPStartXfer+0x3cc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	b29a      	uxth	r2, r3
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	801a      	strh	r2, [r3, #0]
 80036c4:	e0c8      	b.n	8003858 <USB_EPStartXfer+0x508>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	785b      	ldrb	r3, [r3, #1]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d153      	bne.n	8003776 <USB_EPStartXfer+0x426>
 80036ce:	687c      	ldr	r4, [r7, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2250      	movs	r2, #80	; 0x50
 80036d4:	5a9b      	ldrh	r3, [r3, r2]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	18e4      	adds	r4, r4, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	18e3      	adds	r3, r4, r3
 80036e2:	4a0b      	ldr	r2, [pc, #44]	; (8003710 <USB_EPStartXfer+0x3c0>)
 80036e4:	4694      	mov	ip, r2
 80036e6:	4463      	add	r3, ip
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d121      	bne.n	8003734 <USB_EPStartXfer+0x3e4>
 80036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	4a08      	ldr	r2, [pc, #32]	; (8003718 <USB_EPStartXfer+0x3c8>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	4a06      	ldr	r2, [pc, #24]	; (800371c <USB_EPStartXfer+0x3cc>)
 8003704:	4313      	orrs	r3, r2
 8003706:	b29a      	uxth	r2, r3
 8003708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370a:	801a      	strh	r2, [r3, #0]
 800370c:	e049      	b.n	80037a2 <USB_EPStartXfer+0x452>
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	00000402 	.word	0x00000402
 8003714:	00000406 	.word	0x00000406
 8003718:	ffff83ff 	.word	0xffff83ff
 800371c:	ffff8000 	.word	0xffff8000
 8003720:	ffff8f8f 	.word	0xffff8f8f
 8003724:	ffff80c0 	.word	0xffff80c0
 8003728:	ffffc080 	.word	0xffffc080
 800372c:	ffff8fbf 	.word	0xffff8fbf
 8003730:	ffff8080 	.word	0xffff8080
 8003734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003736:	2b3d      	cmp	r3, #61	; 0x3d
 8003738:	d810      	bhi.n	800375c <USB_EPStartXfer+0x40c>
 800373a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800373c:	085b      	lsrs	r3, r3, #1
 800373e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003742:	2201      	movs	r2, #1
 8003744:	4013      	ands	r3, r2
 8003746:	d002      	beq.n	800374e <USB_EPStartXfer+0x3fe>
 8003748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374a:	3301      	adds	r3, #1
 800374c:	63bb      	str	r3, [r7, #56]	; 0x38
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	b29b      	uxth	r3, r3
 8003752:	029b      	lsls	r3, r3, #10
 8003754:	b29a      	uxth	r2, r3
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	801a      	strh	r2, [r3, #0]
 800375a:	e022      	b.n	80037a2 <USB_EPStartXfer+0x452>
 800375c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	63bb      	str	r3, [r7, #56]	; 0x38
 8003762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003764:	b29b      	uxth	r3, r3
 8003766:	029b      	lsls	r3, r3, #10
 8003768:	b29b      	uxth	r3, r3
 800376a:	4a4b      	ldr	r2, [pc, #300]	; (8003898 <USB_EPStartXfer+0x548>)
 800376c:	4313      	orrs	r3, r2
 800376e:	b29a      	uxth	r2, r3
 8003770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003772:	801a      	strh	r2, [r3, #0]
 8003774:	e015      	b.n	80037a2 <USB_EPStartXfer+0x452>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	785b      	ldrb	r3, [r3, #1]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d111      	bne.n	80037a2 <USB_EPStartXfer+0x452>
 800377e:	687c      	ldr	r4, [r7, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2250      	movs	r2, #80	; 0x50
 8003784:	5a9b      	ldrh	r3, [r3, r2]
 8003786:	b29b      	uxth	r3, r3
 8003788:	18e4      	adds	r4, r4, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	18e3      	adds	r3, r4, r3
 8003792:	4a42      	ldr	r2, [pc, #264]	; (800389c <USB_EPStartXfer+0x54c>)
 8003794:	4694      	mov	ip, r2
 8003796:	4463      	add	r3, ip
 8003798:	633b      	str	r3, [r7, #48]	; 0x30
 800379a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800379c:	b29a      	uxth	r2, r3
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	801a      	strh	r2, [r3, #0]
 80037a2:	687c      	ldr	r4, [r7, #4]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	785b      	ldrb	r3, [r3, #1]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d140      	bne.n	800382e <USB_EPStartXfer+0x4de>
 80037ac:	687c      	ldr	r4, [r7, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2250      	movs	r2, #80	; 0x50
 80037b2:	5a9b      	ldrh	r3, [r3, r2]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	18e4      	adds	r4, r4, r3
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	18e3      	adds	r3, r4, r3
 80037c0:	4a37      	ldr	r2, [pc, #220]	; (80038a0 <USB_EPStartXfer+0x550>)
 80037c2:	4694      	mov	ip, r2
 80037c4:	4463      	add	r3, ip
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
 80037c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10e      	bne.n	80037ec <USB_EPStartXfer+0x49c>
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	4a34      	ldr	r2, [pc, #208]	; (80038a4 <USB_EPStartXfer+0x554>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	801a      	strh	r2, [r3, #0]
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	4a2d      	ldr	r2, [pc, #180]	; (8003898 <USB_EPStartXfer+0x548>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	801a      	strh	r2, [r3, #0]
 80037ea:	e035      	b.n	8003858 <USB_EPStartXfer+0x508>
 80037ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ee:	2b3d      	cmp	r3, #61	; 0x3d
 80037f0:	d810      	bhi.n	8003814 <USB_EPStartXfer+0x4c4>
 80037f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037f4:	085b      	lsrs	r3, r3, #1
 80037f6:	637b      	str	r3, [r7, #52]	; 0x34
 80037f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037fa:	2201      	movs	r2, #1
 80037fc:	4013      	ands	r3, r2
 80037fe:	d002      	beq.n	8003806 <USB_EPStartXfer+0x4b6>
 8003800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003802:	3301      	adds	r3, #1
 8003804:	637b      	str	r3, [r7, #52]	; 0x34
 8003806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003808:	b29b      	uxth	r3, r3
 800380a:	029b      	lsls	r3, r3, #10
 800380c:	b29a      	uxth	r2, r3
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	801a      	strh	r2, [r3, #0]
 8003812:	e021      	b.n	8003858 <USB_EPStartXfer+0x508>
 8003814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	637b      	str	r3, [r7, #52]	; 0x34
 800381a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381c:	b29b      	uxth	r3, r3
 800381e:	029b      	lsls	r3, r3, #10
 8003820:	b29b      	uxth	r3, r3
 8003822:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <USB_EPStartXfer+0x548>)
 8003824:	4313      	orrs	r3, r2
 8003826:	b29a      	uxth	r2, r3
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	801a      	strh	r2, [r3, #0]
 800382c:	e014      	b.n	8003858 <USB_EPStartXfer+0x508>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	785b      	ldrb	r3, [r3, #1]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d110      	bne.n	8003858 <USB_EPStartXfer+0x508>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2250      	movs	r2, #80	; 0x50
 800383a:	5a9b      	ldrh	r3, [r3, r2]
 800383c:	b29b      	uxth	r3, r3
 800383e:	18e4      	adds	r4, r4, r3
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	18e3      	adds	r3, r4, r3
 8003848:	4a15      	ldr	r2, [pc, #84]	; (80038a0 <USB_EPStartXfer+0x550>)
 800384a:	4694      	mov	ip, r2
 800384c:	4463      	add	r3, ip
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003852:	b29a      	uxth	r2, r3
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	18d3      	adds	r3, r2, r3
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	4a10      	ldr	r2, [pc, #64]	; (80038a8 <USB_EPStartXfer+0x558>)
 8003868:	4013      	ands	r3, r2
 800386a:	b29c      	uxth	r4, r3
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	015b      	lsls	r3, r3, #5
 8003870:	4063      	eors	r3, r4
 8003872:	b29c      	uxth	r4, r3
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	019b      	lsls	r3, r3, #6
 8003878:	4063      	eors	r3, r4
 800387a:	b29c      	uxth	r4, r3
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	18d3      	adds	r3, r2, r3
 8003886:	4a09      	ldr	r2, [pc, #36]	; (80038ac <USB_EPStartXfer+0x55c>)
 8003888:	4322      	orrs	r2, r4
 800388a:	b292      	uxth	r2, r2
 800388c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	0018      	movs	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	b015      	add	sp, #84	; 0x54
 8003896:	bd90      	pop	{r4, r7, pc}
 8003898:	ffff8000 	.word	0xffff8000
 800389c:	00000402 	.word	0x00000402
 80038a0:	00000406 	.word	0x00000406
 80038a4:	ffff83ff 	.word	0xffff83ff
 80038a8:	ffffbf8f 	.word	0xffffbf8f
 80038ac:	ffff8080 	.word	0xffff8080

080038b0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	785b      	ldrb	r3, [r3, #1]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d016      	beq.n	80038f0 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	18d3      	adds	r3, r2, r3
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4a15      	ldr	r2, [pc, #84]	; (8003928 <USB_EPSetStall+0x78>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	b29c      	uxth	r4, r3
 80038d6:	2310      	movs	r3, #16
 80038d8:	4063      	eors	r3, r4
 80038da:	b29c      	uxth	r4, r3
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	18d3      	adds	r3, r2, r3
 80038e6:	4a11      	ldr	r2, [pc, #68]	; (800392c <USB_EPSetStall+0x7c>)
 80038e8:	4322      	orrs	r2, r4
 80038ea:	b292      	uxth	r2, r2
 80038ec:	801a      	strh	r2, [r3, #0]
 80038ee:	e016      	b.n	800391e <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	18d3      	adds	r3, r2, r3
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <USB_EPSetStall+0x80>)
 8003900:	4013      	ands	r3, r2
 8003902:	b29c      	uxth	r4, r3
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	015b      	lsls	r3, r3, #5
 8003908:	4063      	eors	r3, r4
 800390a:	b29c      	uxth	r4, r3
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	18d3      	adds	r3, r2, r3
 8003916:	4a05      	ldr	r2, [pc, #20]	; (800392c <USB_EPSetStall+0x7c>)
 8003918:	4322      	orrs	r2, r4
 800391a:	b292      	uxth	r2, r2
 800391c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	b003      	add	sp, #12
 8003926:	bd90      	pop	{r4, r7, pc}
 8003928:	ffff8fbf 	.word	0xffff8fbf
 800392c:	ffff8080 	.word	0xffff8080
 8003930:	ffffbf8f 	.word	0xffffbf8f

08003934 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	785b      	ldrb	r3, [r3, #1]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d037      	beq.n	80039b6 <USB_EPClearStall+0x82>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	18d3      	adds	r3, r2, r3
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29c      	uxth	r4, r3
 8003954:	0022      	movs	r2, r4
 8003956:	2340      	movs	r3, #64	; 0x40
 8003958:	4013      	ands	r3, r2
 800395a:	d012      	beq.n	8003982 <USB_EPClearStall+0x4e>
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	18d3      	adds	r3, r2, r3
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	4a32      	ldr	r2, [pc, #200]	; (8003a34 <USB_EPClearStall+0x100>)
 800396c:	4013      	ands	r3, r2
 800396e:	b29c      	uxth	r4, r3
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	18d3      	adds	r3, r2, r3
 800397a:	4a2f      	ldr	r2, [pc, #188]	; (8003a38 <USB_EPClearStall+0x104>)
 800397c:	4322      	orrs	r2, r4
 800397e:	b292      	uxth	r2, r2
 8003980:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	18d3      	adds	r3, r2, r3
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	4a2a      	ldr	r2, [pc, #168]	; (8003a3c <USB_EPClearStall+0x108>)
 8003992:	4013      	ands	r3, r2
 8003994:	b29c      	uxth	r4, r3
 8003996:	2310      	movs	r3, #16
 8003998:	4063      	eors	r3, r4
 800399a:	b29c      	uxth	r4, r3
 800399c:	2320      	movs	r3, #32
 800399e:	4063      	eors	r3, r4
 80039a0:	b29c      	uxth	r4, r3
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	18d3      	adds	r3, r2, r3
 80039ac:	4a24      	ldr	r2, [pc, #144]	; (8003a40 <USB_EPClearStall+0x10c>)
 80039ae:	4322      	orrs	r2, r4
 80039b0:	b292      	uxth	r2, r2
 80039b2:	801a      	strh	r2, [r3, #0]
 80039b4:	e039      	b.n	8003a2a <USB_EPClearStall+0xf6>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	18d3      	adds	r3, r2, r3
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b29c      	uxth	r4, r3
 80039c4:	0022      	movs	r2, r4
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	01db      	lsls	r3, r3, #7
 80039ca:	4013      	ands	r3, r2
 80039cc:	d012      	beq.n	80039f4 <USB_EPClearStall+0xc0>
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	18d3      	adds	r3, r2, r3
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <USB_EPClearStall+0x100>)
 80039de:	4013      	ands	r3, r2
 80039e0:	b29c      	uxth	r4, r3
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	18d3      	adds	r3, r2, r3
 80039ec:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <USB_EPClearStall+0x110>)
 80039ee:	4322      	orrs	r2, r4
 80039f0:	b292      	uxth	r2, r2
 80039f2:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	18d3      	adds	r3, r2, r3
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	4a11      	ldr	r2, [pc, #68]	; (8003a48 <USB_EPClearStall+0x114>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	b29c      	uxth	r4, r3
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	015b      	lsls	r3, r3, #5
 8003a0c:	4063      	eors	r3, r4
 8003a0e:	b29c      	uxth	r4, r3
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	019b      	lsls	r3, r3, #6
 8003a14:	4063      	eors	r3, r4
 8003a16:	b29c      	uxth	r4, r3
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	18d3      	adds	r3, r2, r3
 8003a22:	4a07      	ldr	r2, [pc, #28]	; (8003a40 <USB_EPClearStall+0x10c>)
 8003a24:	4322      	orrs	r2, r4
 8003a26:	b292      	uxth	r2, r2
 8003a28:	801a      	strh	r2, [r3, #0]
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b003      	add	sp, #12
 8003a32:	bd90      	pop	{r4, r7, pc}
 8003a34:	ffff8f8f 	.word	0xffff8f8f
 8003a38:	ffff80c0 	.word	0xffff80c0
 8003a3c:	ffff8fbf 	.word	0xffff8fbf
 8003a40:	ffff8080 	.word	0xffff8080
 8003a44:	ffffc080 	.word	0xffffc080
 8003a48:	ffffbf8f 	.word	0xffffbf8f

08003a4c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	000a      	movs	r2, r1
 8003a56:	1cfb      	adds	r3, r7, #3
 8003a58:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8003a5a:	1cfb      	adds	r3, r7, #3
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d103      	bne.n	8003a6a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	224c      	movs	r2, #76	; 0x4c
 8003a66:	2180      	movs	r1, #128	; 0x80
 8003a68:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b002      	add	sp, #8
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2258      	movs	r2, #88	; 0x58
 8003a80:	5a9b      	ldrh	r3, [r3, r2]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	4a05      	ldr	r2, [pc, #20]	; (8003a9c <USB_DevConnect+0x28>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	b299      	uxth	r1, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2258      	movs	r2, #88	; 0x58
 8003a8e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	0018      	movs	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b002      	add	sp, #8
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	ffff8000 	.word	0xffff8000

08003aa0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2244      	movs	r2, #68	; 0x44
 8003aac:	5a9b      	ldrh	r3, [r3, r2]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b004      	add	sp, #16
 8003aba:	bd80      	pop	{r7, pc}

08003abc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	0018      	movs	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b002      	add	sp, #8
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	0019      	movs	r1, r3
 8003adc:	1dbb      	adds	r3, r7, #6
 8003ade:	801a      	strh	r2, [r3, #0]
 8003ae0:	1d3b      	adds	r3, r7, #4
 8003ae2:	1c0a      	adds	r2, r1, #0
 8003ae4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	3301      	adds	r3, #1
 8003aec:	085b      	lsrs	r3, r3, #1
 8003aee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003af8:	1dbb      	adds	r3, r7, #6
 8003afa:	881a      	ldrh	r2, [r3, #0]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	18d3      	adds	r3, r2, r3
 8003b00:	2280      	movs	r2, #128	; 0x80
 8003b02:	00d2      	lsls	r2, r2, #3
 8003b04:	4694      	mov	ip, r2
 8003b06:	4463      	add	r3, ip
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b0e:	e01b      	b.n	8003b48 <USB_WritePMA+0x78>
  {
    temp1 = (uint16_t) * pBuf;
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	3301      	adds	r3, #1
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	001a      	movs	r2, r3
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	3302      	adds	r3, #2
 8003b3a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	3301      	adds	r3, #1
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	3b01      	subs	r3, #1
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1e0      	bne.n	8003b10 <USB_WritePMA+0x40>
  }
}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b00c      	add	sp, #48	; 0x30
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b08a      	sub	sp, #40	; 0x28
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	0019      	movs	r1, r3
 8003b62:	1dbb      	adds	r3, r7, #6
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	1d3b      	adds	r3, r7, #4
 8003b68:	1c0a      	adds	r2, r1, #0
 8003b6a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003b6c:	1d3b      	adds	r3, r7, #4
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b7e:	1dbb      	adds	r3, r7, #6
 8003b80:	881a      	ldrh	r2, [r3, #0]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	18d3      	adds	r3, r2, r3
 8003b86:	2280      	movs	r2, #128	; 0x80
 8003b88:	00d2      	lsls	r2, r2, #3
 8003b8a:	4694      	mov	ip, r2
 8003b8c:	4463      	add	r3, ip
 8003b8e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
 8003b94:	e017      	b.n	8003bc6 <USB_ReadPMA+0x70>
  {
    temp = *pdwVal;
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	3302      	adds	r3, #2
 8003ba0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3301      	adds	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	0a1b      	lsrs	r3, r3, #8
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e4      	bne.n	8003b96 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003bcc:	1d3b      	adds	r3, r7, #4
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d006      	beq.n	8003be8 <USB_ReadPMA+0x92>
  {
    temp = *pdwVal;
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	701a      	strb	r2, [r3, #0]
  }
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b00a      	add	sp, #40	; 0x28
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	000a      	movs	r2, r1
 8003bfa:	1cfb      	adds	r3, r7, #3
 8003bfc:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8003bfe:	230f      	movs	r3, #15
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	7c1b      	ldrb	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d116      	bne.n	8003c3c <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	2181      	movs	r1, #129	; 0x81
 8003c18:	f003 fc16 	bl	8007448 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	f003 fc0c 	bl	8007448 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	23ac      	movs	r3, #172	; 0xac
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	2101      	movs	r1, #1
 8003c38:	50d1      	str	r1, [r2, r3]
 8003c3a:	e013      	b.n	8003c64 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	2340      	movs	r3, #64	; 0x40
 8003c40:	2202      	movs	r2, #2
 8003c42:	2181      	movs	r1, #129	; 0x81
 8003c44:	f003 fc00 	bl	8007448 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	2340      	movs	r3, #64	; 0x40
 8003c52:	2202      	movs	r2, #2
 8003c54:	2101      	movs	r1, #1
 8003c56:	f003 fbf7 	bl	8007448 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	23ac      	movs	r3, #172	; 0xac
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	2101      	movs	r1, #1
 8003c62:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	2308      	movs	r3, #8
 8003c68:	2203      	movs	r2, #3
 8003c6a:	2182      	movs	r1, #130	; 0x82
 8003c6c:	f003 fbec 	bl	8007448 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003c76:	2387      	movs	r3, #135	; 0x87
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f003 fd7c 	bl	8007778 <USBD_static_malloc>
 8003c80:	0001      	movs	r1, r0
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	23a4      	movs	r3, #164	; 0xa4
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	50d1      	str	r1, [r2, r3]

  if(pdev->pClassData == NULL)
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	23a4      	movs	r3, #164	; 0xa4
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	58d3      	ldr	r3, [r2, r3]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d104      	bne.n	8003ca0 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8003c96:	230f      	movs	r3, #15
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e02c      	b.n	8003cfa <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	23a4      	movs	r3, #164	; 0xa4
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	58d3      	ldr	r3, [r2, r3]
 8003ca8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	23a5      	movs	r3, #165	; 0xa5
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	58d3      	ldr	r3, [r2, r3]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	2385      	movs	r3, #133	; 0x85
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	2386      	movs	r3, #134	; 0x86
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	50d1      	str	r1, [r2, r3]

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7c1b      	ldrb	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	2381      	movs	r3, #129	; 0x81
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	58d2      	ldr	r2, [r2, r3]
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	f003 fcfb 	bl	80076dc <USBD_LL_PrepareReceive>
 8003ce6:	e008      	b.n	8003cfa <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	2381      	movs	r3, #129	; 0x81
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	58d2      	ldr	r2, [r2, r3]
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	2340      	movs	r3, #64	; 0x40
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	f003 fcf1 	bl	80076dc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003cfa:	230f      	movs	r3, #15
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	781b      	ldrb	r3, [r3, #0]
}
 8003d00:	0018      	movs	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b004      	add	sp, #16
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	000a      	movs	r2, r1
 8003d12:	1cfb      	adds	r3, r7, #3
 8003d14:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8003d16:	230f      	movs	r3, #15
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2181      	movs	r1, #129	; 0x81
 8003d22:	0018      	movs	r0, r3
 8003d24:	f003 fbc7 	bl	80074b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2101      	movs	r1, #1
 8003d32:	0018      	movs	r0, r3
 8003d34:	f003 fbbf 	bl	80074b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	23ac      	movs	r3, #172	; 0xac
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	2100      	movs	r1, #0
 8003d40:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2182      	movs	r1, #130	; 0x82
 8003d46:	0018      	movs	r0, r3
 8003d48:	f003 fbb5 	bl	80074b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	23a4      	movs	r3, #164	; 0xa4
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	58d3      	ldr	r3, [r2, r3]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d011      	beq.n	8003d82 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	23a5      	movs	r3, #165	; 0xa5
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	58d3      	ldr	r3, [r2, r3]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	23a4      	movs	r3, #164	; 0xa4
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	58d3      	ldr	r3, [r2, r3]
 8003d72:	0018      	movs	r0, r3
 8003d74:	f003 fd0c 	bl	8007790 <USBD_static_free>
    pdev->pClassData = NULL;
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	23a4      	movs	r3, #164	; 0xa4
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	2100      	movs	r1, #0
 8003d80:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8003d82:	230f      	movs	r3, #15
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	781b      	ldrb	r3, [r3, #0]
}
 8003d88:	0018      	movs	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b004      	add	sp, #16
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	23a4      	movs	r3, #164	; 0xa4
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	58d3      	ldr	r3, [r2, r3]
 8003da2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003da4:	230f      	movs	r3, #15
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8003dac:	230c      	movs	r3, #12
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	2200      	movs	r2, #0
 8003db2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8003db4:	2317      	movs	r3, #23
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	001a      	movs	r2, r3
 8003dc2:	2360      	movs	r3, #96	; 0x60
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d03d      	beq.n	8003e44 <USBD_CDC_Setup+0xb4>
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d000      	beq.n	8003dce <USBD_CDC_Setup+0x3e>
 8003dcc:	e092      	b.n	8003ef4 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	88db      	ldrh	r3, [r3, #6]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d02b      	beq.n	8003e2e <USBD_CDC_Setup+0x9e>
    {
      if (req->bmRequest & 0x80U)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	b25b      	sxtb	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	da12      	bge.n	8003e06 <USBD_CDC_Setup+0x76>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	23a5      	movs	r3, #165	; 0xa5
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	58d3      	ldr	r3, [r2, r3]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8003dee:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	88d2      	ldrh	r2, [r2, #6]
 8003df4:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003df6:	6939      	ldr	r1, [r7, #16]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	88da      	ldrh	r2, [r3, #6]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f001 fb12 	bl	8005428 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8003e04:	e081      	b.n	8003f0a <USBD_CDC_Setup+0x17a>
        hcdc->CmdOpCode = req->bRequest;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	7859      	ldrb	r1, [r3, #1]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	54d1      	strb	r1, [r2, r3]
        hcdc->CmdLength = (uint8_t)req->wLength;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	88db      	ldrh	r3, [r3, #6]
 8003e16:	b2d9      	uxtb	r1, r3
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4a3f      	ldr	r2, [pc, #252]	; (8003f18 <USBD_CDC_Setup+0x188>)
 8003e1c:	5499      	strb	r1, [r3, r2]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003e1e:	6939      	ldr	r1, [r7, #16]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	88da      	ldrh	r2, [r3, #6]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	0018      	movs	r0, r3
 8003e28:	f001 fb31 	bl	800548e <USBD_CtlPrepareRx>
    break;
 8003e2c:	e06d      	b.n	8003f0a <USBD_CDC_Setup+0x17a>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	23a5      	movs	r3, #165	; 0xa5
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	58d3      	ldr	r3, [r2, r3]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	7850      	ldrb	r0, [r2, #1]
 8003e3c:	6839      	ldr	r1, [r7, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	4798      	blx	r3
    break;
 8003e42:	e062      	b.n	8003f0a <USBD_CDC_Setup+0x17a>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	785b      	ldrb	r3, [r3, #1]
 8003e48:	2b0a      	cmp	r3, #10
 8003e4a:	d01c      	beq.n	8003e86 <USBD_CDC_Setup+0xf6>
 8003e4c:	2b0b      	cmp	r3, #11
 8003e4e:	d033      	beq.n	8003eb8 <USBD_CDC_Setup+0x128>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d142      	bne.n	8003eda <USBD_CDC_Setup+0x14a>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	239d      	movs	r3, #157	; 0x9d
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	5cd3      	ldrb	r3, [r2, r3]
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d107      	bne.n	8003e70 <USBD_CDC_Setup+0xe0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8003e60:	230c      	movs	r3, #12
 8003e62:	18f9      	adds	r1, r7, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f001 fadd 	bl	8005428 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8003e6e:	e040      	b.n	8003ef2 <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	0011      	movs	r1, r2
 8003e76:	0018      	movs	r0, r3
 8003e78:	f001 fa57 	bl	800532a <USBD_CtlError>
			  ret = USBD_FAIL;
 8003e7c:	2317      	movs	r3, #23
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	2202      	movs	r2, #2
 8003e82:	701a      	strb	r2, [r3, #0]
      break;
 8003e84:	e035      	b.n	8003ef2 <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	239d      	movs	r3, #157	; 0x9d
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	5cd3      	ldrb	r3, [r2, r3]
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d107      	bne.n	8003ea2 <USBD_CDC_Setup+0x112>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8003e92:	230f      	movs	r3, #15
 8003e94:	18f9      	adds	r1, r7, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f001 fac4 	bl	8005428 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8003ea0:	e027      	b.n	8003ef2 <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	0011      	movs	r1, r2
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f001 fa3e 	bl	800532a <USBD_CtlError>
			  ret = USBD_FAIL;
 8003eae:	2317      	movs	r3, #23
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	701a      	strb	r2, [r3, #0]
      break;
 8003eb6:	e01c      	b.n	8003ef2 <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	239d      	movs	r3, #157	; 0x9d
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	5cd3      	ldrb	r3, [r2, r3]
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d015      	beq.n	8003ef0 <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError (pdev, req);
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0011      	movs	r1, r2
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f001 fa2d 	bl	800532a <USBD_CtlError>
			  ret = USBD_FAIL;
 8003ed0:	2317      	movs	r3, #23
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003ed8:	e00a      	b.n	8003ef0 <USBD_CDC_Setup+0x160>

    default:
      USBD_CtlError (pdev, req);
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	0011      	movs	r1, r2
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f001 fa22 	bl	800532a <USBD_CtlError>
      ret = USBD_FAIL;
 8003ee6:	2317      	movs	r3, #23
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	2202      	movs	r2, #2
 8003eec:	701a      	strb	r2, [r3, #0]
      break;
 8003eee:	e000      	b.n	8003ef2 <USBD_CDC_Setup+0x162>
      break;
 8003ef0:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8003ef2:	e00a      	b.n	8003f0a <USBD_CDC_Setup+0x17a>

  default:
    USBD_CtlError (pdev, req);
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	0011      	movs	r1, r2
 8003efa:	0018      	movs	r0, r3
 8003efc:	f001 fa15 	bl	800532a <USBD_CtlError>
    ret = USBD_FAIL;
 8003f00:	2317      	movs	r3, #23
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	2202      	movs	r2, #2
 8003f06:	701a      	strb	r2, [r3, #0]
    break;
 8003f08:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8003f0a:	2317      	movs	r3, #23
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	781b      	ldrb	r3, [r3, #0]
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b006      	add	sp, #24
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	00000201 	.word	0x00000201

08003f1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	000a      	movs	r2, r1
 8003f26:	1cfb      	adds	r3, r7, #3
 8003f28:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	23a4      	movs	r3, #164	; 0xa4
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	58d3      	ldr	r3, [r2, r3]
 8003f32:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	23a6      	movs	r3, #166	; 0xa6
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	58d3      	ldr	r3, [r2, r3]
 8003f3c:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	23a4      	movs	r3, #164	; 0xa4
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	58d3      	ldr	r3, [r2, r3]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d03b      	beq.n	8003fc2 <USBD_CDC_DataIn+0xa6>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003f4a:	1cfb      	adds	r3, r7, #3
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	0013      	movs	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	189b      	adds	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	18cb      	adds	r3, r1, r3
 8003f5a:	331c      	adds	r3, #28
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d028      	beq.n	8003fb4 <USBD_CDC_DataIn+0x98>
 8003f62:	1cfb      	adds	r3, r7, #3
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	0013      	movs	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	189b      	adds	r3, r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	18cb      	adds	r3, r1, r3
 8003f72:	331c      	adds	r3, #28
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	1cfb      	adds	r3, r7, #3
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	015b      	lsls	r3, r3, #5
 8003f7e:	18d3      	adds	r3, r2, r3
 8003f80:	3338      	adds	r3, #56	; 0x38
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	0019      	movs	r1, r3
 8003f86:	f7fc f945 	bl	8000214 <__aeabi_uidivmod>
 8003f8a:	1e0b      	subs	r3, r1, #0
 8003f8c:	d112      	bne.n	8003fb4 <USBD_CDC_DataIn+0x98>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003f8e:	1cfb      	adds	r3, r7, #3
 8003f90:	781a      	ldrb	r2, [r3, #0]
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	0013      	movs	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	189b      	adds	r3, r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	18cb      	adds	r3, r1, r3
 8003f9e:	331c      	adds	r3, #28
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8003fa4:	1cfb      	adds	r3, r7, #3
 8003fa6:	7819      	ldrb	r1, [r3, #0]
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	2300      	movs	r3, #0
 8003fac:	2200      	movs	r2, #0
 8003fae:	f003 fb5d 	bl	800766c <USBD_LL_Transmit>
 8003fb2:	e004      	b.n	8003fbe <USBD_CDC_DataIn+0xa2>
    }
    else
    {
      hcdc->TxState = 0U;
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	2385      	movs	r3, #133	; 0x85
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	2100      	movs	r1, #0
 8003fbc:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e000      	b.n	8003fc4 <USBD_CDC_DataIn+0xa8>
  }
  else
  {
    return USBD_FAIL;
 8003fc2:	2302      	movs	r3, #2
  }
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b004      	add	sp, #16
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	000a      	movs	r2, r1
 8003fd6:	1cfb      	adds	r3, r7, #3
 8003fd8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	23a4      	movs	r3, #164	; 0xa4
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	58d3      	ldr	r3, [r2, r3]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003fe4:	1cfb      	adds	r3, r7, #3
 8003fe6:	781a      	ldrb	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	0011      	movs	r1, r2
 8003fec:	0018      	movs	r0, r3
 8003fee:	f003 fbad 	bl	800774c <USBD_LL_GetRxDataSize>
 8003ff2:	0001      	movs	r1, r0
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	2383      	movs	r3, #131	; 0x83
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	23a4      	movs	r3, #164	; 0xa4
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	58d3      	ldr	r3, [r2, r3]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d011      	beq.n	800402c <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	23a5      	movs	r3, #165	; 0xa5
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	58d3      	ldr	r3, [r2, r3]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	68f9      	ldr	r1, [r7, #12]
 8004014:	2281      	movs	r2, #129	; 0x81
 8004016:	0092      	lsls	r2, r2, #2
 8004018:	5888      	ldr	r0, [r1, r2]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	2183      	movs	r1, #131	; 0x83
 800401e:	0089      	lsls	r1, r1, #2
 8004020:	468c      	mov	ip, r1
 8004022:	4462      	add	r2, ip
 8004024:	0011      	movs	r1, r2
 8004026:	4798      	blx	r3

    return USBD_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	e000      	b.n	800402e <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800402c:	2302      	movs	r3, #2
  }
}
 800402e:	0018      	movs	r0, r3
 8004030:	46bd      	mov	sp, r7
 8004032:	b004      	add	sp, #16
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8004038:	b590      	push	{r4, r7, lr}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	23a4      	movs	r3, #164	; 0xa4
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	58d3      	ldr	r3, [r2, r3]
 8004048:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	23a5      	movs	r3, #165	; 0xa5
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	58d3      	ldr	r3, [r2, r3]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01a      	beq.n	800408c <USBD_CDC_EP0_RxReady+0x54>
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	5cd3      	ldrb	r3, [r2, r3]
 800405e:	2bff      	cmp	r3, #255	; 0xff
 8004060:	d014      	beq.n	800408c <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	23a5      	movs	r3, #165	; 0xa5
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	58d3      	ldr	r3, [r2, r3]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	68f9      	ldr	r1, [r7, #12]
 800406e:	2280      	movs	r2, #128	; 0x80
 8004070:	0092      	lsls	r2, r2, #2
 8004072:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8004074:	68fc      	ldr	r4, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4907      	ldr	r1, [pc, #28]	; (8004098 <USBD_CDC_EP0_RxReady+0x60>)
 800407a:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800407c:	b292      	uxth	r2, r2
 800407e:	0021      	movs	r1, r4
 8004080:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	21ff      	movs	r1, #255	; 0xff
 800408a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	0018      	movs	r0, r3
 8004090:	46bd      	mov	sp, r7
 8004092:	b005      	add	sp, #20
 8004094:	bd90      	pop	{r4, r7, pc}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	00000201 	.word	0x00000201

0800409c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2243      	movs	r2, #67	; 0x43
 80040a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80040aa:	4b02      	ldr	r3, [pc, #8]	; (80040b4 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80040ac:	0018      	movs	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b002      	add	sp, #8
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000088 	.word	0x20000088

080040b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2243      	movs	r2, #67	; 0x43
 80040c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80040c6:	4b02      	ldr	r3, [pc, #8]	; (80040d0 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80040c8:	0018      	movs	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b002      	add	sp, #8
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000044 	.word	0x20000044

080040d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2243      	movs	r2, #67	; 0x43
 80040e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80040e2:	4b02      	ldr	r3, [pc, #8]	; (80040ec <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80040e4:	0018      	movs	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b002      	add	sp, #8
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	200000cc 	.word	0x200000cc

080040f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	220a      	movs	r2, #10
 80040fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80040fe:	4b02      	ldr	r3, [pc, #8]	; (8004108 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8004100:	0018      	movs	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20000000 	.word	0x20000000

0800410c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004116:	230f      	movs	r3, #15
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	2202      	movs	r2, #2
 800411c:	701a      	strb	r2, [r3, #0]

  if(fops != NULL)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData= fops;
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	23a5      	movs	r3, #165	; 0xa5
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	6839      	ldr	r1, [r7, #0]
 800412c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800412e:	230f      	movs	r3, #15
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	2200      	movs	r2, #0
 8004134:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004136:	230f      	movs	r3, #15
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	781b      	ldrb	r3, [r3, #0]
}
 800413c:	0018      	movs	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	b004      	add	sp, #16
 8004142:	bd80      	pop	{r7, pc}

08004144 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	1dbb      	adds	r3, r7, #6
 8004150:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	23a4      	movs	r3, #164	; 0xa4
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	58d3      	ldr	r3, [r2, r3]
 800415a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	2382      	movs	r3, #130	; 0x82
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8004166:	1dbb      	adds	r3, r7, #6
 8004168:	8819      	ldrh	r1, [r3, #0]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	2384      	movs	r3, #132	; 0x84
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	0018      	movs	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	b006      	add	sp, #24
 800417a:	bd80      	pop	{r7, pc}

0800417c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	23a4      	movs	r3, #164	; 0xa4
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	58d3      	ldr	r3, [r2, r3]
 800418e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	2381      	movs	r3, #129	; 0x81
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	6839      	ldr	r1, [r7, #0]
 8004198:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	b004      	add	sp, #16
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	23a4      	movs	r3, #164	; 0xa4
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	58d3      	ldr	r3, [r2, r3]
 80041b4:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	23a4      	movs	r3, #164	; 0xa4
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	58d3      	ldr	r3, [r2, r3]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d022      	beq.n	8004208 <USBD_CDC_TransmitPacket+0x64>
  {
    if(hcdc->TxState == 0U)
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	2385      	movs	r3, #133	; 0x85
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	58d3      	ldr	r3, [r2, r3]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d11a      	bne.n	8004204 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	2385      	movs	r3, #133	; 0x85
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	2101      	movs	r1, #1
 80041d6:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	2384      	movs	r3, #132	; 0x84
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	58d2      	ldr	r2, [r2, r3]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	2382      	movs	r3, #130	; 0x82
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	2384      	movs	r3, #132	; 0x84
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	000a      	movs	r2, r1
 80041fa:	2181      	movs	r1, #129	; 0x81
 80041fc:	f003 fa36 	bl	800766c <USBD_LL_Transmit>

      return USBD_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e002      	b.n	800420a <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8004208:	2302      	movs	r3, #2
  }
}
 800420a:	0018      	movs	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	b004      	add	sp, #16
 8004210:	bd80      	pop	{r7, pc}

08004212 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	23a4      	movs	r3, #164	; 0xa4
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	58d3      	ldr	r3, [r2, r3]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	23a4      	movs	r3, #164	; 0xa4
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	58d3      	ldr	r3, [r2, r3]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d019      	beq.n	8004264 <USBD_CDC_ReceivePacket+0x52>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	7c1b      	ldrb	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	2381      	movs	r3, #129	; 0x81
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	58d2      	ldr	r2, [r2, r3]
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	2101      	movs	r1, #1
 8004248:	f003 fa48 	bl	80076dc <USBD_LL_PrepareReceive>
 800424c:	e008      	b.n	8004260 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	2381      	movs	r3, #129	; 0x81
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	58d2      	ldr	r2, [r2, r3]
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	2340      	movs	r3, #64	; 0x40
 800425a:	2101      	movs	r1, #1
 800425c:	f003 fa3e 	bl	80076dc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	e000      	b.n	8004266 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8004264:	2302      	movs	r3, #2
  }
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b004      	add	sp, #16
 800426c:	bd80      	pop	{r7, pc}

0800426e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	1dfb      	adds	r3, r7, #7
 800427a:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004282:	2302      	movs	r3, #2
 8004284:	e020      	b.n	80042c8 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	23a3      	movs	r3, #163	; 0xa3
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	58d3      	ldr	r3, [r2, r3]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	23a3      	movs	r3, #163	; 0xa3
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	2100      	movs	r1, #0
 800429a:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	23a2      	movs	r3, #162	; 0xa2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	239d      	movs	r3, #157	; 0x9d
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	2101      	movs	r1, #1
 80042b4:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1dfa      	adds	r2, r7, #7
 80042ba:	7812      	ldrb	r2, [r2, #0]
 80042bc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	0018      	movs	r0, r3
 80042c2:	f003 f837 	bl	8007334 <USBD_LL_Init>

  return USBD_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b004      	add	sp, #16
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80042da:	230f      	movs	r3, #15
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d009      	beq.n	80042fc <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	23a3      	movs	r3, #163	; 0xa3
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	6839      	ldr	r1, [r7, #0]
 80042f0:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80042f2:	230f      	movs	r3, #15
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	e003      	b.n	8004304 <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80042fc:	230f      	movs	r3, #15
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	2202      	movs	r2, #2
 8004302:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004304:	230f      	movs	r3, #15
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	781b      	ldrb	r3, [r3, #0]
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b004      	add	sp, #16
 8004310:	bd80      	pop	{r7, pc}

08004312 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0018      	movs	r0, r3
 800431e:	f003 f86d 	bl	80073fc <USBD_LL_Start>

  return USBD_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	0018      	movs	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	b002      	add	sp, #8
 800432a:	bd80      	pop	{r7, pc}

0800432c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	0018      	movs	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	b002      	add	sp, #8
 800433c:	bd80      	pop	{r7, pc}

0800433e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	000a      	movs	r2, r1
 8004348:	1cfb      	adds	r3, r7, #3
 800434a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800434c:	230f      	movs	r3, #15
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	2202      	movs	r2, #2
 8004352:	701a      	strb	r2, [r3, #0]

  if(pdev->pClass != NULL)
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	23a3      	movs	r3, #163	; 0xa3
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	58d3      	ldr	r3, [r2, r3]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00f      	beq.n	8004380 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	23a3      	movs	r3, #163	; 0xa3
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	58d3      	ldr	r3, [r2, r3]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	1cfa      	adds	r2, r7, #3
 800436c:	7811      	ldrb	r1, [r2, #0]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	0010      	movs	r0, r2
 8004372:	4798      	blx	r3
 8004374:	1e03      	subs	r3, r0, #0
 8004376:	d103      	bne.n	8004380 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8004378:	230f      	movs	r3, #15
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8004380:	230f      	movs	r3, #15
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	781b      	ldrb	r3, [r3, #0]
}
 8004386:	0018      	movs	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	b004      	add	sp, #16
 800438c:	bd80      	pop	{r7, pc}

0800438e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	000a      	movs	r2, r1
 8004398:	1cfb      	adds	r3, r7, #3
 800439a:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	23a3      	movs	r3, #163	; 0xa3
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	58d3      	ldr	r3, [r2, r3]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	1cfa      	adds	r2, r7, #3
 80043a8:	7811      	ldrb	r1, [r2, #0]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	0010      	movs	r0, r2
 80043ae:	4798      	blx	r3
  return USBD_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	0018      	movs	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b002      	add	sp, #8
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	22a0      	movs	r2, #160	; 0xa0
 80043ca:	0092      	lsls	r2, r2, #2
 80043cc:	4694      	mov	ip, r2
 80043ce:	4463      	add	r3, ip
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	0011      	movs	r1, r2
 80043d4:	0018      	movs	r0, r3
 80043d6:	f000 ff6d 	bl	80052b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	239b      	movs	r3, #155	; 0x9b
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	2101      	movs	r1, #1
 80043e2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a22      	ldr	r2, [pc, #136]	; (8004470 <USBD_LL_SetupStage+0xb4>)
 80043e8:	5a9b      	ldrh	r3, [r3, r2]
 80043ea:	0019      	movs	r1, r3
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	239c      	movs	r3, #156	; 0x9c
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	23a0      	movs	r3, #160	; 0xa0
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	5cd3      	ldrb	r3, [r2, r3]
 80043fc:	001a      	movs	r2, r3
 80043fe:	231f      	movs	r3, #31
 8004400:	4013      	ands	r3, r2
 8004402:	2b01      	cmp	r3, #1
 8004404:	d00d      	beq.n	8004422 <USBD_LL_SetupStage+0x66>
 8004406:	d302      	bcc.n	800440e <USBD_LL_SetupStage+0x52>
 8004408:	2b02      	cmp	r3, #2
 800440a:	d014      	beq.n	8004436 <USBD_LL_SetupStage+0x7a>
 800440c:	e01d      	b.n	800444a <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	22a0      	movs	r2, #160	; 0xa0
 8004412:	0092      	lsls	r2, r2, #2
 8004414:	189a      	adds	r2, r3, r2
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	0011      	movs	r1, r2
 800441a:	0018      	movs	r0, r3
 800441c:	f000 fa0a 	bl	8004834 <USBD_StdDevReq>
    break;
 8004420:	e020      	b.n	8004464 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	22a0      	movs	r2, #160	; 0xa0
 8004426:	0092      	lsls	r2, r2, #2
 8004428:	189a      	adds	r2, r3, r2
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	0011      	movs	r1, r2
 800442e:	0018      	movs	r0, r3
 8004430:	f000 fa72 	bl	8004918 <USBD_StdItfReq>
    break;
 8004434:	e016      	b.n	8004464 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	22a0      	movs	r2, #160	; 0xa0
 800443a:	0092      	lsls	r2, r2, #2
 800443c:	189a      	adds	r2, r3, r2
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f000 fabf 	bl	80049c6 <USBD_StdEPReq>
    break;
 8004448:	e00c      	b.n	8004464 <USBD_LL_SetupStage+0xa8>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	23a0      	movs	r3, #160	; 0xa0
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	5cd3      	ldrb	r3, [r2, r3]
 8004452:	227f      	movs	r2, #127	; 0x7f
 8004454:	4393      	bics	r3, r2
 8004456:	b2da      	uxtb	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	0011      	movs	r1, r2
 800445c:	0018      	movs	r0, r3
 800445e:	f003 f856 	bl	800750e <USBD_LL_StallEP>
    break;
 8004462:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	0018      	movs	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	b002      	add	sp, #8
 800446c:	bd80      	pop	{r7, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	00000286 	.word	0x00000286

08004474 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	200b      	movs	r0, #11
 8004480:	183b      	adds	r3, r7, r0
 8004482:	1c0a      	adds	r2, r1, #0
 8004484:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8004486:	183b      	adds	r3, r7, r0
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d154      	bne.n	8004538 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3341      	adds	r3, #65	; 0x41
 8004492:	33ff      	adds	r3, #255	; 0xff
 8004494:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	239b      	movs	r3, #155	; 0x9b
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	58d3      	ldr	r3, [r2, r3]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d139      	bne.n	8004516 <USBD_LL_DataOutStage+0xa2>
    {
      if(pep->rem_length > pep->maxpacket)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d919      	bls.n	80044e2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -=  pep->maxpacket;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	1ad2      	subs	r2, r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d203      	bcs.n	80044d0 <USBD_LL_DataOutStage+0x5c>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	e002      	b.n	80044d6 <USBD_LL_DataOutStage+0x62>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	001a      	movs	r2, r3
 80044dc:	f000 fffb 	bl	80054d6 <USBD_CtlContinueRx>
 80044e0:	e045      	b.n	800456e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	23a3      	movs	r3, #163	; 0xa3
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	58d3      	ldr	r3, [r2, r3]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00d      	beq.n	800450c <USBD_LL_DataOutStage+0x98>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	239d      	movs	r3, #157	; 0x9d
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d107      	bne.n	800450c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	23a3      	movs	r3, #163	; 0xa3
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	58d3      	ldr	r3, [r2, r3]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	0010      	movs	r0, r2
 800450a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	0018      	movs	r0, r3
 8004510:	f000 fff4 	bl	80054fc <USBD_CtlSendStatus>
 8004514:	e02b      	b.n	800456e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	239b      	movs	r3, #155	; 0x9b
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	58d3      	ldr	r3, [r2, r3]
 800451e:	2b05      	cmp	r3, #5
 8004520:	d125      	bne.n	800456e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	239b      	movs	r3, #155	; 0x9b
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	2100      	movs	r1, #0
 800452a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2100      	movs	r1, #0
 8004530:	0018      	movs	r0, r3
 8004532:	f002 ffec 	bl	800750e <USBD_LL_StallEP>
 8004536:	e01a      	b.n	800456e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	23a3      	movs	r3, #163	; 0xa3
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	58d3      	ldr	r3, [r2, r3]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d011      	beq.n	800456a <USBD_LL_DataOutStage+0xf6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	239d      	movs	r3, #157	; 0x9d
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL) &&
 800454e:	2b03      	cmp	r3, #3
 8004550:	d10b      	bne.n	800456a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	23a3      	movs	r3, #163	; 0xa3
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	58d3      	ldr	r3, [r2, r3]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	220b      	movs	r2, #11
 800455e:	18ba      	adds	r2, r7, r2
 8004560:	7811      	ldrb	r1, [r2, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	0010      	movs	r0, r2
 8004566:	4798      	blx	r3
 8004568:	e001      	b.n	800456e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800456a:	2302      	movs	r3, #2
 800456c:	e000      	b.n	8004570 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	0018      	movs	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	b006      	add	sp, #24
 8004576:	bd80      	pop	{r7, pc}

08004578 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	607a      	str	r2, [r7, #4]
 8004582:	200b      	movs	r0, #11
 8004584:	183b      	adds	r3, r7, r0
 8004586:	1c0a      	adds	r2, r1, #0
 8004588:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800458a:	183b      	adds	r3, r7, r0
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d000      	beq.n	8004594 <USBD_LL_DataInStage+0x1c>
 8004592:	e08e      	b.n	80046b2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3314      	adds	r3, #20
 8004598:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	239b      	movs	r3, #155	; 0x9b
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	58d3      	ldr	r3, [r2, r3]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d164      	bne.n	8004670 <USBD_LL_DataInStage+0xf8>
    {
      if(pep->rem_length > pep->maxpacket)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d915      	bls.n	80045de <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	1ad2      	subs	r2, r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	0018      	movs	r0, r3
 80045cc:	f000 ff4c 	bl	8005468 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	2300      	movs	r3, #0
 80045d4:	2200      	movs	r2, #0
 80045d6:	2100      	movs	r1, #0
 80045d8:	f003 f880 	bl	80076dc <USBD_LL_PrepareReceive>
 80045dc:	e059      	b.n	8004692 <USBD_LL_DataInStage+0x11a>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	0019      	movs	r1, r3
 80045e8:	0010      	movs	r0, r2
 80045ea:	f7fb fe13 	bl	8000214 <__aeabi_uidivmod>
 80045ee:	1e0b      	subs	r3, r1, #0
 80045f0:	d11f      	bne.n	8004632 <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d319      	bcc.n	8004632 <USBD_LL_DataInStage+0xba>
           (pep->total_length < pdev->ep0_data_len))
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	68f9      	ldr	r1, [r7, #12]
 8004604:	239c      	movs	r3, #156	; 0x9c
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 800460a:	429a      	cmp	r2, r3
 800460c:	d211      	bcs.n	8004632 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	2100      	movs	r1, #0
 8004614:	0018      	movs	r0, r3
 8004616:	f000 ff27 	bl	8005468 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	239c      	movs	r3, #156	; 0x9c
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	2100      	movs	r1, #0
 8004622:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	2300      	movs	r3, #0
 8004628:	2200      	movs	r2, #0
 800462a:	2100      	movs	r1, #0
 800462c:	f003 f856 	bl	80076dc <USBD_LL_PrepareReceive>
 8004630:	e02f      	b.n	8004692 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	23a3      	movs	r3, #163	; 0xa3
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	58d3      	ldr	r3, [r2, r3]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00d      	beq.n	800465c <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	239d      	movs	r3, #157	; 0x9d
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004648:	2b03      	cmp	r3, #3
 800464a:	d107      	bne.n	800465c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	23a3      	movs	r3, #163	; 0xa3
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	58d3      	ldr	r3, [r2, r3]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	0010      	movs	r0, r2
 800465a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2180      	movs	r1, #128	; 0x80
 8004660:	0018      	movs	r0, r3
 8004662:	f002 ff54 	bl	800750e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	0018      	movs	r0, r3
 800466a:	f000 ff5b 	bl	8005524 <USBD_CtlReceiveStatus>
 800466e:	e010      	b.n	8004692 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	239b      	movs	r3, #155	; 0x9b
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	58d3      	ldr	r3, [r2, r3]
 8004678:	2b04      	cmp	r3, #4
 800467a:	d005      	beq.n	8004688 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	239b      	movs	r3, #155	; 0x9b
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2180      	movs	r1, #128	; 0x80
 800468c:	0018      	movs	r0, r3
 800468e:	f002 ff3e 	bl	800750e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	239e      	movs	r3, #158	; 0x9e
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	5cd3      	ldrb	r3, [r2, r3]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d124      	bne.n	80046e8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	0018      	movs	r0, r3
 80046a2:	f7ff fe43 	bl	800432c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	239e      	movs	r3, #158	; 0x9e
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	2100      	movs	r1, #0
 80046ae:	54d1      	strb	r1, [r2, r3]
 80046b0:	e01a      	b.n	80046e8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	23a3      	movs	r3, #163	; 0xa3
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	58d3      	ldr	r3, [r2, r3]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d011      	beq.n	80046e4 <USBD_LL_DataInStage+0x16c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	239d      	movs	r3, #157	; 0x9d
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL) &&
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d10b      	bne.n	80046e4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	23a3      	movs	r3, #163	; 0xa3
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	58d3      	ldr	r3, [r2, r3]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	220b      	movs	r2, #11
 80046d8:	18ba      	adds	r2, r7, r2
 80046da:	7811      	ldrb	r1, [r2, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	0010      	movs	r0, r2
 80046e0:	4798      	blx	r3
 80046e2:	e001      	b.n	80046e8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80046e4:	2302      	movs	r3, #2
 80046e6:	e000      	b.n	80046ea <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	0018      	movs	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b006      	add	sp, #24
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	2340      	movs	r3, #64	; 0x40
 80046fe:	2200      	movs	r2, #0
 8004700:	2100      	movs	r1, #0
 8004702:	f002 fea1 	bl	8007448 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	23a2      	movs	r3, #162	; 0xa2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	2101      	movs	r1, #1
 800470e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	23a8      	movs	r3, #168	; 0xa8
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	2140      	movs	r1, #64	; 0x40
 8004718:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	2340      	movs	r3, #64	; 0x40
 800471e:	2200      	movs	r2, #0
 8004720:	2180      	movs	r1, #128	; 0x80
 8004722:	f002 fe91 	bl	8007448 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2240      	movs	r2, #64	; 0x40
 8004730:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	239d      	movs	r3, #157	; 0x9d
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	2101      	movs	r1, #1
 800473a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	239b      	movs	r3, #155	; 0x9b
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	2100      	movs	r1, #0
 8004744:	50d1      	str	r1, [r2, r3]
  pdev->dev_config= 0U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	239f      	movs	r3, #159	; 0x9f
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	2100      	movs	r1, #0
 8004754:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	23a4      	movs	r3, #164	; 0xa4
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	58d3      	ldr	r3, [r2, r3]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	23a3      	movs	r3, #163	; 0xa3
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	58d3      	ldr	r3, [r2, r3]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	b2d9      	uxtb	r1, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	0018      	movs	r0, r3
 8004776:	4790      	blx	r2
  }

  return USBD_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	0018      	movs	r0, r3
 800477c:	46bd      	mov	sp, r7
 800477e:	b002      	add	sp, #8
 8004780:	bd80      	pop	{r7, pc}

08004782 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	000a      	movs	r2, r1
 800478c:	1cfb      	adds	r3, r7, #3
 800478e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	1cfa      	adds	r2, r7, #3
 8004794:	7812      	ldrb	r2, [r2, #0]
 8004796:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	0018      	movs	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	b002      	add	sp, #8
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	239d      	movs	r3, #157	; 0x9d
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	5cd1      	ldrb	r1, [r2, r3]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a06      	ldr	r2, [pc, #24]	; (80047d0 <USBD_LL_Suspend+0x2c>)
 80047b8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	239d      	movs	r3, #157	; 0x9d
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	2104      	movs	r1, #4
 80047c2:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	0018      	movs	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b002      	add	sp, #8
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	00000275 	.word	0x00000275

080047d4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a05      	ldr	r2, [pc, #20]	; (80047f4 <USBD_LL_Resume+0x20>)
 80047e0:	5c99      	ldrb	r1, [r3, r2]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	239d      	movs	r3, #157	; 0x9d
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	0018      	movs	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b002      	add	sp, #8
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	00000275 	.word	0x00000275

080047f8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	239d      	movs	r3, #157	; 0x9d
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	5cd3      	ldrb	r3, [r2, r3]
 8004808:	2b03      	cmp	r3, #3
 800480a:	d10e      	bne.n	800482a <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	23a3      	movs	r3, #163	; 0xa3
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	58d3      	ldr	r3, [r2, r3]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	23a3      	movs	r3, #163	; 0xa3
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	58d3      	ldr	r3, [r2, r3]
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	0010      	movs	r0, r2
 8004828:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	0018      	movs	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	b002      	add	sp, #8
 8004832:	bd80      	pop	{r7, pc}

08004834 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800483e:	230f      	movs	r3, #15
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	001a      	movs	r2, r3
 800484c:	2360      	movs	r3, #96	; 0x60
 800484e:	4013      	ands	r3, r2
 8004850:	2b20      	cmp	r3, #32
 8004852:	d004      	beq.n	800485e <USBD_StdDevReq+0x2a>
 8004854:	2b40      	cmp	r3, #64	; 0x40
 8004856:	d002      	beq.n	800485e <USBD_StdDevReq+0x2a>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <USBD_StdDevReq+0x3e>
 800485c:	e04b      	b.n	80048f6 <USBD_StdDevReq+0xc2>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	23a3      	movs	r3, #163	; 0xa3
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	58d3      	ldr	r3, [r2, r3]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	6839      	ldr	r1, [r7, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	0010      	movs	r0, r2
 800486e:	4798      	blx	r3
    break;
 8004870:	e048      	b.n	8004904 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	785b      	ldrb	r3, [r3, #1]
 8004876:	2b09      	cmp	r3, #9
 8004878:	d835      	bhi.n	80048e6 <USBD_StdDevReq+0xb2>
 800487a:	009a      	lsls	r2, r3, #2
 800487c:	4b25      	ldr	r3, [pc, #148]	; (8004914 <USBD_StdDevReq+0xe0>)
 800487e:	18d3      	adds	r3, r2, r3
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	469f      	mov	pc, r3
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	0011      	movs	r1, r2
 800488a:	0018      	movs	r0, r3
 800488c:	f000 fa58 	bl	8004d40 <USBD_GetDescriptor>
      break;
 8004890:	e030      	b.n	80048f4 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	0011      	movs	r1, r2
 8004898:	0018      	movs	r0, r3
 800489a:	f000 fb63 	bl	8004f64 <USBD_SetAddress>
      break;
 800489e:	e029      	b.n	80048f4 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	0011      	movs	r1, r2
 80048a6:	0018      	movs	r0, r3
 80048a8:	f000 fbb0 	bl	800500c <USBD_SetConfig>
      break;
 80048ac:	e022      	b.n	80048f4 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	0011      	movs	r1, r2
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 fc4d 	bl	8005154 <USBD_GetConfig>
      break;
 80048ba:	e01b      	b.n	80048f4 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	0011      	movs	r1, r2
 80048c2:	0018      	movs	r0, r3
 80048c4:	f000 fc80 	bl	80051c8 <USBD_GetStatus>
      break;
 80048c8:	e014      	b.n	80048f4 <USBD_StdDevReq+0xc0>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	0011      	movs	r1, r2
 80048d0:	0018      	movs	r0, r3
 80048d2:	f000 fcb3 	bl	800523c <USBD_SetFeature>
      break;
 80048d6:	e00d      	b.n	80048f4 <USBD_StdDevReq+0xc0>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0011      	movs	r1, r2
 80048de:	0018      	movs	r0, r3
 80048e0:	f000 fcc2 	bl	8005268 <USBD_ClrFeature>
      break;
 80048e4:	e006      	b.n	80048f4 <USBD_StdDevReq+0xc0>

    default:
      USBD_CtlError(pdev, req);
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	0011      	movs	r1, r2
 80048ec:	0018      	movs	r0, r3
 80048ee:	f000 fd1c 	bl	800532a <USBD_CtlError>
      break;
 80048f2:	46c0      	nop			; (mov r8, r8)
    }
    break;
 80048f4:	e006      	b.n	8004904 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	0011      	movs	r1, r2
 80048fc:	0018      	movs	r0, r3
 80048fe:	f000 fd14 	bl	800532a <USBD_CtlError>
    break;
 8004902:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8004904:	230f      	movs	r3, #15
 8004906:	18fb      	adds	r3, r7, r3
 8004908:	781b      	ldrb	r3, [r3, #0]
}
 800490a:	0018      	movs	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	b004      	add	sp, #16
 8004910:	bd80      	pop	{r7, pc}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	080089e8 	.word	0x080089e8

08004918 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004918:	b590      	push	{r4, r7, lr}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004922:	230f      	movs	r3, #15
 8004924:	18fb      	adds	r3, r7, r3
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	001a      	movs	r2, r3
 8004930:	2360      	movs	r3, #96	; 0x60
 8004932:	4013      	ands	r3, r2
 8004934:	2b20      	cmp	r3, #32
 8004936:	d003      	beq.n	8004940 <USBD_StdItfReq+0x28>
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	d001      	beq.n	8004940 <USBD_StdItfReq+0x28>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d136      	bne.n	80049ae <USBD_StdItfReq+0x96>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	239d      	movs	r3, #157	; 0x9d
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	3b01      	subs	r3, #1
 800494a:	2b02      	cmp	r3, #2
 800494c:	d826      	bhi.n	800499c <USBD_StdItfReq+0x84>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	889b      	ldrh	r3, [r3, #4]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b01      	cmp	r3, #1
 8004956:	d81a      	bhi.n	800498e <USBD_StdItfReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	23a3      	movs	r3, #163	; 0xa3
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	58d3      	ldr	r3, [r2, r3]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	220f      	movs	r2, #15
 8004964:	18bc      	adds	r4, r7, r2
 8004966:	6839      	ldr	r1, [r7, #0]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	0010      	movs	r0, r2
 800496c:	4798      	blx	r3
 800496e:	0003      	movs	r3, r0
 8004970:	7023      	strb	r3, [r4, #0]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	88db      	ldrh	r3, [r3, #6]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d117      	bne.n	80049aa <USBD_StdItfReq+0x92>
 800497a:	230f      	movs	r3, #15
 800497c:	18fb      	adds	r3, r7, r3
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d112      	bne.n	80049aa <USBD_StdItfReq+0x92>
        {
          USBD_CtlSendStatus(pdev);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	0018      	movs	r0, r3
 8004988:	f000 fdb8 	bl	80054fc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800498c:	e00d      	b.n	80049aa <USBD_StdItfReq+0x92>
        USBD_CtlError(pdev, req);
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	0011      	movs	r1, r2
 8004994:	0018      	movs	r0, r3
 8004996:	f000 fcc8 	bl	800532a <USBD_CtlError>
      break;
 800499a:	e006      	b.n	80049aa <USBD_StdItfReq+0x92>

    default:
      USBD_CtlError(pdev, req);
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0011      	movs	r1, r2
 80049a2:	0018      	movs	r0, r3
 80049a4:	f000 fcc1 	bl	800532a <USBD_CtlError>
      break;
 80049a8:	e000      	b.n	80049ac <USBD_StdItfReq+0x94>
      break;
 80049aa:	46c0      	nop			; (mov r8, r8)
    }
    break;
 80049ac:	e006      	b.n	80049bc <USBD_StdItfReq+0xa4>

  default:
    USBD_CtlError(pdev, req);
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	0011      	movs	r1, r2
 80049b4:	0018      	movs	r0, r3
 80049b6:	f000 fcb8 	bl	800532a <USBD_CtlError>
    break;
 80049ba:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	0018      	movs	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b005      	add	sp, #20
 80049c4:	bd90      	pop	{r4, r7, pc}

080049c6 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80049c6:	b5b0      	push	{r4, r5, r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80049d0:	230f      	movs	r3, #15
 80049d2:	18fb      	adds	r3, r7, r3
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	889a      	ldrh	r2, [r3, #4]
 80049dc:	230e      	movs	r3, #14
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	001a      	movs	r2, r3
 80049e8:	2360      	movs	r3, #96	; 0x60
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d004      	beq.n	80049fa <USBD_StdEPReq+0x34>
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d002      	beq.n	80049fa <USBD_StdEPReq+0x34>
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <USBD_StdEPReq+0x48>
 80049f8:	e193      	b.n	8004d22 <USBD_StdEPReq+0x35c>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	23a3      	movs	r3, #163	; 0xa3
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	58d3      	ldr	r3, [r2, r3]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	6839      	ldr	r1, [r7, #0]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	0010      	movs	r0, r2
 8004a0a:	4798      	blx	r3
    break;
 8004a0c:	e190      	b.n	8004d30 <USBD_StdEPReq+0x36a>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	001a      	movs	r2, r3
 8004a14:	2360      	movs	r3, #96	; 0x60
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d10f      	bne.n	8004a3c <USBD_StdEPReq+0x76>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	23a3      	movs	r3, #163	; 0xa3
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	58d3      	ldr	r3, [r2, r3]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	250f      	movs	r5, #15
 8004a28:	197c      	adds	r4, r7, r5
 8004a2a:	6839      	ldr	r1, [r7, #0]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	0010      	movs	r0, r2
 8004a30:	4798      	blx	r3
 8004a32:	0003      	movs	r3, r0
 8004a34:	7023      	strb	r3, [r4, #0]

      return ret;
 8004a36:	197b      	adds	r3, r7, r5
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	e17c      	b.n	8004d36 <USBD_StdEPReq+0x370>
    }

    switch (req->bRequest)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	785b      	ldrb	r3, [r3, #1]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d054      	beq.n	8004aee <USBD_StdEPReq+0x128>
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d003      	beq.n	8004a50 <USBD_StdEPReq+0x8a>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d100      	bne.n	8004a4e <USBD_StdEPReq+0x88>
 8004a4c:	e097      	b.n	8004b7e <USBD_StdEPReq+0x1b8>
 8004a4e:	e160      	b.n	8004d12 <USBD_StdEPReq+0x34c>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	239d      	movs	r3, #157	; 0x9d
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	5cd3      	ldrb	r3, [r2, r3]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d002      	beq.n	8004a62 <USBD_StdEPReq+0x9c>
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d01f      	beq.n	8004aa0 <USBD_StdEPReq+0xda>
 8004a60:	e03d      	b.n	8004ade <USBD_StdEPReq+0x118>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a62:	230e      	movs	r3, #14
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d012      	beq.n	8004a92 <USBD_StdEPReq+0xcc>
 8004a6c:	230e      	movs	r3, #14
 8004a6e:	18fb      	adds	r3, r7, r3
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b80      	cmp	r3, #128	; 0x80
 8004a74:	d00d      	beq.n	8004a92 <USBD_StdEPReq+0xcc>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004a76:	230e      	movs	r3, #14
 8004a78:	18fb      	adds	r3, r7, r3
 8004a7a:	781a      	ldrb	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	0011      	movs	r1, r2
 8004a80:	0018      	movs	r0, r3
 8004a82:	f002 fd44 	bl	800750e <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2180      	movs	r1, #128	; 0x80
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f002 fd3f 	bl	800750e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004a90:	e02c      	b.n	8004aec <USBD_StdEPReq+0x126>
          USBD_CtlError(pdev, req);
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	0011      	movs	r1, r2
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f000 fc46 	bl	800532a <USBD_CtlError>
        break;
 8004a9e:	e025      	b.n	8004aec <USBD_StdEPReq+0x126>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	885b      	ldrh	r3, [r3, #2]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d115      	bne.n	8004ad4 <USBD_StdEPReq+0x10e>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004aa8:	230e      	movs	r3, #14
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d010      	beq.n	8004ad4 <USBD_StdEPReq+0x10e>
 8004ab2:	230e      	movs	r3, #14
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	2b80      	cmp	r3, #128	; 0x80
 8004aba:	d00b      	beq.n	8004ad4 <USBD_StdEPReq+0x10e>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	88db      	ldrh	r3, [r3, #6]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d107      	bne.n	8004ad4 <USBD_StdEPReq+0x10e>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8004ac4:	230e      	movs	r3, #14
 8004ac6:	18fb      	adds	r3, r7, r3
 8004ac8:	781a      	ldrb	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	0011      	movs	r1, r2
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f002 fd1d 	bl	800750e <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f000 fd10 	bl	80054fc <USBD_CtlSendStatus>

        break;
 8004adc:	e006      	b.n	8004aec <USBD_StdEPReq+0x126>

      default:
        USBD_CtlError(pdev, req);
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	0011      	movs	r1, r2
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f000 fc20 	bl	800532a <USBD_CtlError>
        break;
 8004aea:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8004aec:	e118      	b.n	8004d20 <USBD_StdEPReq+0x35a>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	239d      	movs	r3, #157	; 0x9d
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	5cd3      	ldrb	r3, [r2, r3]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d002      	beq.n	8004b00 <USBD_StdEPReq+0x13a>
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d01f      	beq.n	8004b3e <USBD_StdEPReq+0x178>
 8004afe:	e035      	b.n	8004b6c <USBD_StdEPReq+0x1a6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004b00:	230e      	movs	r3, #14
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d012      	beq.n	8004b30 <USBD_StdEPReq+0x16a>
 8004b0a:	230e      	movs	r3, #14
 8004b0c:	18fb      	adds	r3, r7, r3
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b80      	cmp	r3, #128	; 0x80
 8004b12:	d00d      	beq.n	8004b30 <USBD_StdEPReq+0x16a>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004b14:	230e      	movs	r3, #14
 8004b16:	18fb      	adds	r3, r7, r3
 8004b18:	781a      	ldrb	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0011      	movs	r1, r2
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f002 fcf5 	bl	800750e <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2180      	movs	r1, #128	; 0x80
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f002 fcf0 	bl	800750e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004b2e:	e025      	b.n	8004b7c <USBD_StdEPReq+0x1b6>
          USBD_CtlError(pdev, req);
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	0011      	movs	r1, r2
 8004b36:	0018      	movs	r0, r3
 8004b38:	f000 fbf7 	bl	800532a <USBD_CtlError>
        break;
 8004b3c:	e01e      	b.n	8004b7c <USBD_StdEPReq+0x1b6>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	885b      	ldrh	r3, [r3, #2]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d119      	bne.n	8004b7a <USBD_StdEPReq+0x1b4>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004b46:	230e      	movs	r3, #14
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	227f      	movs	r2, #127	; 0x7f
 8004b4e:	4013      	ands	r3, r2
 8004b50:	d007      	beq.n	8004b62 <USBD_StdEPReq+0x19c>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8004b52:	230e      	movs	r3, #14
 8004b54:	18fb      	adds	r3, r7, r3
 8004b56:	781a      	ldrb	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	0011      	movs	r1, r2
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f002 fd02 	bl	8007566 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	0018      	movs	r0, r3
 8004b66:	f000 fcc9 	bl	80054fc <USBD_CtlSendStatus>
        }
        break;
 8004b6a:	e006      	b.n	8004b7a <USBD_StdEPReq+0x1b4>

      default:
        USBD_CtlError(pdev, req);
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	0011      	movs	r1, r2
 8004b72:	0018      	movs	r0, r3
 8004b74:	f000 fbd9 	bl	800532a <USBD_CtlError>
        break;
 8004b78:	e000      	b.n	8004b7c <USBD_StdEPReq+0x1b6>
        break;
 8004b7a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8004b7c:	e0d0      	b.n	8004d20 <USBD_StdEPReq+0x35a>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	239d      	movs	r3, #157	; 0x9d
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	5cd3      	ldrb	r3, [r2, r3]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d002      	beq.n	8004b90 <USBD_StdEPReq+0x1ca>
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d03d      	beq.n	8004c0a <USBD_StdEPReq+0x244>
 8004b8e:	e0b8      	b.n	8004d02 <USBD_StdEPReq+0x33c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004b90:	230e      	movs	r3, #14
 8004b92:	18fb      	adds	r3, r7, r3
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00b      	beq.n	8004bb2 <USBD_StdEPReq+0x1ec>
 8004b9a:	230e      	movs	r3, #14
 8004b9c:	18fb      	adds	r3, r7, r3
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b80      	cmp	r3, #128	; 0x80
 8004ba2:	d006      	beq.n	8004bb2 <USBD_StdEPReq+0x1ec>
        {
          USBD_CtlError(pdev, req);
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0011      	movs	r1, r2
 8004baa:	0018      	movs	r0, r3
 8004bac:	f000 fbbd 	bl	800532a <USBD_CtlError>
          break;
 8004bb0:	e0ae      	b.n	8004d10 <USBD_StdEPReq+0x34a>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004bb2:	230e      	movs	r3, #14
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	b25b      	sxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	da0d      	bge.n	8004bda <USBD_StdEPReq+0x214>
 8004bbe:	230e      	movs	r3, #14
 8004bc0:	18fb      	adds	r3, r7, r3
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	227f      	movs	r2, #127	; 0x7f
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	0013      	movs	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	189b      	adds	r3, r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	3310      	adds	r3, #16
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	18d3      	adds	r3, r2, r3
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	e00c      	b.n	8004bf4 <USBD_StdEPReq+0x22e>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004bda:	230e      	movs	r3, #14
 8004bdc:	18fb      	adds	r3, r7, r3
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	227f      	movs	r2, #127	; 0x7f
 8004be2:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004be4:	0013      	movs	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	189b      	adds	r3, r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	3341      	adds	r3, #65	; 0x41
 8004bee:	33ff      	adds	r3, #255	; 0xff
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	18d3      	adds	r3, r2, r3
 8004bf4:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2202      	movs	r2, #2
 8004c02:	0018      	movs	r0, r3
 8004c04:	f000 fc10 	bl	8005428 <USBD_CtlSendData>
          break;
 8004c08:	e082      	b.n	8004d10 <USBD_StdEPReq+0x34a>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8004c0a:	230e      	movs	r3, #14
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	b25b      	sxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	da15      	bge.n	8004c42 <USBD_StdEPReq+0x27c>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004c16:	230e      	movs	r3, #14
 8004c18:	18fb      	adds	r3, r7, r3
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	220f      	movs	r2, #15
 8004c1e:	401a      	ands	r2, r3
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	0013      	movs	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	189b      	adds	r3, r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	18cb      	adds	r3, r1, r3
 8004c2c:	3318      	adds	r3, #24
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d11e      	bne.n	8004c72 <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	0011      	movs	r1, r2
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f000 fb75 	bl	800532a <USBD_CtlError>
            break;
 8004c40:	e066      	b.n	8004d10 <USBD_StdEPReq+0x34a>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004c42:	230e      	movs	r3, #14
 8004c44:	18fb      	adds	r3, r7, r3
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	220f      	movs	r2, #15
 8004c4a:	401a      	ands	r2, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	23a2      	movs	r3, #162	; 0xa2
 8004c50:	0059      	lsls	r1, r3, #1
 8004c52:	0013      	movs	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	189b      	adds	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	18c3      	adds	r3, r0, r3
 8004c5c:	185b      	adds	r3, r3, r1
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d106      	bne.n	8004c72 <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	0011      	movs	r1, r2
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f000 fb5d 	bl	800532a <USBD_CtlError>
            break;
 8004c70:	e04e      	b.n	8004d10 <USBD_StdEPReq+0x34a>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004c72:	230e      	movs	r3, #14
 8004c74:	18fb      	adds	r3, r7, r3
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	b25b      	sxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	da0d      	bge.n	8004c9a <USBD_StdEPReq+0x2d4>
 8004c7e:	230e      	movs	r3, #14
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	227f      	movs	r2, #127	; 0x7f
 8004c86:	401a      	ands	r2, r3
 8004c88:	0013      	movs	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	189b      	adds	r3, r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	3310      	adds	r3, #16
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	18d3      	adds	r3, r2, r3
 8004c96:	3304      	adds	r3, #4
 8004c98:	e00c      	b.n	8004cb4 <USBD_StdEPReq+0x2ee>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004c9a:	230e      	movs	r3, #14
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	227f      	movs	r2, #127	; 0x7f
 8004ca2:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004ca4:	0013      	movs	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	189b      	adds	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	3341      	adds	r3, #65	; 0x41
 8004cae:	33ff      	adds	r3, #255	; 0xff
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	18d3      	adds	r3, r2, r3
 8004cb4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004cb6:	230e      	movs	r3, #14
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d004      	beq.n	8004cca <USBD_StdEPReq+0x304>
 8004cc0:	230e      	movs	r3, #14
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b80      	cmp	r3, #128	; 0x80
 8004cc8:	d103      	bne.n	8004cd2 <USBD_StdEPReq+0x30c>
          {
            pep->status = 0x0000U;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e010      	b.n	8004cf4 <USBD_StdEPReq+0x32e>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004cd2:	230e      	movs	r3, #14
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	781a      	ldrb	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	0011      	movs	r1, r2
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f002 fc6e 	bl	80075be <USBD_LL_IsStallEP>
 8004ce2:	1e03      	subs	r3, r0, #0
 8004ce4:	d003      	beq.n	8004cee <USBD_StdEPReq+0x328>
          {
            pep->status = 0x0001U;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	e002      	b.n	8004cf4 <USBD_StdEPReq+0x32e>
          }
          else
          {
            pep->status = 0x0000U;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f000 fb94 	bl	8005428 <USBD_CtlSendData>
          break;
 8004d00:	e006      	b.n	8004d10 <USBD_StdEPReq+0x34a>

      default:
        USBD_CtlError(pdev, req);
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	0011      	movs	r1, r2
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f000 fb0e 	bl	800532a <USBD_CtlError>
        break;
 8004d0e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8004d10:	e006      	b.n	8004d20 <USBD_StdEPReq+0x35a>

    default:
      USBD_CtlError(pdev, req);
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	0011      	movs	r1, r2
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f000 fb06 	bl	800532a <USBD_CtlError>
      break;
 8004d1e:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8004d20:	e006      	b.n	8004d30 <USBD_StdEPReq+0x36a>

  default:
    USBD_CtlError(pdev, req);
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	0011      	movs	r1, r2
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f000 fafe 	bl	800532a <USBD_CtlError>
    break;
 8004d2e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8004d30:	230f      	movs	r3, #15
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	781b      	ldrb	r3, [r3, #0]
}
 8004d36:	0018      	movs	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b004      	add	sp, #16
 8004d3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004d40 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	885b      	ldrh	r3, [r3, #2]
 8004d4e:	0a1b      	lsrs	r3, r3, #8
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b07      	cmp	r3, #7
 8004d54:	d900      	bls.n	8004d58 <USBD_GetDescriptor+0x18>
 8004d56:	e0ce      	b.n	8004ef6 <USBD_GetDescriptor+0x1b6>
 8004d58:	009a      	lsls	r2, r3, #2
 8004d5a:	4b80      	ldr	r3, [pc, #512]	; (8004f5c <USBD_GetDescriptor+0x21c>)
 8004d5c:	18d3      	adds	r3, r2, r3
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	23a2      	movs	r3, #162	; 0xa2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	58d3      	ldr	r3, [r2, r3]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	7c12      	ldrb	r2, [r2, #16]
 8004d70:	210a      	movs	r1, #10
 8004d72:	1879      	adds	r1, r7, r1
 8004d74:	0010      	movs	r0, r2
 8004d76:	4798      	blx	r3
 8004d78:	0003      	movs	r3, r0
 8004d7a:	60fb      	str	r3, [r7, #12]
    break;
 8004d7c:	e0c2      	b.n	8004f04 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	7c1b      	ldrb	r3, [r3, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10f      	bne.n	8004da6 <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	23a3      	movs	r3, #163	; 0xa3
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	58d3      	ldr	r3, [r2, r3]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	220a      	movs	r2, #10
 8004d92:	18ba      	adds	r2, r7, r2
 8004d94:	0010      	movs	r0, r2
 8004d96:	4798      	blx	r3
 8004d98:	0003      	movs	r3, r0
 8004d9a:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	2202      	movs	r2, #2
 8004da2:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004da4:	e0ae      	b.n	8004f04 <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	23a3      	movs	r3, #163	; 0xa3
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	58d3      	ldr	r3, [r2, r3]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	220a      	movs	r2, #10
 8004db2:	18ba      	adds	r2, r7, r2
 8004db4:	0010      	movs	r0, r2
 8004db6:	4798      	blx	r3
 8004db8:	0003      	movs	r3, r0
 8004dba:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	701a      	strb	r2, [r3, #0]
    break;
 8004dc4:	e09e      	b.n	8004f04 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	885b      	ldrh	r3, [r3, #2]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b05      	cmp	r3, #5
 8004dce:	d858      	bhi.n	8004e82 <USBD_GetDescriptor+0x142>
 8004dd0:	009a      	lsls	r2, r3, #2
 8004dd2:	4b63      	ldr	r3, [pc, #396]	; (8004f60 <USBD_GetDescriptor+0x220>)
 8004dd4:	18d3      	adds	r3, r2, r3
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	23a2      	movs	r3, #162	; 0xa2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	58d3      	ldr	r3, [r2, r3]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	7c12      	ldrb	r2, [r2, #16]
 8004de8:	210a      	movs	r1, #10
 8004dea:	1879      	adds	r1, r7, r1
 8004dec:	0010      	movs	r0, r2
 8004dee:	4798      	blx	r3
 8004df0:	0003      	movs	r3, r0
 8004df2:	60fb      	str	r3, [r7, #12]
      break;
 8004df4:	e04c      	b.n	8004e90 <USBD_GetDescriptor+0x150>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	23a2      	movs	r3, #162	; 0xa2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	58d3      	ldr	r3, [r2, r3]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	7c12      	ldrb	r2, [r2, #16]
 8004e04:	210a      	movs	r1, #10
 8004e06:	1879      	adds	r1, r7, r1
 8004e08:	0010      	movs	r0, r2
 8004e0a:	4798      	blx	r3
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	60fb      	str	r3, [r7, #12]
      break;
 8004e10:	e03e      	b.n	8004e90 <USBD_GetDescriptor+0x150>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	23a2      	movs	r3, #162	; 0xa2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	58d3      	ldr	r3, [r2, r3]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	7c12      	ldrb	r2, [r2, #16]
 8004e20:	210a      	movs	r1, #10
 8004e22:	1879      	adds	r1, r7, r1
 8004e24:	0010      	movs	r0, r2
 8004e26:	4798      	blx	r3
 8004e28:	0003      	movs	r3, r0
 8004e2a:	60fb      	str	r3, [r7, #12]
      break;
 8004e2c:	e030      	b.n	8004e90 <USBD_GetDescriptor+0x150>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	23a2      	movs	r3, #162	; 0xa2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	58d3      	ldr	r3, [r2, r3]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	7c12      	ldrb	r2, [r2, #16]
 8004e3c:	210a      	movs	r1, #10
 8004e3e:	1879      	adds	r1, r7, r1
 8004e40:	0010      	movs	r0, r2
 8004e42:	4798      	blx	r3
 8004e44:	0003      	movs	r3, r0
 8004e46:	60fb      	str	r3, [r7, #12]
      break;
 8004e48:	e022      	b.n	8004e90 <USBD_GetDescriptor+0x150>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	23a2      	movs	r3, #162	; 0xa2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	58d3      	ldr	r3, [r2, r3]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	7c12      	ldrb	r2, [r2, #16]
 8004e58:	210a      	movs	r1, #10
 8004e5a:	1879      	adds	r1, r7, r1
 8004e5c:	0010      	movs	r0, r2
 8004e5e:	4798      	blx	r3
 8004e60:	0003      	movs	r3, r0
 8004e62:	60fb      	str	r3, [r7, #12]
      break;
 8004e64:	e014      	b.n	8004e90 <USBD_GetDescriptor+0x150>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	23a2      	movs	r3, #162	; 0xa2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	58d3      	ldr	r3, [r2, r3]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	7c12      	ldrb	r2, [r2, #16]
 8004e74:	210a      	movs	r1, #10
 8004e76:	1879      	adds	r1, r7, r1
 8004e78:	0010      	movs	r0, r2
 8004e7a:	4798      	blx	r3
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	60fb      	str	r3, [r7, #12]
      break;
 8004e80:	e006      	b.n	8004e90 <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	0011      	movs	r1, r2
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f000 fa4e 	bl	800532a <USBD_CtlError>
      return;
 8004e8e:	e061      	b.n	8004f54 <USBD_GetDescriptor+0x214>
#endif
    }
    break;
 8004e90:	e038      	b.n	8004f04 <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	7c1b      	ldrb	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10b      	bne.n	8004eb2 <USBD_GetDescriptor+0x172>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	23a3      	movs	r3, #163	; 0xa3
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	58d3      	ldr	r3, [r2, r3]
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea4:	220a      	movs	r2, #10
 8004ea6:	18ba      	adds	r2, r7, r2
 8004ea8:	0010      	movs	r0, r2
 8004eaa:	4798      	blx	r3
 8004eac:	0003      	movs	r3, r0
 8004eae:	60fb      	str	r3, [r7, #12]
      break;
 8004eb0:	e028      	b.n	8004f04 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	0011      	movs	r1, r2
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f000 fa36 	bl	800532a <USBD_CtlError>
      return;
 8004ebe:	e049      	b.n	8004f54 <USBD_GetDescriptor+0x214>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	7c1b      	ldrb	r3, [r3, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10f      	bne.n	8004ee8 <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	23a3      	movs	r3, #163	; 0xa3
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	58d3      	ldr	r3, [r2, r3]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	220a      	movs	r2, #10
 8004ed4:	18ba      	adds	r2, r7, r2
 8004ed6:	0010      	movs	r0, r2
 8004ed8:	4798      	blx	r3
 8004eda:	0003      	movs	r3, r0
 8004edc:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	2207      	movs	r2, #7
 8004ee4:	701a      	strb	r2, [r3, #0]
      break;
 8004ee6:	e00d      	b.n	8004f04 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	0011      	movs	r1, r2
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f000 fa1b 	bl	800532a <USBD_CtlError>
      return;
 8004ef4:	e02e      	b.n	8004f54 <USBD_GetDescriptor+0x214>
    }

  default:
     USBD_CtlError(pdev , req);
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	0011      	movs	r1, r2
 8004efc:	0018      	movs	r0, r3
 8004efe:	f000 fa14 	bl	800532a <USBD_CtlError>
    return;
 8004f02:	e027      	b.n	8004f54 <USBD_GetDescriptor+0x214>
  }

  if((len != 0U) && (req->wLength != 0U))
 8004f04:	230a      	movs	r3, #10
 8004f06:	18fb      	adds	r3, r7, r3
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d01a      	beq.n	8004f44 <USBD_GetDescriptor+0x204>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	88db      	ldrh	r3, [r3, #6]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d016      	beq.n	8004f44 <USBD_GetDescriptor+0x204>
  {

    len = MIN(len, req->wLength);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	88da      	ldrh	r2, [r3, #6]
 8004f1a:	230a      	movs	r3, #10
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	1c18      	adds	r0, r3, #0
 8004f22:	1c11      	adds	r1, r2, #0
 8004f24:	b28a      	uxth	r2, r1
 8004f26:	b283      	uxth	r3, r0
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d900      	bls.n	8004f2e <USBD_GetDescriptor+0x1ee>
 8004f2c:	1c01      	adds	r1, r0, #0
 8004f2e:	b28a      	uxth	r2, r1
 8004f30:	210a      	movs	r1, #10
 8004f32:	187b      	adds	r3, r7, r1
 8004f34:	801a      	strh	r2, [r3, #0]

    USBD_CtlSendData (pdev, pbuf, len);
 8004f36:	187b      	adds	r3, r7, r1
 8004f38:	881a      	ldrh	r2, [r3, #0]
 8004f3a:	68f9      	ldr	r1, [r7, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f000 fa72 	bl	8005428 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	88db      	ldrh	r3, [r3, #6]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d103      	bne.n	8004f54 <USBD_GetDescriptor+0x214>
  {
   USBD_CtlSendStatus(pdev);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f000 fad4 	bl	80054fc <USBD_CtlSendStatus>
  }
}
 8004f54:	46bd      	mov	sp, r7
 8004f56:	b004      	add	sp, #16
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	08008a10 	.word	0x08008a10
 8004f60:	08008a30 	.word	0x08008a30

08004f64 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004f64:	b590      	push	{r4, r7, lr}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	889b      	ldrh	r3, [r3, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d13d      	bne.n	8004ff2 <USBD_SetAddress+0x8e>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	88db      	ldrh	r3, [r3, #6]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d139      	bne.n	8004ff2 <USBD_SetAddress+0x8e>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	885b      	ldrh	r3, [r3, #2]
 8004f82:	2b7f      	cmp	r3, #127	; 0x7f
 8004f84:	d835      	bhi.n	8004ff2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	885b      	ldrh	r3, [r3, #2]
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	230f      	movs	r3, #15
 8004f8e:	18fb      	adds	r3, r7, r3
 8004f90:	217f      	movs	r1, #127	; 0x7f
 8004f92:	400a      	ands	r2, r1
 8004f94:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	239d      	movs	r3, #157	; 0x9d
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	5cd3      	ldrb	r3, [r2, r3]
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d106      	bne.n	8004fb0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev , req);
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	0011      	movs	r1, r2
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f000 f9be 	bl	800532a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fae:	e026      	b.n	8004ffe <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	240f      	movs	r4, #15
 8004fb4:	193a      	adds	r2, r7, r4
 8004fb6:	4914      	ldr	r1, [pc, #80]	; (8005008 <USBD_SetAddress+0xa4>)
 8004fb8:	7812      	ldrb	r2, [r2, #0]
 8004fba:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004fbc:	193b      	adds	r3, r7, r4
 8004fbe:	781a      	ldrb	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	0011      	movs	r1, r2
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f002 fb25 	bl	8007614 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f000 fa95 	bl	80054fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004fd2:	193b      	adds	r3, r7, r4
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	239d      	movs	r3, #157	; 0x9d
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	2102      	movs	r1, #2
 8004fe2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fe4:	e00b      	b.n	8004ffe <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	239d      	movs	r3, #157	; 0x9d
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	2101      	movs	r1, #1
 8004fee:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ff0:	e005      	b.n	8004ffe <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	0011      	movs	r1, r2
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f000 f996 	bl	800532a <USBD_CtlError>
  }
}
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	46bd      	mov	sp, r7
 8005002:	b005      	add	sp, #20
 8005004:	bd90      	pop	{r4, r7, pc}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	00000276 	.word	0x00000276

0800500c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	885b      	ldrh	r3, [r3, #2]
 800501a:	b2da      	uxtb	r2, r3
 800501c:	4b4c      	ldr	r3, [pc, #304]	; (8005150 <USBD_SetConfig+0x144>)
 800501e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005020:	4b4b      	ldr	r3, [pc, #300]	; (8005150 <USBD_SetConfig+0x144>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d906      	bls.n	8005036 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	0011      	movs	r1, r2
 800502e:	0018      	movs	r0, r3
 8005030:	f000 f97b 	bl	800532a <USBD_CtlError>
 8005034:	e088      	b.n	8005148 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	239d      	movs	r3, #157	; 0x9d
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	5cd3      	ldrb	r3, [r2, r3]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d002      	beq.n	8005048 <USBD_SetConfig+0x3c>
 8005042:	2b03      	cmp	r3, #3
 8005044:	d029      	beq.n	800509a <USBD_SetConfig+0x8e>
 8005046:	e071      	b.n	800512c <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8005048:	4b41      	ldr	r3, [pc, #260]	; (8005150 <USBD_SetConfig+0x144>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01f      	beq.n	8005090 <USBD_SetConfig+0x84>
      {
        pdev->dev_config = cfgidx;
 8005050:	4b3f      	ldr	r3, [pc, #252]	; (8005150 <USBD_SetConfig+0x144>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	001a      	movs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	239d      	movs	r3, #157	; 0x9d
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	2103      	movs	r1, #3
 8005062:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005064:	4b3a      	ldr	r3, [pc, #232]	; (8005150 <USBD_SetConfig+0x144>)
 8005066:	781a      	ldrb	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	0011      	movs	r1, r2
 800506c:	0018      	movs	r0, r3
 800506e:	f7ff f966 	bl	800433e <USBD_SetClassConfig>
 8005072:	0003      	movs	r3, r0
 8005074:	2b02      	cmp	r3, #2
 8005076:	d106      	bne.n	8005086 <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev, req);
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	0011      	movs	r1, r2
 800507e:	0018      	movs	r0, r3
 8005080:	f000 f953 	bl	800532a <USBD_CtlError>
          return;
 8005084:	e060      	b.n	8005148 <USBD_SetConfig+0x13c>
        }
        USBD_CtlSendStatus(pdev);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	0018      	movs	r0, r3
 800508a:	f000 fa37 	bl	80054fc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800508e:	e05b      	b.n	8005148 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	0018      	movs	r0, r3
 8005094:	f000 fa32 	bl	80054fc <USBD_CtlSendStatus>
      break;
 8005098:	e056      	b.n	8005148 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800509a:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <USBD_SetConfig+0x144>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d115      	bne.n	80050ce <USBD_SetConfig+0xc2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	239d      	movs	r3, #157	; 0x9d
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	2102      	movs	r1, #2
 80050aa:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 80050ac:	4b28      	ldr	r3, [pc, #160]	; (8005150 <USBD_SetConfig+0x144>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	001a      	movs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80050b6:	4b26      	ldr	r3, [pc, #152]	; (8005150 <USBD_SetConfig+0x144>)
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	0011      	movs	r1, r2
 80050be:	0018      	movs	r0, r3
 80050c0:	f7ff f965 	bl	800438e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	0018      	movs	r0, r3
 80050c8:	f000 fa18 	bl	80054fc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80050cc:	e03c      	b.n	8005148 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80050ce:	4b20      	ldr	r3, [pc, #128]	; (8005150 <USBD_SetConfig+0x144>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	001a      	movs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d022      	beq.n	8005122 <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	0011      	movs	r1, r2
 80050e6:	0018      	movs	r0, r3
 80050e8:	f7ff f951 	bl	800438e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80050ec:	4b18      	ldr	r3, [pc, #96]	; (8005150 <USBD_SetConfig+0x144>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	001a      	movs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80050f6:	4b16      	ldr	r3, [pc, #88]	; (8005150 <USBD_SetConfig+0x144>)
 80050f8:	781a      	ldrb	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	0011      	movs	r1, r2
 80050fe:	0018      	movs	r0, r3
 8005100:	f7ff f91d 	bl	800433e <USBD_SetClassConfig>
 8005104:	0003      	movs	r3, r0
 8005106:	2b02      	cmp	r3, #2
 8005108:	d106      	bne.n	8005118 <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev, req);
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	0011      	movs	r1, r2
 8005110:	0018      	movs	r0, r3
 8005112:	f000 f90a 	bl	800532a <USBD_CtlError>
          return;
 8005116:	e017      	b.n	8005148 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	0018      	movs	r0, r3
 800511c:	f000 f9ee 	bl	80054fc <USBD_CtlSendStatus>
      break;
 8005120:	e012      	b.n	8005148 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	0018      	movs	r0, r3
 8005126:	f000 f9e9 	bl	80054fc <USBD_CtlSendStatus>
      break;
 800512a:	e00d      	b.n	8005148 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	0011      	movs	r1, r2
 8005132:	0018      	movs	r0, r3
 8005134:	f000 f8f9 	bl	800532a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <USBD_SetConfig+0x144>)
 800513a:	781a      	ldrb	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	0011      	movs	r1, r2
 8005140:	0018      	movs	r0, r3
 8005142:	f7ff f924 	bl	800438e <USBD_ClrClassConfig>
      break;
 8005146:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8005148:	46bd      	mov	sp, r7
 800514a:	b002      	add	sp, #8
 800514c:	bd80      	pop	{r7, pc}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	200001f8 	.word	0x200001f8

08005154 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	88db      	ldrh	r3, [r3, #6]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d006      	beq.n	8005174 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev , req);
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	0011      	movs	r1, r2
 800516c:	0018      	movs	r0, r3
 800516e:	f000 f8dc 	bl	800532a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8005172:	e025      	b.n	80051c0 <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	239d      	movs	r3, #157	; 0x9d
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	5cd3      	ldrb	r3, [r2, r3]
 800517c:	2b01      	cmp	r3, #1
 800517e:	db18      	blt.n	80051b2 <USBD_GetConfig+0x5e>
 8005180:	2b02      	cmp	r3, #2
 8005182:	dd02      	ble.n	800518a <USBD_GetConfig+0x36>
 8005184:	2b03      	cmp	r3, #3
 8005186:	d00c      	beq.n	80051a2 <USBD_GetConfig+0x4e>
 8005188:	e013      	b.n	80051b2 <USBD_GetConfig+0x5e>
      pdev->dev_default_config = 0U;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3308      	adds	r3, #8
 8005194:	0019      	movs	r1, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	0018      	movs	r0, r3
 800519c:	f000 f944 	bl	8005428 <USBD_CtlSendData>
      break;
 80051a0:	e00e      	b.n	80051c0 <USBD_GetConfig+0x6c>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	1d19      	adds	r1, r3, #4
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	0018      	movs	r0, r3
 80051ac:	f000 f93c 	bl	8005428 <USBD_CtlSendData>
      break;
 80051b0:	e006      	b.n	80051c0 <USBD_GetConfig+0x6c>
      USBD_CtlError(pdev , req);
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	0011      	movs	r1, r2
 80051b8:	0018      	movs	r0, r3
 80051ba:	f000 f8b6 	bl	800532a <USBD_CtlError>
      break;
 80051be:	46c0      	nop			; (mov r8, r8)
}
 80051c0:	46c0      	nop			; (mov r8, r8)
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b002      	add	sp, #8
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	239d      	movs	r3, #157	; 0x9d
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	5cd3      	ldrb	r3, [r2, r3]
 80051da:	3b01      	subs	r3, #1
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d822      	bhi.n	8005226 <USBD_GetStatus+0x5e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	88db      	ldrh	r3, [r3, #6]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d006      	beq.n	80051f6 <USBD_GetStatus+0x2e>
    {
      USBD_CtlError(pdev, req);
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	0011      	movs	r1, r2
 80051ee:	0018      	movs	r0, r3
 80051f0:	f000 f89b 	bl	800532a <USBD_CtlError>
      break;
 80051f4:	e01e      	b.n	8005234 <USBD_GetStatus+0x6c>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	239f      	movs	r3, #159	; 0x9f
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	58d3      	ldr	r3, [r2, r3]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <USBD_GetStatus+0x4c>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	2202      	movs	r2, #2
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	330c      	adds	r3, #12
 8005218:	0019      	movs	r1, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	0018      	movs	r0, r3
 8005220:	f000 f902 	bl	8005428 <USBD_CtlSendData>
    break;
 8005224:	e006      	b.n	8005234 <USBD_GetStatus+0x6c>

  default :
    USBD_CtlError(pdev , req);
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	0011      	movs	r1, r2
 800522c:	0018      	movs	r0, r3
 800522e:	f000 f87c 	bl	800532a <USBD_CtlError>
    break;
 8005232:	46c0      	nop			; (mov r8, r8)
  }
}
 8005234:	46c0      	nop			; (mov r8, r8)
 8005236:	46bd      	mov	sp, r7
 8005238:	b002      	add	sp, #8
 800523a:	bd80      	pop	{r7, pc}

0800523c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	885b      	ldrh	r3, [r3, #2]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d108      	bne.n	8005260 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	239f      	movs	r3, #159	; 0x9f
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	2101      	movs	r1, #1
 8005256:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	0018      	movs	r0, r3
 800525c:	f000 f94e 	bl	80054fc <USBD_CtlSendStatus>
  }

}
 8005260:	46c0      	nop			; (mov r8, r8)
 8005262:	46bd      	mov	sp, r7
 8005264:	b002      	add	sp, #8
 8005266:	bd80      	pop	{r7, pc}

08005268 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	239d      	movs	r3, #157	; 0x9d
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	5cd3      	ldrb	r3, [r2, r3]
 800527a:	3b01      	subs	r3, #1
 800527c:	2b02      	cmp	r3, #2
 800527e:	d80d      	bhi.n	800529c <USBD_ClrFeature+0x34>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	885b      	ldrh	r3, [r3, #2]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d110      	bne.n	80052aa <USBD_ClrFeature+0x42>
    {
      pdev->dev_remote_wakeup = 0U;
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	239f      	movs	r3, #159	; 0x9f
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	2100      	movs	r1, #0
 8005290:	50d1      	str	r1, [r2, r3]
      USBD_CtlSendStatus(pdev);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0018      	movs	r0, r3
 8005296:	f000 f931 	bl	80054fc <USBD_CtlSendStatus>
    }
    break;
 800529a:	e006      	b.n	80052aa <USBD_ClrFeature+0x42>

  default :
     USBD_CtlError(pdev , req);
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	0011      	movs	r1, r2
 80052a2:	0018      	movs	r0, r3
 80052a4:	f000 f841 	bl	800532a <USBD_CtlError>
    break;
 80052a8:	e000      	b.n	80052ac <USBD_ClrFeature+0x44>
    break;
 80052aa:	46c0      	nop			; (mov r8, r8)
  }
}
 80052ac:	46c0      	nop			; (mov r8, r8)
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b002      	add	sp, #8
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	781a      	ldrb	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	785a      	ldrb	r2, [r3, #1]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	3302      	adds	r3, #2
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	3303      	adds	r3, #3
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	18d3      	adds	r3, r2, r3
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	3304      	adds	r3, #4
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	3305      	adds	r3, #5
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	021b      	lsls	r3, r3, #8
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	18d3      	adds	r3, r2, r3
 8005300:	b29a      	uxth	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	3306      	adds	r3, #6
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	b29a      	uxth	r2, r3
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	3307      	adds	r3, #7
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	b29b      	uxth	r3, r3
 800531a:	18d3      	adds	r3, r2, r3
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	80da      	strh	r2, [r3, #6]

}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	46bd      	mov	sp, r7
 8005326:	b002      	add	sp, #8
 8005328:	bd80      	pop	{r7, pc}

0800532a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2180      	movs	r1, #128	; 0x80
 8005338:	0018      	movs	r0, r3
 800533a:	f002 f8e8 	bl	800750e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2100      	movs	r1, #0
 8005342:	0018      	movs	r0, r3
 8005344:	f002 f8e3 	bl	800750e <USBD_LL_StallEP>
}
 8005348:	46c0      	nop			; (mov r8, r8)
 800534a:	46bd      	mov	sp, r7
 800534c:	b002      	add	sp, #8
 800534e:	bd80      	pop	{r7, pc}

08005350 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005350:	b590      	push	{r4, r7, lr}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800535c:	2317      	movs	r3, #23
 800535e:	18fb      	adds	r3, r7, r3
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d03d      	beq.n	80053e6 <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	0018      	movs	r0, r3
 800536e:	f000 f83e 	bl	80053ee <USBD_GetLen>
 8005372:	0003      	movs	r3, r0
 8005374:	3301      	adds	r3, #1
 8005376:	b29b      	uxth	r3, r3
 8005378:	18db      	adds	r3, r3, r3
 800537a:	b29a      	uxth	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005380:	2017      	movs	r0, #23
 8005382:	183b      	adds	r3, r7, r0
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	183a      	adds	r2, r7, r0
 8005388:	1c59      	adds	r1, r3, #1
 800538a:	7011      	strb	r1, [r2, #0]
 800538c:	001a      	movs	r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	189b      	adds	r3, r3, r2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	7812      	ldrb	r2, [r2, #0]
 8005396:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005398:	183b      	adds	r3, r7, r0
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	183a      	adds	r2, r7, r0
 800539e:	1c59      	adds	r1, r3, #1
 80053a0:	7011      	strb	r1, [r2, #0]
 80053a2:	001a      	movs	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	189b      	adds	r3, r3, r2
 80053a8:	2203      	movs	r2, #3
 80053aa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80053ac:	e017      	b.n	80053de <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	60fa      	str	r2, [r7, #12]
 80053b4:	2417      	movs	r4, #23
 80053b6:	193a      	adds	r2, r7, r4
 80053b8:	7812      	ldrb	r2, [r2, #0]
 80053ba:	1939      	adds	r1, r7, r4
 80053bc:	1c50      	adds	r0, r2, #1
 80053be:	7008      	strb	r0, [r1, #0]
 80053c0:	0011      	movs	r1, r2
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	1852      	adds	r2, r2, r1
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80053ca:	193b      	adds	r3, r7, r4
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	193a      	adds	r2, r7, r4
 80053d0:	1c59      	adds	r1, r3, #1
 80053d2:	7011      	strb	r1, [r2, #0]
 80053d4:	001a      	movs	r2, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	189b      	adds	r3, r3, r2
 80053da:	2200      	movs	r2, #0
 80053dc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e3      	bne.n	80053ae <USBD_GetString+0x5e>
    }
  }
}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b007      	add	sp, #28
 80053ec:	bd90      	pop	{r4, r7, pc}

080053ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80053f6:	230f      	movs	r3, #15
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0')
 80053fe:	e008      	b.n	8005412 <USBD_GetLen+0x24>
    {
        len++;
 8005400:	210f      	movs	r1, #15
 8005402:	187b      	adds	r3, r7, r1
 8005404:	781a      	ldrb	r2, [r3, #0]
 8005406:	187b      	adds	r3, r7, r1
 8005408:	3201      	adds	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]
        buf++;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3301      	adds	r3, #1
 8005410:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f2      	bne.n	8005400 <USBD_GetLen+0x12>
    }

    return len;
 800541a:	230f      	movs	r3, #15
 800541c:	18fb      	adds	r3, r7, r3
 800541e:	781b      	ldrb	r3, [r3, #0]
}
 8005420:	0018      	movs	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	b004      	add	sp, #16
 8005426:	bd80      	pop	{r7, pc}

08005428 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	1dbb      	adds	r3, r7, #6
 8005434:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	239b      	movs	r3, #155	; 0x9b
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	2102      	movs	r1, #2
 800543e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8005440:	1dbb      	adds	r3, r7, #6
 8005442:	881a      	ldrh	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005448:	1dbb      	adds	r3, r7, #6
 800544a:	881a      	ldrh	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005450:	1dbb      	adds	r3, r7, #6
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	2100      	movs	r1, #0
 800545a:	f002 f907 	bl	800766c <USBD_LL_Transmit>

  return USBD_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	0018      	movs	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	b004      	add	sp, #16
 8005466:	bd80      	pop	{r7, pc}

08005468 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	1dbb      	adds	r3, r7, #6
 8005474:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005476:	1dbb      	adds	r3, r7, #6
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	2100      	movs	r1, #0
 8005480:	f002 f8f4 	bl	800766c <USBD_LL_Transmit>

  return USBD_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	0018      	movs	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	b004      	add	sp, #16
 800548c:	bd80      	pop	{r7, pc}

0800548e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	1dbb      	adds	r3, r7, #6
 800549a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	239b      	movs	r3, #155	; 0x9b
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	2103      	movs	r1, #3
 80054a4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80054a6:	1dbb      	adds	r3, r7, #6
 80054a8:	8819      	ldrh	r1, [r3, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	23a4      	movs	r3, #164	; 0xa4
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80054b2:	1dbb      	adds	r3, r7, #6
 80054b4:	8819      	ldrh	r1, [r3, #0]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	23a6      	movs	r3, #166	; 0xa6
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80054be:	1dbb      	adds	r3, r7, #6
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	2100      	movs	r1, #0
 80054c8:	f002 f908 	bl	80076dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	0018      	movs	r0, r3
 80054d0:	46bd      	mov	sp, r7
 80054d2:	b004      	add	sp, #16
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b084      	sub	sp, #16
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	1dbb      	adds	r3, r7, #6
 80054e2:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80054e4:	1dbb      	adds	r3, r7, #6
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	2100      	movs	r1, #0
 80054ee:	f002 f8f5 	bl	80076dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	0018      	movs	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	b004      	add	sp, #16
 80054fa:	bd80      	pop	{r7, pc}

080054fc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	239b      	movs	r3, #155	; 0x9b
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	2104      	movs	r1, #4
 800550c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	2300      	movs	r3, #0
 8005512:	2200      	movs	r2, #0
 8005514:	2100      	movs	r1, #0
 8005516:	f002 f8a9 	bl	800766c <USBD_LL_Transmit>

  return USBD_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	0018      	movs	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	b002      	add	sp, #8
 8005522:	bd80      	pop	{r7, pc}

08005524 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	239b      	movs	r3, #155	; 0x9b
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	2105      	movs	r1, #5
 8005534:	50d1      	str	r1, [r2, r3]

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	2300      	movs	r3, #0
 800553a:	2200      	movs	r2, #0
 800553c:	2100      	movs	r1, #0
 800553e:	f002 f8cd 	bl	80076dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	0018      	movs	r0, r3
 8005546:	46bd      	mov	sp, r7
 8005548:	b002      	add	sp, #8
 800554a:	bd80      	pop	{r7, pc}

0800554c <InitGame>:

//Output buffer for the game
#define GAME_OUTPUT_BUFFER_SIZE 512
char game_output_buffer[GAME_OUTPUT_BUFFER_SIZE];

void InitGame(){
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
	InitItms();
 8005550:	f000 fd34 	bl	8005fbc <InitItms>
	InitObjs();
 8005554:	f001 f9c8 	bl	80068e8 <InitObjs>
	InitRooms();
 8005558:	f001 fa32 	bl	80069c0 <InitRooms>
	totem_state = 0;
 800555c:	4b08      	ldr	r3, [pc, #32]	; (8005580 <InitGame+0x34>)
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
	totem_level = 0;
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <InitGame+0x38>)
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
	current_room = GetRoomByToken(RTKN_STARTROOM);
 8005568:	2001      	movs	r0, #1
 800556a:	f001 fad1 	bl	8006b10 <GetRoomByToken>
 800556e:	0002      	movs	r2, r0
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <InitGame+0x3c>)
 8005572:	601a      	str	r2, [r3, #0]
	current_state = GSTATE_MOVING;
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <InitGame+0x40>)
 8005576:	2201      	movs	r2, #1
 8005578:	801a      	strh	r2, [r3, #0]
}
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20000849 	.word	0x20000849
 8005584:	20000848 	.word	0x20000848
 8005588:	20000430 	.word	0x20000430
 800558c:	20000444 	.word	0x20000444

08005590 <PrintBadInput>:

void PrintBadInput(char* ins, uint8_t index){
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	000a      	movs	r2, r1
 800559a:	1cfb      	adds	r3, r7, #3
 800559c:	701a      	strb	r2, [r3, #0]
	ClearTxBuffer();
 800559e:	f001 fd43 	bl	8007028 <ClearTxBuffer>
	strncpy(UserTxBufferFS, "Invalid input: ", 15);
 80055a2:	4a2b      	ldr	r2, [pc, #172]	; (8005650 <PrintBadInput+0xc0>)
 80055a4:	4b2b      	ldr	r3, [pc, #172]	; (8005654 <PrintBadInput+0xc4>)
 80055a6:	0010      	movs	r0, r2
 80055a8:	0019      	movs	r1, r3
 80055aa:	230f      	movs	r3, #15
 80055ac:	001a      	movs	r2, r3
 80055ae:	f002 fab5 	bl	8007b1c <memcpy>
	uint8_t i = 0;
 80055b2:	230f      	movs	r3, #15
 80055b4:	18fb      	adds	r3, r7, r3
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]
	while(	(i < APP_TX_DATA_SIZE - 18) &&
 80055ba:	e015      	b.n	80055e8 <PrintBadInput+0x58>
			(ins[i + index] != '\0') &&
			(ins[i + index] != ' ')){
		UserTxBufferFS[i + 15] = ins[i + index];
 80055bc:	210f      	movs	r1, #15
 80055be:	187b      	adds	r3, r7, r1
 80055c0:	781a      	ldrb	r2, [r3, #0]
 80055c2:	1cfb      	adds	r3, r7, #3
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	18d3      	adds	r3, r2, r3
 80055c8:	001a      	movs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	189a      	adds	r2, r3, r2
 80055ce:	0008      	movs	r0, r1
 80055d0:	187b      	adds	r3, r7, r1
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	330f      	adds	r3, #15
 80055d6:	7811      	ldrb	r1, [r2, #0]
 80055d8:	4a1d      	ldr	r2, [pc, #116]	; (8005650 <PrintBadInput+0xc0>)
 80055da:	54d1      	strb	r1, [r2, r3]
		i++;
 80055dc:	0001      	movs	r1, r0
 80055de:	187b      	adds	r3, r7, r1
 80055e0:	781a      	ldrb	r2, [r3, #0]
 80055e2:	187b      	adds	r3, r7, r1
 80055e4:	3201      	adds	r2, #1
 80055e6:	701a      	strb	r2, [r3, #0]
			(ins[i + index] != '\0') &&
 80055e8:	230f      	movs	r3, #15
 80055ea:	18fb      	adds	r3, r7, r3
 80055ec:	781a      	ldrb	r2, [r3, #0]
 80055ee:	1cfb      	adds	r3, r7, #3
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	18d3      	adds	r3, r2, r3
 80055f4:	001a      	movs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	189b      	adds	r3, r3, r2
 80055fa:	781b      	ldrb	r3, [r3, #0]
	while(	(i < APP_TX_DATA_SIZE - 18) &&
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00b      	beq.n	8005618 <PrintBadInput+0x88>
			(ins[i + index] != ' ')){
 8005600:	230f      	movs	r3, #15
 8005602:	18fb      	adds	r3, r7, r3
 8005604:	781a      	ldrb	r2, [r3, #0]
 8005606:	1cfb      	adds	r3, r7, #3
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	18d3      	adds	r3, r2, r3
 800560c:	001a      	movs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	189b      	adds	r3, r3, r2
 8005612:	781b      	ldrb	r3, [r3, #0]
			(ins[i + index] != '\0') &&
 8005614:	2b20      	cmp	r3, #32
 8005616:	d1d1      	bne.n	80055bc <PrintBadInput+0x2c>
	}
	UserTxBufferFS[i + 16] = '\r';
 8005618:	200f      	movs	r0, #15
 800561a:	183b      	adds	r3, r7, r0
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	3310      	adds	r3, #16
 8005620:	4a0b      	ldr	r2, [pc, #44]	; (8005650 <PrintBadInput+0xc0>)
 8005622:	210d      	movs	r1, #13
 8005624:	54d1      	strb	r1, [r2, r3]
	UserTxBufferFS[i + 17] = '\n';
 8005626:	183b      	adds	r3, r7, r0
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	3311      	adds	r3, #17
 800562c:	4a08      	ldr	r2, [pc, #32]	; (8005650 <PrintBadInput+0xc0>)
 800562e:	210a      	movs	r1, #10
 8005630:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS(UserTxBufferFS, i + 18);
 8005632:	183b      	adds	r3, r7, r0
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	3312      	adds	r3, #18
 800563a:	b29a      	uxth	r2, r3
 800563c:	4b04      	ldr	r3, [pc, #16]	; (8005650 <PrintBadInput+0xc0>)
 800563e:	0011      	movs	r1, r2
 8005640:	0018      	movs	r0, r3
 8005642:	f001 fca1 	bl	8006f88 <CDC_Transmit_FS>
}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	46bd      	mov	sp, r7
 800564a:	b004      	add	sp, #16
 800564c:	bd80      	pop	{r7, pc}
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	20000648 	.word	0x20000648
 8005654:	0800839c 	.word	0x0800839c

08005658 <GameLoop>:

void GameLoop(){
 8005658:	b5b0      	push	{r4, r5, r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
	  uint8_t ret = 0;
 800565e:	1dfb      	adds	r3, r7, #7
 8005660:	2200      	movs	r2, #0
 8005662:	701a      	strb	r2, [r3, #0]
	  if(CheckUserDataReady()){
 8005664:	f001 fd36 	bl	80070d4 <CheckUserDataReady>
 8005668:	1e03      	subs	r3, r0, #0
 800566a:	d100      	bne.n	800566e <GameLoop+0x16>
 800566c:	e068      	b.n	8005740 <GameLoop+0xe8>
		  ret = TokenizeUserInput(GetUserDataBuf(), GetUserDataSize());
 800566e:	f001 fcbb 	bl	8006fe8 <GetUserDataBuf>
 8005672:	0005      	movs	r5, r0
 8005674:	f001 fd38 	bl	80070e8 <GetUserDataSize>
 8005678:	0003      	movs	r3, r0
 800567a:	1dfc      	adds	r4, r7, #7
 800567c:	0019      	movs	r1, r3
 800567e:	0028      	movs	r0, r5
 8005680:	f000 fd22 	bl	80060c8 <TokenizeUserInput>
 8005684:	0003      	movs	r3, r0
 8005686:	7023      	strb	r3, [r4, #0]
		  if(ret != 0xFF){
 8005688:	1dfb      	adds	r3, r7, #7
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2bff      	cmp	r3, #255	; 0xff
 800568e:	d00b      	beq.n	80056a8 <GameLoop+0x50>
			  PrintBadInput(GetUserDataBuf(), ret);
 8005690:	f001 fcaa 	bl	8006fe8 <GetUserDataBuf>
 8005694:	0002      	movs	r2, r0
 8005696:	1dfb      	adds	r3, r7, #7
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	0019      	movs	r1, r3
 800569c:	0010      	movs	r0, r2
 800569e:	f7ff ff77 	bl	8005590 <PrintBadInput>
			  ClearUserDataBuf();
 80056a2:	f001 fca9 	bl	8006ff8 <ClearUserDataBuf>
 80056a6:	e049      	b.n	800573c <GameLoop+0xe4>
		  }
		  else{
			  if(game_tokens[0] == LTKN_ACT_GO){
 80056a8:	4b27      	ldr	r3, [pc, #156]	; (8005748 <GameLoop+0xf0>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d102      	bne.n	80056b6 <GameLoop+0x5e>
				  MovePlayer();
 80056b0:	f000 f9e2 	bl	8005a78 <MovePlayer>
 80056b4:	e042      	b.n	800573c <GameLoop+0xe4>
			  }
			  else if(game_tokens[0] == LTKN_ACT_LOCATION){
 80056b6:	4b24      	ldr	r3, [pc, #144]	; (8005748 <GameLoop+0xf0>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b06      	cmp	r3, #6
 80056bc:	d102      	bne.n	80056c4 <GameLoop+0x6c>
				  PrintLocation();
 80056be:	f000 f847 	bl	8005750 <PrintLocation>
 80056c2:	e03b      	b.n	800573c <GameLoop+0xe4>
			  }
			  else if(game_tokens[0] == LTKN_ACT_GET){
 80056c4:	4b20      	ldr	r3, [pc, #128]	; (8005748 <GameLoop+0xf0>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d102      	bne.n	80056d2 <GameLoop+0x7a>
				  GetItem();
 80056cc:	f000 f98a 	bl	80059e4 <GetItem>
 80056d0:	e034      	b.n	800573c <GameLoop+0xe4>
			  }
			  else if(game_tokens[0] == LTKN_ACT_INVENTORY){
 80056d2:	4b1d      	ldr	r3, [pc, #116]	; (8005748 <GameLoop+0xf0>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b0b      	cmp	r3, #11
 80056d8:	d102      	bne.n	80056e0 <GameLoop+0x88>
				  PrintInventory();
 80056da:	f000 f8f3 	bl	80058c4 <PrintInventory>
 80056de:	e02d      	b.n	800573c <GameLoop+0xe4>
			  }
			  else if(game_tokens[0] == LTKN_ACT_EXAMINE){
 80056e0:	4b19      	ldr	r3, [pc, #100]	; (8005748 <GameLoop+0xf0>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b0c      	cmp	r3, #12
 80056e6:	d102      	bne.n	80056ee <GameLoop+0x96>
				  Examine();
 80056e8:	f000 f928 	bl	800593c <Examine>
 80056ec:	e026      	b.n	800573c <GameLoop+0xe4>
			  }
			  else if(game_tokens[0] == LTKN_ACT_USE){
 80056ee:	4b16      	ldr	r3, [pc, #88]	; (8005748 <GameLoop+0xf0>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d102      	bne.n	80056fc <GameLoop+0xa4>
				  UseItem();
 80056f6:	f000 fb29 	bl	8005d4c <UseItem>
 80056fa:	e01f      	b.n	800573c <GameLoop+0xe4>
			  }
			  else if(game_tokens[0] == LTKN_ACT_MIX){
 80056fc:	4b12      	ldr	r3, [pc, #72]	; (8005748 <GameLoop+0xf0>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b09      	cmp	r3, #9
 8005702:	d102      	bne.n	800570a <GameLoop+0xb2>
				  MixItems();
 8005704:	f000 fabc 	bl	8005c80 <MixItems>
 8005708:	e018      	b.n	800573c <GameLoop+0xe4>
			  }
			  else if(game_tokens[0] == LTKN_ACT_HELP){
 800570a:	4b0f      	ldr	r3, [pc, #60]	; (8005748 <GameLoop+0xf0>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b0a      	cmp	r3, #10
 8005710:	d102      	bne.n	8005718 <GameLoop+0xc0>
				  PrintHelp();
 8005712:	f000 f8ff 	bl	8005914 <PrintHelp>
 8005716:	e011      	b.n	800573c <GameLoop+0xe4>
			  }
			  else if(game_tokens[0] == LTKN_ACT_TURN){
 8005718:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <GameLoop+0xf0>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b05      	cmp	r3, #5
 800571e:	d102      	bne.n	8005726 <GameLoop+0xce>
				  TurnObject();
 8005720:	f000 fb78 	bl	8005e14 <TurnObject>
 8005724:	e00a      	b.n	800573c <GameLoop+0xe4>
			  }
			  else if(game_tokens[0] == LTKN_TOKEN_NULL){
 8005726:	4b08      	ldr	r3, [pc, #32]	; (8005748 <GameLoop+0xf0>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d102      	bne.n	8005734 <GameLoop+0xdc>
				  PrintRoomText();
 800572e:	f000 fa47 	bl	8005bc0 <PrintRoomText>
 8005732:	e003      	b.n	800573c <GameLoop+0xe4>
			  }
			  else{
				  PrintToConsole("You can't perform that action.\0");
 8005734:	4b05      	ldr	r3, [pc, #20]	; (800574c <GameLoop+0xf4>)
 8005736:	0018      	movs	r0, r3
 8005738:	f001 fc84 	bl	8007044 <PrintToConsole>
			  }
		  }
		  ClearUserDataBuf();
 800573c:	f001 fc5c 	bl	8006ff8 <ClearUserDataBuf>
	  }
	  else{
		  //MISRA
	  }
}
 8005740:	46c0      	nop			; (mov r8, r8)
 8005742:	46bd      	mov	sp, r7
 8005744:	b002      	add	sp, #8
 8005746:	bdb0      	pop	{r4, r5, r7, pc}
 8005748:	20000434 	.word	0x20000434
 800574c:	080083ac 	.word	0x080083ac

08005750 <PrintLocation>:

void PrintLocation(){
 8005750:	b580      	push	{r7, lr}
 8005752:	b09a      	sub	sp, #104	; 0x68
 8005754:	af00      	add	r7, sp, #0
	char tmp[100];
	memset(tmp, '\0', 100);
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	2264      	movs	r2, #100	; 0x64
 800575a:	2100      	movs	r1, #0
 800575c:	0018      	movs	r0, r3
 800575e:	f002 f9e6 	bl	8007b2e <memset>
	snprintf(tmp, 100, "You are in %s", current_room->name);
 8005762:	4b50      	ldr	r3, [pc, #320]	; (80058a4 <PrintLocation+0x154>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	4a4f      	ldr	r2, [pc, #316]	; (80058a8 <PrintLocation+0x158>)
 800576a:	1d38      	adds	r0, r7, #4
 800576c:	2164      	movs	r1, #100	; 0x64
 800576e:	f002 f9e7 	bl	8007b40 <sniprintf>
	PrintStrToConsole(tmp);
 8005772:	1d3b      	adds	r3, r7, #4
 8005774:	0018      	movs	r0, r3
 8005776:	f001 fcc1 	bl	80070fc <PrintStrToConsole>
	if(current_room->north_room != NULL){
 800577a:	4b4a      	ldr	r3, [pc, #296]	; (80058a4 <PrintLocation+0x154>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d012      	beq.n	80057aa <PrintLocation+0x5a>
		snprintf(tmp, 100, "To the north is %s", current_room->north_room->name);
 8005784:	4b47      	ldr	r3, [pc, #284]	; (80058a4 <PrintLocation+0x154>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	4a47      	ldr	r2, [pc, #284]	; (80058ac <PrintLocation+0x15c>)
 800578e:	1d38      	adds	r0, r7, #4
 8005790:	2164      	movs	r1, #100	; 0x64
 8005792:	f002 f9d5 	bl	8007b40 <sniprintf>
		PrintStrToConsole(tmp);
 8005796:	1d3b      	adds	r3, r7, #4
 8005798:	0018      	movs	r0, r3
 800579a:	f001 fcaf 	bl	80070fc <PrintStrToConsole>
		memset(tmp, '\0', 100);
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	2264      	movs	r2, #100	; 0x64
 80057a2:	2100      	movs	r1, #0
 80057a4:	0018      	movs	r0, r3
 80057a6:	f002 f9c2 	bl	8007b2e <memset>
	}
	if(current_room->east_room != NULL){
 80057aa:	4b3e      	ldr	r3, [pc, #248]	; (80058a4 <PrintLocation+0x154>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d012      	beq.n	80057da <PrintLocation+0x8a>
		snprintf(tmp, 100, "To the east is %s", current_room->east_room->name);
 80057b4:	4b3b      	ldr	r3, [pc, #236]	; (80058a4 <PrintLocation+0x154>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	4a3c      	ldr	r2, [pc, #240]	; (80058b0 <PrintLocation+0x160>)
 80057be:	1d38      	adds	r0, r7, #4
 80057c0:	2164      	movs	r1, #100	; 0x64
 80057c2:	f002 f9bd 	bl	8007b40 <sniprintf>
		PrintStrToConsole(tmp);
 80057c6:	1d3b      	adds	r3, r7, #4
 80057c8:	0018      	movs	r0, r3
 80057ca:	f001 fc97 	bl	80070fc <PrintStrToConsole>
		memset(tmp, '\0', 100);
 80057ce:	1d3b      	adds	r3, r7, #4
 80057d0:	2264      	movs	r2, #100	; 0x64
 80057d2:	2100      	movs	r1, #0
 80057d4:	0018      	movs	r0, r3
 80057d6:	f002 f9aa 	bl	8007b2e <memset>
	}
	if(current_room->south_room != NULL){
 80057da:	4b32      	ldr	r3, [pc, #200]	; (80058a4 <PrintLocation+0x154>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d012      	beq.n	800580a <PrintLocation+0xba>
		snprintf(tmp, 100, "To the south is %s", current_room->south_room->name);
 80057e4:	4b2f      	ldr	r3, [pc, #188]	; (80058a4 <PrintLocation+0x154>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	4a31      	ldr	r2, [pc, #196]	; (80058b4 <PrintLocation+0x164>)
 80057ee:	1d38      	adds	r0, r7, #4
 80057f0:	2164      	movs	r1, #100	; 0x64
 80057f2:	f002 f9a5 	bl	8007b40 <sniprintf>
		PrintStrToConsole(tmp);
 80057f6:	1d3b      	adds	r3, r7, #4
 80057f8:	0018      	movs	r0, r3
 80057fa:	f001 fc7f 	bl	80070fc <PrintStrToConsole>
		memset(tmp, '\0', 100);
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	2264      	movs	r2, #100	; 0x64
 8005802:	2100      	movs	r1, #0
 8005804:	0018      	movs	r0, r3
 8005806:	f002 f992 	bl	8007b2e <memset>
	}
	if(current_room->west_room != NULL){
 800580a:	4b26      	ldr	r3, [pc, #152]	; (80058a4 <PrintLocation+0x154>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d012      	beq.n	800583a <PrintLocation+0xea>
		snprintf(tmp, 100, "To the west is %s", current_room->west_room->name);
 8005814:	4b23      	ldr	r3, [pc, #140]	; (80058a4 <PrintLocation+0x154>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	4a26      	ldr	r2, [pc, #152]	; (80058b8 <PrintLocation+0x168>)
 800581e:	1d38      	adds	r0, r7, #4
 8005820:	2164      	movs	r1, #100	; 0x64
 8005822:	f002 f98d 	bl	8007b40 <sniprintf>
		PrintStrToConsole(tmp);
 8005826:	1d3b      	adds	r3, r7, #4
 8005828:	0018      	movs	r0, r3
 800582a:	f001 fc67 	bl	80070fc <PrintStrToConsole>
		memset(tmp, '\0', 100);
 800582e:	1d3b      	adds	r3, r7, #4
 8005830:	2264      	movs	r2, #100	; 0x64
 8005832:	2100      	movs	r1, #0
 8005834:	0018      	movs	r0, r3
 8005836:	f002 f97a 	bl	8007b2e <memset>
	}
	if(current_room->up_room != NULL){
 800583a:	4b1a      	ldr	r3, [pc, #104]	; (80058a4 <PrintLocation+0x154>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d012      	beq.n	800586a <PrintLocation+0x11a>
		snprintf(tmp, 100, "Above you is %s", current_room->up_room->name);
 8005844:	4b17      	ldr	r3, [pc, #92]	; (80058a4 <PrintLocation+0x154>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	4a1b      	ldr	r2, [pc, #108]	; (80058bc <PrintLocation+0x16c>)
 800584e:	1d38      	adds	r0, r7, #4
 8005850:	2164      	movs	r1, #100	; 0x64
 8005852:	f002 f975 	bl	8007b40 <sniprintf>
		PrintStrToConsole(tmp);
 8005856:	1d3b      	adds	r3, r7, #4
 8005858:	0018      	movs	r0, r3
 800585a:	f001 fc4f 	bl	80070fc <PrintStrToConsole>
		memset(tmp, '\0', 100);
 800585e:	1d3b      	adds	r3, r7, #4
 8005860:	2264      	movs	r2, #100	; 0x64
 8005862:	2100      	movs	r1, #0
 8005864:	0018      	movs	r0, r3
 8005866:	f002 f962 	bl	8007b2e <memset>
	}
	if(current_room->down_room != NULL){
 800586a:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <PrintLocation+0x154>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d012      	beq.n	800589a <PrintLocation+0x14a>
		snprintf(tmp, 100, "Below you is %s", current_room->down_room->name);
 8005874:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <PrintLocation+0x154>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	4a10      	ldr	r2, [pc, #64]	; (80058c0 <PrintLocation+0x170>)
 800587e:	1d38      	adds	r0, r7, #4
 8005880:	2164      	movs	r1, #100	; 0x64
 8005882:	f002 f95d 	bl	8007b40 <sniprintf>
		PrintStrToConsole(tmp);
 8005886:	1d3b      	adds	r3, r7, #4
 8005888:	0018      	movs	r0, r3
 800588a:	f001 fc37 	bl	80070fc <PrintStrToConsole>
		memset(tmp, '\0', 100);
 800588e:	1d3b      	adds	r3, r7, #4
 8005890:	2264      	movs	r2, #100	; 0x64
 8005892:	2100      	movs	r1, #0
 8005894:	0018      	movs	r0, r3
 8005896:	f002 f94a 	bl	8007b2e <memset>
	}
}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	46bd      	mov	sp, r7
 800589e:	b01a      	add	sp, #104	; 0x68
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	20000430 	.word	0x20000430
 80058a8:	080083cc 	.word	0x080083cc
 80058ac:	080083dc 	.word	0x080083dc
 80058b0:	080083f0 	.word	0x080083f0
 80058b4:	08008404 	.word	0x08008404
 80058b8:	08008418 	.word	0x08008418
 80058bc:	0800842c 	.word	0x0800842c
 80058c0:	0800843c 	.word	0x0800843c

080058c4 <PrintInventory>:

void PrintInventory(){
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < ITEM_COUNT; i++){
 80058ca:	1dfb      	adds	r3, r7, #7
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	e015      	b.n	80058fe <PrintInventory+0x3a>
		if(game_itms[i]->state == ITM_IN_INVENTORY){
 80058d2:	1dfb      	adds	r3, r7, #7
 80058d4:	781a      	ldrb	r2, [r3, #0]
 80058d6:	4b0e      	ldr	r3, [pc, #56]	; (8005910 <PrintInventory+0x4c>)
 80058d8:	0092      	lsls	r2, r2, #2
 80058da:	58d3      	ldr	r3, [r2, r3]
 80058dc:	785b      	ldrb	r3, [r3, #1]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d108      	bne.n	80058f4 <PrintInventory+0x30>
			PrintStrToConsole(game_itms[i]->name);
 80058e2:	1dfb      	adds	r3, r7, #7
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <PrintInventory+0x4c>)
 80058e8:	0092      	lsls	r2, r2, #2
 80058ea:	58d3      	ldr	r3, [r2, r3]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	0018      	movs	r0, r3
 80058f0:	f001 fc04 	bl	80070fc <PrintStrToConsole>
	for(uint8_t i = 0; i < ITEM_COUNT; i++){
 80058f4:	1dfb      	adds	r3, r7, #7
 80058f6:	781a      	ldrb	r2, [r3, #0]
 80058f8:	1dfb      	adds	r3, r7, #7
 80058fa:	3201      	adds	r2, #1
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	1dfb      	adds	r3, r7, #7
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d9e5      	bls.n	80058d2 <PrintInventory+0xe>
		}
	}
}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	46bd      	mov	sp, r7
 800590a:	b002      	add	sp, #8
 800590c:	bd80      	pop	{r7, pc}
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	20000438 	.word	0x20000438

08005914 <PrintHelp>:

void PrintHelp(){
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
	PrintToConsole(
 8005918:	4b06      	ldr	r3, [pc, #24]	; (8005934 <PrintHelp+0x20>)
 800591a:	0018      	movs	r0, r3
 800591c:	f001 fb92 	bl	8007044 <PrintToConsole>
			"\tView your current inventory\r\n"
	);
	//Need to split into two calls
	//USB Transmit is asynchronous, so wait 1ms for the data to transfer
	//TODO: Get rid of the dumb delay, poll the USB status somehow
	HAL_Delay(1);
 8005920:	2001      	movs	r0, #1
 8005922:	f7fa fcdd 	bl	80002e0 <HAL_Delay>
	PrintToConsole(
 8005926:	4b04      	ldr	r3, [pc, #16]	; (8005938 <PrintHelp+0x24>)
 8005928:	0018      	movs	r0, r3
 800592a:	f001 fb8b 	bl	8007044 <PrintToConsole>
		"help\r\n"
			"\tSee this dialogue\r\n\0");
}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	0800844c 	.word	0x0800844c
 8005938:	0800864c 	.word	0x0800864c

0800593c <Examine>:

void Examine(){
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
	// TODO: Haven't tested this with items
	// Try to examine an item first
	struct itm* ex_itm = GetItmByToken(game_tokens[1]);
 8005942:	4b25      	ldr	r3, [pc, #148]	; (80059d8 <Examine+0x9c>)
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	0018      	movs	r0, r3
 8005948:	f000 fb8e 	bl	8006068 <GetItmByToken>
 800594c:	0003      	movs	r3, r0
 800594e:	60bb      	str	r3, [r7, #8]
	if(ex_itm != NULL){
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <Examine+0x2e>
		if(ex_itm->state == ITM_IN_INVENTORY){
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d105      	bne.n	800596a <Examine+0x2e>
			PrintStrToConsole(ex_itm->examine_text);
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	0018      	movs	r0, r3
 8005964:	f001 fbca 	bl	80070fc <PrintStrToConsole>
			return;
 8005968:	e033      	b.n	80059d2 <Examine+0x96>
		}
	}
	// If item didn't work, try to examine an object
	struct obj* ex_obj = GetObjByToken(game_tokens[1]);
 800596a:	4b1b      	ldr	r3, [pc, #108]	; (80059d8 <Examine+0x9c>)
 800596c:	785b      	ldrb	r3, [r3, #1]
 800596e:	0018      	movs	r0, r3
 8005970:	f000 ffdc 	bl	800692c <GetObjByToken>
 8005974:	0003      	movs	r3, r0
 8005976:	607b      	str	r3, [r7, #4]
	if(ex_obj != NULL){
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d025      	beq.n	80059ca <Examine+0x8e>
		// Make sure that object is in this room before printing
		for(uint8_t i = 0; i < current_room->object_count; i++){
 800597e:	230f      	movs	r3, #15
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	e017      	b.n	80059b8 <Examine+0x7c>
			if(current_room->objects[i] == ex_obj){
 8005988:	4b14      	ldr	r3, [pc, #80]	; (80059dc <Examine+0xa0>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800598e:	230f      	movs	r3, #15
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	18d3      	adds	r3, r2, r3
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	429a      	cmp	r2, r3
 800599e:	d105      	bne.n	80059ac <Examine+0x70>
				PrintStrToConsole(ex_obj->examine_text);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	0018      	movs	r0, r3
 80059a6:	f001 fba9 	bl	80070fc <PrintStrToConsole>
				return;
 80059aa:	e012      	b.n	80059d2 <Examine+0x96>
		for(uint8_t i = 0; i < current_room->object_count; i++){
 80059ac:	210f      	movs	r1, #15
 80059ae:	187b      	adds	r3, r7, r1
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	187b      	adds	r3, r7, r1
 80059b4:	3201      	adds	r2, #1
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	4b08      	ldr	r3, [pc, #32]	; (80059dc <Examine+0xa0>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2229      	movs	r2, #41	; 0x29
 80059be:	5c9b      	ldrb	r3, [r3, r2]
 80059c0:	220f      	movs	r2, #15
 80059c2:	18ba      	adds	r2, r7, r2
 80059c4:	7812      	ldrb	r2, [r2, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d3de      	bcc.n	8005988 <Examine+0x4c>
			}
		}
	}
	// If neither worked, it's invalid
	PrintToConsole("You can't examine that.\0");
 80059ca:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <Examine+0xa4>)
 80059cc:	0018      	movs	r0, r3
 80059ce:	f001 fb39 	bl	8007044 <PrintToConsole>
}
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b004      	add	sp, #16
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20000434 	.word	0x20000434
 80059dc:	20000430 	.word	0x20000430
 80059e0:	08008668 	.word	0x08008668

080059e4 <GetItem>:

void GetItem(){
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < current_room->item_count; i++){
 80059ea:	1dfb      	adds	r3, r7, #7
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	e02b      	b.n	8005a4a <GetItem+0x66>
		if(game_tokens[1] == current_room->items[i]->token){
 80059f2:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <GetItem+0x84>)
 80059f4:	785a      	ldrb	r2, [r3, #1]
 80059f6:	4b1d      	ldr	r3, [pc, #116]	; (8005a6c <GetItem+0x88>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6a19      	ldr	r1, [r3, #32]
 80059fc:	1dfb      	adds	r3, r7, #7
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	18cb      	adds	r3, r1, r3
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d119      	bne.n	8005a40 <GetItem+0x5c>
			if(current_room->items[i]->state == ITM_NOT_PICKED_UP){
 8005a0c:	4b17      	ldr	r3, [pc, #92]	; (8005a6c <GetItem+0x88>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6a1a      	ldr	r2, [r3, #32]
 8005a12:	1dfb      	adds	r3, r7, #7
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	18d3      	adds	r3, r2, r3
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d10e      	bne.n	8005a40 <GetItem+0x5c>
				current_room->items[i]->state = ITM_IN_INVENTORY;
 8005a22:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <GetItem+0x88>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6a1a      	ldr	r2, [r3, #32]
 8005a28:	1dfb      	adds	r3, r7, #7
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	18d3      	adds	r3, r2, r3
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2202      	movs	r2, #2
 8005a34:	705a      	strb	r2, [r3, #1]
				PrintToConsole("You got it\0");
 8005a36:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <GetItem+0x8c>)
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f001 fb03 	bl	8007044 <PrintToConsole>
				return;
 8005a3e:	e010      	b.n	8005a62 <GetItem+0x7e>
	for(uint8_t i = 0; i < current_room->item_count; i++){
 8005a40:	1dfb      	adds	r3, r7, #7
 8005a42:	781a      	ldrb	r2, [r3, #0]
 8005a44:	1dfb      	adds	r3, r7, #7
 8005a46:	3201      	adds	r2, #1
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <GetItem+0x88>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2228      	movs	r2, #40	; 0x28
 8005a50:	5c9b      	ldrb	r3, [r3, r2]
 8005a52:	1dfa      	adds	r2, r7, #7
 8005a54:	7812      	ldrb	r2, [r2, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d3cb      	bcc.n	80059f2 <GetItem+0xe>
			}
		}
	}
	PrintToConsole("You can't get that.\0");
 8005a5a:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <GetItem+0x90>)
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f001 faf1 	bl	8007044 <PrintToConsole>
}
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b002      	add	sp, #8
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	20000434 	.word	0x20000434
 8005a6c:	20000430 	.word	0x20000430
 8005a70:	08008684 	.word	0x08008684
 8005a74:	08008690 	.word	0x08008690

08005a78 <MovePlayer>:

void MovePlayer(){
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
	if(game_tokens[1] <= 0x15 && game_tokens[1] >= 0x10){
 8005a7c:	4b46      	ldr	r3, [pc, #280]	; (8005b98 <MovePlayer+0x120>)
 8005a7e:	785b      	ldrb	r3, [r3, #1]
 8005a80:	2b15      	cmp	r3, #21
 8005a82:	d900      	bls.n	8005a86 <MovePlayer+0xe>
 8005a84:	e082      	b.n	8005b8c <MovePlayer+0x114>
 8005a86:	4b44      	ldr	r3, [pc, #272]	; (8005b98 <MovePlayer+0x120>)
 8005a88:	785b      	ldrb	r3, [r3, #1]
 8005a8a:	2b0f      	cmp	r3, #15
 8005a8c:	d800      	bhi.n	8005a90 <MovePlayer+0x18>
 8005a8e:	e07d      	b.n	8005b8c <MovePlayer+0x114>
		if(game_tokens[1] == LTKN_NAVD_NORTH){
 8005a90:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <MovePlayer+0x120>)
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b10      	cmp	r3, #16
 8005a96:	d10f      	bne.n	8005ab8 <MovePlayer+0x40>
			if(current_room->north_room != 0x00){
 8005a98:	4b40      	ldr	r3, [pc, #256]	; (8005b9c <MovePlayer+0x124>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <MovePlayer+0x36>
				current_room = current_room->north_room;
 8005aa2:	4b3e      	ldr	r3, [pc, #248]	; (8005b9c <MovePlayer+0x124>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	4b3c      	ldr	r3, [pc, #240]	; (8005b9c <MovePlayer+0x124>)
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	e068      	b.n	8005b80 <MovePlayer+0x108>
			}
			else{
				PrintToConsole("You can't go north.\0");
 8005aae:	4b3c      	ldr	r3, [pc, #240]	; (8005ba0 <MovePlayer+0x128>)
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f001 fac7 	bl	8007044 <PrintToConsole>
				return;
 8005ab6:	e06d      	b.n	8005b94 <MovePlayer+0x11c>
			}
		}
		else if(game_tokens[1] == LTKN_NAVD_EAST){
 8005ab8:	4b37      	ldr	r3, [pc, #220]	; (8005b98 <MovePlayer+0x120>)
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2b12      	cmp	r3, #18
 8005abe:	d10f      	bne.n	8005ae0 <MovePlayer+0x68>
			if(current_room->east_room != 0x00){
 8005ac0:	4b36      	ldr	r3, [pc, #216]	; (8005b9c <MovePlayer+0x124>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <MovePlayer+0x5e>
				current_room = current_room->east_room;
 8005aca:	4b34      	ldr	r3, [pc, #208]	; (8005b9c <MovePlayer+0x124>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	4b32      	ldr	r3, [pc, #200]	; (8005b9c <MovePlayer+0x124>)
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e054      	b.n	8005b80 <MovePlayer+0x108>
			}
			else{
				PrintToConsole("You can't go east.\0");
 8005ad6:	4b33      	ldr	r3, [pc, #204]	; (8005ba4 <MovePlayer+0x12c>)
 8005ad8:	0018      	movs	r0, r3
 8005ada:	f001 fab3 	bl	8007044 <PrintToConsole>
				return;
 8005ade:	e059      	b.n	8005b94 <MovePlayer+0x11c>
			}
		}
		else if(game_tokens[1] == LTKN_NAVD_SOUTH){
 8005ae0:	4b2d      	ldr	r3, [pc, #180]	; (8005b98 <MovePlayer+0x120>)
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	2b11      	cmp	r3, #17
 8005ae6:	d10f      	bne.n	8005b08 <MovePlayer+0x90>
			if(current_room->south_room != 0x00){
 8005ae8:	4b2c      	ldr	r3, [pc, #176]	; (8005b9c <MovePlayer+0x124>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <MovePlayer+0x86>
				current_room = current_room->south_room;
 8005af2:	4b2a      	ldr	r3, [pc, #168]	; (8005b9c <MovePlayer+0x124>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	4b28      	ldr	r3, [pc, #160]	; (8005b9c <MovePlayer+0x124>)
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	e040      	b.n	8005b80 <MovePlayer+0x108>
			}
			else{
				PrintToConsole("You can't go south.\0");
 8005afe:	4b2a      	ldr	r3, [pc, #168]	; (8005ba8 <MovePlayer+0x130>)
 8005b00:	0018      	movs	r0, r3
 8005b02:	f001 fa9f 	bl	8007044 <PrintToConsole>
				return;
 8005b06:	e045      	b.n	8005b94 <MovePlayer+0x11c>
			}
		}
		else if(game_tokens[1] == LTKN_NAVD_WEST){
 8005b08:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <MovePlayer+0x120>)
 8005b0a:	785b      	ldrb	r3, [r3, #1]
 8005b0c:	2b13      	cmp	r3, #19
 8005b0e:	d10f      	bne.n	8005b30 <MovePlayer+0xb8>
			if(current_room->west_room != 0x00){
 8005b10:	4b22      	ldr	r3, [pc, #136]	; (8005b9c <MovePlayer+0x124>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d005      	beq.n	8005b26 <MovePlayer+0xae>
				current_room = current_room->west_room;
 8005b1a:	4b20      	ldr	r3, [pc, #128]	; (8005b9c <MovePlayer+0x124>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	4b1e      	ldr	r3, [pc, #120]	; (8005b9c <MovePlayer+0x124>)
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	e02c      	b.n	8005b80 <MovePlayer+0x108>
			}
			else{
				PrintToConsole("You can't go west.\0");
 8005b26:	4b21      	ldr	r3, [pc, #132]	; (8005bac <MovePlayer+0x134>)
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f001 fa8b 	bl	8007044 <PrintToConsole>
				return;
 8005b2e:	e031      	b.n	8005b94 <MovePlayer+0x11c>
			}
		}
		else if(game_tokens[1] == LTKN_NAVD_UP){
 8005b30:	4b19      	ldr	r3, [pc, #100]	; (8005b98 <MovePlayer+0x120>)
 8005b32:	785b      	ldrb	r3, [r3, #1]
 8005b34:	2b14      	cmp	r3, #20
 8005b36:	d10f      	bne.n	8005b58 <MovePlayer+0xe0>
			if(current_room->up_room != 0x00){
 8005b38:	4b18      	ldr	r3, [pc, #96]	; (8005b9c <MovePlayer+0x124>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <MovePlayer+0xd6>
				current_room = current_room->up_room;
 8005b42:	4b16      	ldr	r3, [pc, #88]	; (8005b9c <MovePlayer+0x124>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	4b14      	ldr	r3, [pc, #80]	; (8005b9c <MovePlayer+0x124>)
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	e018      	b.n	8005b80 <MovePlayer+0x108>
			}
			else{
				PrintToConsole("You can't go up.\0");
 8005b4e:	4b18      	ldr	r3, [pc, #96]	; (8005bb0 <MovePlayer+0x138>)
 8005b50:	0018      	movs	r0, r3
 8005b52:	f001 fa77 	bl	8007044 <PrintToConsole>
				return;
 8005b56:	e01d      	b.n	8005b94 <MovePlayer+0x11c>
			}
		}
		else if(game_tokens[1] == LTKN_NAVD_DOWN){
 8005b58:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <MovePlayer+0x120>)
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b15      	cmp	r3, #21
 8005b5e:	d10f      	bne.n	8005b80 <MovePlayer+0x108>
			if(current_room->down_room != 0x00){
 8005b60:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <MovePlayer+0x124>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <MovePlayer+0xfe>
				current_room = current_room->down_room;
 8005b6a:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <MovePlayer+0x124>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695a      	ldr	r2, [r3, #20]
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <MovePlayer+0x124>)
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	e004      	b.n	8005b80 <MovePlayer+0x108>
			}
			else{
				PrintToConsole("You can't go down.\0");
 8005b76:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <MovePlayer+0x13c>)
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f001 fa63 	bl	8007044 <PrintToConsole>
				return;
 8005b7e:	e009      	b.n	8005b94 <MovePlayer+0x11c>
			}
		}
		PrintRoomText();
 8005b80:	f000 f81e 	bl	8005bc0 <PrintRoomText>
		current_state = GSTATE_MOVING;
 8005b84:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <MovePlayer+0x140>)
 8005b86:	2201      	movs	r2, #1
 8005b88:	801a      	strh	r2, [r3, #0]
 8005b8a:	e003      	b.n	8005b94 <MovePlayer+0x11c>
	}
	else{
		PrintToConsole("You can't go that way\0");
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <MovePlayer+0x144>)
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f001 fa58 	bl	8007044 <PrintToConsole>
	}
}
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000434 	.word	0x20000434
 8005b9c:	20000430 	.word	0x20000430
 8005ba0:	080086a8 	.word	0x080086a8
 8005ba4:	080086c0 	.word	0x080086c0
 8005ba8:	080086d4 	.word	0x080086d4
 8005bac:	080086ec 	.word	0x080086ec
 8005bb0:	08008700 	.word	0x08008700
 8005bb4:	08008714 	.word	0x08008714
 8005bb8:	20000444 	.word	0x20000444
 8005bbc:	08008728 	.word	0x08008728

08005bc0 <PrintRoomText>:

void PrintRoomText(){
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
	PrintStrToConsole(current_room->flavortext);
 8005bc6:	4b2d      	ldr	r3, [pc, #180]	; (8005c7c <PrintRoomText+0xbc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f001 fa95 	bl	80070fc <PrintStrToConsole>
	for(uint8_t i = 0; i < current_room->item_count; i++){
 8005bd2:	1dfb      	adds	r3, r7, #7
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	e01b      	b.n	8005c12 <PrintRoomText+0x52>
		if(current_room->items[i]->state == ITM_NOT_PICKED_UP){
 8005bda:	4b28      	ldr	r3, [pc, #160]	; (8005c7c <PrintRoomText+0xbc>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6a1a      	ldr	r2, [r3, #32]
 8005be0:	1dfb      	adds	r3, r7, #7
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	18d3      	adds	r3, r2, r3
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d10b      	bne.n	8005c08 <PrintRoomText+0x48>
			PrintStrToConsole(current_room->items[i]->seen_text);
 8005bf0:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <PrintRoomText+0xbc>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6a1a      	ldr	r2, [r3, #32]
 8005bf6:	1dfb      	adds	r3, r7, #7
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	18d3      	adds	r3, r2, r3
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	0018      	movs	r0, r3
 8005c04:	f001 fa7a 	bl	80070fc <PrintStrToConsole>
	for(uint8_t i = 0; i < current_room->item_count; i++){
 8005c08:	1dfb      	adds	r3, r7, #7
 8005c0a:	781a      	ldrb	r2, [r3, #0]
 8005c0c:	1dfb      	adds	r3, r7, #7
 8005c0e:	3201      	adds	r2, #1
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	4b1a      	ldr	r3, [pc, #104]	; (8005c7c <PrintRoomText+0xbc>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2228      	movs	r2, #40	; 0x28
 8005c18:	5c9b      	ldrb	r3, [r3, r2]
 8005c1a:	1dfa      	adds	r2, r7, #7
 8005c1c:	7812      	ldrb	r2, [r2, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d3db      	bcc.n	8005bda <PrintRoomText+0x1a>
		}
	}
	for(uint8_t i = 0; i < current_room->object_count; i++){
 8005c22:	1dbb      	adds	r3, r7, #6
 8005c24:	2200      	movs	r2, #0
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	e01b      	b.n	8005c62 <PrintRoomText+0xa2>
		if(current_room->objects[i]->state != OBJ_ACTED_ON){
 8005c2a:	4b14      	ldr	r3, [pc, #80]	; (8005c7c <PrintRoomText+0xbc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c30:	1dbb      	adds	r3, r7, #6
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	18d3      	adds	r3, r2, r3
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d00b      	beq.n	8005c58 <PrintRoomText+0x98>
			PrintStrToConsole(current_room->objects[i]->seen_text);
 8005c40:	4b0e      	ldr	r3, [pc, #56]	; (8005c7c <PrintRoomText+0xbc>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c46:	1dbb      	adds	r3, r7, #6
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	18d3      	adds	r3, r2, r3
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	0018      	movs	r0, r3
 8005c54:	f001 fa52 	bl	80070fc <PrintStrToConsole>
	for(uint8_t i = 0; i < current_room->object_count; i++){
 8005c58:	1dbb      	adds	r3, r7, #6
 8005c5a:	781a      	ldrb	r2, [r3, #0]
 8005c5c:	1dbb      	adds	r3, r7, #6
 8005c5e:	3201      	adds	r2, #1
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <PrintRoomText+0xbc>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2229      	movs	r2, #41	; 0x29
 8005c68:	5c9b      	ldrb	r3, [r3, r2]
 8005c6a:	1dba      	adds	r2, r7, #6
 8005c6c:	7812      	ldrb	r2, [r2, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d3db      	bcc.n	8005c2a <PrintRoomText+0x6a>
		}
	}
}
 8005c72:	46c0      	nop			; (mov r8, r8)
 8005c74:	46bd      	mov	sp, r7
 8005c76:	b002      	add	sp, #8
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	20000430 	.word	0x20000430

08005c80 <MixItems>:

void MixItems(){
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
	struct itm* itm1 = GetItmByToken(game_tokens[1]);
 8005c86:	4b16      	ldr	r3, [pc, #88]	; (8005ce0 <MixItems+0x60>)
 8005c88:	785b      	ldrb	r3, [r3, #1]
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f000 f9ec 	bl	8006068 <GetItmByToken>
 8005c90:	0003      	movs	r3, r0
 8005c92:	607b      	str	r3, [r7, #4]
	struct itm* itm2 = GetItmByToken(game_tokens[2]);
 8005c94:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <MixItems+0x60>)
 8005c96:	789b      	ldrb	r3, [r3, #2]
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f000 f9e5 	bl	8006068 <GetItmByToken>
 8005c9e:	0003      	movs	r3, r0
 8005ca0:	603b      	str	r3, [r7, #0]
	//Make sure the tokens are both actually items
	if(itm1 && itm2){
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d011      	beq.n	8005ccc <MixItems+0x4c>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00e      	beq.n	8005ccc <MixItems+0x4c>
		//Make sure the items are in the players inventory
		if((itm1->state == ITM_IN_INVENTORY) &&
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d110      	bne.n	8005cd8 <MixItems+0x58>
				itm2->state == ITM_IN_INVENTORY){
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	785b      	ldrb	r3, [r3, #1]
		if((itm1->state == ITM_IN_INVENTORY) &&
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d10c      	bne.n	8005cd8 <MixItems+0x58>
			return MixItemsMixer(itm1, itm2);
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	0011      	movs	r1, r2
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	f000 f80f 	bl	8005ce8 <MixItemsMixer>
 8005cca:	e006      	b.n	8005cda <MixItems+0x5a>
		}
	}
	else{
		PrintToConsole("You can't mix those.\0");
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <MixItems+0x64>)
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f001 f9b8 	bl	8007044 <PrintToConsole>
		return;
 8005cd4:	46c0      	nop			; (mov r8, r8)
 8005cd6:	e000      	b.n	8005cda <MixItems+0x5a>
		if((itm1->state == ITM_IN_INVENTORY) &&
 8005cd8:	46c0      	nop			; (mov r8, r8)
	}
}
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b002      	add	sp, #8
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	20000434 	.word	0x20000434
 8005ce4:	08008740 	.word	0x08008740

08005ce8 <MixItemsMixer>:

void MixItemsMixer(struct itm* itm1, struct itm* itm2){
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
	//Mix testitm1 and testitm2 together to make a testitm
	if(((itm1->token == LTKN_ITM_TEST1) && (itm2->token == LTKN_ITM_TEST2)) ||
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b51      	cmp	r3, #81	; 0x51
 8005cf8:	d103      	bne.n	8005d02 <MixItemsMixer+0x1a>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b52      	cmp	r3, #82	; 0x52
 8005d00:	d007      	beq.n	8005d12 <MixItemsMixer+0x2a>
	   ((itm1->token == LTKN_ITM_TEST2) && (itm2->token == LTKN_ITM_TEST1))){
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	781b      	ldrb	r3, [r3, #0]
	if(((itm1->token == LTKN_ITM_TEST1) && (itm2->token == LTKN_ITM_TEST2)) ||
 8005d06:	2b52      	cmp	r3, #82	; 0x52
 8005d08:	d114      	bne.n	8005d34 <MixItemsMixer+0x4c>
	   ((itm1->token == LTKN_ITM_TEST2) && (itm2->token == LTKN_ITM_TEST1))){
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b51      	cmp	r3, #81	; 0x51
 8005d10:	d110      	bne.n	8005d34 <MixItemsMixer+0x4c>
		//Remove the two items from player inventory
		itm1->state = ITM_USED_UP;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2203      	movs	r2, #3
 8005d16:	705a      	strb	r2, [r3, #1]
		itm2->state = ITM_USED_UP;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2203      	movs	r2, #3
 8005d1c:	705a      	strb	r2, [r3, #1]
		//Put testitm in the players inventory
		GetItmByToken(LTKN_ITM_TEST)->state = ITM_IN_INVENTORY;
 8005d1e:	2050      	movs	r0, #80	; 0x50
 8005d20:	f000 f9a2 	bl	8006068 <GetItmByToken>
 8005d24:	0003      	movs	r3, r0
 8005d26:	2202      	movs	r2, #2
 8005d28:	705a      	strb	r2, [r3, #1]
		PrintToConsole("The testitm1 and testitm2 fuse together to make a testitm.\0");
 8005d2a:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <MixItemsMixer+0x5c>)
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f001 f989 	bl	8007044 <PrintToConsole>
		return;
 8005d32:	e004      	b.n	8005d3e <MixItemsMixer+0x56>
	}
	else{
		PrintToConsole("You can't mix those.\0");
 8005d34:	4b04      	ldr	r3, [pc, #16]	; (8005d48 <MixItemsMixer+0x60>)
 8005d36:	0018      	movs	r0, r3
 8005d38:	f001 f984 	bl	8007044 <PrintToConsole>
		return;
 8005d3c:	46c0      	nop			; (mov r8, r8)
	}
}
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	b002      	add	sp, #8
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	08008758 	.word	0x08008758
 8005d48:	08008740 	.word	0x08008740

08005d4c <UseItem>:

void UseItem(){
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
	//Make sure the item exists
	struct itm* useitem = GetItmByToken(game_tokens[1]);
 8005d52:	4b29      	ldr	r3, [pc, #164]	; (8005df8 <UseItem+0xac>)
 8005d54:	785b      	ldrb	r3, [r3, #1]
 8005d56:	0018      	movs	r0, r3
 8005d58:	f000 f986 	bl	8006068 <GetItmByToken>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	60bb      	str	r3, [r7, #8]
	if(useitem == NULL){
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d104      	bne.n	8005d70 <UseItem+0x24>
		PrintToConsole("You can't use that item.\0");
 8005d66:	4b25      	ldr	r3, [pc, #148]	; (8005dfc <UseItem+0xb0>)
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f001 f96b 	bl	8007044 <PrintToConsole>
		return;
 8005d6e:	e03f      	b.n	8005df0 <UseItem+0xa4>
	}
	//Make sure the item is in the players inventory
	if(useitem->state != ITM_IN_INVENTORY){
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	785b      	ldrb	r3, [r3, #1]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d004      	beq.n	8005d82 <UseItem+0x36>
		PrintToConsole("You can't use that item.\0");
 8005d78:	4b20      	ldr	r3, [pc, #128]	; (8005dfc <UseItem+0xb0>)
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	f001 f962 	bl	8007044 <PrintToConsole>
		return;
 8005d80:	e036      	b.n	8005df0 <UseItem+0xa4>
	}
	//Make sure the object the item is being used on exists
	struct obj* useobj = GetObjByToken(game_tokens[2]);
 8005d82:	4b1d      	ldr	r3, [pc, #116]	; (8005df8 <UseItem+0xac>)
 8005d84:	789b      	ldrb	r3, [r3, #2]
 8005d86:	0018      	movs	r0, r3
 8005d88:	f000 fdd0 	bl	800692c <GetObjByToken>
 8005d8c:	0003      	movs	r3, r0
 8005d8e:	607b      	str	r3, [r7, #4]
	if(useobj == NULL){
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d104      	bne.n	8005da0 <UseItem+0x54>
		PrintToConsole("You can't use that on that object.\0");
 8005d96:	4b1a      	ldr	r3, [pc, #104]	; (8005e00 <UseItem+0xb4>)
 8005d98:	0018      	movs	r0, r3
 8005d9a:	f001 f953 	bl	8007044 <PrintToConsole>
		return;
 8005d9e:	e027      	b.n	8005df0 <UseItem+0xa4>
	}
	//Make sure the object that item is being used on is in the current room
	for(uint8_t i = 0; i < current_room->object_count; i++){
 8005da0:	230f      	movs	r3, #15
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	e014      	b.n	8005dd4 <UseItem+0x88>
		if(useobj == current_room->objects[i]){
 8005daa:	4b16      	ldr	r3, [pc, #88]	; (8005e04 <UseItem+0xb8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005db0:	230f      	movs	r3, #15
 8005db2:	18fb      	adds	r3, r7, r3
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	18d3      	adds	r3, r2, r3
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d102      	bne.n	8005dc8 <UseItem+0x7c>
			UseItemStateMachine();
 8005dc2:	f000 f821 	bl	8005e08 <UseItemStateMachine>
			return;
 8005dc6:	e013      	b.n	8005df0 <UseItem+0xa4>
	for(uint8_t i = 0; i < current_room->object_count; i++){
 8005dc8:	210f      	movs	r1, #15
 8005dca:	187b      	adds	r3, r7, r1
 8005dcc:	781a      	ldrb	r2, [r3, #0]
 8005dce:	187b      	adds	r3, r7, r1
 8005dd0:	3201      	adds	r2, #1
 8005dd2:	701a      	strb	r2, [r3, #0]
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <UseItem+0xb8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2229      	movs	r2, #41	; 0x29
 8005dda:	5c9b      	ldrb	r3, [r3, r2]
 8005ddc:	220f      	movs	r2, #15
 8005dde:	18ba      	adds	r2, r7, r2
 8005de0:	7812      	ldrb	r2, [r2, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d3e1      	bcc.n	8005daa <UseItem+0x5e>
		}
	}
	PrintToConsole("You can't use that on that object.\0");
 8005de6:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <UseItem+0xb4>)
 8005de8:	0018      	movs	r0, r3
 8005dea:	f001 f92b 	bl	8007044 <PrintToConsole>
	return;
 8005dee:	46c0      	nop			; (mov r8, r8)
}
 8005df0:	46bd      	mov	sp, r7
 8005df2:	b004      	add	sp, #16
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	20000434 	.word	0x20000434
 8005dfc:	08008794 	.word	0x08008794
 8005e00:	080087b0 	.word	0x080087b0
 8005e04:	20000430 	.word	0x20000430

08005e08 <UseItemStateMachine>:

void UseItemStateMachine(){
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
	}
	else{
		PrintToConsole("You can't use that.\0");
	}
	*/
}
 8005e0c:	46c0      	nop			; (mov r8, r8)
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <TurnObject>:

void TurnObject(){
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
	// Make sure it's being turned in a valid direction
	uint8_t direction;
	if(game_tokens[2] == LTKN_TURND_LEFT){
 8005e1a:	4b2e      	ldr	r3, [pc, #184]	; (8005ed4 <TurnObject+0xc0>)
 8005e1c:	789b      	ldrb	r3, [r3, #2]
 8005e1e:	2b16      	cmp	r3, #22
 8005e20:	d103      	bne.n	8005e2a <TurnObject+0x16>
		direction = 0;
 8005e22:	1dfb      	adds	r3, r7, #7
 8005e24:	2200      	movs	r2, #0
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	e015      	b.n	8005e56 <TurnObject+0x42>
	}
	else if (game_tokens[2] == LTKN_TURND_RIGHT){
 8005e2a:	4b2a      	ldr	r3, [pc, #168]	; (8005ed4 <TurnObject+0xc0>)
 8005e2c:	789b      	ldrb	r3, [r3, #2]
 8005e2e:	2b17      	cmp	r3, #23
 8005e30:	d103      	bne.n	8005e3a <TurnObject+0x26>
		direction = 1;
 8005e32:	1dfb      	adds	r3, r7, #7
 8005e34:	2201      	movs	r2, #1
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	e00d      	b.n	8005e56 <TurnObject+0x42>
	}
	else if (game_tokens[3] == LTKN_TOKEN_NULL){
 8005e3a:	4b26      	ldr	r3, [pc, #152]	; (8005ed4 <TurnObject+0xc0>)
 8005e3c:	78db      	ldrb	r3, [r3, #3]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d104      	bne.n	8005e4c <TurnObject+0x38>
		PrintToConsole("Please specify a direction to turn (left or right).\0");
 8005e42:	4b25      	ldr	r3, [pc, #148]	; (8005ed8 <TurnObject+0xc4>)
 8005e44:	0018      	movs	r0, r3
 8005e46:	f001 f8fd 	bl	8007044 <PrintToConsole>
		return;
 8005e4a:	e03f      	b.n	8005ecc <TurnObject+0xb8>
	}
	else{
		PrintToConsole("You can't turn that in that direction.\0");
 8005e4c:	4b23      	ldr	r3, [pc, #140]	; (8005edc <TurnObject+0xc8>)
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f001 f8f8 	bl	8007044 <PrintToConsole>
		return;
 8005e54:	e03a      	b.n	8005ecc <TurnObject+0xb8>
	}
	struct obj* ex_obj = GetObjByToken(game_tokens[1]);
 8005e56:	4b1f      	ldr	r3, [pc, #124]	; (8005ed4 <TurnObject+0xc0>)
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f000 fd66 	bl	800692c <GetObjByToken>
 8005e60:	0003      	movs	r3, r0
 8005e62:	603b      	str	r3, [r7, #0]
	// Make sure the object is in the room first
	if(ex_obj != NULL){
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d02c      	beq.n	8005ec4 <TurnObject+0xb0>
		for(uint8_t i = 0; i < current_room->object_count; i++){
 8005e6a:	1dbb      	adds	r3, r7, #6
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	701a      	strb	r2, [r3, #0]
 8005e70:	e020      	b.n	8005eb4 <TurnObject+0xa0>
			// If the item is in the room and it can be interacted with, then enter the
			// turn state machine
			if(current_room->objects[i] == ex_obj &&
 8005e72:	4b1b      	ldr	r3, [pc, #108]	; (8005ee0 <TurnObject+0xcc>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e78:	1dbb      	adds	r3, r7, #6
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	18d3      	adds	r3, r2, r3
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d110      	bne.n	8005eaa <TurnObject+0x96>
					current_room->objects[i]->state == OBJ_UNTOUCHED){
 8005e88:	4b15      	ldr	r3, [pc, #84]	; (8005ee0 <TurnObject+0xcc>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e8e:	1dbb      	adds	r3, r7, #6
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	18d3      	adds	r3, r2, r3
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	785b      	ldrb	r3, [r3, #1]
			if(current_room->objects[i] == ex_obj &&
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d105      	bne.n	8005eaa <TurnObject+0x96>
				TurnObjectStateMachine(direction);
 8005e9e:	1dfb      	adds	r3, r7, #7
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f000 f820 	bl	8005ee8 <TurnObjectStateMachine>
				return;
 8005ea8:	e010      	b.n	8005ecc <TurnObject+0xb8>
		for(uint8_t i = 0; i < current_room->object_count; i++){
 8005eaa:	1dbb      	adds	r3, r7, #6
 8005eac:	781a      	ldrb	r2, [r3, #0]
 8005eae:	1dbb      	adds	r3, r7, #6
 8005eb0:	3201      	adds	r2, #1
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ee0 <TurnObject+0xcc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2229      	movs	r2, #41	; 0x29
 8005eba:	5c9b      	ldrb	r3, [r3, r2]
 8005ebc:	1dba      	adds	r2, r7, #6
 8005ebe:	7812      	ldrb	r2, [r2, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d3d6      	bcc.n	8005e72 <TurnObject+0x5e>
			}
		}
	}
	PrintToConsole("You can't turn that.\0");
 8005ec4:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <TurnObject+0xd0>)
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f001 f8bc 	bl	8007044 <PrintToConsole>
}
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b002      	add	sp, #8
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	20000434 	.word	0x20000434
 8005ed8:	080087d4 	.word	0x080087d4
 8005edc:	0800880c 	.word	0x0800880c
 8005ee0:	20000430 	.word	0x20000430
 8005ee4:	08008834 	.word	0x08008834

08005ee8 <TurnObjectStateMachine>:

// Left is 0, right is 1
void TurnObjectStateMachine(uint8_t direction){
 8005ee8:	b590      	push	{r4, r7, lr}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	0002      	movs	r2, r0
 8005ef0:	1dfb      	adds	r3, r7, #7
 8005ef2:	701a      	strb	r2, [r3, #0]
	// If in the start room, turn the start dial
	if(current_room->token == RTKN_STARTROOM){
 8005ef4:	4b2d      	ldr	r3, [pc, #180]	; (8005fac <TurnObjectStateMachine+0xc4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	222a      	movs	r2, #42	; 0x2a
 8005efa:	5c9b      	ldrb	r3, [r3, r2]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d151      	bne.n	8005fa4 <TurnObjectStateMachine+0xbc>
		PrintToConsole("You turn the dial with a clunk.\0");
 8005f00:	4b2b      	ldr	r3, [pc, #172]	; (8005fb0 <TurnObjectStateMachine+0xc8>)
 8005f02:	0018      	movs	r0, r3
 8005f04:	f001 f89e 	bl	8007044 <PrintToConsole>
		switch(current_state){
 8005f08:	4b2a      	ldr	r3, [pc, #168]	; (8005fb4 <TurnObjectStateMachine+0xcc>)
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d014      	beq.n	8005f3a <TurnObjectStateMachine+0x52>
 8005f10:	dc02      	bgt.n	8005f18 <TurnObjectStateMachine+0x30>
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d005      	beq.n	8005f22 <TurnObjectStateMachine+0x3a>
				}
				break;
			}
		}
	}
}
 8005f16:	e045      	b.n	8005fa4 <TurnObjectStateMachine+0xbc>
		switch(current_state){
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d01a      	beq.n	8005f52 <TurnObjectStateMachine+0x6a>
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d024      	beq.n	8005f6a <TurnObjectStateMachine+0x82>
}
 8005f20:	e040      	b.n	8005fa4 <TurnObjectStateMachine+0xbc>
				if(direction == 0){
 8005f22:	1dfb      	adds	r3, r7, #7
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d103      	bne.n	8005f32 <TurnObjectStateMachine+0x4a>
					current_state = GSTATE_STARTROOM_TURNDIAL1;
 8005f2a:	4b22      	ldr	r3, [pc, #136]	; (8005fb4 <TurnObjectStateMachine+0xcc>)
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	801a      	strh	r2, [r3, #0]
				break;
 8005f30:	e038      	b.n	8005fa4 <TurnObjectStateMachine+0xbc>
					current_state = GSTATE_MOVING;
 8005f32:	4b20      	ldr	r3, [pc, #128]	; (8005fb4 <TurnObjectStateMachine+0xcc>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	801a      	strh	r2, [r3, #0]
				break;
 8005f38:	e034      	b.n	8005fa4 <TurnObjectStateMachine+0xbc>
				if(direction == 0){
 8005f3a:	1dfb      	adds	r3, r7, #7
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <TurnObjectStateMachine+0x62>
					current_state = GSTATE_STARTROOM_TURNDIAL2;
 8005f42:	4b1c      	ldr	r3, [pc, #112]	; (8005fb4 <TurnObjectStateMachine+0xcc>)
 8005f44:	2203      	movs	r2, #3
 8005f46:	801a      	strh	r2, [r3, #0]
				break;
 8005f48:	e02c      	b.n	8005fa4 <TurnObjectStateMachine+0xbc>
					current_state = GSTATE_MOVING;
 8005f4a:	4b1a      	ldr	r3, [pc, #104]	; (8005fb4 <TurnObjectStateMachine+0xcc>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	801a      	strh	r2, [r3, #0]
				break;
 8005f50:	e028      	b.n	8005fa4 <TurnObjectStateMachine+0xbc>
				if(direction == 1){
 8005f52:	1dfb      	adds	r3, r7, #7
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d103      	bne.n	8005f62 <TurnObjectStateMachine+0x7a>
					current_state = GSTATE_STARTROOM_TURNDIAL3;
 8005f5a:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <TurnObjectStateMachine+0xcc>)
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	801a      	strh	r2, [r3, #0]
				break;
 8005f60:	e020      	b.n	8005fa4 <TurnObjectStateMachine+0xbc>
					current_state = GSTATE_MOVING;
 8005f62:	4b14      	ldr	r3, [pc, #80]	; (8005fb4 <TurnObjectStateMachine+0xcc>)
 8005f64:	2201      	movs	r2, #1
 8005f66:	801a      	strh	r2, [r3, #0]
				break;
 8005f68:	e01c      	b.n	8005fa4 <TurnObjectStateMachine+0xbc>
				if(direction == 1){
 8005f6a:	1dfb      	adds	r3, r7, #7
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d114      	bne.n	8005f9c <TurnObjectStateMachine+0xb4>
					PrintToConsole("The dial sticks in place. The door to the next room opens to the north\0");
 8005f72:	4b11      	ldr	r3, [pc, #68]	; (8005fb8 <TurnObjectStateMachine+0xd0>)
 8005f74:	0018      	movs	r0, r3
 8005f76:	f001 f865 	bl	8007044 <PrintToConsole>
					current_room->objects[0]->state = OBJ_ACTED_ON;
 8005f7a:	4b0c      	ldr	r3, [pc, #48]	; (8005fac <TurnObjectStateMachine+0xc4>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2202      	movs	r2, #2
 8005f84:	705a      	strb	r2, [r3, #1]
					current_room->north_room = GetRoomByToken(RTKN_RFCIPHR1);
 8005f86:	4b09      	ldr	r3, [pc, #36]	; (8005fac <TurnObjectStateMachine+0xc4>)
 8005f88:	681c      	ldr	r4, [r3, #0]
 8005f8a:	2002      	movs	r0, #2
 8005f8c:	f000 fdc0 	bl	8006b10 <GetRoomByToken>
 8005f90:	0003      	movs	r3, r0
 8005f92:	6023      	str	r3, [r4, #0]
					current_state = GSTATE_MOVING;
 8005f94:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <TurnObjectStateMachine+0xcc>)
 8005f96:	2201      	movs	r2, #1
 8005f98:	801a      	strh	r2, [r3, #0]
				break;
 8005f9a:	e002      	b.n	8005fa2 <TurnObjectStateMachine+0xba>
					current_state = GSTATE_MOVING;
 8005f9c:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <TurnObjectStateMachine+0xcc>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	801a      	strh	r2, [r3, #0]
				break;
 8005fa2:	46c0      	nop			; (mov r8, r8)
}
 8005fa4:	46c0      	nop			; (mov r8, r8)
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	b003      	add	sp, #12
 8005faa:	bd90      	pop	{r4, r7, pc}
 8005fac:	20000430 	.word	0x20000430
 8005fb0:	0800884c 	.word	0x0800884c
 8005fb4:	20000444 	.word	0x20000444
 8005fb8:	08008870 	.word	0x08008870

08005fbc <InitItms>:
//Game items
struct itm itm_testitm;
struct itm itm_testitm1;
struct itm itm_testitm2;

void InitItms(){
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0

	itm_testitm.token = LTKN_ITM_TEST;
 8005fc0:	4b1c      	ldr	r3, [pc, #112]	; (8006034 <InitItms+0x78>)
 8005fc2:	2250      	movs	r2, #80	; 0x50
 8005fc4:	701a      	strb	r2, [r3, #0]
	itm_testitm.state = ITM_NOT_PICKED_UP;
 8005fc6:	4b1b      	ldr	r3, [pc, #108]	; (8006034 <InitItms+0x78>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	705a      	strb	r2, [r3, #1]
	itm_testitm.name = itm_testitem_name;
 8005fcc:	4b19      	ldr	r3, [pc, #100]	; (8006034 <InitItms+0x78>)
 8005fce:	4a1a      	ldr	r2, [pc, #104]	; (8006038 <InitItms+0x7c>)
 8005fd0:	605a      	str	r2, [r3, #4]
	itm_testitm.seen_text = itm_testitm_seen;
 8005fd2:	4b18      	ldr	r3, [pc, #96]	; (8006034 <InitItms+0x78>)
 8005fd4:	4a19      	ldr	r2, [pc, #100]	; (800603c <InitItms+0x80>)
 8005fd6:	609a      	str	r2, [r3, #8]
	itm_testitm.examine_text = itm_testitm_exmn;
 8005fd8:	4b16      	ldr	r3, [pc, #88]	; (8006034 <InitItms+0x78>)
 8005fda:	4a19      	ldr	r2, [pc, #100]	; (8006040 <InitItms+0x84>)
 8005fdc:	60da      	str	r2, [r3, #12]

	itm_testitm1.token = LTKN_ITM_TEST1;
 8005fde:	4b19      	ldr	r3, [pc, #100]	; (8006044 <InitItms+0x88>)
 8005fe0:	2251      	movs	r2, #81	; 0x51
 8005fe2:	701a      	strb	r2, [r3, #0]
	itm_testitm1.state = ITM_NOT_PICKED_UP;
 8005fe4:	4b17      	ldr	r3, [pc, #92]	; (8006044 <InitItms+0x88>)
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	705a      	strb	r2, [r3, #1]
	itm_testitm1.name = itm_testitem1_name;
 8005fea:	4b16      	ldr	r3, [pc, #88]	; (8006044 <InitItms+0x88>)
 8005fec:	4a16      	ldr	r2, [pc, #88]	; (8006048 <InitItms+0x8c>)
 8005fee:	605a      	str	r2, [r3, #4]
	itm_testitm1.seen_text = itm_testitm1_seen;
 8005ff0:	4b14      	ldr	r3, [pc, #80]	; (8006044 <InitItms+0x88>)
 8005ff2:	4a16      	ldr	r2, [pc, #88]	; (800604c <InitItms+0x90>)
 8005ff4:	609a      	str	r2, [r3, #8]
	itm_testitm1.examine_text = itm_testitm1_exmn;
 8005ff6:	4b13      	ldr	r3, [pc, #76]	; (8006044 <InitItms+0x88>)
 8005ff8:	4a15      	ldr	r2, [pc, #84]	; (8006050 <InitItms+0x94>)
 8005ffa:	60da      	str	r2, [r3, #12]

	itm_testitm2.token = LTKN_ITM_TEST2;
 8005ffc:	4b15      	ldr	r3, [pc, #84]	; (8006054 <InitItms+0x98>)
 8005ffe:	2252      	movs	r2, #82	; 0x52
 8006000:	701a      	strb	r2, [r3, #0]
	itm_testitm2.state = ITM_NOT_PICKED_UP;
 8006002:	4b14      	ldr	r3, [pc, #80]	; (8006054 <InitItms+0x98>)
 8006004:	2201      	movs	r2, #1
 8006006:	705a      	strb	r2, [r3, #1]
	itm_testitm2.name = itm_testitem2_name;
 8006008:	4b12      	ldr	r3, [pc, #72]	; (8006054 <InitItms+0x98>)
 800600a:	4a13      	ldr	r2, [pc, #76]	; (8006058 <InitItms+0x9c>)
 800600c:	605a      	str	r2, [r3, #4]
	itm_testitm2.seen_text = itm_testitm2_seen;
 800600e:	4b11      	ldr	r3, [pc, #68]	; (8006054 <InitItms+0x98>)
 8006010:	4a12      	ldr	r2, [pc, #72]	; (800605c <InitItms+0xa0>)
 8006012:	609a      	str	r2, [r3, #8]
	itm_testitm2.examine_text = itm_testitm2_exmn;
 8006014:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <InitItms+0x98>)
 8006016:	4a12      	ldr	r2, [pc, #72]	; (8006060 <InitItms+0xa4>)
 8006018:	60da      	str	r2, [r3, #12]

	game_itms[0] = &itm_testitm;
 800601a:	4b12      	ldr	r3, [pc, #72]	; (8006064 <InitItms+0xa8>)
 800601c:	4a05      	ldr	r2, [pc, #20]	; (8006034 <InitItms+0x78>)
 800601e:	601a      	str	r2, [r3, #0]
	game_itms[1] = &itm_testitm1;
 8006020:	4b10      	ldr	r3, [pc, #64]	; (8006064 <InitItms+0xa8>)
 8006022:	4a08      	ldr	r2, [pc, #32]	; (8006044 <InitItms+0x88>)
 8006024:	605a      	str	r2, [r3, #4]
	game_itms[2] = &itm_testitm2;
 8006026:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <InitItms+0xa8>)
 8006028:	4a0a      	ldr	r2, [pc, #40]	; (8006054 <InitItms+0x98>)
 800602a:	609a      	str	r2, [r3, #8]
}
 800602c:	46c0      	nop			; (mov r8, r8)
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	2000086c 	.word	0x2000086c
 8006038:	08008a48 	.word	0x08008a48
 800603c:	08008a74 	.word	0x08008a74
 8006040:	08008adc 	.word	0x08008adc
 8006044:	2000085c 	.word	0x2000085c
 8006048:	08008a54 	.word	0x08008a54
 800604c:	08008a90 	.word	0x08008a90
 8006050:	08008b08 	.word	0x08008b08
 8006054:	2000084c 	.word	0x2000084c
 8006058:	08008a64 	.word	0x08008a64
 800605c:	08008ab8 	.word	0x08008ab8
 8006060:	08008b38 	.word	0x08008b38
 8006064:	20000438 	.word	0x20000438

08006068 <GetItmByToken>:

struct itm* GetItmByToken(uint8_t token){
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	0002      	movs	r2, r0
 8006070:	1dfb      	adds	r3, r7, #7
 8006072:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < ITEM_COUNT; i++){
 8006074:	230f      	movs	r3, #15
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	2200      	movs	r2, #0
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	e017      	b.n	80060ae <GetItmByToken+0x46>
		if(game_itms[i]->token == token){
 800607e:	230f      	movs	r3, #15
 8006080:	18fb      	adds	r3, r7, r3
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <GetItmByToken+0x5c>)
 8006086:	0092      	lsls	r2, r2, #2
 8006088:	58d3      	ldr	r3, [r2, r3]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	1dfa      	adds	r2, r7, #7
 800608e:	7812      	ldrb	r2, [r2, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d106      	bne.n	80060a2 <GetItmByToken+0x3a>
			return game_itms[i];
 8006094:	230f      	movs	r3, #15
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	781a      	ldrb	r2, [r3, #0]
 800609a:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <GetItmByToken+0x5c>)
 800609c:	0092      	lsls	r2, r2, #2
 800609e:	58d3      	ldr	r3, [r2, r3]
 80060a0:	e00b      	b.n	80060ba <GetItmByToken+0x52>
	for(uint8_t i = 0; i < ITEM_COUNT; i++){
 80060a2:	210f      	movs	r1, #15
 80060a4:	187b      	adds	r3, r7, r1
 80060a6:	781a      	ldrb	r2, [r3, #0]
 80060a8:	187b      	adds	r3, r7, r1
 80060aa:	3201      	adds	r2, #1
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	230f      	movs	r3, #15
 80060b0:	18fb      	adds	r3, r7, r3
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d9e2      	bls.n	800607e <GetItmByToken+0x16>
		}
	}
	return NULL;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	0018      	movs	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	b004      	add	sp, #16
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	20000438 	.word	0x20000438

080060c8 <TokenizeUserInput>:
#include "lexer.h"

//Lexically analyze the user input
//Return 0xFF and set global vars if fully understood
//Else, return the index of the first character of the not understood word
uint8_t TokenizeUserInput(char *buf, uint8_t len){
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	000a      	movs	r2, r1
 80060d2:	1cfb      	adds	r3, r7, #3
 80060d4:	701a      	strb	r2, [r3, #0]
	//Clear the tokens
	memset(game_tokens, LTKN_TOKEN_NULL, MAX_TOKENS);
 80060d6:	4bcf      	ldr	r3, [pc, #828]	; (8006414 <TokenizeUserInput+0x34c>)
 80060d8:	2203      	movs	r2, #3
 80060da:	2100      	movs	r1, #0
 80060dc:	0018      	movs	r0, r3
 80060de:	f001 fd26 	bl	8007b2e <memset>
	uint8_t buf_index = 0;
 80060e2:	230f      	movs	r3, #15
 80060e4:	18fb      	adds	r3, r7, r3
 80060e6:	2200      	movs	r2, #0
 80060e8:	701a      	strb	r2, [r3, #0]
	uint8_t token_count = 0;
 80060ea:	230e      	movs	r3, #14
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	2200      	movs	r2, #0
 80060f0:	701a      	strb	r2, [r3, #0]
	while(buf[buf_index] != '\0' && token_count < MAX_TOKENS){
 80060f2:	e29c      	b.n	800662e <TokenizeUserInput+0x566>
		if(!strncmp(&buf[buf_index], "go", 2)){
 80060f4:	230f      	movs	r3, #15
 80060f6:	18fb      	adds	r3, r7, r3
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	18d3      	adds	r3, r2, r3
 80060fe:	49c6      	ldr	r1, [pc, #792]	; (8006418 <TokenizeUserInput+0x350>)
 8006100:	2202      	movs	r2, #2
 8006102:	0018      	movs	r0, r3
 8006104:	f001 fd4e 	bl	8007ba4 <strncmp>
 8006108:	1e03      	subs	r3, r0, #0
 800610a:	d10c      	bne.n	8006126 <TokenizeUserInput+0x5e>
			game_tokens[token_count] = LTKN_ACT_GO;
 800610c:	230e      	movs	r3, #14
 800610e:	18fb      	adds	r3, r7, r3
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	4ac0      	ldr	r2, [pc, #768]	; (8006414 <TokenizeUserInput+0x34c>)
 8006114:	2101      	movs	r1, #1
 8006116:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 3;
 8006118:	220f      	movs	r2, #15
 800611a:	18bb      	adds	r3, r7, r2
 800611c:	18ba      	adds	r2, r7, r2
 800611e:	7812      	ldrb	r2, [r2, #0]
 8006120:	3203      	adds	r2, #3
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	e27d      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "use", 3)){
 8006126:	230f      	movs	r3, #15
 8006128:	18fb      	adds	r3, r7, r3
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	18d3      	adds	r3, r2, r3
 8006130:	49ba      	ldr	r1, [pc, #744]	; (800641c <TokenizeUserInput+0x354>)
 8006132:	2203      	movs	r2, #3
 8006134:	0018      	movs	r0, r3
 8006136:	f001 fd35 	bl	8007ba4 <strncmp>
 800613a:	1e03      	subs	r3, r0, #0
 800613c:	d10c      	bne.n	8006158 <TokenizeUserInput+0x90>
			game_tokens[token_count] = LTKN_ACT_USE;
 800613e:	230e      	movs	r3, #14
 8006140:	18fb      	adds	r3, r7, r3
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	4ab3      	ldr	r2, [pc, #716]	; (8006414 <TokenizeUserInput+0x34c>)
 8006146:	2102      	movs	r1, #2
 8006148:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 4;
 800614a:	220f      	movs	r2, #15
 800614c:	18bb      	adds	r3, r7, r2
 800614e:	18ba      	adds	r2, r7, r2
 8006150:	7812      	ldrb	r2, [r2, #0]
 8006152:	3204      	adds	r2, #4
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	e264      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "push", 4)){
 8006158:	230f      	movs	r3, #15
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	18d3      	adds	r3, r2, r3
 8006162:	49af      	ldr	r1, [pc, #700]	; (8006420 <TokenizeUserInput+0x358>)
 8006164:	2204      	movs	r2, #4
 8006166:	0018      	movs	r0, r3
 8006168:	f001 fd1c 	bl	8007ba4 <strncmp>
 800616c:	1e03      	subs	r3, r0, #0
 800616e:	d10c      	bne.n	800618a <TokenizeUserInput+0xc2>
			game_tokens[token_count] = LTKN_ACT_PUSH;
 8006170:	230e      	movs	r3, #14
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	4aa7      	ldr	r2, [pc, #668]	; (8006414 <TokenizeUserInput+0x34c>)
 8006178:	2103      	movs	r1, #3
 800617a:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 800617c:	220f      	movs	r2, #15
 800617e:	18bb      	adds	r3, r7, r2
 8006180:	18ba      	adds	r2, r7, r2
 8006182:	7812      	ldrb	r2, [r2, #0]
 8006184:	3205      	adds	r2, #5
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	e24b      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "pull", 4)){
 800618a:	230f      	movs	r3, #15
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	18d3      	adds	r3, r2, r3
 8006194:	49a3      	ldr	r1, [pc, #652]	; (8006424 <TokenizeUserInput+0x35c>)
 8006196:	2204      	movs	r2, #4
 8006198:	0018      	movs	r0, r3
 800619a:	f001 fd03 	bl	8007ba4 <strncmp>
 800619e:	1e03      	subs	r3, r0, #0
 80061a0:	d10c      	bne.n	80061bc <TokenizeUserInput+0xf4>
			game_tokens[token_count] = LTKN_ACT_PULL;
 80061a2:	230e      	movs	r3, #14
 80061a4:	18fb      	adds	r3, r7, r3
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	4a9a      	ldr	r2, [pc, #616]	; (8006414 <TokenizeUserInput+0x34c>)
 80061aa:	2104      	movs	r1, #4
 80061ac:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 80061ae:	220f      	movs	r2, #15
 80061b0:	18bb      	adds	r3, r7, r2
 80061b2:	18ba      	adds	r2, r7, r2
 80061b4:	7812      	ldrb	r2, [r2, #0]
 80061b6:	3205      	adds	r2, #5
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	e232      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "turn", 4)){
 80061bc:	230f      	movs	r3, #15
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	18d3      	adds	r3, r2, r3
 80061c6:	4998      	ldr	r1, [pc, #608]	; (8006428 <TokenizeUserInput+0x360>)
 80061c8:	2204      	movs	r2, #4
 80061ca:	0018      	movs	r0, r3
 80061cc:	f001 fcea 	bl	8007ba4 <strncmp>
 80061d0:	1e03      	subs	r3, r0, #0
 80061d2:	d10c      	bne.n	80061ee <TokenizeUserInput+0x126>
			game_tokens[token_count] = LTKN_ACT_TURN;
 80061d4:	230e      	movs	r3, #14
 80061d6:	18fb      	adds	r3, r7, r3
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	4a8e      	ldr	r2, [pc, #568]	; (8006414 <TokenizeUserInput+0x34c>)
 80061dc:	2105      	movs	r1, #5
 80061de:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 80061e0:	220f      	movs	r2, #15
 80061e2:	18bb      	adds	r3, r7, r2
 80061e4:	18ba      	adds	r2, r7, r2
 80061e6:	7812      	ldrb	r2, [r2, #0]
 80061e8:	3205      	adds	r2, #5
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	e219      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "location", 8)){
 80061ee:	230f      	movs	r3, #15
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	18d3      	adds	r3, r2, r3
 80061f8:	498c      	ldr	r1, [pc, #560]	; (800642c <TokenizeUserInput+0x364>)
 80061fa:	2208      	movs	r2, #8
 80061fc:	0018      	movs	r0, r3
 80061fe:	f001 fcd1 	bl	8007ba4 <strncmp>
 8006202:	1e03      	subs	r3, r0, #0
 8006204:	d10c      	bne.n	8006220 <TokenizeUserInput+0x158>
			game_tokens[token_count] = LTKN_ACT_LOCATION;
 8006206:	230e      	movs	r3, #14
 8006208:	18fb      	adds	r3, r7, r3
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	4a81      	ldr	r2, [pc, #516]	; (8006414 <TokenizeUserInput+0x34c>)
 800620e:	2106      	movs	r1, #6
 8006210:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 9;
 8006212:	220f      	movs	r2, #15
 8006214:	18bb      	adds	r3, r7, r2
 8006216:	18ba      	adds	r2, r7, r2
 8006218:	7812      	ldrb	r2, [r2, #0]
 800621a:	3209      	adds	r2, #9
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e200      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "say", 3)){
 8006220:	230f      	movs	r3, #15
 8006222:	18fb      	adds	r3, r7, r3
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	18d3      	adds	r3, r2, r3
 800622a:	4981      	ldr	r1, [pc, #516]	; (8006430 <TokenizeUserInput+0x368>)
 800622c:	2203      	movs	r2, #3
 800622e:	0018      	movs	r0, r3
 8006230:	f001 fcb8 	bl	8007ba4 <strncmp>
 8006234:	1e03      	subs	r3, r0, #0
 8006236:	d10c      	bne.n	8006252 <TokenizeUserInput+0x18a>
			game_tokens[token_count] = LTKN_ACT_SAY;
 8006238:	230e      	movs	r3, #14
 800623a:	18fb      	adds	r3, r7, r3
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	4a75      	ldr	r2, [pc, #468]	; (8006414 <TokenizeUserInput+0x34c>)
 8006240:	2107      	movs	r1, #7
 8006242:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 4;
 8006244:	220f      	movs	r2, #15
 8006246:	18bb      	adds	r3, r7, r2
 8006248:	18ba      	adds	r2, r7, r2
 800624a:	7812      	ldrb	r2, [r2, #0]
 800624c:	3204      	adds	r2, #4
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	e1e7      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "get", 3)){
 8006252:	230f      	movs	r3, #15
 8006254:	18fb      	adds	r3, r7, r3
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	18d3      	adds	r3, r2, r3
 800625c:	4975      	ldr	r1, [pc, #468]	; (8006434 <TokenizeUserInput+0x36c>)
 800625e:	2203      	movs	r2, #3
 8006260:	0018      	movs	r0, r3
 8006262:	f001 fc9f 	bl	8007ba4 <strncmp>
 8006266:	1e03      	subs	r3, r0, #0
 8006268:	d10c      	bne.n	8006284 <TokenizeUserInput+0x1bc>
			game_tokens[token_count] = LTKN_ACT_GET;
 800626a:	230e      	movs	r3, #14
 800626c:	18fb      	adds	r3, r7, r3
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	4a68      	ldr	r2, [pc, #416]	; (8006414 <TokenizeUserInput+0x34c>)
 8006272:	2108      	movs	r1, #8
 8006274:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 4;
 8006276:	220f      	movs	r2, #15
 8006278:	18bb      	adds	r3, r7, r2
 800627a:	18ba      	adds	r2, r7, r2
 800627c:	7812      	ldrb	r2, [r2, #0]
 800627e:	3204      	adds	r2, #4
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	e1ce      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "mix", 3)){
 8006284:	230f      	movs	r3, #15
 8006286:	18fb      	adds	r3, r7, r3
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	18d3      	adds	r3, r2, r3
 800628e:	496a      	ldr	r1, [pc, #424]	; (8006438 <TokenizeUserInput+0x370>)
 8006290:	2203      	movs	r2, #3
 8006292:	0018      	movs	r0, r3
 8006294:	f001 fc86 	bl	8007ba4 <strncmp>
 8006298:	1e03      	subs	r3, r0, #0
 800629a:	d10c      	bne.n	80062b6 <TokenizeUserInput+0x1ee>
			game_tokens[token_count] = LTKN_ACT_MIX;
 800629c:	230e      	movs	r3, #14
 800629e:	18fb      	adds	r3, r7, r3
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	4a5c      	ldr	r2, [pc, #368]	; (8006414 <TokenizeUserInput+0x34c>)
 80062a4:	2109      	movs	r1, #9
 80062a6:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 4;
 80062a8:	220f      	movs	r2, #15
 80062aa:	18bb      	adds	r3, r7, r2
 80062ac:	18ba      	adds	r2, r7, r2
 80062ae:	7812      	ldrb	r2, [r2, #0]
 80062b0:	3204      	adds	r2, #4
 80062b2:	701a      	strb	r2, [r3, #0]
 80062b4:	e1b5      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "north", 5)){
 80062b6:	230f      	movs	r3, #15
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	18d3      	adds	r3, r2, r3
 80062c0:	495e      	ldr	r1, [pc, #376]	; (800643c <TokenizeUserInput+0x374>)
 80062c2:	2205      	movs	r2, #5
 80062c4:	0018      	movs	r0, r3
 80062c6:	f001 fc6d 	bl	8007ba4 <strncmp>
 80062ca:	1e03      	subs	r3, r0, #0
 80062cc:	d10c      	bne.n	80062e8 <TokenizeUserInput+0x220>
			game_tokens[token_count] = LTKN_NAVD_NORTH;
 80062ce:	230e      	movs	r3, #14
 80062d0:	18fb      	adds	r3, r7, r3
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	4a4f      	ldr	r2, [pc, #316]	; (8006414 <TokenizeUserInput+0x34c>)
 80062d6:	2110      	movs	r1, #16
 80062d8:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 6;
 80062da:	220f      	movs	r2, #15
 80062dc:	18bb      	adds	r3, r7, r2
 80062de:	18ba      	adds	r2, r7, r2
 80062e0:	7812      	ldrb	r2, [r2, #0]
 80062e2:	3206      	adds	r2, #6
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	e19c      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "south", 5)){
 80062e8:	230f      	movs	r3, #15
 80062ea:	18fb      	adds	r3, r7, r3
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	18d3      	adds	r3, r2, r3
 80062f2:	4953      	ldr	r1, [pc, #332]	; (8006440 <TokenizeUserInput+0x378>)
 80062f4:	2205      	movs	r2, #5
 80062f6:	0018      	movs	r0, r3
 80062f8:	f001 fc54 	bl	8007ba4 <strncmp>
 80062fc:	1e03      	subs	r3, r0, #0
 80062fe:	d10c      	bne.n	800631a <TokenizeUserInput+0x252>
			game_tokens[token_count] = LTKN_NAVD_SOUTH;
 8006300:	230e      	movs	r3, #14
 8006302:	18fb      	adds	r3, r7, r3
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	4a43      	ldr	r2, [pc, #268]	; (8006414 <TokenizeUserInput+0x34c>)
 8006308:	2111      	movs	r1, #17
 800630a:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 6;
 800630c:	220f      	movs	r2, #15
 800630e:	18bb      	adds	r3, r7, r2
 8006310:	18ba      	adds	r2, r7, r2
 8006312:	7812      	ldrb	r2, [r2, #0]
 8006314:	3206      	adds	r2, #6
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	e183      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "east", 4)){
 800631a:	230f      	movs	r3, #15
 800631c:	18fb      	adds	r3, r7, r3
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	18d3      	adds	r3, r2, r3
 8006324:	4947      	ldr	r1, [pc, #284]	; (8006444 <TokenizeUserInput+0x37c>)
 8006326:	2204      	movs	r2, #4
 8006328:	0018      	movs	r0, r3
 800632a:	f001 fc3b 	bl	8007ba4 <strncmp>
 800632e:	1e03      	subs	r3, r0, #0
 8006330:	d10c      	bne.n	800634c <TokenizeUserInput+0x284>
			game_tokens[token_count] = LTKN_NAVD_EAST;
 8006332:	230e      	movs	r3, #14
 8006334:	18fb      	adds	r3, r7, r3
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	4a36      	ldr	r2, [pc, #216]	; (8006414 <TokenizeUserInput+0x34c>)
 800633a:	2112      	movs	r1, #18
 800633c:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 800633e:	220f      	movs	r2, #15
 8006340:	18bb      	adds	r3, r7, r2
 8006342:	18ba      	adds	r2, r7, r2
 8006344:	7812      	ldrb	r2, [r2, #0]
 8006346:	3205      	adds	r2, #5
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	e16a      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "west", 4)){
 800634c:	230f      	movs	r3, #15
 800634e:	18fb      	adds	r3, r7, r3
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	18d3      	adds	r3, r2, r3
 8006356:	493c      	ldr	r1, [pc, #240]	; (8006448 <TokenizeUserInput+0x380>)
 8006358:	2204      	movs	r2, #4
 800635a:	0018      	movs	r0, r3
 800635c:	f001 fc22 	bl	8007ba4 <strncmp>
 8006360:	1e03      	subs	r3, r0, #0
 8006362:	d10c      	bne.n	800637e <TokenizeUserInput+0x2b6>
			game_tokens[token_count] = LTKN_NAVD_WEST;
 8006364:	230e      	movs	r3, #14
 8006366:	18fb      	adds	r3, r7, r3
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	4a2a      	ldr	r2, [pc, #168]	; (8006414 <TokenizeUserInput+0x34c>)
 800636c:	2113      	movs	r1, #19
 800636e:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8006370:	220f      	movs	r2, #15
 8006372:	18bb      	adds	r3, r7, r2
 8006374:	18ba      	adds	r2, r7, r2
 8006376:	7812      	ldrb	r2, [r2, #0]
 8006378:	3205      	adds	r2, #5
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	e151      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "up", 2)){
 800637e:	230f      	movs	r3, #15
 8006380:	18fb      	adds	r3, r7, r3
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	18d3      	adds	r3, r2, r3
 8006388:	4930      	ldr	r1, [pc, #192]	; (800644c <TokenizeUserInput+0x384>)
 800638a:	2202      	movs	r2, #2
 800638c:	0018      	movs	r0, r3
 800638e:	f001 fc09 	bl	8007ba4 <strncmp>
 8006392:	1e03      	subs	r3, r0, #0
 8006394:	d10c      	bne.n	80063b0 <TokenizeUserInput+0x2e8>
			game_tokens[token_count] = LTKN_NAVD_UP;
 8006396:	230e      	movs	r3, #14
 8006398:	18fb      	adds	r3, r7, r3
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	4a1d      	ldr	r2, [pc, #116]	; (8006414 <TokenizeUserInput+0x34c>)
 800639e:	2114      	movs	r1, #20
 80063a0:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 3;
 80063a2:	220f      	movs	r2, #15
 80063a4:	18bb      	adds	r3, r7, r2
 80063a6:	18ba      	adds	r2, r7, r2
 80063a8:	7812      	ldrb	r2, [r2, #0]
 80063aa:	3203      	adds	r2, #3
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	e138      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "down", 4)){
 80063b0:	230f      	movs	r3, #15
 80063b2:	18fb      	adds	r3, r7, r3
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	18d3      	adds	r3, r2, r3
 80063ba:	4925      	ldr	r1, [pc, #148]	; (8006450 <TokenizeUserInput+0x388>)
 80063bc:	2204      	movs	r2, #4
 80063be:	0018      	movs	r0, r3
 80063c0:	f001 fbf0 	bl	8007ba4 <strncmp>
 80063c4:	1e03      	subs	r3, r0, #0
 80063c6:	d10c      	bne.n	80063e2 <TokenizeUserInput+0x31a>
			game_tokens[token_count] = LTKN_NAVD_DOWN;
 80063c8:	230e      	movs	r3, #14
 80063ca:	18fb      	adds	r3, r7, r3
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	4a11      	ldr	r2, [pc, #68]	; (8006414 <TokenizeUserInput+0x34c>)
 80063d0:	2115      	movs	r1, #21
 80063d2:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 80063d4:	220f      	movs	r2, #15
 80063d6:	18bb      	adds	r3, r7, r2
 80063d8:	18ba      	adds	r2, r7, r2
 80063da:	7812      	ldrb	r2, [r2, #0]
 80063dc:	3205      	adds	r2, #5
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	e11f      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "left", 4)){
 80063e2:	230f      	movs	r3, #15
 80063e4:	18fb      	adds	r3, r7, r3
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	18d3      	adds	r3, r2, r3
 80063ec:	4919      	ldr	r1, [pc, #100]	; (8006454 <TokenizeUserInput+0x38c>)
 80063ee:	2204      	movs	r2, #4
 80063f0:	0018      	movs	r0, r3
 80063f2:	f001 fbd7 	bl	8007ba4 <strncmp>
 80063f6:	1e03      	subs	r3, r0, #0
 80063f8:	d12e      	bne.n	8006458 <TokenizeUserInput+0x390>
			game_tokens[token_count] = LTKN_TURND_LEFT;
 80063fa:	230e      	movs	r3, #14
 80063fc:	18fb      	adds	r3, r7, r3
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	4a04      	ldr	r2, [pc, #16]	; (8006414 <TokenizeUserInput+0x34c>)
 8006402:	2116      	movs	r1, #22
 8006404:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8006406:	220f      	movs	r2, #15
 8006408:	18bb      	adds	r3, r7, r2
 800640a:	18ba      	adds	r2, r7, r2
 800640c:	7812      	ldrb	r2, [r2, #0]
 800640e:	3205      	adds	r2, #5
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	e106      	b.n	8006622 <TokenizeUserInput+0x55a>
 8006414:	20000434 	.word	0x20000434
 8006418:	080088b8 	.word	0x080088b8
 800641c:	080088bc 	.word	0x080088bc
 8006420:	080088c0 	.word	0x080088c0
 8006424:	080088c8 	.word	0x080088c8
 8006428:	080088d0 	.word	0x080088d0
 800642c:	080088d8 	.word	0x080088d8
 8006430:	080088e4 	.word	0x080088e4
 8006434:	080088e8 	.word	0x080088e8
 8006438:	080088ec 	.word	0x080088ec
 800643c:	080088f0 	.word	0x080088f0
 8006440:	080088f8 	.word	0x080088f8
 8006444:	08008900 	.word	0x08008900
 8006448:	08008908 	.word	0x08008908
 800644c:	08008910 	.word	0x08008910
 8006450:	08008914 	.word	0x08008914
 8006454:	0800891c 	.word	0x0800891c
		}
		else if(!strncmp(&buf[buf_index], "right", 5)){
 8006458:	230f      	movs	r3, #15
 800645a:	18fb      	adds	r3, r7, r3
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	18d3      	adds	r3, r2, r3
 8006462:	497c      	ldr	r1, [pc, #496]	; (8006654 <TokenizeUserInput+0x58c>)
 8006464:	2205      	movs	r2, #5
 8006466:	0018      	movs	r0, r3
 8006468:	f001 fb9c 	bl	8007ba4 <strncmp>
 800646c:	1e03      	subs	r3, r0, #0
 800646e:	d10c      	bne.n	800648a <TokenizeUserInput+0x3c2>
			game_tokens[token_count] = LTKN_TURND_RIGHT;
 8006470:	230e      	movs	r3, #14
 8006472:	18fb      	adds	r3, r7, r3
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	4a78      	ldr	r2, [pc, #480]	; (8006658 <TokenizeUserInput+0x590>)
 8006478:	2117      	movs	r1, #23
 800647a:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 6;
 800647c:	220f      	movs	r2, #15
 800647e:	18bb      	adds	r3, r7, r2
 8006480:	18ba      	adds	r2, r7, r2
 8006482:	7812      	ldrb	r2, [r2, #0]
 8006484:	3206      	adds	r2, #6
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	e0cb      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "help", 4)){
 800648a:	230f      	movs	r3, #15
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	18d3      	adds	r3, r2, r3
 8006494:	4971      	ldr	r1, [pc, #452]	; (800665c <TokenizeUserInput+0x594>)
 8006496:	2204      	movs	r2, #4
 8006498:	0018      	movs	r0, r3
 800649a:	f001 fb83 	bl	8007ba4 <strncmp>
 800649e:	1e03      	subs	r3, r0, #0
 80064a0:	d10c      	bne.n	80064bc <TokenizeUserInput+0x3f4>
			game_tokens[token_count] = LTKN_ACT_HELP;
 80064a2:	230e      	movs	r3, #14
 80064a4:	18fb      	adds	r3, r7, r3
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	4a6b      	ldr	r2, [pc, #428]	; (8006658 <TokenizeUserInput+0x590>)
 80064aa:	210a      	movs	r1, #10
 80064ac:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 80064ae:	220f      	movs	r2, #15
 80064b0:	18bb      	adds	r3, r7, r2
 80064b2:	18ba      	adds	r2, r7, r2
 80064b4:	7812      	ldrb	r2, [r2, #0]
 80064b6:	3205      	adds	r2, #5
 80064b8:	701a      	strb	r2, [r3, #0]
 80064ba:	e0b2      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "inventory", 9)){
 80064bc:	230f      	movs	r3, #15
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	18d3      	adds	r3, r2, r3
 80064c6:	4966      	ldr	r1, [pc, #408]	; (8006660 <TokenizeUserInput+0x598>)
 80064c8:	2209      	movs	r2, #9
 80064ca:	0018      	movs	r0, r3
 80064cc:	f001 fb6a 	bl	8007ba4 <strncmp>
 80064d0:	1e03      	subs	r3, r0, #0
 80064d2:	d10c      	bne.n	80064ee <TokenizeUserInput+0x426>
			game_tokens[token_count] = LTKN_ACT_INVENTORY;
 80064d4:	230e      	movs	r3, #14
 80064d6:	18fb      	adds	r3, r7, r3
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	4a5f      	ldr	r2, [pc, #380]	; (8006658 <TokenizeUserInput+0x590>)
 80064dc:	210b      	movs	r1, #11
 80064de:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 10;
 80064e0:	220f      	movs	r2, #15
 80064e2:	18bb      	adds	r3, r7, r2
 80064e4:	18ba      	adds	r2, r7, r2
 80064e6:	7812      	ldrb	r2, [r2, #0]
 80064e8:	320a      	adds	r2, #10
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	e099      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "examine", 7)){
 80064ee:	230f      	movs	r3, #15
 80064f0:	18fb      	adds	r3, r7, r3
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	18d3      	adds	r3, r2, r3
 80064f8:	495a      	ldr	r1, [pc, #360]	; (8006664 <TokenizeUserInput+0x59c>)
 80064fa:	2207      	movs	r2, #7
 80064fc:	0018      	movs	r0, r3
 80064fe:	f001 fb51 	bl	8007ba4 <strncmp>
 8006502:	1e03      	subs	r3, r0, #0
 8006504:	d10c      	bne.n	8006520 <TokenizeUserInput+0x458>
			game_tokens[token_count] = LTKN_ACT_EXAMINE;
 8006506:	230e      	movs	r3, #14
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	4a52      	ldr	r2, [pc, #328]	; (8006658 <TokenizeUserInput+0x590>)
 800650e:	210c      	movs	r1, #12
 8006510:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 8;
 8006512:	220f      	movs	r2, #15
 8006514:	18bb      	adds	r3, r7, r2
 8006516:	18ba      	adds	r2, r7, r2
 8006518:	7812      	ldrb	r2, [r2, #0]
 800651a:	3208      	adds	r2, #8
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	e080      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "dial", 4)){
 8006520:	230f      	movs	r3, #15
 8006522:	18fb      	adds	r3, r7, r3
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	18d3      	adds	r3, r2, r3
 800652a:	494f      	ldr	r1, [pc, #316]	; (8006668 <TokenizeUserInput+0x5a0>)
 800652c:	2204      	movs	r2, #4
 800652e:	0018      	movs	r0, r3
 8006530:	f001 fb38 	bl	8007ba4 <strncmp>
 8006534:	1e03      	subs	r3, r0, #0
 8006536:	d10c      	bne.n	8006552 <TokenizeUserInput+0x48a>
			game_tokens[token_count] = LTKN_OBJ_STRTDIAL;
 8006538:	230e      	movs	r3, #14
 800653a:	18fb      	adds	r3, r7, r3
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	4a46      	ldr	r2, [pc, #280]	; (8006658 <TokenizeUserInput+0x590>)
 8006540:	2120      	movs	r1, #32
 8006542:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8006544:	220f      	movs	r2, #15
 8006546:	18bb      	adds	r3, r7, r2
 8006548:	18ba      	adds	r2, r7, r2
 800654a:	7812      	ldrb	r2, [r2, #0]
 800654c:	3205      	adds	r2, #5
 800654e:	701a      	strb	r2, [r3, #0]
 8006550:	e067      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "testitm1", 8)){
 8006552:	230f      	movs	r3, #15
 8006554:	18fb      	adds	r3, r7, r3
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	18d3      	adds	r3, r2, r3
 800655c:	4943      	ldr	r1, [pc, #268]	; (800666c <TokenizeUserInput+0x5a4>)
 800655e:	2208      	movs	r2, #8
 8006560:	0018      	movs	r0, r3
 8006562:	f001 fb1f 	bl	8007ba4 <strncmp>
 8006566:	1e03      	subs	r3, r0, #0
 8006568:	d10c      	bne.n	8006584 <TokenizeUserInput+0x4bc>
			game_tokens[token_count] = LTKN_ITM_TEST1;
 800656a:	230e      	movs	r3, #14
 800656c:	18fb      	adds	r3, r7, r3
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	4a39      	ldr	r2, [pc, #228]	; (8006658 <TokenizeUserInput+0x590>)
 8006572:	2151      	movs	r1, #81	; 0x51
 8006574:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 9;
 8006576:	220f      	movs	r2, #15
 8006578:	18bb      	adds	r3, r7, r2
 800657a:	18ba      	adds	r2, r7, r2
 800657c:	7812      	ldrb	r2, [r2, #0]
 800657e:	3209      	adds	r2, #9
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	e04e      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "testitm2", 8)){
 8006584:	230f      	movs	r3, #15
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	18d3      	adds	r3, r2, r3
 800658e:	4938      	ldr	r1, [pc, #224]	; (8006670 <TokenizeUserInput+0x5a8>)
 8006590:	2208      	movs	r2, #8
 8006592:	0018      	movs	r0, r3
 8006594:	f001 fb06 	bl	8007ba4 <strncmp>
 8006598:	1e03      	subs	r3, r0, #0
 800659a:	d10c      	bne.n	80065b6 <TokenizeUserInput+0x4ee>
			game_tokens[token_count] = LTKN_ITM_TEST2;
 800659c:	230e      	movs	r3, #14
 800659e:	18fb      	adds	r3, r7, r3
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	4a2d      	ldr	r2, [pc, #180]	; (8006658 <TokenizeUserInput+0x590>)
 80065a4:	2152      	movs	r1, #82	; 0x52
 80065a6:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 9;
 80065a8:	220f      	movs	r2, #15
 80065aa:	18bb      	adds	r3, r7, r2
 80065ac:	18ba      	adds	r2, r7, r2
 80065ae:	7812      	ldrb	r2, [r2, #0]
 80065b0:	3209      	adds	r2, #9
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	e035      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "testitm", 7)){
 80065b6:	230f      	movs	r3, #15
 80065b8:	18fb      	adds	r3, r7, r3
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	18d3      	adds	r3, r2, r3
 80065c0:	492c      	ldr	r1, [pc, #176]	; (8006674 <TokenizeUserInput+0x5ac>)
 80065c2:	2207      	movs	r2, #7
 80065c4:	0018      	movs	r0, r3
 80065c6:	f001 faed 	bl	8007ba4 <strncmp>
 80065ca:	1e03      	subs	r3, r0, #0
 80065cc:	d10c      	bne.n	80065e8 <TokenizeUserInput+0x520>
			game_tokens[token_count] = LTKN_ITM_TEST;
 80065ce:	230e      	movs	r3, #14
 80065d0:	18fb      	adds	r3, r7, r3
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	4a20      	ldr	r2, [pc, #128]	; (8006658 <TokenizeUserInput+0x590>)
 80065d6:	2150      	movs	r1, #80	; 0x50
 80065d8:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 8;
 80065da:	220f      	movs	r2, #15
 80065dc:	18bb      	adds	r3, r7, r2
 80065de:	18ba      	adds	r2, r7, r2
 80065e0:	7812      	ldrb	r2, [r2, #0]
 80065e2:	3208      	adds	r2, #8
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	e01c      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else if(!strncmp(&buf[buf_index], "testcommand", 11)){
 80065e8:	230f      	movs	r3, #15
 80065ea:	18fb      	adds	r3, r7, r3
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	18d3      	adds	r3, r2, r3
 80065f2:	4921      	ldr	r1, [pc, #132]	; (8006678 <TokenizeUserInput+0x5b0>)
 80065f4:	220b      	movs	r2, #11
 80065f6:	0018      	movs	r0, r3
 80065f8:	f001 fad4 	bl	8007ba4 <strncmp>
 80065fc:	1e03      	subs	r3, r0, #0
 80065fe:	d10c      	bne.n	800661a <TokenizeUserInput+0x552>
			game_tokens[token_count] = LTKN_CMD_TEST;
 8006600:	230e      	movs	r3, #14
 8006602:	18fb      	adds	r3, r7, r3
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	4a14      	ldr	r2, [pc, #80]	; (8006658 <TokenizeUserInput+0x590>)
 8006608:	2180      	movs	r1, #128	; 0x80
 800660a:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 12;
 800660c:	220f      	movs	r2, #15
 800660e:	18bb      	adds	r3, r7, r2
 8006610:	18ba      	adds	r2, r7, r2
 8006612:	7812      	ldrb	r2, [r2, #0]
 8006614:	320c      	adds	r2, #12
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	e003      	b.n	8006622 <TokenizeUserInput+0x55a>
		}
		else{
			return buf_index;
 800661a:	230f      	movs	r3, #15
 800661c:	18fb      	adds	r3, r7, r3
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	e014      	b.n	800664c <TokenizeUserInput+0x584>
		}
		token_count++;
 8006622:	210e      	movs	r1, #14
 8006624:	187b      	adds	r3, r7, r1
 8006626:	781a      	ldrb	r2, [r3, #0]
 8006628:	187b      	adds	r3, r7, r1
 800662a:	3201      	adds	r2, #1
 800662c:	701a      	strb	r2, [r3, #0]
	while(buf[buf_index] != '\0' && token_count < MAX_TOKENS){
 800662e:	230f      	movs	r3, #15
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	18d3      	adds	r3, r2, r3
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <TokenizeUserInput+0x582>
 800663e:	230e      	movs	r3, #14
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b02      	cmp	r3, #2
 8006646:	d800      	bhi.n	800664a <TokenizeUserInput+0x582>
 8006648:	e554      	b.n	80060f4 <TokenizeUserInput+0x2c>
	}
	return 0xFF;
 800664a:	23ff      	movs	r3, #255	; 0xff
}
 800664c:	0018      	movs	r0, r3
 800664e:	46bd      	mov	sp, r7
 8006650:	b004      	add	sp, #16
 8006652:	bd80      	pop	{r7, pc}
 8006654:	08008924 	.word	0x08008924
 8006658:	20000434 	.word	0x20000434
 800665c:	0800892c 	.word	0x0800892c
 8006660:	08008934 	.word	0x08008934
 8006664:	08008940 	.word	0x08008940
 8006668:	08008948 	.word	0x08008948
 800666c:	08008950 	.word	0x08008950
 8006670:	0800895c 	.word	0x0800895c
 8006674:	08008968 	.word	0x08008968
 8006678:	08008970 	.word	0x08008970

0800667c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006680:	f7f9 fdce 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006684:	f000 f814 	bl	80066b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006688:	f000 f8c0 	bl	800680c <MX_GPIO_Init>
  MX_I2C1_Init();
 800668c:	f000 f87e 	bl	800678c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8006690:	f000 fb70 	bl	8006d74 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  InitGame();
 8006694:	f7fe ff5a 	bl	800554c <InitGame>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	GameLoop();
 8006698:	f7fe ffde 	bl	8005658 <GameLoop>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(stopState){
 800669c:	4b03      	ldr	r3, [pc, #12]	; (80066ac <main+0x30>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0f8      	beq.n	8006698 <main+0x1c>
		DeepSleep();
 80066a6:	f000 f971 	bl	800698c <DeepSleep>
	GameLoop();
 80066aa:	e7f5      	b.n	8006698 <main+0x1c>
 80066ac:	200001f9 	.word	0x200001f9

080066b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80066b0:	b590      	push	{r4, r7, lr}
 80066b2:	b09f      	sub	sp, #124	; 0x7c
 80066b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80066b6:	2440      	movs	r4, #64	; 0x40
 80066b8:	193b      	adds	r3, r7, r4
 80066ba:	0018      	movs	r0, r3
 80066bc:	2338      	movs	r3, #56	; 0x38
 80066be:	001a      	movs	r2, r3
 80066c0:	2100      	movs	r1, #0
 80066c2:	f001 fa34 	bl	8007b2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80066c6:	232c      	movs	r3, #44	; 0x2c
 80066c8:	18fb      	adds	r3, r7, r3
 80066ca:	0018      	movs	r0, r3
 80066cc:	2314      	movs	r3, #20
 80066ce:	001a      	movs	r2, r3
 80066d0:	2100      	movs	r1, #0
 80066d2:	f001 fa2c 	bl	8007b2e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80066d6:	1d3b      	adds	r3, r7, #4
 80066d8:	0018      	movs	r0, r3
 80066da:	2328      	movs	r3, #40	; 0x28
 80066dc:	001a      	movs	r2, r3
 80066de:	2100      	movs	r1, #0
 80066e0:	f001 fa25 	bl	8007b2e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80066e4:	4b27      	ldr	r3, [pc, #156]	; (8006784 <SystemClock_Config+0xd4>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a27      	ldr	r2, [pc, #156]	; (8006788 <SystemClock_Config+0xd8>)
 80066ea:	401a      	ands	r2, r3
 80066ec:	4b25      	ldr	r3, [pc, #148]	; (8006784 <SystemClock_Config+0xd4>)
 80066ee:	2180      	movs	r1, #128	; 0x80
 80066f0:	0109      	lsls	r1, r1, #4
 80066f2:	430a      	orrs	r2, r1
 80066f4:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80066f6:	0021      	movs	r1, r4
 80066f8:	187b      	adds	r3, r7, r1
 80066fa:	2222      	movs	r2, #34	; 0x22
 80066fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80066fe:	187b      	adds	r3, r7, r1
 8006700:	2201      	movs	r2, #1
 8006702:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006704:	187b      	adds	r3, r7, r1
 8006706:	2210      	movs	r2, #16
 8006708:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800670a:	187b      	adds	r3, r7, r1
 800670c:	2201      	movs	r2, #1
 800670e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006710:	187b      	adds	r3, r7, r1
 8006712:	2200      	movs	r2, #0
 8006714:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006716:	187b      	adds	r3, r7, r1
 8006718:	0018      	movs	r0, r3
 800671a:	f7fb fa57 	bl	8001bcc <HAL_RCC_OscConfig>
 800671e:	1e03      	subs	r3, r0, #0
 8006720:	d001      	beq.n	8006726 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8006722:	f000 f8db 	bl	80068dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006726:	212c      	movs	r1, #44	; 0x2c
 8006728:	187b      	adds	r3, r7, r1
 800672a:	220f      	movs	r2, #15
 800672c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800672e:	187b      	adds	r3, r7, r1
 8006730:	2201      	movs	r2, #1
 8006732:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006734:	187b      	adds	r3, r7, r1
 8006736:	2200      	movs	r2, #0
 8006738:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800673a:	187b      	adds	r3, r7, r1
 800673c:	2200      	movs	r2, #0
 800673e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006740:	187b      	adds	r3, r7, r1
 8006742:	2200      	movs	r2, #0
 8006744:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006746:	187b      	adds	r3, r7, r1
 8006748:	2100      	movs	r1, #0
 800674a:	0018      	movs	r0, r3
 800674c:	f7fb fe0e 	bl	800236c <HAL_RCC_ClockConfig>
 8006750:	1e03      	subs	r3, r0, #0
 8006752:	d001      	beq.n	8006758 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8006754:	f000 f8c2 	bl	80068dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8006758:	1d3b      	adds	r3, r7, #4
 800675a:	2248      	movs	r2, #72	; 0x48
 800675c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800675e:	1d3b      	adds	r3, r7, #4
 8006760:	2200      	movs	r2, #0
 8006762:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006764:	1d3b      	adds	r3, r7, #4
 8006766:	2280      	movs	r2, #128	; 0x80
 8006768:	04d2      	lsls	r2, r2, #19
 800676a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800676c:	1d3b      	adds	r3, r7, #4
 800676e:	0018      	movs	r0, r3
 8006770:	f7fb ffaa 	bl	80026c8 <HAL_RCCEx_PeriphCLKConfig>
 8006774:	1e03      	subs	r3, r0, #0
 8006776:	d001      	beq.n	800677c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8006778:	f000 f8b0 	bl	80068dc <Error_Handler>
  }
}
 800677c:	46c0      	nop			; (mov r8, r8)
 800677e:	46bd      	mov	sp, r7
 8006780:	b01f      	add	sp, #124	; 0x7c
 8006782:	bd90      	pop	{r4, r7, pc}
 8006784:	40007000 	.word	0x40007000
 8006788:	ffffe7ff 	.word	0xffffe7ff

0800678c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006790:	4b1b      	ldr	r3, [pc, #108]	; (8006800 <MX_I2C1_Init+0x74>)
 8006792:	4a1c      	ldr	r2, [pc, #112]	; (8006804 <MX_I2C1_Init+0x78>)
 8006794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8006796:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <MX_I2C1_Init+0x74>)
 8006798:	4a1b      	ldr	r2, [pc, #108]	; (8006808 <MX_I2C1_Init+0x7c>)
 800679a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800679c:	4b18      	ldr	r3, [pc, #96]	; (8006800 <MX_I2C1_Init+0x74>)
 800679e:	2200      	movs	r2, #0
 80067a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80067a2:	4b17      	ldr	r3, [pc, #92]	; (8006800 <MX_I2C1_Init+0x74>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80067a8:	4b15      	ldr	r3, [pc, #84]	; (8006800 <MX_I2C1_Init+0x74>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80067ae:	4b14      	ldr	r3, [pc, #80]	; (8006800 <MX_I2C1_Init+0x74>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80067b4:	4b12      	ldr	r3, [pc, #72]	; (8006800 <MX_I2C1_Init+0x74>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80067ba:	4b11      	ldr	r3, [pc, #68]	; (8006800 <MX_I2C1_Init+0x74>)
 80067bc:	2200      	movs	r2, #0
 80067be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80067c0:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <MX_I2C1_Init+0x74>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80067c6:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <MX_I2C1_Init+0x74>)
 80067c8:	0018      	movs	r0, r3
 80067ca:	f7fa f855 	bl	8000878 <HAL_I2C_Init>
 80067ce:	1e03      	subs	r3, r0, #0
 80067d0:	d001      	beq.n	80067d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80067d2:	f000 f883 	bl	80068dc <Error_Handler>
  }
  /** Configure Analog filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80067d6:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <MX_I2C1_Init+0x74>)
 80067d8:	2100      	movs	r1, #0
 80067da:	0018      	movs	r0, r3
 80067dc:	f7fa f8e2 	bl	80009a4 <HAL_I2CEx_ConfigAnalogFilter>
 80067e0:	1e03      	subs	r3, r0, #0
 80067e2:	d001      	beq.n	80067e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80067e4:	f000 f87a 	bl	80068dc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <MX_I2C1_Init+0x74>)
 80067ea:	2100      	movs	r1, #0
 80067ec:	0018      	movs	r0, r3
 80067ee:	f7fa f925 	bl	8000a3c <HAL_I2CEx_ConfigDigitalFilter>
 80067f2:	1e03      	subs	r3, r0, #0
 80067f4:	d001      	beq.n	80067fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80067f6:	f000 f871 	bl	80068dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	2000087c 	.word	0x2000087c
 8006804:	40005400 	.word	0x40005400
 8006808:	00303d5b 	.word	0x00303d5b

0800680c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800680c:	b590      	push	{r4, r7, lr}
 800680e:	b089      	sub	sp, #36	; 0x24
 8006810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006812:	240c      	movs	r4, #12
 8006814:	193b      	adds	r3, r7, r4
 8006816:	0018      	movs	r0, r3
 8006818:	2314      	movs	r3, #20
 800681a:	001a      	movs	r2, r3
 800681c:	2100      	movs	r1, #0
 800681e:	f001 f986 	bl	8007b2e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006822:	4b2b      	ldr	r3, [pc, #172]	; (80068d0 <MX_GPIO_Init+0xc4>)
 8006824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006826:	4b2a      	ldr	r3, [pc, #168]	; (80068d0 <MX_GPIO_Init+0xc4>)
 8006828:	2104      	movs	r1, #4
 800682a:	430a      	orrs	r2, r1
 800682c:	62da      	str	r2, [r3, #44]	; 0x2c
 800682e:	4b28      	ldr	r3, [pc, #160]	; (80068d0 <MX_GPIO_Init+0xc4>)
 8006830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006832:	2204      	movs	r2, #4
 8006834:	4013      	ands	r3, r2
 8006836:	60bb      	str	r3, [r7, #8]
 8006838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800683a:	4b25      	ldr	r3, [pc, #148]	; (80068d0 <MX_GPIO_Init+0xc4>)
 800683c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683e:	4b24      	ldr	r3, [pc, #144]	; (80068d0 <MX_GPIO_Init+0xc4>)
 8006840:	2101      	movs	r1, #1
 8006842:	430a      	orrs	r2, r1
 8006844:	62da      	str	r2, [r3, #44]	; 0x2c
 8006846:	4b22      	ldr	r3, [pc, #136]	; (80068d0 <MX_GPIO_Init+0xc4>)
 8006848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684a:	2201      	movs	r2, #1
 800684c:	4013      	ands	r3, r2
 800684e:	607b      	str	r3, [r7, #4]
 8006850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8006852:	23a0      	movs	r3, #160	; 0xa0
 8006854:	05db      	lsls	r3, r3, #23
 8006856:	2200      	movs	r2, #0
 8006858:	2120      	movs	r1, #32
 800685a:	0018      	movs	r0, r3
 800685c:	f7f9 ffb6 	bl	80007cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006860:	193b      	adds	r3, r7, r4
 8006862:	2280      	movs	r2, #128	; 0x80
 8006864:	0192      	lsls	r2, r2, #6
 8006866:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006868:	193b      	adds	r3, r7, r4
 800686a:	4a1a      	ldr	r2, [pc, #104]	; (80068d4 <MX_GPIO_Init+0xc8>)
 800686c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800686e:	193b      	adds	r3, r7, r4
 8006870:	2200      	movs	r2, #0
 8006872:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006874:	193b      	adds	r3, r7, r4
 8006876:	4a18      	ldr	r2, [pc, #96]	; (80068d8 <MX_GPIO_Init+0xcc>)
 8006878:	0019      	movs	r1, r3
 800687a:	0010      	movs	r0, r2
 800687c:	f7f9 fe28 	bl	80004d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8006880:	0021      	movs	r1, r4
 8006882:	187b      	adds	r3, r7, r1
 8006884:	2220      	movs	r2, #32
 8006886:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006888:	187b      	adds	r3, r7, r1
 800688a:	2201      	movs	r2, #1
 800688c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800688e:	187b      	adds	r3, r7, r1
 8006890:	2200      	movs	r2, #0
 8006892:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006894:	187b      	adds	r3, r7, r1
 8006896:	2200      	movs	r2, #0
 8006898:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800689a:	187a      	adds	r2, r7, r1
 800689c:	23a0      	movs	r3, #160	; 0xa0
 800689e:	05db      	lsls	r3, r3, #23
 80068a0:	0011      	movs	r1, r2
 80068a2:	0018      	movs	r0, r3
 80068a4:	f7f9 fe14 	bl	80004d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80068a8:	23a0      	movs	r3, #160	; 0xa0
 80068aa:	05db      	lsls	r3, r3, #23
 80068ac:	2201      	movs	r2, #1
 80068ae:	2120      	movs	r1, #32
 80068b0:	0018      	movs	r0, r3
 80068b2:	f7f9 ff8b 	bl	80007cc <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80068b6:	2200      	movs	r2, #0
 80068b8:	2100      	movs	r1, #0
 80068ba:	2007      	movs	r0, #7
 80068bc:	f7f9 fdd6 	bl	800046c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80068c0:	2007      	movs	r0, #7
 80068c2:	f7f9 fde8 	bl	8000496 <HAL_NVIC_EnableIRQ>

}
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	46bd      	mov	sp, r7
 80068ca:	b009      	add	sp, #36	; 0x24
 80068cc:	bd90      	pop	{r4, r7, pc}
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	40021000 	.word	0x40021000
 80068d4:	10210000 	.word	0x10210000
 80068d8:	50000800 	.word	0x50000800

080068dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80068e0:	46c0      	nop			; (mov r8, r8)
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <InitObjs>:
struct obj obj_startroomdial;
//Array of all the game objects
struct obj* game_objs[OBJECT_COUNT];


void InitObjs(){
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
	// Initialize the dial in the first room
	obj_startroomdial.token = LTKN_OBJ_STRTDIAL;
 80068ec:	4b0a      	ldr	r3, [pc, #40]	; (8006918 <InitObjs+0x30>)
 80068ee:	2220      	movs	r2, #32
 80068f0:	701a      	strb	r2, [r3, #0]
	obj_startroomdial.state = OBJ_UNTOUCHED;
 80068f2:	4b09      	ldr	r3, [pc, #36]	; (8006918 <InitObjs+0x30>)
 80068f4:	2201      	movs	r2, #1
 80068f6:	705a      	strb	r2, [r3, #1]
	obj_startroomdial.name = obj_startroomdial_name;
 80068f8:	4b07      	ldr	r3, [pc, #28]	; (8006918 <InitObjs+0x30>)
 80068fa:	4a08      	ldr	r2, [pc, #32]	; (800691c <InitObjs+0x34>)
 80068fc:	605a      	str	r2, [r3, #4]
	obj_startroomdial.seen_text = obj_startroomdial_seen;
 80068fe:	4b06      	ldr	r3, [pc, #24]	; (8006918 <InitObjs+0x30>)
 8006900:	4a07      	ldr	r2, [pc, #28]	; (8006920 <InitObjs+0x38>)
 8006902:	609a      	str	r2, [r3, #8]
	obj_startroomdial.examine_text = obj_startroomdial_examine;
 8006904:	4b04      	ldr	r3, [pc, #16]	; (8006918 <InitObjs+0x30>)
 8006906:	4a07      	ldr	r2, [pc, #28]	; (8006924 <InitObjs+0x3c>)
 8006908:	60da      	str	r2, [r3, #12]
	game_objs[0] = &obj_startroomdial;
 800690a:	4b07      	ldr	r3, [pc, #28]	; (8006928 <InitObjs+0x40>)
 800690c:	4a02      	ldr	r2, [pc, #8]	; (8006918 <InitObjs+0x30>)
 800690e:	601a      	str	r2, [r3, #0]
}
 8006910:	46c0      	nop			; (mov r8, r8)
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	200008c8 	.word	0x200008c8
 800691c:	08008b68 	.word	0x08008b68
 8006920:	08008b74 	.word	0x08008b74
 8006924:	08008b9c 	.word	0x08008b9c
 8006928:	200008d8 	.word	0x200008d8

0800692c <GetObjByToken>:

struct obj* GetObjByToken(uint8_t token){
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	0002      	movs	r2, r0
 8006934:	1dfb      	adds	r3, r7, #7
 8006936:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < OBJECT_COUNT; i++){
 8006938:	230f      	movs	r3, #15
 800693a:	18fb      	adds	r3, r7, r3
 800693c:	2200      	movs	r2, #0
 800693e:	701a      	strb	r2, [r3, #0]
 8006940:	e017      	b.n	8006972 <GetObjByToken+0x46>
		if(game_objs[i]->token == token){
 8006942:	230f      	movs	r3, #15
 8006944:	18fb      	adds	r3, r7, r3
 8006946:	781a      	ldrb	r2, [r3, #0]
 8006948:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <GetObjByToken+0x5c>)
 800694a:	0092      	lsls	r2, r2, #2
 800694c:	58d3      	ldr	r3, [r2, r3]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	1dfa      	adds	r2, r7, #7
 8006952:	7812      	ldrb	r2, [r2, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d106      	bne.n	8006966 <GetObjByToken+0x3a>
			return game_objs[i];
 8006958:	230f      	movs	r3, #15
 800695a:	18fb      	adds	r3, r7, r3
 800695c:	781a      	ldrb	r2, [r3, #0]
 800695e:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <GetObjByToken+0x5c>)
 8006960:	0092      	lsls	r2, r2, #2
 8006962:	58d3      	ldr	r3, [r2, r3]
 8006964:	e00b      	b.n	800697e <GetObjByToken+0x52>
	for(uint8_t i = 0; i < OBJECT_COUNT; i++){
 8006966:	210f      	movs	r1, #15
 8006968:	187b      	adds	r3, r7, r1
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	187b      	adds	r3, r7, r1
 800696e:	3201      	adds	r2, #1
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	230f      	movs	r3, #15
 8006974:	18fb      	adds	r3, r7, r3
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0e2      	beq.n	8006942 <GetObjByToken+0x16>
		}
	}
	return NULL;
 800697c:	2300      	movs	r3, #0
}
 800697e:	0018      	movs	r0, r3
 8006980:	46bd      	mov	sp, r7
 8006982:	b004      	add	sp, #16
 8006984:	bd80      	pop	{r7, pc}
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	200008d8 	.word	0x200008d8

0800698c <DeepSleep>:
#include "power.h"

void DeepSleep(){
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
	/* Pre sleep housekeeping */
	PrintToConsole("Sleep button pressed, Unplug from USB. Zzzzzz.....\0");
 8006990:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <DeepSleep+0x2c>)
 8006992:	0018      	movs	r0, r3
 8006994:	f000 fb56 	bl	8007044 <PrintToConsole>
	//USB transmission is interrupt based, wait 10 milliseconds for it to transfer before killing it
	HAL_Delay(10);
 8006998:	200a      	movs	r0, #10
 800699a:	f7f9 fca1 	bl	80002e0 <HAL_Delay>
	//In the future, shut off the LED matrix and LEDs here

	// Chip goes to sleep here, waits for interrupt
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE);
 800699e:	2102      	movs	r1, #2
 80069a0:	2001      	movs	r0, #1
 80069a2:	f7fb f8df 	bl	8001b64 <HAL_PWR_EnterSTOPMode>
	//Chip wakes up here

	/* Post wakeup housekeeping */
	SystemClock_Config();
 80069a6:	f7ff fe83 	bl	80066b0 <SystemClock_Config>
	stopState = 0;
 80069aa:	4b04      	ldr	r3, [pc, #16]	; (80069bc <DeepSleep+0x30>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
}
 80069b0:	46c0      	nop			; (mov r8, r8)
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	0800897c 	.word	0x0800897c
 80069bc:	200001f9 	.word	0x200001f9

080069c0 <InitRooms>:
//Room item lists
struct itm* rm_rfciphr2_itms[1];
//Room object lists
struct obj* rm_startroom_objs[1];

void InitRooms(){
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
	//Initialize the list of all the game rooms
	game_rooms[0] = &rm_startroom;
 80069c4:	4b47      	ldr	r3, [pc, #284]	; (8006ae4 <InitRooms+0x124>)
 80069c6:	4a48      	ldr	r2, [pc, #288]	; (8006ae8 <InitRooms+0x128>)
 80069c8:	601a      	str	r2, [r3, #0]
	game_rooms[1] = &rm_rfciphr1;
 80069ca:	4b46      	ldr	r3, [pc, #280]	; (8006ae4 <InitRooms+0x124>)
 80069cc:	4a47      	ldr	r2, [pc, #284]	; (8006aec <InitRooms+0x12c>)
 80069ce:	605a      	str	r2, [r3, #4]
	game_rooms[2] = &rm_rfciphr2;
 80069d0:	4b44      	ldr	r3, [pc, #272]	; (8006ae4 <InitRooms+0x124>)
 80069d2:	4a47      	ldr	r2, [pc, #284]	; (8006af0 <InitRooms+0x130>)
 80069d4:	609a      	str	r2, [r3, #8]

	//Init the start room
	rm_startroom.north_room = NULL;
 80069d6:	4b44      	ldr	r3, [pc, #272]	; (8006ae8 <InitRooms+0x128>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
	rm_startroom.east_room = NULL;
 80069dc:	4b42      	ldr	r3, [pc, #264]	; (8006ae8 <InitRooms+0x128>)
 80069de:	2200      	movs	r2, #0
 80069e0:	605a      	str	r2, [r3, #4]
	rm_startroom.south_room = NULL;
 80069e2:	4b41      	ldr	r3, [pc, #260]	; (8006ae8 <InitRooms+0x128>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	609a      	str	r2, [r3, #8]
	rm_startroom.west_room = NULL;
 80069e8:	4b3f      	ldr	r3, [pc, #252]	; (8006ae8 <InitRooms+0x128>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	60da      	str	r2, [r3, #12]
	rm_startroom.up_room = NULL;
 80069ee:	4b3e      	ldr	r3, [pc, #248]	; (8006ae8 <InitRooms+0x128>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	611a      	str	r2, [r3, #16]
	rm_startroom.down_room = NULL;
 80069f4:	4b3c      	ldr	r3, [pc, #240]	; (8006ae8 <InitRooms+0x128>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	615a      	str	r2, [r3, #20]
	rm_startroom.name = rm_name_startroom;
 80069fa:	4b3b      	ldr	r3, [pc, #236]	; (8006ae8 <InitRooms+0x128>)
 80069fc:	4a3d      	ldr	r2, [pc, #244]	; (8006af4 <InitRooms+0x134>)
 80069fe:	619a      	str	r2, [r3, #24]
	rm_startroom.flavortext = rm_flvr_startoom;
 8006a00:	4b39      	ldr	r3, [pc, #228]	; (8006ae8 <InitRooms+0x128>)
 8006a02:	4a3d      	ldr	r2, [pc, #244]	; (8006af8 <InitRooms+0x138>)
 8006a04:	61da      	str	r2, [r3, #28]
	rm_startroom.items = NULL;
 8006a06:	4b38      	ldr	r3, [pc, #224]	; (8006ae8 <InitRooms+0x128>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	621a      	str	r2, [r3, #32]
	rm_startroom.objects = rm_startroom_objs;
 8006a0c:	4b36      	ldr	r3, [pc, #216]	; (8006ae8 <InitRooms+0x128>)
 8006a0e:	4a3b      	ldr	r2, [pc, #236]	; (8006afc <InitRooms+0x13c>)
 8006a10:	625a      	str	r2, [r3, #36]	; 0x24
	rm_startroom.item_count = 0;
 8006a12:	4b35      	ldr	r3, [pc, #212]	; (8006ae8 <InitRooms+0x128>)
 8006a14:	2228      	movs	r2, #40	; 0x28
 8006a16:	2100      	movs	r1, #0
 8006a18:	5499      	strb	r1, [r3, r2]
	rm_startroom.object_count = 1;
 8006a1a:	4b33      	ldr	r3, [pc, #204]	; (8006ae8 <InitRooms+0x128>)
 8006a1c:	2229      	movs	r2, #41	; 0x29
 8006a1e:	2101      	movs	r1, #1
 8006a20:	5499      	strb	r1, [r3, r2]
	rm_startroom.token = RTKN_STARTROOM;
 8006a22:	4b31      	ldr	r3, [pc, #196]	; (8006ae8 <InitRooms+0x128>)
 8006a24:	222a      	movs	r2, #42	; 0x2a
 8006a26:	2101      	movs	r1, #1
 8006a28:	5499      	strb	r1, [r3, r2]
	rm_startroom_objs[0] = GetObjByToken(LTKN_OBJ_STRTDIAL);
 8006a2a:	2020      	movs	r0, #32
 8006a2c:	f7ff ff7e 	bl	800692c <GetObjByToken>
 8006a30:	0002      	movs	r2, r0
 8006a32:	4b32      	ldr	r3, [pc, #200]	; (8006afc <InitRooms+0x13c>)
 8006a34:	601a      	str	r2, [r3, #0]

	//Init the Rail Fence Cipher Room1
	rm_rfciphr1.north_room = NULL;
 8006a36:	4b2d      	ldr	r3, [pc, #180]	; (8006aec <InitRooms+0x12c>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]
	rm_rfciphr1.east_room = &rm_rfciphr2;
 8006a3c:	4b2b      	ldr	r3, [pc, #172]	; (8006aec <InitRooms+0x12c>)
 8006a3e:	4a2c      	ldr	r2, [pc, #176]	; (8006af0 <InitRooms+0x130>)
 8006a40:	605a      	str	r2, [r3, #4]
	rm_rfciphr1.south_room = &rm_startroom;
 8006a42:	4b2a      	ldr	r3, [pc, #168]	; (8006aec <InitRooms+0x12c>)
 8006a44:	4a28      	ldr	r2, [pc, #160]	; (8006ae8 <InitRooms+0x128>)
 8006a46:	609a      	str	r2, [r3, #8]
	rm_rfciphr1.west_room = NULL;
 8006a48:	4b28      	ldr	r3, [pc, #160]	; (8006aec <InitRooms+0x12c>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	60da      	str	r2, [r3, #12]
	rm_rfciphr1.up_room = NULL;
 8006a4e:	4b27      	ldr	r3, [pc, #156]	; (8006aec <InitRooms+0x12c>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	611a      	str	r2, [r3, #16]
	rm_rfciphr1.down_room = NULL;
 8006a54:	4b25      	ldr	r3, [pc, #148]	; (8006aec <InitRooms+0x12c>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	615a      	str	r2, [r3, #20]
	rm_rfciphr1.name = rm_name_rfciphr1;
 8006a5a:	4b24      	ldr	r3, [pc, #144]	; (8006aec <InitRooms+0x12c>)
 8006a5c:	4a28      	ldr	r2, [pc, #160]	; (8006b00 <InitRooms+0x140>)
 8006a5e:	619a      	str	r2, [r3, #24]
	rm_rfciphr1.flavortext = rm_flvr_rfciphr1;
 8006a60:	4b22      	ldr	r3, [pc, #136]	; (8006aec <InitRooms+0x12c>)
 8006a62:	4a28      	ldr	r2, [pc, #160]	; (8006b04 <InitRooms+0x144>)
 8006a64:	61da      	str	r2, [r3, #28]
	rm_rfciphr1.items = NULL;
 8006a66:	4b21      	ldr	r3, [pc, #132]	; (8006aec <InitRooms+0x12c>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	621a      	str	r2, [r3, #32]
	rm_rfciphr1.objects = NULL;
 8006a6c:	4b1f      	ldr	r3, [pc, #124]	; (8006aec <InitRooms+0x12c>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	625a      	str	r2, [r3, #36]	; 0x24
	rm_rfciphr1.item_count = 0;
 8006a72:	4b1e      	ldr	r3, [pc, #120]	; (8006aec <InitRooms+0x12c>)
 8006a74:	2228      	movs	r2, #40	; 0x28
 8006a76:	2100      	movs	r1, #0
 8006a78:	5499      	strb	r1, [r3, r2]
	rm_rfciphr1.object_count = 0;
 8006a7a:	4b1c      	ldr	r3, [pc, #112]	; (8006aec <InitRooms+0x12c>)
 8006a7c:	2229      	movs	r2, #41	; 0x29
 8006a7e:	2100      	movs	r1, #0
 8006a80:	5499      	strb	r1, [r3, r2]
	rm_rfciphr1.token = RTKN_RFCIPHR1;
 8006a82:	4b1a      	ldr	r3, [pc, #104]	; (8006aec <InitRooms+0x12c>)
 8006a84:	222a      	movs	r2, #42	; 0x2a
 8006a86:	2102      	movs	r1, #2
 8006a88:	5499      	strb	r1, [r3, r2]

	//Init the Rail Fence Cipher Room2
	rm_rfciphr2.north_room = NULL;
 8006a8a:	4b19      	ldr	r3, [pc, #100]	; (8006af0 <InitRooms+0x130>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]
	rm_rfciphr2.east_room = NULL;
 8006a90:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <InitRooms+0x130>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	605a      	str	r2, [r3, #4]
	rm_rfciphr2.south_room = NULL;
 8006a96:	4b16      	ldr	r3, [pc, #88]	; (8006af0 <InitRooms+0x130>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	609a      	str	r2, [r3, #8]
	rm_rfciphr2.west_room = &rm_rfciphr1;
 8006a9c:	4b14      	ldr	r3, [pc, #80]	; (8006af0 <InitRooms+0x130>)
 8006a9e:	4a13      	ldr	r2, [pc, #76]	; (8006aec <InitRooms+0x12c>)
 8006aa0:	60da      	str	r2, [r3, #12]
	rm_rfciphr2.up_room = NULL;
 8006aa2:	4b13      	ldr	r3, [pc, #76]	; (8006af0 <InitRooms+0x130>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	611a      	str	r2, [r3, #16]
	rm_rfciphr2.down_room = NULL;
 8006aa8:	4b11      	ldr	r3, [pc, #68]	; (8006af0 <InitRooms+0x130>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	615a      	str	r2, [r3, #20]
	rm_rfciphr2.name = rm_name_rfciphr2;
 8006aae:	4b10      	ldr	r3, [pc, #64]	; (8006af0 <InitRooms+0x130>)
 8006ab0:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <InitRooms+0x148>)
 8006ab2:	619a      	str	r2, [r3, #24]
	rm_rfciphr2.flavortext = rm_flvr_rfciphr2;
 8006ab4:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <InitRooms+0x130>)
 8006ab6:	4a15      	ldr	r2, [pc, #84]	; (8006b0c <InitRooms+0x14c>)
 8006ab8:	61da      	str	r2, [r3, #28]
	rm_rfciphr2.items = NULL;
 8006aba:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <InitRooms+0x130>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	621a      	str	r2, [r3, #32]
	rm_rfciphr2.objects = NULL;
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <InitRooms+0x130>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	625a      	str	r2, [r3, #36]	; 0x24
	rm_rfciphr2.item_count = 0;
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <InitRooms+0x130>)
 8006ac8:	2228      	movs	r2, #40	; 0x28
 8006aca:	2100      	movs	r1, #0
 8006acc:	5499      	strb	r1, [r3, r2]
	rm_rfciphr2.object_count = 0;
 8006ace:	4b08      	ldr	r3, [pc, #32]	; (8006af0 <InitRooms+0x130>)
 8006ad0:	2229      	movs	r2, #41	; 0x29
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	5499      	strb	r1, [r3, r2]
	rm_rfciphr2.token = RTKN_RFCIPHR2;
 8006ad6:	4b06      	ldr	r3, [pc, #24]	; (8006af0 <InitRooms+0x130>)
 8006ad8:	222a      	movs	r2, #42	; 0x2a
 8006ada:	2103      	movs	r1, #3
 8006adc:	5499      	strb	r1, [r3, r2]

}
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	200008dc 	.word	0x200008dc
 8006ae8:	20000924 	.word	0x20000924
 8006aec:	200008f8 	.word	0x200008f8
 8006af0:	20000958 	.word	0x20000958
 8006af4:	08008bc8 	.word	0x08008bc8
 8006af8:	08008bf4 	.word	0x08008bf4
 8006afc:	20000954 	.word	0x20000954
 8006b00:	08008bd4 	.word	0x08008bd4
 8006b04:	08008c78 	.word	0x08008c78
 8006b08:	08008be4 	.word	0x08008be4
 8006b0c:	08008d14 	.word	0x08008d14

08006b10 <GetRoomByToken>:

struct room* GetRoomByToken(uint8_t token){
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	0002      	movs	r2, r0
 8006b18:	1dfb      	adds	r3, r7, #7
 8006b1a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < ROOM_COUNT; i++){
 8006b1c:	230f      	movs	r3, #15
 8006b1e:	18fb      	adds	r3, r7, r3
 8006b20:	2200      	movs	r2, #0
 8006b22:	701a      	strb	r2, [r3, #0]
 8006b24:	e018      	b.n	8006b58 <GetRoomByToken+0x48>
		if(game_rooms[i]->token == token){
 8006b26:	230f      	movs	r3, #15
 8006b28:	18fb      	adds	r3, r7, r3
 8006b2a:	781a      	ldrb	r2, [r3, #0]
 8006b2c:	4b0f      	ldr	r3, [pc, #60]	; (8006b6c <GetRoomByToken+0x5c>)
 8006b2e:	0092      	lsls	r2, r2, #2
 8006b30:	58d3      	ldr	r3, [r2, r3]
 8006b32:	222a      	movs	r2, #42	; 0x2a
 8006b34:	5c9b      	ldrb	r3, [r3, r2]
 8006b36:	1dfa      	adds	r2, r7, #7
 8006b38:	7812      	ldrb	r2, [r2, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d106      	bne.n	8006b4c <GetRoomByToken+0x3c>
			return game_rooms[i];
 8006b3e:	230f      	movs	r3, #15
 8006b40:	18fb      	adds	r3, r7, r3
 8006b42:	781a      	ldrb	r2, [r3, #0]
 8006b44:	4b09      	ldr	r3, [pc, #36]	; (8006b6c <GetRoomByToken+0x5c>)
 8006b46:	0092      	lsls	r2, r2, #2
 8006b48:	58d3      	ldr	r3, [r2, r3]
 8006b4a:	e00b      	b.n	8006b64 <GetRoomByToken+0x54>
	for(uint8_t i = 0; i < ROOM_COUNT; i++){
 8006b4c:	210f      	movs	r1, #15
 8006b4e:	187b      	adds	r3, r7, r1
 8006b50:	781a      	ldrb	r2, [r3, #0]
 8006b52:	187b      	adds	r3, r7, r1
 8006b54:	3201      	adds	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	230f      	movs	r3, #15
 8006b5a:	18fb      	adds	r3, r7, r3
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b06      	cmp	r3, #6
 8006b60:	d9e1      	bls.n	8006b26 <GetRoomByToken+0x16>
		}
	}
	return NULL;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	0018      	movs	r0, r3
 8006b66:	46bd      	mov	sp, r7
 8006b68:	b004      	add	sp, #16
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	200008dc 	.word	0x200008dc

08006b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b74:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <HAL_MspInit+0x24>)
 8006b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b78:	4b06      	ldr	r3, [pc, #24]	; (8006b94 <HAL_MspInit+0x24>)
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b80:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <HAL_MspInit+0x24>)
 8006b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b84:	4b03      	ldr	r3, [pc, #12]	; (8006b94 <HAL_MspInit+0x24>)
 8006b86:	2180      	movs	r1, #128	; 0x80
 8006b88:	0549      	lsls	r1, r1, #21
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	40021000 	.word	0x40021000

08006b98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ba0:	230c      	movs	r3, #12
 8006ba2:	18fb      	adds	r3, r7, r3
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	2314      	movs	r3, #20
 8006ba8:	001a      	movs	r2, r3
 8006baa:	2100      	movs	r1, #0
 8006bac:	f000 ffbf 	bl	8007b2e <memset>
  if(hi2c->Instance==I2C1)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a18      	ldr	r2, [pc, #96]	; (8006c18 <HAL_I2C_MspInit+0x80>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d12a      	bne.n	8006c10 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bba:	4b18      	ldr	r3, [pc, #96]	; (8006c1c <HAL_I2C_MspInit+0x84>)
 8006bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbe:	4b17      	ldr	r3, [pc, #92]	; (8006c1c <HAL_I2C_MspInit+0x84>)
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006bc6:	4b15      	ldr	r3, [pc, #84]	; (8006c1c <HAL_I2C_MspInit+0x84>)
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bca:	2201      	movs	r2, #1
 8006bcc:	4013      	ands	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006bd2:	210c      	movs	r1, #12
 8006bd4:	187b      	adds	r3, r7, r1
 8006bd6:	22c0      	movs	r2, #192	; 0xc0
 8006bd8:	00d2      	lsls	r2, r2, #3
 8006bda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006bdc:	187b      	adds	r3, r7, r1
 8006bde:	2212      	movs	r2, #18
 8006be0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006be2:	187b      	adds	r3, r7, r1
 8006be4:	2201      	movs	r2, #1
 8006be6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006be8:	187b      	adds	r3, r7, r1
 8006bea:	2203      	movs	r2, #3
 8006bec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8006bee:	187b      	adds	r3, r7, r1
 8006bf0:	2206      	movs	r2, #6
 8006bf2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bf4:	187a      	adds	r2, r7, r1
 8006bf6:	23a0      	movs	r3, #160	; 0xa0
 8006bf8:	05db      	lsls	r3, r3, #23
 8006bfa:	0011      	movs	r1, r2
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f7f9 fc67 	bl	80004d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c02:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <HAL_I2C_MspInit+0x84>)
 8006c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <HAL_I2C_MspInit+0x84>)
 8006c08:	2180      	movs	r1, #128	; 0x80
 8006c0a:	0389      	lsls	r1, r1, #14
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006c10:	46c0      	nop			; (mov r8, r8)
 8006c12:	46bd      	mov	sp, r7
 8006c14:	b008      	add	sp, #32
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	40005400 	.word	0x40005400
 8006c1c:	40021000 	.word	0x40021000

08006c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006c24:	46c0      	nop			; (mov r8, r8)
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8006c2e:	23a0      	movs	r3, #160	; 0xa0
 8006c30:	05db      	lsls	r3, r3, #23
 8006c32:	2120      	movs	r1, #32
 8006c34:	0018      	movs	r0, r3
 8006c36:	f7f9 fde6 	bl	8000806 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8006c3a:	23fa      	movs	r3, #250	; 0xfa
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f7f9 fb4e 	bl	80002e0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8006c44:	e7f3      	b.n	8006c2e <HardFault_Handler+0x4>

08006c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006c4a:	46c0      	nop			; (mov r8, r8)
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006c54:	46c0      	nop			; (mov r8, r8)
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006c5e:	f7f9 fb29 	bl	80002b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	stopState = 1;
 8006c6c:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <EXTI4_15_IRQHandler+0x1c>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006c72:	2380      	movs	r3, #128	; 0x80
 8006c74:	019b      	lsls	r3, r3, #6
 8006c76:	0018      	movs	r0, r3
 8006c78:	f7f9 fdd8 	bl	800082c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8006c7c:	46c0      	nop			; (mov r8, r8)
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	46c0      	nop			; (mov r8, r8)
 8006c84:	200001f9 	.word	0x200001f9

08006c88 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006c8c:	4b03      	ldr	r3, [pc, #12]	; (8006c9c <USB_IRQHandler+0x14>)
 8006c8e:	0018      	movs	r0, r3
 8006c90:	f7fa f83a 	bl	8000d08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8006c94:	46c0      	nop			; (mov r8, r8)
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	20000d24 	.word	0x20000d24

08006ca0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006ca8:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <_sbrk+0x50>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d102      	bne.n	8006cb6 <_sbrk+0x16>
		heap_end = &end;
 8006cb0:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <_sbrk+0x50>)
 8006cb2:	4a10      	ldr	r2, [pc, #64]	; (8006cf4 <_sbrk+0x54>)
 8006cb4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006cb6:	4b0e      	ldr	r3, [pc, #56]	; (8006cf0 <_sbrk+0x50>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006cbc:	4b0c      	ldr	r3, [pc, #48]	; (8006cf0 <_sbrk+0x50>)
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	18d3      	adds	r3, r2, r3
 8006cc4:	466a      	mov	r2, sp
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d907      	bls.n	8006cda <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006cca:	f000 fefd 	bl	8007ac8 <__errno>
 8006cce:	0003      	movs	r3, r0
 8006cd0:	220c      	movs	r2, #12
 8006cd2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	425b      	negs	r3, r3
 8006cd8:	e006      	b.n	8006ce8 <_sbrk+0x48>
	}

	heap_end += incr;
 8006cda:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <_sbrk+0x50>)
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	18d2      	adds	r2, r2, r3
 8006ce2:	4b03      	ldr	r3, [pc, #12]	; (8006cf0 <_sbrk+0x50>)
 8006ce4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
}
 8006ce8:	0018      	movs	r0, r3
 8006cea:	46bd      	mov	sp, r7
 8006cec:	b004      	add	sp, #16
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	200001fc 	.word	0x200001fc
 8006cf4:	200011a0 	.word	0x200011a0

08006cf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8006cfc:	4b17      	ldr	r3, [pc, #92]	; (8006d5c <SystemInit+0x64>)
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	4b16      	ldr	r3, [pc, #88]	; (8006d5c <SystemInit+0x64>)
 8006d02:	2180      	movs	r1, #128	; 0x80
 8006d04:	0049      	lsls	r1, r1, #1
 8006d06:	430a      	orrs	r2, r1
 8006d08:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8006d0a:	4b14      	ldr	r3, [pc, #80]	; (8006d5c <SystemInit+0x64>)
 8006d0c:	68da      	ldr	r2, [r3, #12]
 8006d0e:	4b13      	ldr	r3, [pc, #76]	; (8006d5c <SystemInit+0x64>)
 8006d10:	4913      	ldr	r1, [pc, #76]	; (8006d60 <SystemInit+0x68>)
 8006d12:	400a      	ands	r2, r1
 8006d14:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8006d16:	4b11      	ldr	r3, [pc, #68]	; (8006d5c <SystemInit+0x64>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	4b10      	ldr	r3, [pc, #64]	; (8006d5c <SystemInit+0x64>)
 8006d1c:	4911      	ldr	r1, [pc, #68]	; (8006d64 <SystemInit+0x6c>)
 8006d1e:	400a      	ands	r2, r1
 8006d20:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006d22:	4b0e      	ldr	r3, [pc, #56]	; (8006d5c <SystemInit+0x64>)
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	4b0d      	ldr	r3, [pc, #52]	; (8006d5c <SystemInit+0x64>)
 8006d28:	2101      	movs	r1, #1
 8006d2a:	438a      	bics	r2, r1
 8006d2c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <SystemInit+0x64>)
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <SystemInit+0x64>)
 8006d34:	490c      	ldr	r1, [pc, #48]	; (8006d68 <SystemInit+0x70>)
 8006d36:	400a      	ands	r2, r1
 8006d38:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8006d3a:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <SystemInit+0x64>)
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <SystemInit+0x64>)
 8006d40:	490a      	ldr	r1, [pc, #40]	; (8006d6c <SystemInit+0x74>)
 8006d42:	400a      	ands	r2, r1
 8006d44:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006d46:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <SystemInit+0x64>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006d4c:	4b08      	ldr	r3, [pc, #32]	; (8006d70 <SystemInit+0x78>)
 8006d4e:	2280      	movs	r2, #128	; 0x80
 8006d50:	0512      	lsls	r2, r2, #20
 8006d52:	609a      	str	r2, [r3, #8]
#endif
}
 8006d54:	46c0      	nop			; (mov r8, r8)
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	40021000 	.word	0x40021000
 8006d60:	88ff400c 	.word	0x88ff400c
 8006d64:	fef6fff6 	.word	0xfef6fff6
 8006d68:	fffbffff 	.word	0xfffbffff
 8006d6c:	ff02ffff 	.word	0xff02ffff
 8006d70:	e000ed00 	.word	0xe000ed00

08006d74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d78:	4914      	ldr	r1, [pc, #80]	; (8006dcc <MX_USB_DEVICE_Init+0x58>)
 8006d7a:	4b15      	ldr	r3, [pc, #84]	; (8006dd0 <MX_USB_DEVICE_Init+0x5c>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f7fd fa75 	bl	800426e <USBD_Init>
 8006d84:	1e03      	subs	r3, r0, #0
 8006d86:	d001      	beq.n	8006d8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d88:	f7ff fda8 	bl	80068dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d8c:	4a11      	ldr	r2, [pc, #68]	; (8006dd4 <MX_USB_DEVICE_Init+0x60>)
 8006d8e:	4b10      	ldr	r3, [pc, #64]	; (8006dd0 <MX_USB_DEVICE_Init+0x5c>)
 8006d90:	0011      	movs	r1, r2
 8006d92:	0018      	movs	r0, r3
 8006d94:	f7fd fa9c 	bl	80042d0 <USBD_RegisterClass>
 8006d98:	1e03      	subs	r3, r0, #0
 8006d9a:	d001      	beq.n	8006da0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8006d9c:	f7ff fd9e 	bl	80068dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006da0:	4a0d      	ldr	r2, [pc, #52]	; (8006dd8 <MX_USB_DEVICE_Init+0x64>)
 8006da2:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <MX_USB_DEVICE_Init+0x5c>)
 8006da4:	0011      	movs	r1, r2
 8006da6:	0018      	movs	r0, r3
 8006da8:	f7fd f9b0 	bl	800410c <USBD_CDC_RegisterInterface>
 8006dac:	1e03      	subs	r3, r0, #0
 8006dae:	d001      	beq.n	8006db4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8006db0:	f7ff fd94 	bl	80068dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006db4:	4b06      	ldr	r3, [pc, #24]	; (8006dd0 <MX_USB_DEVICE_Init+0x5c>)
 8006db6:	0018      	movs	r0, r3
 8006db8:	f7fd faab 	bl	8004312 <USBD_Start>
 8006dbc:	1e03      	subs	r3, r0, #0
 8006dbe:	d001      	beq.n	8006dc4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8006dc0:	f7ff fd8c 	bl	80068dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006dc4:	46c0      	nop			; (mov r8, r8)
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	46c0      	nop			; (mov r8, r8)
 8006dcc:	20000128 	.word	0x20000128
 8006dd0:	20000984 	.word	0x20000984
 8006dd4:	2000000c 	.word	0x2000000c
 8006dd8:	20000118 	.word	0x20000118

08006ddc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006de0:	490b      	ldr	r1, [pc, #44]	; (8006e10 <CDC_Init_FS+0x34>)
 8006de2:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <CDC_Init_FS+0x38>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	0018      	movs	r0, r3
 8006de8:	f7fd f9ac 	bl	8004144 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006dec:	4a0a      	ldr	r2, [pc, #40]	; (8006e18 <CDC_Init_FS+0x3c>)
 8006dee:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <CDC_Init_FS+0x38>)
 8006df0:	0011      	movs	r1, r2
 8006df2:	0018      	movs	r0, r3
 8006df4:	f7fd f9c2 	bl	800417c <USBD_CDC_SetRxBuffer>
  memset(UserData, '\0', USER_DATA_SIZE);
 8006df8:	2380      	movs	r3, #128	; 0x80
 8006dfa:	005a      	lsls	r2, r3, #1
 8006dfc:	4b07      	ldr	r3, [pc, #28]	; (8006e1c <CDC_Init_FS+0x40>)
 8006dfe:	2100      	movs	r1, #0
 8006e00:	0018      	movs	r0, r3
 8006e02:	f000 fe94 	bl	8007b2e <memset>
  return (USBD_OK);
 8006e06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e08:	0018      	movs	r0, r3
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	46c0      	nop			; (mov r8, r8)
 8006e10:	20000648 	.word	0x20000648
 8006e14:	20000984 	.word	0x20000984
 8006e18:	20000c20 	.word	0x20000c20
 8006e1c:	20000c24 	.word	0x20000c24

08006e20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e26:	0018      	movs	r0, r3
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6039      	str	r1, [r7, #0]
 8006e34:	0011      	movs	r1, r2
 8006e36:	1dfb      	adds	r3, r7, #7
 8006e38:	1c02      	adds	r2, r0, #0
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	1d3b      	adds	r3, r7, #4
 8006e3e:	1c0a      	adds	r2, r1, #0
 8006e40:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e42:	1dfb      	adds	r3, r7, #7
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	2b23      	cmp	r3, #35	; 0x23
 8006e48:	d804      	bhi.n	8006e54 <CDC_Control_FS+0x28>
 8006e4a:	009a      	lsls	r2, r3, #2
 8006e4c:	4b04      	ldr	r3, [pc, #16]	; (8006e60 <CDC_Control_FS+0x34>)
 8006e4e:	18d3      	adds	r3, r2, r3
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006e54:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8006e56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006e58:	0018      	movs	r0, r3
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	b002      	add	sp, #8
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	08008dc0 	.word	0x08008dc0

08006e64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	4b3d      	ldr	r3, [pc, #244]	; (8006f68 <CDC_Receive_FS+0x104>)
 8006e72:	0011      	movs	r1, r2
 8006e74:	0018      	movs	r0, r3
 8006e76:	f7fd f981 	bl	800417c <USBD_CDC_SetRxBuffer>
  if(UserRxBufferFS[0] == '\r'){
 8006e7a:	4b3c      	ldr	r3, [pc, #240]	; (8006f6c <CDC_Receive_FS+0x108>)
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b0d      	cmp	r3, #13
 8006e80:	d114      	bne.n	8006eac <CDC_Receive_FS+0x48>
	  if(LocalEcho){
 8006e82:	4b3b      	ldr	r3, [pc, #236]	; (8006f70 <CDC_Receive_FS+0x10c>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00b      	beq.n	8006ea4 <CDC_Receive_FS+0x40>
		  uint8_t tmp[] = "\r\n";
 8006e8c:	200c      	movs	r0, #12
 8006e8e:	183b      	adds	r3, r7, r0
 8006e90:	4a38      	ldr	r2, [pc, #224]	; (8006f74 <CDC_Receive_FS+0x110>)
 8006e92:	8811      	ldrh	r1, [r2, #0]
 8006e94:	8019      	strh	r1, [r3, #0]
 8006e96:	7892      	ldrb	r2, [r2, #2]
 8006e98:	709a      	strb	r2, [r3, #2]
		  CDC_Transmit_FS(tmp, 2);
 8006e9a:	183b      	adds	r3, r7, r0
 8006e9c:	2102      	movs	r1, #2
 8006e9e:	0018      	movs	r0, r3
 8006ea0:	f000 f872 	bl	8006f88 <CDC_Transmit_FS>
	  }
	  UserDataReady = 1;
 8006ea4:	4b34      	ldr	r3, [pc, #208]	; (8006f78 <CDC_Receive_FS+0x114>)
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	e053      	b.n	8006f54 <CDC_Receive_FS+0xf0>
  }
  else if(UserRxBufferFS[0] == 0x7F){
 8006eac:	4b2f      	ldr	r3, [pc, #188]	; (8006f6c <CDC_Receive_FS+0x108>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2b7f      	cmp	r3, #127	; 0x7f
 8006eb2:	d121      	bne.n	8006ef8 <CDC_Receive_FS+0x94>
	  if(LocalEcho){
 8006eb4:	4b2e      	ldr	r3, [pc, #184]	; (8006f70 <CDC_Receive_FS+0x10c>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00b      	beq.n	8006ed6 <CDC_Receive_FS+0x72>
		  uint8_t tmp[] = {0x08, 0x20, 0x08};
 8006ebe:	2008      	movs	r0, #8
 8006ec0:	183b      	adds	r3, r7, r0
 8006ec2:	4a2e      	ldr	r2, [pc, #184]	; (8006f7c <CDC_Receive_FS+0x118>)
 8006ec4:	8811      	ldrh	r1, [r2, #0]
 8006ec6:	8019      	strh	r1, [r3, #0]
 8006ec8:	7892      	ldrb	r2, [r2, #2]
 8006eca:	709a      	strb	r2, [r3, #2]
		  CDC_Transmit_FS(tmp, 3);
 8006ecc:	183b      	adds	r3, r7, r0
 8006ece:	2103      	movs	r1, #3
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	f000 f859 	bl	8006f88 <CDC_Transmit_FS>
	  }
	  if(UserDataIndex > 0){
 8006ed6:	4b2a      	ldr	r3, [pc, #168]	; (8006f80 <CDC_Receive_FS+0x11c>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d03a      	beq.n	8006f54 <CDC_Receive_FS+0xf0>
		  UserDataIndex--;
 8006ede:	4b28      	ldr	r3, [pc, #160]	; (8006f80 <CDC_Receive_FS+0x11c>)
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	4b26      	ldr	r3, [pc, #152]	; (8006f80 <CDC_Receive_FS+0x11c>)
 8006ee8:	701a      	strb	r2, [r3, #0]
		  UserData[UserDataIndex] = '\0';
 8006eea:	4b25      	ldr	r3, [pc, #148]	; (8006f80 <CDC_Receive_FS+0x11c>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	001a      	movs	r2, r3
 8006ef0:	4b24      	ldr	r3, [pc, #144]	; (8006f84 <CDC_Receive_FS+0x120>)
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	5499      	strb	r1, [r3, r2]
 8006ef6:	e02d      	b.n	8006f54 <CDC_Receive_FS+0xf0>
	  }
  }
  else if(UserRxBufferFS[0] >= 0x20 && UserRxBufferFS[0] <= 0x7E){
 8006ef8:	4b1c      	ldr	r3, [pc, #112]	; (8006f6c <CDC_Receive_FS+0x108>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	2b1f      	cmp	r3, #31
 8006efe:	d929      	bls.n	8006f54 <CDC_Receive_FS+0xf0>
 8006f00:	4b1a      	ldr	r3, [pc, #104]	; (8006f6c <CDC_Receive_FS+0x108>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b7e      	cmp	r3, #126	; 0x7e
 8006f06:	d825      	bhi.n	8006f54 <CDC_Receive_FS+0xf0>
	  if(LocalEcho){
 8006f08:	4b19      	ldr	r3, [pc, #100]	; (8006f70 <CDC_Receive_FS+0x10c>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d004      	beq.n	8006f1c <CDC_Receive_FS+0xb8>
		  CDC_Transmit_FS(&UserRxBufferFS[0], 1);
 8006f12:	4b16      	ldr	r3, [pc, #88]	; (8006f6c <CDC_Receive_FS+0x108>)
 8006f14:	2101      	movs	r1, #1
 8006f16:	0018      	movs	r0, r3
 8006f18:	f000 f836 	bl	8006f88 <CDC_Transmit_FS>
	  }
	  UserData[UserDataIndex] = UserRxBufferFS[0];
 8006f1c:	4b18      	ldr	r3, [pc, #96]	; (8006f80 <CDC_Receive_FS+0x11c>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	001a      	movs	r2, r3
 8006f22:	4b12      	ldr	r3, [pc, #72]	; (8006f6c <CDC_Receive_FS+0x108>)
 8006f24:	7819      	ldrb	r1, [r3, #0]
 8006f26:	4b17      	ldr	r3, [pc, #92]	; (8006f84 <CDC_Receive_FS+0x120>)
 8006f28:	5499      	strb	r1, [r3, r2]
	  if(UserDataIndex < 255){
 8006f2a:	4b15      	ldr	r3, [pc, #84]	; (8006f80 <CDC_Receive_FS+0x11c>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2bff      	cmp	r3, #255	; 0xff
 8006f30:	d006      	beq.n	8006f40 <CDC_Receive_FS+0xdc>
		  UserDataIndex++;
 8006f32:	4b13      	ldr	r3, [pc, #76]	; (8006f80 <CDC_Receive_FS+0x11c>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	3301      	adds	r3, #1
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	4b11      	ldr	r3, [pc, #68]	; (8006f80 <CDC_Receive_FS+0x11c>)
 8006f3c:	701a      	strb	r2, [r3, #0]
 8006f3e:	e009      	b.n	8006f54 <CDC_Receive_FS+0xf0>
	  }
	  else{
		  memset(UserData, '\0', USER_DATA_SIZE);
 8006f40:	2380      	movs	r3, #128	; 0x80
 8006f42:	005a      	lsls	r2, r3, #1
 8006f44:	4b0f      	ldr	r3, [pc, #60]	; (8006f84 <CDC_Receive_FS+0x120>)
 8006f46:	2100      	movs	r1, #0
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f000 fdf0 	bl	8007b2e <memset>
		  UserDataIndex = 0;
 8006f4e:	4b0c      	ldr	r3, [pc, #48]	; (8006f80 <CDC_Receive_FS+0x11c>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	701a      	strb	r2, [r3, #0]
	  }
  }
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f54:	4b04      	ldr	r3, [pc, #16]	; (8006f68 <CDC_Receive_FS+0x104>)
 8006f56:	0018      	movs	r0, r3
 8006f58:	f7fd f95b 	bl	8004212 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f5e:	0018      	movs	r0, r3
 8006f60:	46bd      	mov	sp, r7
 8006f62:	b004      	add	sp, #16
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	46c0      	nop			; (mov r8, r8)
 8006f68:	20000984 	.word	0x20000984
 8006f6c:	20000c20 	.word	0x20000c20
 8006f70:	20000114 	.word	0x20000114
 8006f74:	080089b0 	.word	0x080089b0
 8006f78:	20000200 	.word	0x20000200
 8006f7c:	080089b4 	.word	0x080089b4
 8006f80:	20000201 	.word	0x20000201
 8006f84:	20000c24 	.word	0x20000c24

08006f88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f88:	b5b0      	push	{r4, r5, r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	000a      	movs	r2, r1
 8006f92:	1cbb      	adds	r3, r7, #2
 8006f94:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8006f96:	230f      	movs	r3, #15
 8006f98:	18fb      	adds	r3, r7, r3
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f9e:	4a11      	ldr	r2, [pc, #68]	; (8006fe4 <CDC_Transmit_FS+0x5c>)
 8006fa0:	23a4      	movs	r3, #164	; 0xa4
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	58d3      	ldr	r3, [r2, r3]
 8006fa6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	2385      	movs	r3, #133	; 0x85
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	58d3      	ldr	r3, [r2, r3]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e010      	b.n	8006fda <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006fb8:	1cbb      	adds	r3, r7, #2
 8006fba:	881a      	ldrh	r2, [r3, #0]
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	4b09      	ldr	r3, [pc, #36]	; (8006fe4 <CDC_Transmit_FS+0x5c>)
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f7fd f8bf 	bl	8004144 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006fc6:	250f      	movs	r5, #15
 8006fc8:	197c      	adds	r4, r7, r5
 8006fca:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <CDC_Transmit_FS+0x5c>)
 8006fcc:	0018      	movs	r0, r3
 8006fce:	f7fd f8e9 	bl	80041a4 <USBD_CDC_TransmitPacket>
 8006fd2:	0003      	movs	r3, r0
 8006fd4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8006fd6:	197b      	adds	r3, r7, r5
 8006fd8:	781b      	ldrb	r3, [r3, #0]
}
 8006fda:	0018      	movs	r0, r3
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	b004      	add	sp, #16
 8006fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	20000984 	.word	0x20000984

08006fe8 <GetUserDataBuf>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
char* GetUserDataBuf(){
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
	return UserData;
 8006fec:	4b01      	ldr	r3, [pc, #4]	; (8006ff4 <GetUserDataBuf+0xc>)
}
 8006fee:	0018      	movs	r0, r3
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20000c24 	.word	0x20000c24

08006ff8 <ClearUserDataBuf>:

void ClearUserDataBuf(){
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	af00      	add	r7, sp, #0
	memset(UserData, '\0', USER_DATA_SIZE);
 8006ffc:	2380      	movs	r3, #128	; 0x80
 8006ffe:	005a      	lsls	r2, r3, #1
 8007000:	4b06      	ldr	r3, [pc, #24]	; (800701c <ClearUserDataBuf+0x24>)
 8007002:	2100      	movs	r1, #0
 8007004:	0018      	movs	r0, r3
 8007006:	f000 fd92 	bl	8007b2e <memset>
	UserDataIndex = 0;
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <ClearUserDataBuf+0x28>)
 800700c:	2200      	movs	r2, #0
 800700e:	701a      	strb	r2, [r3, #0]
	UserDataReady = 0;
 8007010:	4b04      	ldr	r3, [pc, #16]	; (8007024 <ClearUserDataBuf+0x2c>)
 8007012:	2200      	movs	r2, #0
 8007014:	701a      	strb	r2, [r3, #0]
}
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	20000c24 	.word	0x20000c24
 8007020:	20000201 	.word	0x20000201
 8007024:	20000200 	.word	0x20000200

08007028 <ClearTxBuffer>:

void ClearTxBuffer(){
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
	memset(UserTxBufferFS, '\0', APP_TX_DATA_SIZE);
 800702c:	2380      	movs	r3, #128	; 0x80
 800702e:	009a      	lsls	r2, r3, #2
 8007030:	4b03      	ldr	r3, [pc, #12]	; (8007040 <ClearTxBuffer+0x18>)
 8007032:	2100      	movs	r1, #0
 8007034:	0018      	movs	r0, r3
 8007036:	f000 fd7a 	bl	8007b2e <memset>
}
 800703a:	46c0      	nop			; (mov r8, r8)
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20000648 	.word	0x20000648

08007044 <PrintToConsole>:

void PrintToConsole(const char* c){
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
	ClearTxBuffer();
 800704c:	f7ff ffec 	bl	8007028 <ClearTxBuffer>
	uint16_t i = 0;
 8007050:	230e      	movs	r3, #14
 8007052:	18fb      	adds	r3, r7, r3
 8007054:	2200      	movs	r2, #0
 8007056:	801a      	strh	r2, [r3, #0]
	while(c[i] != '\0' && i < APP_TX_DATA_SIZE - 3){
 8007058:	e00e      	b.n	8007078 <PrintToConsole+0x34>
		UserTxBufferFS[i] = c[i];
 800705a:	200e      	movs	r0, #14
 800705c:	183b      	adds	r3, r7, r0
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	18d2      	adds	r2, r2, r3
 8007064:	183b      	adds	r3, r7, r0
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	7811      	ldrb	r1, [r2, #0]
 800706a:	4a19      	ldr	r2, [pc, #100]	; (80070d0 <PrintToConsole+0x8c>)
 800706c:	54d1      	strb	r1, [r2, r3]
		i++;
 800706e:	183b      	adds	r3, r7, r0
 8007070:	881a      	ldrh	r2, [r3, #0]
 8007072:	183b      	adds	r3, r7, r0
 8007074:	3201      	adds	r2, #1
 8007076:	801a      	strh	r2, [r3, #0]
	while(c[i] != '\0' && i < APP_TX_DATA_SIZE - 3){
 8007078:	230e      	movs	r3, #14
 800707a:	18fb      	adds	r3, r7, r3
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	18d3      	adds	r3, r2, r3
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d006      	beq.n	8007096 <PrintToConsole+0x52>
 8007088:	230e      	movs	r3, #14
 800708a:	18fb      	adds	r3, r7, r3
 800708c:	881a      	ldrh	r2, [r3, #0]
 800708e:	23fe      	movs	r3, #254	; 0xfe
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	429a      	cmp	r2, r3
 8007094:	d9e1      	bls.n	800705a <PrintToConsole+0x16>
	}
	UserTxBufferFS[i + 1] = '\r';
 8007096:	200e      	movs	r0, #14
 8007098:	183b      	adds	r3, r7, r0
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	3301      	adds	r3, #1
 800709e:	4a0c      	ldr	r2, [pc, #48]	; (80070d0 <PrintToConsole+0x8c>)
 80070a0:	210d      	movs	r1, #13
 80070a2:	54d1      	strb	r1, [r2, r3]
	UserTxBufferFS[i + 2] = '\n';
 80070a4:	183b      	adds	r3, r7, r0
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	3302      	adds	r3, #2
 80070aa:	4a09      	ldr	r2, [pc, #36]	; (80070d0 <PrintToConsole+0x8c>)
 80070ac:	210a      	movs	r1, #10
 80070ae:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS(UserTxBufferFS, i + 3);
 80070b0:	183b      	adds	r3, r7, r0
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	3303      	adds	r3, #3
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <PrintToConsole+0x8c>)
 80070ba:	0011      	movs	r1, r2
 80070bc:	0018      	movs	r0, r3
 80070be:	f7ff ff63 	bl	8006f88 <CDC_Transmit_FS>
	// Dumb delay since this is asynchronous
	// TODO: Find a way to poll the USB device and only use it when things aren't being transmitted
	HAL_Delay(1);
 80070c2:	2001      	movs	r0, #1
 80070c4:	f7f9 f90c 	bl	80002e0 <HAL_Delay>
}
 80070c8:	46c0      	nop			; (mov r8, r8)
 80070ca:	46bd      	mov	sp, r7
 80070cc:	b004      	add	sp, #16
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20000648 	.word	0x20000648

080070d4 <CheckUserDataReady>:

uint8_t CheckUserDataReady(){
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
	return UserDataReady;
 80070d8:	4b02      	ldr	r3, [pc, #8]	; (80070e4 <CheckUserDataReady+0x10>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	b2db      	uxtb	r3, r3
}
 80070de:	0018      	movs	r0, r3
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	20000200 	.word	0x20000200

080070e8 <GetUserDataSize>:
}
void EnableLocalEcho(){
	LocalEcho = 1;
}

uint8_t GetUserDataSize(){
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
	return UserDataIndex;
 80070ec:	4b02      	ldr	r3, [pc, #8]	; (80070f8 <GetUserDataSize+0x10>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
}
 80070f0:	0018      	movs	r0, r3
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	20000201 	.word	0x20000201

080070fc <PrintStrToConsole>:

void PrintStrToConsole(char* c){
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
	ClearTxBuffer();
 8007104:	f7ff ff90 	bl	8007028 <ClearTxBuffer>
	uint8_t i = 0;
 8007108:	230f      	movs	r3, #15
 800710a:	18fb      	adds	r3, r7, r3
 800710c:	2200      	movs	r2, #0
 800710e:	701a      	strb	r2, [r3, #0]
	while(i < APP_TX_DATA_SIZE-3 && c[i] != '\0'){
 8007110:	e00e      	b.n	8007130 <PrintStrToConsole+0x34>
		UserTxBufferFS[i] = c[i];
 8007112:	200f      	movs	r0, #15
 8007114:	183b      	adds	r3, r7, r0
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	18d2      	adds	r2, r2, r3
 800711c:	183b      	adds	r3, r7, r0
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	7811      	ldrb	r1, [r2, #0]
 8007122:	4a16      	ldr	r2, [pc, #88]	; (800717c <PrintStrToConsole+0x80>)
 8007124:	54d1      	strb	r1, [r2, r3]
		i++;
 8007126:	183b      	adds	r3, r7, r0
 8007128:	781a      	ldrb	r2, [r3, #0]
 800712a:	183b      	adds	r3, r7, r0
 800712c:	3201      	adds	r2, #1
 800712e:	701a      	strb	r2, [r3, #0]
	while(i < APP_TX_DATA_SIZE-3 && c[i] != '\0'){
 8007130:	230f      	movs	r3, #15
 8007132:	18fb      	adds	r3, r7, r3
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	18d3      	adds	r3, r2, r3
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e8      	bne.n	8007112 <PrintStrToConsole+0x16>
	}
	UserTxBufferFS[i + 1] = '\r';
 8007140:	200f      	movs	r0, #15
 8007142:	183b      	adds	r3, r7, r0
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	3301      	adds	r3, #1
 8007148:	4a0c      	ldr	r2, [pc, #48]	; (800717c <PrintStrToConsole+0x80>)
 800714a:	210d      	movs	r1, #13
 800714c:	54d1      	strb	r1, [r2, r3]
	UserTxBufferFS[i + 2] = '\n';
 800714e:	183b      	adds	r3, r7, r0
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	3302      	adds	r3, #2
 8007154:	4a09      	ldr	r2, [pc, #36]	; (800717c <PrintStrToConsole+0x80>)
 8007156:	210a      	movs	r1, #10
 8007158:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS(UserTxBufferFS, i + 3);
 800715a:	183b      	adds	r3, r7, r0
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	b29b      	uxth	r3, r3
 8007160:	3303      	adds	r3, #3
 8007162:	b29a      	uxth	r2, r3
 8007164:	4b05      	ldr	r3, [pc, #20]	; (800717c <PrintStrToConsole+0x80>)
 8007166:	0011      	movs	r1, r2
 8007168:	0018      	movs	r0, r3
 800716a:	f7ff ff0d 	bl	8006f88 <CDC_Transmit_FS>
	// Dumb delay since this is asynchronous
	// TODO: Find a way to poll the USB device and only use it when things aren't being transmitted
	HAL_Delay(1);
 800716e:	2001      	movs	r0, #1
 8007170:	f7f9 f8b6 	bl	80002e0 <HAL_Delay>
}
 8007174:	46c0      	nop			; (mov r8, r8)
 8007176:	46bd      	mov	sp, r7
 8007178:	b004      	add	sp, #16
 800717a:	bd80      	pop	{r7, pc}
 800717c:	20000648 	.word	0x20000648

08007180 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a0a      	ldr	r2, [pc, #40]	; (80071b8 <HAL_PCD_MspInit+0x38>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d10e      	bne.n	80071b0 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007192:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <HAL_PCD_MspInit+0x3c>)
 8007194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007196:	4b09      	ldr	r3, [pc, #36]	; (80071bc <HAL_PCD_MspInit+0x3c>)
 8007198:	2180      	movs	r1, #128	; 0x80
 800719a:	0409      	lsls	r1, r1, #16
 800719c:	430a      	orrs	r2, r1
 800719e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80071a0:	2200      	movs	r2, #0
 80071a2:	2100      	movs	r1, #0
 80071a4:	201f      	movs	r0, #31
 80071a6:	f7f9 f961 	bl	800046c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80071aa:	201f      	movs	r0, #31
 80071ac:	f7f9 f973 	bl	8000496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80071b0:	46c0      	nop			; (mov r8, r8)
 80071b2:	46bd      	mov	sp, r7
 80071b4:	b002      	add	sp, #8
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	40005c00 	.word	0x40005c00
 80071bc:	40021000 	.word	0x40021000

080071c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	239c      	movs	r3, #156	; 0x9c
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	58d2      	ldr	r2, [r2, r3]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	218c      	movs	r1, #140	; 0x8c
 80071d4:	0089      	lsls	r1, r1, #2
 80071d6:	468c      	mov	ip, r1
 80071d8:	4463      	add	r3, ip
 80071da:	0019      	movs	r1, r3
 80071dc:	0010      	movs	r0, r2
 80071de:	f7fd f8ed 	bl	80043bc <USBD_LL_SetupStage>
}
 80071e2:	46c0      	nop			; (mov r8, r8)
 80071e4:	46bd      	mov	sp, r7
 80071e6:	b002      	add	sp, #8
 80071e8:	bd80      	pop	{r7, pc}

080071ea <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	000a      	movs	r2, r1
 80071f4:	1cfb      	adds	r3, r7, #3
 80071f6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	239c      	movs	r3, #156	; 0x9c
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	58d0      	ldr	r0, [r2, r3]
 8007200:	1cfb      	adds	r3, r7, #3
 8007202:	781a      	ldrb	r2, [r3, #0]
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	239e      	movs	r3, #158	; 0x9e
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	0152      	lsls	r2, r2, #5
 800720c:	188a      	adds	r2, r1, r2
 800720e:	18d3      	adds	r3, r2, r3
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	1cfb      	adds	r3, r7, #3
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	0019      	movs	r1, r3
 8007218:	f7fd f92c 	bl	8004474 <USBD_LL_DataOutStage>
}
 800721c:	46c0      	nop			; (mov r8, r8)
 800721e:	46bd      	mov	sp, r7
 8007220:	b002      	add	sp, #8
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	000a      	movs	r2, r1
 800722e:	1cfb      	adds	r3, r7, #3
 8007230:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	239c      	movs	r3, #156	; 0x9c
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	58d0      	ldr	r0, [r2, r3]
 800723a:	1cfb      	adds	r3, r7, #3
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	015b      	lsls	r3, r3, #5
 8007242:	18d3      	adds	r3, r2, r3
 8007244:	333c      	adds	r3, #60	; 0x3c
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	1cfb      	adds	r3, r7, #3
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	0019      	movs	r1, r3
 800724e:	f7fd f993 	bl	8004578 <USBD_LL_DataInStage>
}
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	46bd      	mov	sp, r7
 8007256:	b002      	add	sp, #8
 8007258:	bd80      	pop	{r7, pc}

0800725a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	239c      	movs	r3, #156	; 0x9c
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	58d3      	ldr	r3, [r2, r3]
 800726a:	0018      	movs	r0, r3
 800726c:	f7fd fac4 	bl	80047f8 <USBD_LL_SOF>
}
 8007270:	46c0      	nop			; (mov r8, r8)
 8007272:	46bd      	mov	sp, r7
 8007274:	b002      	add	sp, #8
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007280:	230f      	movs	r3, #15
 8007282:	18fb      	adds	r3, r7, r3
 8007284:	2201      	movs	r2, #1
 8007286:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	2b02      	cmp	r3, #2
 800728e:	d001      	beq.n	8007294 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007290:	f7ff fb24 	bl	80068dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	239c      	movs	r3, #156	; 0x9c
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	58d2      	ldr	r2, [r2, r3]
 800729c:	230f      	movs	r3, #15
 800729e:	18fb      	adds	r3, r7, r3
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	0019      	movs	r1, r3
 80072a4:	0010      	movs	r0, r2
 80072a6:	f7fd fa6c 	bl	8004782 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	239c      	movs	r3, #156	; 0x9c
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	58d3      	ldr	r3, [r2, r3]
 80072b2:	0018      	movs	r0, r3
 80072b4:	f7fd fa1d 	bl	80046f2 <USBD_LL_Reset>
}
 80072b8:	46c0      	nop			; (mov r8, r8)
 80072ba:	46bd      	mov	sp, r7
 80072bc:	b004      	add	sp, #16
 80072be:	bd80      	pop	{r7, pc}

080072c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	239c      	movs	r3, #156	; 0x9c
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	58d3      	ldr	r3, [r2, r3]
 80072d0:	0018      	movs	r0, r3
 80072d2:	f7fd fa67 	bl	80047a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d005      	beq.n	80072ea <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80072de:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <HAL_PCD_SuspendCallback+0x34>)
 80072e0:	691a      	ldr	r2, [r3, #16]
 80072e2:	4b04      	ldr	r3, [pc, #16]	; (80072f4 <HAL_PCD_SuspendCallback+0x34>)
 80072e4:	2106      	movs	r1, #6
 80072e6:	430a      	orrs	r2, r1
 80072e8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80072ea:	46c0      	nop			; (mov r8, r8)
 80072ec:	46bd      	mov	sp, r7
 80072ee:	b002      	add	sp, #8
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	46c0      	nop			; (mov r8, r8)
 80072f4:	e000ed00 	.word	0xe000ed00

080072f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d007      	beq.n	8007318 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007308:	4b09      	ldr	r3, [pc, #36]	; (8007330 <HAL_PCD_ResumeCallback+0x38>)
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	4b08      	ldr	r3, [pc, #32]	; (8007330 <HAL_PCD_ResumeCallback+0x38>)
 800730e:	2106      	movs	r1, #6
 8007310:	438a      	bics	r2, r1
 8007312:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007314:	f000 fa44 	bl	80077a0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	239c      	movs	r3, #156	; 0x9c
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	58d3      	ldr	r3, [r2, r3]
 8007320:	0018      	movs	r0, r3
 8007322:	f7fd fa57 	bl	80047d4 <USBD_LL_Resume>
}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	46bd      	mov	sp, r7
 800732a:	b002      	add	sp, #8
 800732c:	bd80      	pop	{r7, pc}
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	e000ed00 	.word	0xe000ed00

08007334 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800733c:	4a2d      	ldr	r2, [pc, #180]	; (80073f4 <USBD_LL_Init+0xc0>)
 800733e:	239c      	movs	r3, #156	; 0x9c
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	23a6      	movs	r3, #166	; 0xa6
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4929      	ldr	r1, [pc, #164]	; (80073f4 <USBD_LL_Init+0xc0>)
 800734e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007350:	4b28      	ldr	r3, [pc, #160]	; (80073f4 <USBD_LL_Init+0xc0>)
 8007352:	4a29      	ldr	r2, [pc, #164]	; (80073f8 <USBD_LL_Init+0xc4>)
 8007354:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007356:	4b27      	ldr	r3, [pc, #156]	; (80073f4 <USBD_LL_Init+0xc0>)
 8007358:	2208      	movs	r2, #8
 800735a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800735c:	4b25      	ldr	r3, [pc, #148]	; (80073f4 <USBD_LL_Init+0xc0>)
 800735e:	2202      	movs	r2, #2
 8007360:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007362:	4b24      	ldr	r3, [pc, #144]	; (80073f4 <USBD_LL_Init+0xc0>)
 8007364:	2202      	movs	r2, #2
 8007366:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007368:	4b22      	ldr	r3, [pc, #136]	; (80073f4 <USBD_LL_Init+0xc0>)
 800736a:	2200      	movs	r2, #0
 800736c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800736e:	4b21      	ldr	r3, [pc, #132]	; (80073f4 <USBD_LL_Init+0xc0>)
 8007370:	2200      	movs	r2, #0
 8007372:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007374:	4b1f      	ldr	r3, [pc, #124]	; (80073f4 <USBD_LL_Init+0xc0>)
 8007376:	2200      	movs	r2, #0
 8007378:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800737a:	4b1e      	ldr	r3, [pc, #120]	; (80073f4 <USBD_LL_Init+0xc0>)
 800737c:	0018      	movs	r0, r3
 800737e:	f7f9 fba9 	bl	8000ad4 <HAL_PCD_Init>
 8007382:	1e03      	subs	r3, r0, #0
 8007384:	d001      	beq.n	800738a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007386:	f7ff faa9 	bl	80068dc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	23a6      	movs	r3, #166	; 0xa6
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	58d0      	ldr	r0, [r2, r3]
 8007392:	2318      	movs	r3, #24
 8007394:	2200      	movs	r2, #0
 8007396:	2100      	movs	r1, #0
 8007398:	f7fa fb42 	bl	8001a20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	23a6      	movs	r3, #166	; 0xa6
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	58d0      	ldr	r0, [r2, r3]
 80073a4:	2358      	movs	r3, #88	; 0x58
 80073a6:	2200      	movs	r2, #0
 80073a8:	2180      	movs	r1, #128	; 0x80
 80073aa:	f7fa fb39 	bl	8001a20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	23a6      	movs	r3, #166	; 0xa6
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	58d0      	ldr	r0, [r2, r3]
 80073b6:	23c0      	movs	r3, #192	; 0xc0
 80073b8:	2200      	movs	r2, #0
 80073ba:	2181      	movs	r1, #129	; 0x81
 80073bc:	f7fa fb30 	bl	8001a20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	23a6      	movs	r3, #166	; 0xa6
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	58d0      	ldr	r0, [r2, r3]
 80073c8:	2388      	movs	r3, #136	; 0x88
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	2200      	movs	r2, #0
 80073ce:	2101      	movs	r1, #1
 80073d0:	f7fa fb26 	bl	8001a20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	23a6      	movs	r3, #166	; 0xa6
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	58d0      	ldr	r0, [r2, r3]
 80073dc:	2380      	movs	r3, #128	; 0x80
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	2200      	movs	r2, #0
 80073e2:	2182      	movs	r1, #130	; 0x82
 80073e4:	f7fa fb1c 	bl	8001a20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	0018      	movs	r0, r3
 80073ec:	46bd      	mov	sp, r7
 80073ee:	b002      	add	sp, #8
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	20000d24 	.word	0x20000d24
 80073f8:	40005c00 	.word	0x40005c00

080073fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80073fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007404:	210f      	movs	r1, #15
 8007406:	187b      	adds	r3, r7, r1
 8007408:	2200      	movs	r2, #0
 800740a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800740c:	260e      	movs	r6, #14
 800740e:	19bb      	adds	r3, r7, r6
 8007410:	2200      	movs	r2, #0
 8007412:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	23a6      	movs	r3, #166	; 0xa6
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	58d3      	ldr	r3, [r2, r3]
 800741c:	000d      	movs	r5, r1
 800741e:	187c      	adds	r4, r7, r1
 8007420:	0018      	movs	r0, r3
 8007422:	f7f9 fc4b 	bl	8000cbc <HAL_PCD_Start>
 8007426:	0003      	movs	r3, r0
 8007428:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800742a:	19bc      	adds	r4, r7, r6
 800742c:	0029      	movs	r1, r5
 800742e:	187b      	adds	r3, r7, r1
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	0018      	movs	r0, r3
 8007434:	f000 f9bb 	bl	80077ae <USBD_Get_USB_Status>
 8007438:	0003      	movs	r3, r0
 800743a:	7023      	strb	r3, [r4, #0]
  
  return usb_status;
 800743c:	19bb      	adds	r3, r7, r6
 800743e:	781b      	ldrb	r3, [r3, #0]
}
 8007440:	0018      	movs	r0, r3
 8007442:	46bd      	mov	sp, r7
 8007444:	b005      	add	sp, #20
 8007446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007448 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	000c      	movs	r4, r1
 8007452:	0010      	movs	r0, r2
 8007454:	0019      	movs	r1, r3
 8007456:	1cfb      	adds	r3, r7, #3
 8007458:	1c22      	adds	r2, r4, #0
 800745a:	701a      	strb	r2, [r3, #0]
 800745c:	1cbb      	adds	r3, r7, #2
 800745e:	1c02      	adds	r2, r0, #0
 8007460:	701a      	strb	r2, [r3, #0]
 8007462:	003b      	movs	r3, r7
 8007464:	1c0a      	adds	r2, r1, #0
 8007466:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007468:	260f      	movs	r6, #15
 800746a:	19bb      	adds	r3, r7, r6
 800746c:	2200      	movs	r2, #0
 800746e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007470:	250e      	movs	r5, #14
 8007472:	197b      	adds	r3, r7, r5
 8007474:	2200      	movs	r2, #0
 8007476:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	23a6      	movs	r3, #166	; 0xa6
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	58d0      	ldr	r0, [r2, r3]
 8007480:	19bc      	adds	r4, r7, r6
 8007482:	1cbb      	adds	r3, r7, #2
 8007484:	781d      	ldrb	r5, [r3, #0]
 8007486:	003b      	movs	r3, r7
 8007488:	881a      	ldrh	r2, [r3, #0]
 800748a:	1cfb      	adds	r3, r7, #3
 800748c:	7819      	ldrb	r1, [r3, #0]
 800748e:	002b      	movs	r3, r5
 8007490:	f7f9 fded 	bl	800106e <HAL_PCD_EP_Open>
 8007494:	0003      	movs	r3, r0
 8007496:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007498:	250e      	movs	r5, #14
 800749a:	197c      	adds	r4, r7, r5
 800749c:	19bb      	adds	r3, r7, r6
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	0018      	movs	r0, r3
 80074a2:	f000 f984 	bl	80077ae <USBD_Get_USB_Status>
 80074a6:	0003      	movs	r3, r0
 80074a8:	7023      	strb	r3, [r4, #0]
 
  return usb_status;
 80074aa:	197b      	adds	r3, r7, r5
 80074ac:	781b      	ldrb	r3, [r3, #0]
}
 80074ae:	0018      	movs	r0, r3
 80074b0:	46bd      	mov	sp, r7
 80074b2:	b005      	add	sp, #20
 80074b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	000a      	movs	r2, r1
 80074c0:	1cfb      	adds	r3, r7, #3
 80074c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074c4:	210f      	movs	r1, #15
 80074c6:	187b      	adds	r3, r7, r1
 80074c8:	2200      	movs	r2, #0
 80074ca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074cc:	260e      	movs	r6, #14
 80074ce:	19bb      	adds	r3, r7, r6
 80074d0:	2200      	movs	r2, #0
 80074d2:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	23a6      	movs	r3, #166	; 0xa6
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	58d2      	ldr	r2, [r2, r3]
 80074dc:	000d      	movs	r5, r1
 80074de:	187c      	adds	r4, r7, r1
 80074e0:	1cfb      	adds	r3, r7, #3
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	0019      	movs	r1, r3
 80074e6:	0010      	movs	r0, r2
 80074e8:	f7f9 fe33 	bl	8001152 <HAL_PCD_EP_Close>
 80074ec:	0003      	movs	r3, r0
 80074ee:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80074f0:	19bc      	adds	r4, r7, r6
 80074f2:	0029      	movs	r1, r5
 80074f4:	187b      	adds	r3, r7, r1
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	0018      	movs	r0, r3
 80074fa:	f000 f958 	bl	80077ae <USBD_Get_USB_Status>
 80074fe:	0003      	movs	r3, r0
 8007500:	7023      	strb	r3, [r4, #0]

  return usb_status;  
 8007502:	19bb      	adds	r3, r7, r6
 8007504:	781b      	ldrb	r3, [r3, #0]
}
 8007506:	0018      	movs	r0, r3
 8007508:	46bd      	mov	sp, r7
 800750a:	b005      	add	sp, #20
 800750c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800750e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800750e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007510:	b085      	sub	sp, #20
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	000a      	movs	r2, r1
 8007518:	1cfb      	adds	r3, r7, #3
 800751a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800751c:	210f      	movs	r1, #15
 800751e:	187b      	adds	r3, r7, r1
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007524:	260e      	movs	r6, #14
 8007526:	19bb      	adds	r3, r7, r6
 8007528:	2200      	movs	r2, #0
 800752a:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	23a6      	movs	r3, #166	; 0xa6
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	58d2      	ldr	r2, [r2, r3]
 8007534:	000d      	movs	r5, r1
 8007536:	187c      	adds	r4, r7, r1
 8007538:	1cfb      	adds	r3, r7, #3
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	0019      	movs	r1, r3
 800753e:	0010      	movs	r0, r2
 8007540:	f7f9 fee8 	bl	8001314 <HAL_PCD_EP_SetStall>
 8007544:	0003      	movs	r3, r0
 8007546:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007548:	19bc      	adds	r4, r7, r6
 800754a:	0029      	movs	r1, r5
 800754c:	187b      	adds	r3, r7, r1
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	0018      	movs	r0, r3
 8007552:	f000 f92c 	bl	80077ae <USBD_Get_USB_Status>
 8007556:	0003      	movs	r3, r0
 8007558:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 800755a:	19bb      	adds	r3, r7, r6
 800755c:	781b      	ldrb	r3, [r3, #0]
}
 800755e:	0018      	movs	r0, r3
 8007560:	46bd      	mov	sp, r7
 8007562:	b005      	add	sp, #20
 8007564:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007566 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007568:	b085      	sub	sp, #20
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	000a      	movs	r2, r1
 8007570:	1cfb      	adds	r3, r7, #3
 8007572:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007574:	210f      	movs	r1, #15
 8007576:	187b      	adds	r3, r7, r1
 8007578:	2200      	movs	r2, #0
 800757a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800757c:	260e      	movs	r6, #14
 800757e:	19bb      	adds	r3, r7, r6
 8007580:	2200      	movs	r2, #0
 8007582:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	23a6      	movs	r3, #166	; 0xa6
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	58d2      	ldr	r2, [r2, r3]
 800758c:	000d      	movs	r5, r1
 800758e:	187c      	adds	r4, r7, r1
 8007590:	1cfb      	adds	r3, r7, #3
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	0019      	movs	r1, r3
 8007596:	0010      	movs	r0, r2
 8007598:	f7f9 ff22 	bl	80013e0 <HAL_PCD_EP_ClrStall>
 800759c:	0003      	movs	r3, r0
 800759e:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80075a0:	19bc      	adds	r4, r7, r6
 80075a2:	0029      	movs	r1, r5
 80075a4:	187b      	adds	r3, r7, r1
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	0018      	movs	r0, r3
 80075aa:	f000 f900 	bl	80077ae <USBD_Get_USB_Status>
 80075ae:	0003      	movs	r3, r0
 80075b0:	7023      	strb	r3, [r4, #0]

  return usb_status; 
 80075b2:	19bb      	adds	r3, r7, r6
 80075b4:	781b      	ldrb	r3, [r3, #0]
}
 80075b6:	0018      	movs	r0, r3
 80075b8:	46bd      	mov	sp, r7
 80075ba:	b005      	add	sp, #20
 80075bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075be <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	000a      	movs	r2, r1
 80075c8:	1cfb      	adds	r3, r7, #3
 80075ca:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	23a6      	movs	r3, #166	; 0xa6
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	58d3      	ldr	r3, [r2, r3]
 80075d4:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80075d6:	1cfb      	adds	r3, r7, #3
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	b25b      	sxtb	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	da0a      	bge.n	80075f6 <USBD_LL_IsStallEP+0x38>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80075e0:	1cfb      	adds	r3, r7, #3
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	227f      	movs	r2, #127	; 0x7f
 80075e6:	4013      	ands	r3, r2
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	212a      	movs	r1, #42	; 0x2a
 80075ec:	015b      	lsls	r3, r3, #5
 80075ee:	18d3      	adds	r3, r2, r3
 80075f0:	185b      	adds	r3, r3, r1
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	e00a      	b.n	800760c <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80075f6:	1cfb      	adds	r3, r7, #3
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	227f      	movs	r2, #127	; 0x7f
 80075fc:	401a      	ands	r2, r3
 80075fe:	68f9      	ldr	r1, [r7, #12]
 8007600:	2395      	movs	r3, #149	; 0x95
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	0152      	lsls	r2, r2, #5
 8007606:	188a      	adds	r2, r1, r2
 8007608:	18d3      	adds	r3, r2, r3
 800760a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800760c:	0018      	movs	r0, r3
 800760e:	46bd      	mov	sp, r7
 8007610:	b004      	add	sp, #16
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	000a      	movs	r2, r1
 800761e:	1cfb      	adds	r3, r7, #3
 8007620:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007622:	210f      	movs	r1, #15
 8007624:	187b      	adds	r3, r7, r1
 8007626:	2200      	movs	r2, #0
 8007628:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800762a:	260e      	movs	r6, #14
 800762c:	19bb      	adds	r3, r7, r6
 800762e:	2200      	movs	r2, #0
 8007630:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	23a6      	movs	r3, #166	; 0xa6
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	58d2      	ldr	r2, [r2, r3]
 800763a:	000d      	movs	r5, r1
 800763c:	187c      	adds	r4, r7, r1
 800763e:	1cfb      	adds	r3, r7, #3
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	0019      	movs	r1, r3
 8007644:	0010      	movs	r0, r2
 8007646:	f7f9 fce7 	bl	8001018 <HAL_PCD_SetAddress>
 800764a:	0003      	movs	r3, r0
 800764c:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800764e:	19bc      	adds	r4, r7, r6
 8007650:	0029      	movs	r1, r5
 8007652:	187b      	adds	r3, r7, r1
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	0018      	movs	r0, r3
 8007658:	f000 f8a9 	bl	80077ae <USBD_Get_USB_Status>
 800765c:	0003      	movs	r3, r0
 800765e:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8007660:	19bb      	adds	r3, r7, r6
 8007662:	781b      	ldrb	r3, [r3, #0]
}
 8007664:	0018      	movs	r0, r3
 8007666:	46bd      	mov	sp, r7
 8007668:	b005      	add	sp, #20
 800766a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800766c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800766c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	0008      	movs	r0, r1
 8007676:	607a      	str	r2, [r7, #4]
 8007678:	0019      	movs	r1, r3
 800767a:	230b      	movs	r3, #11
 800767c:	18fb      	adds	r3, r7, r3
 800767e:	1c02      	adds	r2, r0, #0
 8007680:	701a      	strb	r2, [r3, #0]
 8007682:	2408      	movs	r4, #8
 8007684:	193b      	adds	r3, r7, r4
 8007686:	1c0a      	adds	r2, r1, #0
 8007688:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800768a:	2117      	movs	r1, #23
 800768c:	187b      	adds	r3, r7, r1
 800768e:	2200      	movs	r2, #0
 8007690:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007692:	2516      	movs	r5, #22
 8007694:	197b      	adds	r3, r7, r5
 8007696:	2200      	movs	r2, #0
 8007698:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	23a6      	movs	r3, #166	; 0xa6
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	58d0      	ldr	r0, [r2, r3]
 80076a2:	193b      	adds	r3, r7, r4
 80076a4:	881d      	ldrh	r5, [r3, #0]
 80076a6:	000e      	movs	r6, r1
 80076a8:	187c      	adds	r4, r7, r1
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	230b      	movs	r3, #11
 80076ae:	18fb      	adds	r3, r7, r3
 80076b0:	7819      	ldrb	r1, [r3, #0]
 80076b2:	002b      	movs	r3, r5
 80076b4:	f7f9 fdee 	bl	8001294 <HAL_PCD_EP_Transmit>
 80076b8:	0003      	movs	r3, r0
 80076ba:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80076bc:	2516      	movs	r5, #22
 80076be:	197c      	adds	r4, r7, r5
 80076c0:	0031      	movs	r1, r6
 80076c2:	187b      	adds	r3, r7, r1
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	0018      	movs	r0, r3
 80076c8:	f000 f871 	bl	80077ae <USBD_Get_USB_Status>
 80076cc:	0003      	movs	r3, r0
 80076ce:	7023      	strb	r3, [r4, #0]
  
  return usb_status;    
 80076d0:	197b      	adds	r3, r7, r5
 80076d2:	781b      	ldrb	r3, [r3, #0]
}
 80076d4:	0018      	movs	r0, r3
 80076d6:	46bd      	mov	sp, r7
 80076d8:	b007      	add	sp, #28
 80076da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80076dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	0008      	movs	r0, r1
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	0019      	movs	r1, r3
 80076ea:	230b      	movs	r3, #11
 80076ec:	18fb      	adds	r3, r7, r3
 80076ee:	1c02      	adds	r2, r0, #0
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	2408      	movs	r4, #8
 80076f4:	193b      	adds	r3, r7, r4
 80076f6:	1c0a      	adds	r2, r1, #0
 80076f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076fa:	2117      	movs	r1, #23
 80076fc:	187b      	adds	r3, r7, r1
 80076fe:	2200      	movs	r2, #0
 8007700:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007702:	2516      	movs	r5, #22
 8007704:	197b      	adds	r3, r7, r5
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	23a6      	movs	r3, #166	; 0xa6
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	58d0      	ldr	r0, [r2, r3]
 8007712:	193b      	adds	r3, r7, r4
 8007714:	881d      	ldrh	r5, [r3, #0]
 8007716:	000e      	movs	r6, r1
 8007718:	187c      	adds	r4, r7, r1
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	230b      	movs	r3, #11
 800771e:	18fb      	adds	r3, r7, r3
 8007720:	7819      	ldrb	r1, [r3, #0]
 8007722:	002b      	movs	r3, r5
 8007724:	f7f9 fd60 	bl	80011e8 <HAL_PCD_EP_Receive>
 8007728:	0003      	movs	r3, r0
 800772a:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800772c:	2516      	movs	r5, #22
 800772e:	197c      	adds	r4, r7, r5
 8007730:	0031      	movs	r1, r6
 8007732:	187b      	adds	r3, r7, r1
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	0018      	movs	r0, r3
 8007738:	f000 f839 	bl	80077ae <USBD_Get_USB_Status>
 800773c:	0003      	movs	r3, r0
 800773e:	7023      	strb	r3, [r4, #0]
  	
  return usb_status; 
 8007740:	197b      	adds	r3, r7, r5
 8007742:	781b      	ldrb	r3, [r3, #0]
}
 8007744:	0018      	movs	r0, r3
 8007746:	46bd      	mov	sp, r7
 8007748:	b007      	add	sp, #28
 800774a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800774c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	000a      	movs	r2, r1
 8007756:	1cfb      	adds	r3, r7, #3
 8007758:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	23a6      	movs	r3, #166	; 0xa6
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	58d2      	ldr	r2, [r2, r3]
 8007762:	1cfb      	adds	r3, r7, #3
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	0019      	movs	r1, r3
 8007768:	0010      	movs	r0, r2
 800776a:	f7f9 fd7e 	bl	800126a <HAL_PCD_EP_GetRxCount>
 800776e:	0003      	movs	r3, r0
}
 8007770:	0018      	movs	r0, r3
 8007772:	46bd      	mov	sp, r7
 8007774:	b002      	add	sp, #8
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007780:	4b02      	ldr	r3, [pc, #8]	; (800778c <USBD_static_malloc+0x14>)
}
 8007782:	0018      	movs	r0, r3
 8007784:	46bd      	mov	sp, r7
 8007786:	b002      	add	sp, #8
 8007788:	bd80      	pop	{r7, pc}
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	20000204 	.word	0x20000204

08007790 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]

}
 8007798:	46c0      	nop			; (mov r8, r8)
 800779a:	46bd      	mov	sp, r7
 800779c:	b002      	add	sp, #8
 800779e:	bd80      	pop	{r7, pc}

080077a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80077a4:	f7fe ff84 	bl	80066b0 <SystemClock_Config>
}
 80077a8:	46c0      	nop			; (mov r8, r8)
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	0002      	movs	r2, r0
 80077b6:	1dfb      	adds	r3, r7, #7
 80077b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ba:	230f      	movs	r3, #15
 80077bc:	18fb      	adds	r3, r7, r3
 80077be:	2200      	movs	r2, #0
 80077c0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80077c2:	1dfb      	adds	r3, r7, #7
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d00d      	beq.n	80077e6 <USBD_Get_USB_Status+0x38>
 80077ca:	dc02      	bgt.n	80077d2 <USBD_Get_USB_Status+0x24>
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d005      	beq.n	80077dc <USBD_Get_USB_Status+0x2e>
 80077d0:	e018      	b.n	8007804 <USBD_Get_USB_Status+0x56>
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d00c      	beq.n	80077f0 <USBD_Get_USB_Status+0x42>
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d00f      	beq.n	80077fa <USBD_Get_USB_Status+0x4c>
 80077da:	e013      	b.n	8007804 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80077dc:	230f      	movs	r3, #15
 80077de:	18fb      	adds	r3, r7, r3
 80077e0:	2200      	movs	r2, #0
 80077e2:	701a      	strb	r2, [r3, #0]
    break;
 80077e4:	e013      	b.n	800780e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077e6:	230f      	movs	r3, #15
 80077e8:	18fb      	adds	r3, r7, r3
 80077ea:	2202      	movs	r2, #2
 80077ec:	701a      	strb	r2, [r3, #0]
    break;
 80077ee:	e00e      	b.n	800780e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077f0:	230f      	movs	r3, #15
 80077f2:	18fb      	adds	r3, r7, r3
 80077f4:	2201      	movs	r2, #1
 80077f6:	701a      	strb	r2, [r3, #0]
    break;
 80077f8:	e009      	b.n	800780e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077fa:	230f      	movs	r3, #15
 80077fc:	18fb      	adds	r3, r7, r3
 80077fe:	2202      	movs	r2, #2
 8007800:	701a      	strb	r2, [r3, #0]
    break;
 8007802:	e004      	b.n	800780e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007804:	230f      	movs	r3, #15
 8007806:	18fb      	adds	r3, r7, r3
 8007808:	2202      	movs	r2, #2
 800780a:	701a      	strb	r2, [r3, #0]
    break;
 800780c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800780e:	230f      	movs	r3, #15
 8007810:	18fb      	adds	r3, r7, r3
 8007812:	781b      	ldrb	r3, [r3, #0]
}
 8007814:	0018      	movs	r0, r3
 8007816:	46bd      	mov	sp, r7
 8007818:	b004      	add	sp, #16
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	0002      	movs	r2, r0
 8007824:	6039      	str	r1, [r7, #0]
 8007826:	1dfb      	adds	r3, r7, #7
 8007828:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2212      	movs	r2, #18
 800782e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007830:	4b02      	ldr	r3, [pc, #8]	; (800783c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007832:	0018      	movs	r0, r3
 8007834:	46bd      	mov	sp, r7
 8007836:	b002      	add	sp, #8
 8007838:	bd80      	pop	{r7, pc}
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	20000144 	.word	0x20000144

08007840 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	0002      	movs	r2, r0
 8007848:	6039      	str	r1, [r7, #0]
 800784a:	1dfb      	adds	r3, r7, #7
 800784c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2204      	movs	r2, #4
 8007852:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007854:	4b02      	ldr	r3, [pc, #8]	; (8007860 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007856:	0018      	movs	r0, r3
 8007858:	46bd      	mov	sp, r7
 800785a:	b002      	add	sp, #8
 800785c:	bd80      	pop	{r7, pc}
 800785e:	46c0      	nop			; (mov r8, r8)
 8007860:	20000158 	.word	0x20000158

08007864 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	0002      	movs	r2, r0
 800786c:	6039      	str	r1, [r7, #0]
 800786e:	1dfb      	adds	r3, r7, #7
 8007870:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007872:	1dfb      	adds	r3, r7, #7
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	4908      	ldr	r1, [pc, #32]	; (80078a0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800787e:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <USBD_FS_ProductStrDescriptor+0x40>)
 8007880:	0018      	movs	r0, r3
 8007882:	f7fd fd65 	bl	8005350 <USBD_GetString>
 8007886:	e005      	b.n	8007894 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	4905      	ldr	r1, [pc, #20]	; (80078a0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800788c:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <USBD_FS_ProductStrDescriptor+0x40>)
 800788e:	0018      	movs	r0, r3
 8007890:	f7fd fd5e 	bl	8005350 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007894:	4b02      	ldr	r3, [pc, #8]	; (80078a0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007896:	0018      	movs	r0, r3
 8007898:	46bd      	mov	sp, r7
 800789a:	b002      	add	sp, #8
 800789c:	bd80      	pop	{r7, pc}
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	20000f98 	.word	0x20000f98
 80078a4:	080089b8 	.word	0x080089b8

080078a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	0002      	movs	r2, r0
 80078b0:	6039      	str	r1, [r7, #0]
 80078b2:	1dfb      	adds	r3, r7, #7
 80078b4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	4904      	ldr	r1, [pc, #16]	; (80078cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80078ba:	4b05      	ldr	r3, [pc, #20]	; (80078d0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80078bc:	0018      	movs	r0, r3
 80078be:	f7fd fd47 	bl	8005350 <USBD_GetString>
  return USBD_StrDesc;
 80078c2:	4b02      	ldr	r3, [pc, #8]	; (80078cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80078c4:	0018      	movs	r0, r3
 80078c6:	46bd      	mov	sp, r7
 80078c8:	b002      	add	sp, #8
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	20000f98 	.word	0x20000f98
 80078d0:	080089c0 	.word	0x080089c0

080078d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	0002      	movs	r2, r0
 80078dc:	6039      	str	r1, [r7, #0]
 80078de:	1dfb      	adds	r3, r7, #7
 80078e0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	221a      	movs	r2, #26
 80078e6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80078e8:	f000 f84c 	bl	8007984 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 80078ec:	4b02      	ldr	r3, [pc, #8]	; (80078f8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80078ee:	0018      	movs	r0, r3
 80078f0:	46bd      	mov	sp, r7
 80078f2:	b002      	add	sp, #8
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	46c0      	nop			; (mov r8, r8)
 80078f8:	2000015c 	.word	0x2000015c

080078fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	0002      	movs	r2, r0
 8007904:	6039      	str	r1, [r7, #0]
 8007906:	1dfb      	adds	r3, r7, #7
 8007908:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800790a:	1dfb      	adds	r3, r7, #7
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d106      	bne.n	8007920 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	4908      	ldr	r1, [pc, #32]	; (8007938 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007916:	4b09      	ldr	r3, [pc, #36]	; (800793c <USBD_FS_ConfigStrDescriptor+0x40>)
 8007918:	0018      	movs	r0, r3
 800791a:	f7fd fd19 	bl	8005350 <USBD_GetString>
 800791e:	e005      	b.n	800792c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	4905      	ldr	r1, [pc, #20]	; (8007938 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007924:	4b05      	ldr	r3, [pc, #20]	; (800793c <USBD_FS_ConfigStrDescriptor+0x40>)
 8007926:	0018      	movs	r0, r3
 8007928:	f7fd fd12 	bl	8005350 <USBD_GetString>
  }
  return USBD_StrDesc;
 800792c:	4b02      	ldr	r3, [pc, #8]	; (8007938 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800792e:	0018      	movs	r0, r3
 8007930:	46bd      	mov	sp, r7
 8007932:	b002      	add	sp, #8
 8007934:	bd80      	pop	{r7, pc}
 8007936:	46c0      	nop			; (mov r8, r8)
 8007938:	20000f98 	.word	0x20000f98
 800793c:	080089c8 	.word	0x080089c8

08007940 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	0002      	movs	r2, r0
 8007948:	6039      	str	r1, [r7, #0]
 800794a:	1dfb      	adds	r3, r7, #7
 800794c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800794e:	1dfb      	adds	r3, r7, #7
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d106      	bne.n	8007964 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	4908      	ldr	r1, [pc, #32]	; (800797c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800795a:	4b09      	ldr	r3, [pc, #36]	; (8007980 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800795c:	0018      	movs	r0, r3
 800795e:	f7fd fcf7 	bl	8005350 <USBD_GetString>
 8007962:	e005      	b.n	8007970 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	4905      	ldr	r1, [pc, #20]	; (800797c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007968:	4b05      	ldr	r3, [pc, #20]	; (8007980 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800796a:	0018      	movs	r0, r3
 800796c:	f7fd fcf0 	bl	8005350 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007970:	4b02      	ldr	r3, [pc, #8]	; (800797c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007972:	0018      	movs	r0, r3
 8007974:	46bd      	mov	sp, r7
 8007976:	b002      	add	sp, #8
 8007978:	bd80      	pop	{r7, pc}
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	20000f98 	.word	0x20000f98
 8007980:	080089d4 	.word	0x080089d4

08007984 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800798a:	4b10      	ldr	r3, [pc, #64]	; (80079cc <Get_SerialNum+0x48>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007990:	4b0f      	ldr	r3, [pc, #60]	; (80079d0 <Get_SerialNum+0x4c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007996:	4b0f      	ldr	r3, [pc, #60]	; (80079d4 <Get_SerialNum+0x50>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	18d3      	adds	r3, r2, r3
 80079a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00b      	beq.n	80079c2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079aa:	490b      	ldr	r1, [pc, #44]	; (80079d8 <Get_SerialNum+0x54>)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2208      	movs	r2, #8
 80079b0:	0018      	movs	r0, r3
 80079b2:	f000 f815 	bl	80079e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079b6:	4909      	ldr	r1, [pc, #36]	; (80079dc <Get_SerialNum+0x58>)
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2204      	movs	r2, #4
 80079bc:	0018      	movs	r0, r3
 80079be:	f000 f80f 	bl	80079e0 <IntToUnicode>
  }
}
 80079c2:	46c0      	nop			; (mov r8, r8)
 80079c4:	46bd      	mov	sp, r7
 80079c6:	b004      	add	sp, #16
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	46c0      	nop			; (mov r8, r8)
 80079cc:	1ff80050 	.word	0x1ff80050
 80079d0:	1ff80054 	.word	0x1ff80054
 80079d4:	1ff80058 	.word	0x1ff80058
 80079d8:	2000015e 	.word	0x2000015e
 80079dc:	2000016e 	.word	0x2000016e

080079e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	1dfb      	adds	r3, r7, #7
 80079ec:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80079ee:	2117      	movs	r1, #23
 80079f0:	187b      	adds	r3, r7, r1
 80079f2:	2200      	movs	r2, #0
 80079f4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80079f6:	187b      	adds	r3, r7, r1
 80079f8:	2200      	movs	r2, #0
 80079fa:	701a      	strb	r2, [r3, #0]
 80079fc:	e02f      	b.n	8007a5e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	0f1b      	lsrs	r3, r3, #28
 8007a02:	2b09      	cmp	r3, #9
 8007a04:	d80d      	bhi.n	8007a22 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	0f1b      	lsrs	r3, r3, #28
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	2317      	movs	r3, #23
 8007a0e:	18fb      	adds	r3, r7, r3
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	0019      	movs	r1, r3
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	185b      	adds	r3, r3, r1
 8007a1a:	3230      	adds	r2, #48	; 0x30
 8007a1c:	b2d2      	uxtb	r2, r2
 8007a1e:	701a      	strb	r2, [r3, #0]
 8007a20:	e00c      	b.n	8007a3c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	0f1b      	lsrs	r3, r3, #28
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	2317      	movs	r3, #23
 8007a2a:	18fb      	adds	r3, r7, r3
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	005b      	lsls	r3, r3, #1
 8007a30:	0019      	movs	r1, r3
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	185b      	adds	r3, r3, r1
 8007a36:	3237      	adds	r2, #55	; 0x37
 8007a38:	b2d2      	uxtb	r2, r2
 8007a3a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a42:	2117      	movs	r1, #23
 8007a44:	187b      	adds	r3, r7, r1
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	18d3      	adds	r3, r2, r3
 8007a50:	2200      	movs	r2, #0
 8007a52:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a54:	187b      	adds	r3, r7, r1
 8007a56:	781a      	ldrb	r2, [r3, #0]
 8007a58:	187b      	adds	r3, r7, r1
 8007a5a:	3201      	adds	r2, #1
 8007a5c:	701a      	strb	r2, [r3, #0]
 8007a5e:	2317      	movs	r3, #23
 8007a60:	18fa      	adds	r2, r7, r3
 8007a62:	1dfb      	adds	r3, r7, #7
 8007a64:	7812      	ldrb	r2, [r2, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d3c8      	bcc.n	80079fe <IntToUnicode+0x1e>
  }
}
 8007a6c:	46c0      	nop			; (mov r8, r8)
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b006      	add	sp, #24
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8007a74:	480d      	ldr	r0, [pc, #52]	; (8007aac <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8007a76:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8007a78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007a7a:	e003      	b.n	8007a84 <LoopCopyDataInit>

08007a7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007a7c:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8007a7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007a80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007a82:	3104      	adds	r1, #4

08007a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8007a84:	480b      	ldr	r0, [pc, #44]	; (8007ab4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8007a86:	4b0c      	ldr	r3, [pc, #48]	; (8007ab8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8007a88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007a8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007a8c:	d3f6      	bcc.n	8007a7c <CopyDataInit>
  ldr  r2, =_sbss
 8007a8e:	4a0b      	ldr	r2, [pc, #44]	; (8007abc <LoopForever+0x12>)
  b  LoopFillZerobss
 8007a90:	e002      	b.n	8007a98 <LoopFillZerobss>

08007a92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8007a92:	2300      	movs	r3, #0
  str  r3, [r2]
 8007a94:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007a96:	3204      	adds	r2, #4

08007a98 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8007a98:	4b09      	ldr	r3, [pc, #36]	; (8007ac0 <LoopForever+0x16>)
  cmp  r2, r3
 8007a9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007a9c:	d3f9      	bcc.n	8007a92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007a9e:	f7ff f92b 	bl	8006cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007aa2:	f000 f817 	bl	8007ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007aa6:	f7fe fde9 	bl	800667c <main>

08007aaa <LoopForever>:

LoopForever:
    b LoopForever
 8007aaa:	e7fe      	b.n	8007aaa <LoopForever>
   ldr   r0, =_estack
 8007aac:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8007ab0:	08008e8c 	.word	0x08008e8c
  ldr  r0, =_sdata
 8007ab4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007ab8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8007abc:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8007ac0:	2000119c 	.word	0x2000119c

08007ac4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007ac4:	e7fe      	b.n	8007ac4 <ADC1_COMP_IRQHandler>
	...

08007ac8 <__errno>:
 8007ac8:	4b01      	ldr	r3, [pc, #4]	; (8007ad0 <__errno+0x8>)
 8007aca:	6818      	ldr	r0, [r3, #0]
 8007acc:	4770      	bx	lr
 8007ace:	46c0      	nop			; (mov r8, r8)
 8007ad0:	20000178 	.word	0x20000178

08007ad4 <__libc_init_array>:
 8007ad4:	b570      	push	{r4, r5, r6, lr}
 8007ad6:	2600      	movs	r6, #0
 8007ad8:	4d0c      	ldr	r5, [pc, #48]	; (8007b0c <__libc_init_array+0x38>)
 8007ada:	4c0d      	ldr	r4, [pc, #52]	; (8007b10 <__libc_init_array+0x3c>)
 8007adc:	1b64      	subs	r4, r4, r5
 8007ade:	10a4      	asrs	r4, r4, #2
 8007ae0:	42a6      	cmp	r6, r4
 8007ae2:	d109      	bne.n	8007af8 <__libc_init_array+0x24>
 8007ae4:	2600      	movs	r6, #0
 8007ae6:	f000 fc4d 	bl	8008384 <_init>
 8007aea:	4d0a      	ldr	r5, [pc, #40]	; (8007b14 <__libc_init_array+0x40>)
 8007aec:	4c0a      	ldr	r4, [pc, #40]	; (8007b18 <__libc_init_array+0x44>)
 8007aee:	1b64      	subs	r4, r4, r5
 8007af0:	10a4      	asrs	r4, r4, #2
 8007af2:	42a6      	cmp	r6, r4
 8007af4:	d105      	bne.n	8007b02 <__libc_init_array+0x2e>
 8007af6:	bd70      	pop	{r4, r5, r6, pc}
 8007af8:	00b3      	lsls	r3, r6, #2
 8007afa:	58eb      	ldr	r3, [r5, r3]
 8007afc:	4798      	blx	r3
 8007afe:	3601      	adds	r6, #1
 8007b00:	e7ee      	b.n	8007ae0 <__libc_init_array+0xc>
 8007b02:	00b3      	lsls	r3, r6, #2
 8007b04:	58eb      	ldr	r3, [r5, r3]
 8007b06:	4798      	blx	r3
 8007b08:	3601      	adds	r6, #1
 8007b0a:	e7f2      	b.n	8007af2 <__libc_init_array+0x1e>
 8007b0c:	08008e84 	.word	0x08008e84
 8007b10:	08008e84 	.word	0x08008e84
 8007b14:	08008e84 	.word	0x08008e84
 8007b18:	08008e88 	.word	0x08008e88

08007b1c <memcpy>:
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	b510      	push	{r4, lr}
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d100      	bne.n	8007b26 <memcpy+0xa>
 8007b24:	bd10      	pop	{r4, pc}
 8007b26:	5ccc      	ldrb	r4, [r1, r3]
 8007b28:	54c4      	strb	r4, [r0, r3]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	e7f8      	b.n	8007b20 <memcpy+0x4>

08007b2e <memset>:
 8007b2e:	0003      	movs	r3, r0
 8007b30:	1812      	adds	r2, r2, r0
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d100      	bne.n	8007b38 <memset+0xa>
 8007b36:	4770      	bx	lr
 8007b38:	7019      	strb	r1, [r3, #0]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	e7f9      	b.n	8007b32 <memset+0x4>
	...

08007b40 <sniprintf>:
 8007b40:	b40c      	push	{r2, r3}
 8007b42:	b530      	push	{r4, r5, lr}
 8007b44:	4b16      	ldr	r3, [pc, #88]	; (8007ba0 <sniprintf+0x60>)
 8007b46:	b09d      	sub	sp, #116	; 0x74
 8007b48:	1e0c      	subs	r4, r1, #0
 8007b4a:	681d      	ldr	r5, [r3, #0]
 8007b4c:	da08      	bge.n	8007b60 <sniprintf+0x20>
 8007b4e:	238b      	movs	r3, #139	; 0x8b
 8007b50:	2001      	movs	r0, #1
 8007b52:	602b      	str	r3, [r5, #0]
 8007b54:	4240      	negs	r0, r0
 8007b56:	b01d      	add	sp, #116	; 0x74
 8007b58:	bc30      	pop	{r4, r5}
 8007b5a:	bc08      	pop	{r3}
 8007b5c:	b002      	add	sp, #8
 8007b5e:	4718      	bx	r3
 8007b60:	2382      	movs	r3, #130	; 0x82
 8007b62:	a902      	add	r1, sp, #8
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	818b      	strh	r3, [r1, #12]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9002      	str	r0, [sp, #8]
 8007b6c:	6108      	str	r0, [r1, #16]
 8007b6e:	429c      	cmp	r4, r3
 8007b70:	d000      	beq.n	8007b74 <sniprintf+0x34>
 8007b72:	1e63      	subs	r3, r4, #1
 8007b74:	608b      	str	r3, [r1, #8]
 8007b76:	614b      	str	r3, [r1, #20]
 8007b78:	2301      	movs	r3, #1
 8007b7a:	425b      	negs	r3, r3
 8007b7c:	81cb      	strh	r3, [r1, #14]
 8007b7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b80:	ab21      	add	r3, sp, #132	; 0x84
 8007b82:	0028      	movs	r0, r5
 8007b84:	9301      	str	r3, [sp, #4]
 8007b86:	f000 f881 	bl	8007c8c <_svfiprintf_r>
 8007b8a:	1c43      	adds	r3, r0, #1
 8007b8c:	da01      	bge.n	8007b92 <sniprintf+0x52>
 8007b8e:	238b      	movs	r3, #139	; 0x8b
 8007b90:	602b      	str	r3, [r5, #0]
 8007b92:	2c00      	cmp	r4, #0
 8007b94:	d0df      	beq.n	8007b56 <sniprintf+0x16>
 8007b96:	2300      	movs	r3, #0
 8007b98:	9a02      	ldr	r2, [sp, #8]
 8007b9a:	7013      	strb	r3, [r2, #0]
 8007b9c:	e7db      	b.n	8007b56 <sniprintf+0x16>
 8007b9e:	46c0      	nop			; (mov r8, r8)
 8007ba0:	20000178 	.word	0x20000178

08007ba4 <strncmp>:
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	b530      	push	{r4, r5, lr}
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d00a      	beq.n	8007bc2 <strncmp+0x1e>
 8007bac:	3a01      	subs	r2, #1
 8007bae:	5cc4      	ldrb	r4, [r0, r3]
 8007bb0:	5ccd      	ldrb	r5, [r1, r3]
 8007bb2:	42ac      	cmp	r4, r5
 8007bb4:	d104      	bne.n	8007bc0 <strncmp+0x1c>
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d002      	beq.n	8007bc0 <strncmp+0x1c>
 8007bba:	3301      	adds	r3, #1
 8007bbc:	2c00      	cmp	r4, #0
 8007bbe:	d1f6      	bne.n	8007bae <strncmp+0xa>
 8007bc0:	1b63      	subs	r3, r4, r5
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	bd30      	pop	{r4, r5, pc}
	...

08007bc8 <__ssputs_r>:
 8007bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bca:	688e      	ldr	r6, [r1, #8]
 8007bcc:	b085      	sub	sp, #20
 8007bce:	0007      	movs	r7, r0
 8007bd0:	000c      	movs	r4, r1
 8007bd2:	9203      	str	r2, [sp, #12]
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	429e      	cmp	r6, r3
 8007bd8:	d83c      	bhi.n	8007c54 <__ssputs_r+0x8c>
 8007bda:	2390      	movs	r3, #144	; 0x90
 8007bdc:	898a      	ldrh	r2, [r1, #12]
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	421a      	tst	r2, r3
 8007be2:	d034      	beq.n	8007c4e <__ssputs_r+0x86>
 8007be4:	2503      	movs	r5, #3
 8007be6:	6909      	ldr	r1, [r1, #16]
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	1a5b      	subs	r3, r3, r1
 8007bec:	9302      	str	r3, [sp, #8]
 8007bee:	6963      	ldr	r3, [r4, #20]
 8007bf0:	9802      	ldr	r0, [sp, #8]
 8007bf2:	435d      	muls	r5, r3
 8007bf4:	0feb      	lsrs	r3, r5, #31
 8007bf6:	195d      	adds	r5, r3, r5
 8007bf8:	9b01      	ldr	r3, [sp, #4]
 8007bfa:	106d      	asrs	r5, r5, #1
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	181b      	adds	r3, r3, r0
 8007c00:	42ab      	cmp	r3, r5
 8007c02:	d900      	bls.n	8007c06 <__ssputs_r+0x3e>
 8007c04:	001d      	movs	r5, r3
 8007c06:	0553      	lsls	r3, r2, #21
 8007c08:	d532      	bpl.n	8007c70 <__ssputs_r+0xa8>
 8007c0a:	0029      	movs	r1, r5
 8007c0c:	0038      	movs	r0, r7
 8007c0e:	f000 fb19 	bl	8008244 <_malloc_r>
 8007c12:	1e06      	subs	r6, r0, #0
 8007c14:	d109      	bne.n	8007c2a <__ssputs_r+0x62>
 8007c16:	230c      	movs	r3, #12
 8007c18:	603b      	str	r3, [r7, #0]
 8007c1a:	2340      	movs	r3, #64	; 0x40
 8007c1c:	2001      	movs	r0, #1
 8007c1e:	89a2      	ldrh	r2, [r4, #12]
 8007c20:	4240      	negs	r0, r0
 8007c22:	4313      	orrs	r3, r2
 8007c24:	81a3      	strh	r3, [r4, #12]
 8007c26:	b005      	add	sp, #20
 8007c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c2a:	9a02      	ldr	r2, [sp, #8]
 8007c2c:	6921      	ldr	r1, [r4, #16]
 8007c2e:	f7ff ff75 	bl	8007b1c <memcpy>
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	4a14      	ldr	r2, [pc, #80]	; (8007c88 <__ssputs_r+0xc0>)
 8007c36:	401a      	ands	r2, r3
 8007c38:	2380      	movs	r3, #128	; 0x80
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	81a3      	strh	r3, [r4, #12]
 8007c3e:	9b02      	ldr	r3, [sp, #8]
 8007c40:	6126      	str	r6, [r4, #16]
 8007c42:	18f6      	adds	r6, r6, r3
 8007c44:	6026      	str	r6, [r4, #0]
 8007c46:	6165      	str	r5, [r4, #20]
 8007c48:	9e01      	ldr	r6, [sp, #4]
 8007c4a:	1aed      	subs	r5, r5, r3
 8007c4c:	60a5      	str	r5, [r4, #8]
 8007c4e:	9b01      	ldr	r3, [sp, #4]
 8007c50:	429e      	cmp	r6, r3
 8007c52:	d900      	bls.n	8007c56 <__ssputs_r+0x8e>
 8007c54:	9e01      	ldr	r6, [sp, #4]
 8007c56:	0032      	movs	r2, r6
 8007c58:	9903      	ldr	r1, [sp, #12]
 8007c5a:	6820      	ldr	r0, [r4, #0]
 8007c5c:	f000 fa95 	bl	800818a <memmove>
 8007c60:	68a3      	ldr	r3, [r4, #8]
 8007c62:	2000      	movs	r0, #0
 8007c64:	1b9b      	subs	r3, r3, r6
 8007c66:	60a3      	str	r3, [r4, #8]
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	199e      	adds	r6, r3, r6
 8007c6c:	6026      	str	r6, [r4, #0]
 8007c6e:	e7da      	b.n	8007c26 <__ssputs_r+0x5e>
 8007c70:	002a      	movs	r2, r5
 8007c72:	0038      	movs	r0, r7
 8007c74:	f000 fb44 	bl	8008300 <_realloc_r>
 8007c78:	1e06      	subs	r6, r0, #0
 8007c7a:	d1e0      	bne.n	8007c3e <__ssputs_r+0x76>
 8007c7c:	6921      	ldr	r1, [r4, #16]
 8007c7e:	0038      	movs	r0, r7
 8007c80:	f000 fa96 	bl	80081b0 <_free_r>
 8007c84:	e7c7      	b.n	8007c16 <__ssputs_r+0x4e>
 8007c86:	46c0      	nop			; (mov r8, r8)
 8007c88:	fffffb7f 	.word	0xfffffb7f

08007c8c <_svfiprintf_r>:
 8007c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c8e:	b0a1      	sub	sp, #132	; 0x84
 8007c90:	9003      	str	r0, [sp, #12]
 8007c92:	001d      	movs	r5, r3
 8007c94:	898b      	ldrh	r3, [r1, #12]
 8007c96:	000f      	movs	r7, r1
 8007c98:	0016      	movs	r6, r2
 8007c9a:	061b      	lsls	r3, r3, #24
 8007c9c:	d511      	bpl.n	8007cc2 <_svfiprintf_r+0x36>
 8007c9e:	690b      	ldr	r3, [r1, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10e      	bne.n	8007cc2 <_svfiprintf_r+0x36>
 8007ca4:	2140      	movs	r1, #64	; 0x40
 8007ca6:	f000 facd 	bl	8008244 <_malloc_r>
 8007caa:	6038      	str	r0, [r7, #0]
 8007cac:	6138      	str	r0, [r7, #16]
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d105      	bne.n	8007cbe <_svfiprintf_r+0x32>
 8007cb2:	230c      	movs	r3, #12
 8007cb4:	9a03      	ldr	r2, [sp, #12]
 8007cb6:	3801      	subs	r0, #1
 8007cb8:	6013      	str	r3, [r2, #0]
 8007cba:	b021      	add	sp, #132	; 0x84
 8007cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cbe:	2340      	movs	r3, #64	; 0x40
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	ac08      	add	r4, sp, #32
 8007cc6:	6163      	str	r3, [r4, #20]
 8007cc8:	3320      	adds	r3, #32
 8007cca:	7663      	strb	r3, [r4, #25]
 8007ccc:	3310      	adds	r3, #16
 8007cce:	76a3      	strb	r3, [r4, #26]
 8007cd0:	9507      	str	r5, [sp, #28]
 8007cd2:	0035      	movs	r5, r6
 8007cd4:	782b      	ldrb	r3, [r5, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <_svfiprintf_r+0x52>
 8007cda:	2b25      	cmp	r3, #37	; 0x25
 8007cdc:	d146      	bne.n	8007d6c <_svfiprintf_r+0xe0>
 8007cde:	1bab      	subs	r3, r5, r6
 8007ce0:	9305      	str	r3, [sp, #20]
 8007ce2:	d00c      	beq.n	8007cfe <_svfiprintf_r+0x72>
 8007ce4:	0032      	movs	r2, r6
 8007ce6:	0039      	movs	r1, r7
 8007ce8:	9803      	ldr	r0, [sp, #12]
 8007cea:	f7ff ff6d 	bl	8007bc8 <__ssputs_r>
 8007cee:	1c43      	adds	r3, r0, #1
 8007cf0:	d100      	bne.n	8007cf4 <_svfiprintf_r+0x68>
 8007cf2:	e0ae      	b.n	8007e52 <_svfiprintf_r+0x1c6>
 8007cf4:	6962      	ldr	r2, [r4, #20]
 8007cf6:	9b05      	ldr	r3, [sp, #20]
 8007cf8:	4694      	mov	ip, r2
 8007cfa:	4463      	add	r3, ip
 8007cfc:	6163      	str	r3, [r4, #20]
 8007cfe:	782b      	ldrb	r3, [r5, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d100      	bne.n	8007d06 <_svfiprintf_r+0x7a>
 8007d04:	e0a5      	b.n	8007e52 <_svfiprintf_r+0x1c6>
 8007d06:	2201      	movs	r2, #1
 8007d08:	2300      	movs	r3, #0
 8007d0a:	4252      	negs	r2, r2
 8007d0c:	6062      	str	r2, [r4, #4]
 8007d0e:	a904      	add	r1, sp, #16
 8007d10:	3254      	adds	r2, #84	; 0x54
 8007d12:	1852      	adds	r2, r2, r1
 8007d14:	1c6e      	adds	r6, r5, #1
 8007d16:	6023      	str	r3, [r4, #0]
 8007d18:	60e3      	str	r3, [r4, #12]
 8007d1a:	60a3      	str	r3, [r4, #8]
 8007d1c:	7013      	strb	r3, [r2, #0]
 8007d1e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007d20:	7831      	ldrb	r1, [r6, #0]
 8007d22:	2205      	movs	r2, #5
 8007d24:	4853      	ldr	r0, [pc, #332]	; (8007e74 <_svfiprintf_r+0x1e8>)
 8007d26:	f000 fa25 	bl	8008174 <memchr>
 8007d2a:	1c75      	adds	r5, r6, #1
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d11f      	bne.n	8007d70 <_svfiprintf_r+0xe4>
 8007d30:	6822      	ldr	r2, [r4, #0]
 8007d32:	06d3      	lsls	r3, r2, #27
 8007d34:	d504      	bpl.n	8007d40 <_svfiprintf_r+0xb4>
 8007d36:	2353      	movs	r3, #83	; 0x53
 8007d38:	a904      	add	r1, sp, #16
 8007d3a:	185b      	adds	r3, r3, r1
 8007d3c:	2120      	movs	r1, #32
 8007d3e:	7019      	strb	r1, [r3, #0]
 8007d40:	0713      	lsls	r3, r2, #28
 8007d42:	d504      	bpl.n	8007d4e <_svfiprintf_r+0xc2>
 8007d44:	2353      	movs	r3, #83	; 0x53
 8007d46:	a904      	add	r1, sp, #16
 8007d48:	185b      	adds	r3, r3, r1
 8007d4a:	212b      	movs	r1, #43	; 0x2b
 8007d4c:	7019      	strb	r1, [r3, #0]
 8007d4e:	7833      	ldrb	r3, [r6, #0]
 8007d50:	2b2a      	cmp	r3, #42	; 0x2a
 8007d52:	d016      	beq.n	8007d82 <_svfiprintf_r+0xf6>
 8007d54:	0035      	movs	r5, r6
 8007d56:	2100      	movs	r1, #0
 8007d58:	200a      	movs	r0, #10
 8007d5a:	68e3      	ldr	r3, [r4, #12]
 8007d5c:	782a      	ldrb	r2, [r5, #0]
 8007d5e:	1c6e      	adds	r6, r5, #1
 8007d60:	3a30      	subs	r2, #48	; 0x30
 8007d62:	2a09      	cmp	r2, #9
 8007d64:	d94e      	bls.n	8007e04 <_svfiprintf_r+0x178>
 8007d66:	2900      	cmp	r1, #0
 8007d68:	d018      	beq.n	8007d9c <_svfiprintf_r+0x110>
 8007d6a:	e010      	b.n	8007d8e <_svfiprintf_r+0x102>
 8007d6c:	3501      	adds	r5, #1
 8007d6e:	e7b1      	b.n	8007cd4 <_svfiprintf_r+0x48>
 8007d70:	4b40      	ldr	r3, [pc, #256]	; (8007e74 <_svfiprintf_r+0x1e8>)
 8007d72:	6822      	ldr	r2, [r4, #0]
 8007d74:	1ac0      	subs	r0, r0, r3
 8007d76:	2301      	movs	r3, #1
 8007d78:	4083      	lsls	r3, r0
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	002e      	movs	r6, r5
 8007d80:	e7ce      	b.n	8007d20 <_svfiprintf_r+0x94>
 8007d82:	9b07      	ldr	r3, [sp, #28]
 8007d84:	1d19      	adds	r1, r3, #4
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	9107      	str	r1, [sp, #28]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	db01      	blt.n	8007d92 <_svfiprintf_r+0x106>
 8007d8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d90:	e004      	b.n	8007d9c <_svfiprintf_r+0x110>
 8007d92:	425b      	negs	r3, r3
 8007d94:	60e3      	str	r3, [r4, #12]
 8007d96:	2302      	movs	r3, #2
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	6023      	str	r3, [r4, #0]
 8007d9c:	782b      	ldrb	r3, [r5, #0]
 8007d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8007da0:	d10a      	bne.n	8007db8 <_svfiprintf_r+0x12c>
 8007da2:	786b      	ldrb	r3, [r5, #1]
 8007da4:	2b2a      	cmp	r3, #42	; 0x2a
 8007da6:	d135      	bne.n	8007e14 <_svfiprintf_r+0x188>
 8007da8:	9b07      	ldr	r3, [sp, #28]
 8007daa:	3502      	adds	r5, #2
 8007dac:	1d1a      	adds	r2, r3, #4
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	9207      	str	r2, [sp, #28]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	db2b      	blt.n	8007e0e <_svfiprintf_r+0x182>
 8007db6:	9309      	str	r3, [sp, #36]	; 0x24
 8007db8:	4e2f      	ldr	r6, [pc, #188]	; (8007e78 <_svfiprintf_r+0x1ec>)
 8007dba:	7829      	ldrb	r1, [r5, #0]
 8007dbc:	2203      	movs	r2, #3
 8007dbe:	0030      	movs	r0, r6
 8007dc0:	f000 f9d8 	bl	8008174 <memchr>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d006      	beq.n	8007dd6 <_svfiprintf_r+0x14a>
 8007dc8:	2340      	movs	r3, #64	; 0x40
 8007dca:	1b80      	subs	r0, r0, r6
 8007dcc:	4083      	lsls	r3, r0
 8007dce:	6822      	ldr	r2, [r4, #0]
 8007dd0:	3501      	adds	r5, #1
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	7829      	ldrb	r1, [r5, #0]
 8007dd8:	2206      	movs	r2, #6
 8007dda:	4828      	ldr	r0, [pc, #160]	; (8007e7c <_svfiprintf_r+0x1f0>)
 8007ddc:	1c6e      	adds	r6, r5, #1
 8007dde:	7621      	strb	r1, [r4, #24]
 8007de0:	f000 f9c8 	bl	8008174 <memchr>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d03c      	beq.n	8007e62 <_svfiprintf_r+0x1d6>
 8007de8:	4b25      	ldr	r3, [pc, #148]	; (8007e80 <_svfiprintf_r+0x1f4>)
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d125      	bne.n	8007e3a <_svfiprintf_r+0x1ae>
 8007dee:	2207      	movs	r2, #7
 8007df0:	9b07      	ldr	r3, [sp, #28]
 8007df2:	3307      	adds	r3, #7
 8007df4:	4393      	bics	r3, r2
 8007df6:	3308      	adds	r3, #8
 8007df8:	9307      	str	r3, [sp, #28]
 8007dfa:	6963      	ldr	r3, [r4, #20]
 8007dfc:	9a04      	ldr	r2, [sp, #16]
 8007dfe:	189b      	adds	r3, r3, r2
 8007e00:	6163      	str	r3, [r4, #20]
 8007e02:	e766      	b.n	8007cd2 <_svfiprintf_r+0x46>
 8007e04:	4343      	muls	r3, r0
 8007e06:	2101      	movs	r1, #1
 8007e08:	189b      	adds	r3, r3, r2
 8007e0a:	0035      	movs	r5, r6
 8007e0c:	e7a6      	b.n	8007d5c <_svfiprintf_r+0xd0>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	425b      	negs	r3, r3
 8007e12:	e7d0      	b.n	8007db6 <_svfiprintf_r+0x12a>
 8007e14:	2300      	movs	r3, #0
 8007e16:	200a      	movs	r0, #10
 8007e18:	001a      	movs	r2, r3
 8007e1a:	3501      	adds	r5, #1
 8007e1c:	6063      	str	r3, [r4, #4]
 8007e1e:	7829      	ldrb	r1, [r5, #0]
 8007e20:	1c6e      	adds	r6, r5, #1
 8007e22:	3930      	subs	r1, #48	; 0x30
 8007e24:	2909      	cmp	r1, #9
 8007e26:	d903      	bls.n	8007e30 <_svfiprintf_r+0x1a4>
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0c5      	beq.n	8007db8 <_svfiprintf_r+0x12c>
 8007e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e2e:	e7c3      	b.n	8007db8 <_svfiprintf_r+0x12c>
 8007e30:	4342      	muls	r2, r0
 8007e32:	2301      	movs	r3, #1
 8007e34:	1852      	adds	r2, r2, r1
 8007e36:	0035      	movs	r5, r6
 8007e38:	e7f1      	b.n	8007e1e <_svfiprintf_r+0x192>
 8007e3a:	ab07      	add	r3, sp, #28
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	003a      	movs	r2, r7
 8007e40:	4b10      	ldr	r3, [pc, #64]	; (8007e84 <_svfiprintf_r+0x1f8>)
 8007e42:	0021      	movs	r1, r4
 8007e44:	9803      	ldr	r0, [sp, #12]
 8007e46:	e000      	b.n	8007e4a <_svfiprintf_r+0x1be>
 8007e48:	bf00      	nop
 8007e4a:	9004      	str	r0, [sp, #16]
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	d1d3      	bne.n	8007dfa <_svfiprintf_r+0x16e>
 8007e52:	89bb      	ldrh	r3, [r7, #12]
 8007e54:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007e56:	065b      	lsls	r3, r3, #25
 8007e58:	d400      	bmi.n	8007e5c <_svfiprintf_r+0x1d0>
 8007e5a:	e72e      	b.n	8007cba <_svfiprintf_r+0x2e>
 8007e5c:	2001      	movs	r0, #1
 8007e5e:	4240      	negs	r0, r0
 8007e60:	e72b      	b.n	8007cba <_svfiprintf_r+0x2e>
 8007e62:	ab07      	add	r3, sp, #28
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	003a      	movs	r2, r7
 8007e68:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <_svfiprintf_r+0x1f8>)
 8007e6a:	0021      	movs	r1, r4
 8007e6c:	9803      	ldr	r0, [sp, #12]
 8007e6e:	f000 f879 	bl	8007f64 <_printf_i>
 8007e72:	e7ea      	b.n	8007e4a <_svfiprintf_r+0x1be>
 8007e74:	08008e50 	.word	0x08008e50
 8007e78:	08008e56 	.word	0x08008e56
 8007e7c:	08008e5a 	.word	0x08008e5a
 8007e80:	00000000 	.word	0x00000000
 8007e84:	08007bc9 	.word	0x08007bc9

08007e88 <_printf_common>:
 8007e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e8a:	0015      	movs	r5, r2
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	688a      	ldr	r2, [r1, #8]
 8007e90:	690b      	ldr	r3, [r1, #16]
 8007e92:	9000      	str	r0, [sp, #0]
 8007e94:	000c      	movs	r4, r1
 8007e96:	4293      	cmp	r3, r2
 8007e98:	da00      	bge.n	8007e9c <_printf_common+0x14>
 8007e9a:	0013      	movs	r3, r2
 8007e9c:	0022      	movs	r2, r4
 8007e9e:	602b      	str	r3, [r5, #0]
 8007ea0:	3243      	adds	r2, #67	; 0x43
 8007ea2:	7812      	ldrb	r2, [r2, #0]
 8007ea4:	2a00      	cmp	r2, #0
 8007ea6:	d001      	beq.n	8007eac <_printf_common+0x24>
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	602b      	str	r3, [r5, #0]
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	069b      	lsls	r3, r3, #26
 8007eb0:	d502      	bpl.n	8007eb8 <_printf_common+0x30>
 8007eb2:	682b      	ldr	r3, [r5, #0]
 8007eb4:	3302      	adds	r3, #2
 8007eb6:	602b      	str	r3, [r5, #0]
 8007eb8:	2706      	movs	r7, #6
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	401f      	ands	r7, r3
 8007ebe:	d027      	beq.n	8007f10 <_printf_common+0x88>
 8007ec0:	0023      	movs	r3, r4
 8007ec2:	3343      	adds	r3, #67	; 0x43
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	1e5a      	subs	r2, r3, #1
 8007ec8:	4193      	sbcs	r3, r2
 8007eca:	6822      	ldr	r2, [r4, #0]
 8007ecc:	0692      	lsls	r2, r2, #26
 8007ece:	d430      	bmi.n	8007f32 <_printf_common+0xaa>
 8007ed0:	0022      	movs	r2, r4
 8007ed2:	9901      	ldr	r1, [sp, #4]
 8007ed4:	3243      	adds	r2, #67	; 0x43
 8007ed6:	9800      	ldr	r0, [sp, #0]
 8007ed8:	9e08      	ldr	r6, [sp, #32]
 8007eda:	47b0      	blx	r6
 8007edc:	1c43      	adds	r3, r0, #1
 8007ede:	d025      	beq.n	8007f2c <_printf_common+0xa4>
 8007ee0:	2306      	movs	r3, #6
 8007ee2:	6820      	ldr	r0, [r4, #0]
 8007ee4:	682a      	ldr	r2, [r5, #0]
 8007ee6:	68e1      	ldr	r1, [r4, #12]
 8007ee8:	4003      	ands	r3, r0
 8007eea:	2500      	movs	r5, #0
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d103      	bne.n	8007ef8 <_printf_common+0x70>
 8007ef0:	1a8d      	subs	r5, r1, r2
 8007ef2:	43eb      	mvns	r3, r5
 8007ef4:	17db      	asrs	r3, r3, #31
 8007ef6:	401d      	ands	r5, r3
 8007ef8:	68a3      	ldr	r3, [r4, #8]
 8007efa:	6922      	ldr	r2, [r4, #16]
 8007efc:	4293      	cmp	r3, r2
 8007efe:	dd01      	ble.n	8007f04 <_printf_common+0x7c>
 8007f00:	1a9b      	subs	r3, r3, r2
 8007f02:	18ed      	adds	r5, r5, r3
 8007f04:	2700      	movs	r7, #0
 8007f06:	42bd      	cmp	r5, r7
 8007f08:	d120      	bne.n	8007f4c <_printf_common+0xc4>
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	e010      	b.n	8007f30 <_printf_common+0xa8>
 8007f0e:	3701      	adds	r7, #1
 8007f10:	68e3      	ldr	r3, [r4, #12]
 8007f12:	682a      	ldr	r2, [r5, #0]
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	42bb      	cmp	r3, r7
 8007f18:	ddd2      	ble.n	8007ec0 <_printf_common+0x38>
 8007f1a:	0022      	movs	r2, r4
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	3219      	adds	r2, #25
 8007f20:	9901      	ldr	r1, [sp, #4]
 8007f22:	9800      	ldr	r0, [sp, #0]
 8007f24:	9e08      	ldr	r6, [sp, #32]
 8007f26:	47b0      	blx	r6
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	d1f0      	bne.n	8007f0e <_printf_common+0x86>
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	4240      	negs	r0, r0
 8007f30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f32:	2030      	movs	r0, #48	; 0x30
 8007f34:	18e1      	adds	r1, r4, r3
 8007f36:	3143      	adds	r1, #67	; 0x43
 8007f38:	7008      	strb	r0, [r1, #0]
 8007f3a:	0021      	movs	r1, r4
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	3145      	adds	r1, #69	; 0x45
 8007f40:	7809      	ldrb	r1, [r1, #0]
 8007f42:	18a2      	adds	r2, r4, r2
 8007f44:	3243      	adds	r2, #67	; 0x43
 8007f46:	3302      	adds	r3, #2
 8007f48:	7011      	strb	r1, [r2, #0]
 8007f4a:	e7c1      	b.n	8007ed0 <_printf_common+0x48>
 8007f4c:	0022      	movs	r2, r4
 8007f4e:	2301      	movs	r3, #1
 8007f50:	321a      	adds	r2, #26
 8007f52:	9901      	ldr	r1, [sp, #4]
 8007f54:	9800      	ldr	r0, [sp, #0]
 8007f56:	9e08      	ldr	r6, [sp, #32]
 8007f58:	47b0      	blx	r6
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	d0e6      	beq.n	8007f2c <_printf_common+0xa4>
 8007f5e:	3701      	adds	r7, #1
 8007f60:	e7d1      	b.n	8007f06 <_printf_common+0x7e>
	...

08007f64 <_printf_i>:
 8007f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f66:	b089      	sub	sp, #36	; 0x24
 8007f68:	9204      	str	r2, [sp, #16]
 8007f6a:	000a      	movs	r2, r1
 8007f6c:	3243      	adds	r2, #67	; 0x43
 8007f6e:	9305      	str	r3, [sp, #20]
 8007f70:	9003      	str	r0, [sp, #12]
 8007f72:	9202      	str	r2, [sp, #8]
 8007f74:	7e0a      	ldrb	r2, [r1, #24]
 8007f76:	000c      	movs	r4, r1
 8007f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f7a:	2a6e      	cmp	r2, #110	; 0x6e
 8007f7c:	d100      	bne.n	8007f80 <_printf_i+0x1c>
 8007f7e:	e086      	b.n	800808e <_printf_i+0x12a>
 8007f80:	d81f      	bhi.n	8007fc2 <_printf_i+0x5e>
 8007f82:	2a63      	cmp	r2, #99	; 0x63
 8007f84:	d033      	beq.n	8007fee <_printf_i+0x8a>
 8007f86:	d808      	bhi.n	8007f9a <_printf_i+0x36>
 8007f88:	2a00      	cmp	r2, #0
 8007f8a:	d100      	bne.n	8007f8e <_printf_i+0x2a>
 8007f8c:	e08c      	b.n	80080a8 <_printf_i+0x144>
 8007f8e:	2a58      	cmp	r2, #88	; 0x58
 8007f90:	d04d      	beq.n	800802e <_printf_i+0xca>
 8007f92:	0025      	movs	r5, r4
 8007f94:	3542      	adds	r5, #66	; 0x42
 8007f96:	702a      	strb	r2, [r5, #0]
 8007f98:	e030      	b.n	8007ffc <_printf_i+0x98>
 8007f9a:	2a64      	cmp	r2, #100	; 0x64
 8007f9c:	d001      	beq.n	8007fa2 <_printf_i+0x3e>
 8007f9e:	2a69      	cmp	r2, #105	; 0x69
 8007fa0:	d1f7      	bne.n	8007f92 <_printf_i+0x2e>
 8007fa2:	6819      	ldr	r1, [r3, #0]
 8007fa4:	6825      	ldr	r5, [r4, #0]
 8007fa6:	1d0a      	adds	r2, r1, #4
 8007fa8:	0628      	lsls	r0, r5, #24
 8007faa:	d529      	bpl.n	8008000 <_printf_i+0x9c>
 8007fac:	6808      	ldr	r0, [r1, #0]
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	da03      	bge.n	8007fbc <_printf_i+0x58>
 8007fb4:	232d      	movs	r3, #45	; 0x2d
 8007fb6:	9a02      	ldr	r2, [sp, #8]
 8007fb8:	4240      	negs	r0, r0
 8007fba:	7013      	strb	r3, [r2, #0]
 8007fbc:	4e6b      	ldr	r6, [pc, #428]	; (800816c <_printf_i+0x208>)
 8007fbe:	270a      	movs	r7, #10
 8007fc0:	e04f      	b.n	8008062 <_printf_i+0xfe>
 8007fc2:	2a73      	cmp	r2, #115	; 0x73
 8007fc4:	d074      	beq.n	80080b0 <_printf_i+0x14c>
 8007fc6:	d808      	bhi.n	8007fda <_printf_i+0x76>
 8007fc8:	2a6f      	cmp	r2, #111	; 0x6f
 8007fca:	d01f      	beq.n	800800c <_printf_i+0xa8>
 8007fcc:	2a70      	cmp	r2, #112	; 0x70
 8007fce:	d1e0      	bne.n	8007f92 <_printf_i+0x2e>
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	6809      	ldr	r1, [r1, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	6022      	str	r2, [r4, #0]
 8007fd8:	e003      	b.n	8007fe2 <_printf_i+0x7e>
 8007fda:	2a75      	cmp	r2, #117	; 0x75
 8007fdc:	d016      	beq.n	800800c <_printf_i+0xa8>
 8007fde:	2a78      	cmp	r2, #120	; 0x78
 8007fe0:	d1d7      	bne.n	8007f92 <_printf_i+0x2e>
 8007fe2:	0022      	movs	r2, r4
 8007fe4:	2178      	movs	r1, #120	; 0x78
 8007fe6:	3245      	adds	r2, #69	; 0x45
 8007fe8:	7011      	strb	r1, [r2, #0]
 8007fea:	4e61      	ldr	r6, [pc, #388]	; (8008170 <_printf_i+0x20c>)
 8007fec:	e022      	b.n	8008034 <_printf_i+0xd0>
 8007fee:	0025      	movs	r5, r4
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	3542      	adds	r5, #66	; 0x42
 8007ff4:	1d11      	adds	r1, r2, #4
 8007ff6:	6019      	str	r1, [r3, #0]
 8007ff8:	6813      	ldr	r3, [r2, #0]
 8007ffa:	702b      	strb	r3, [r5, #0]
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e065      	b.n	80080cc <_printf_i+0x168>
 8008000:	6808      	ldr	r0, [r1, #0]
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	0669      	lsls	r1, r5, #25
 8008006:	d5d3      	bpl.n	8007fb0 <_printf_i+0x4c>
 8008008:	b200      	sxth	r0, r0
 800800a:	e7d1      	b.n	8007fb0 <_printf_i+0x4c>
 800800c:	6819      	ldr	r1, [r3, #0]
 800800e:	6825      	ldr	r5, [r4, #0]
 8008010:	1d08      	adds	r0, r1, #4
 8008012:	6018      	str	r0, [r3, #0]
 8008014:	6808      	ldr	r0, [r1, #0]
 8008016:	062e      	lsls	r6, r5, #24
 8008018:	d505      	bpl.n	8008026 <_printf_i+0xc2>
 800801a:	4e54      	ldr	r6, [pc, #336]	; (800816c <_printf_i+0x208>)
 800801c:	2708      	movs	r7, #8
 800801e:	2a6f      	cmp	r2, #111	; 0x6f
 8008020:	d01b      	beq.n	800805a <_printf_i+0xf6>
 8008022:	270a      	movs	r7, #10
 8008024:	e019      	b.n	800805a <_printf_i+0xf6>
 8008026:	066d      	lsls	r5, r5, #25
 8008028:	d5f7      	bpl.n	800801a <_printf_i+0xb6>
 800802a:	b280      	uxth	r0, r0
 800802c:	e7f5      	b.n	800801a <_printf_i+0xb6>
 800802e:	3145      	adds	r1, #69	; 0x45
 8008030:	4e4e      	ldr	r6, [pc, #312]	; (800816c <_printf_i+0x208>)
 8008032:	700a      	strb	r2, [r1, #0]
 8008034:	6818      	ldr	r0, [r3, #0]
 8008036:	6822      	ldr	r2, [r4, #0]
 8008038:	1d01      	adds	r1, r0, #4
 800803a:	6800      	ldr	r0, [r0, #0]
 800803c:	6019      	str	r1, [r3, #0]
 800803e:	0615      	lsls	r5, r2, #24
 8008040:	d521      	bpl.n	8008086 <_printf_i+0x122>
 8008042:	07d3      	lsls	r3, r2, #31
 8008044:	d502      	bpl.n	800804c <_printf_i+0xe8>
 8008046:	2320      	movs	r3, #32
 8008048:	431a      	orrs	r2, r3
 800804a:	6022      	str	r2, [r4, #0]
 800804c:	2710      	movs	r7, #16
 800804e:	2800      	cmp	r0, #0
 8008050:	d103      	bne.n	800805a <_printf_i+0xf6>
 8008052:	2320      	movs	r3, #32
 8008054:	6822      	ldr	r2, [r4, #0]
 8008056:	439a      	bics	r2, r3
 8008058:	6022      	str	r2, [r4, #0]
 800805a:	0023      	movs	r3, r4
 800805c:	2200      	movs	r2, #0
 800805e:	3343      	adds	r3, #67	; 0x43
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	6863      	ldr	r3, [r4, #4]
 8008064:	60a3      	str	r3, [r4, #8]
 8008066:	2b00      	cmp	r3, #0
 8008068:	db58      	blt.n	800811c <_printf_i+0x1b8>
 800806a:	2204      	movs	r2, #4
 800806c:	6821      	ldr	r1, [r4, #0]
 800806e:	4391      	bics	r1, r2
 8008070:	6021      	str	r1, [r4, #0]
 8008072:	2800      	cmp	r0, #0
 8008074:	d154      	bne.n	8008120 <_printf_i+0x1bc>
 8008076:	9d02      	ldr	r5, [sp, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d05a      	beq.n	8008132 <_printf_i+0x1ce>
 800807c:	0025      	movs	r5, r4
 800807e:	7833      	ldrb	r3, [r6, #0]
 8008080:	3542      	adds	r5, #66	; 0x42
 8008082:	702b      	strb	r3, [r5, #0]
 8008084:	e055      	b.n	8008132 <_printf_i+0x1ce>
 8008086:	0655      	lsls	r5, r2, #25
 8008088:	d5db      	bpl.n	8008042 <_printf_i+0xde>
 800808a:	b280      	uxth	r0, r0
 800808c:	e7d9      	b.n	8008042 <_printf_i+0xde>
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	680d      	ldr	r5, [r1, #0]
 8008092:	1d10      	adds	r0, r2, #4
 8008094:	6949      	ldr	r1, [r1, #20]
 8008096:	6018      	str	r0, [r3, #0]
 8008098:	6813      	ldr	r3, [r2, #0]
 800809a:	062e      	lsls	r6, r5, #24
 800809c:	d501      	bpl.n	80080a2 <_printf_i+0x13e>
 800809e:	6019      	str	r1, [r3, #0]
 80080a0:	e002      	b.n	80080a8 <_printf_i+0x144>
 80080a2:	066d      	lsls	r5, r5, #25
 80080a4:	d5fb      	bpl.n	800809e <_printf_i+0x13a>
 80080a6:	8019      	strh	r1, [r3, #0]
 80080a8:	2300      	movs	r3, #0
 80080aa:	9d02      	ldr	r5, [sp, #8]
 80080ac:	6123      	str	r3, [r4, #16]
 80080ae:	e04f      	b.n	8008150 <_printf_i+0x1ec>
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	1d11      	adds	r1, r2, #4
 80080b4:	6019      	str	r1, [r3, #0]
 80080b6:	6815      	ldr	r5, [r2, #0]
 80080b8:	2100      	movs	r1, #0
 80080ba:	6862      	ldr	r2, [r4, #4]
 80080bc:	0028      	movs	r0, r5
 80080be:	f000 f859 	bl	8008174 <memchr>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d001      	beq.n	80080ca <_printf_i+0x166>
 80080c6:	1b40      	subs	r0, r0, r5
 80080c8:	6060      	str	r0, [r4, #4]
 80080ca:	6863      	ldr	r3, [r4, #4]
 80080cc:	6123      	str	r3, [r4, #16]
 80080ce:	2300      	movs	r3, #0
 80080d0:	9a02      	ldr	r2, [sp, #8]
 80080d2:	7013      	strb	r3, [r2, #0]
 80080d4:	e03c      	b.n	8008150 <_printf_i+0x1ec>
 80080d6:	6923      	ldr	r3, [r4, #16]
 80080d8:	002a      	movs	r2, r5
 80080da:	9904      	ldr	r1, [sp, #16]
 80080dc:	9803      	ldr	r0, [sp, #12]
 80080de:	9d05      	ldr	r5, [sp, #20]
 80080e0:	47a8      	blx	r5
 80080e2:	1c43      	adds	r3, r0, #1
 80080e4:	d03e      	beq.n	8008164 <_printf_i+0x200>
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	079b      	lsls	r3, r3, #30
 80080ea:	d415      	bmi.n	8008118 <_printf_i+0x1b4>
 80080ec:	9b07      	ldr	r3, [sp, #28]
 80080ee:	68e0      	ldr	r0, [r4, #12]
 80080f0:	4298      	cmp	r0, r3
 80080f2:	da39      	bge.n	8008168 <_printf_i+0x204>
 80080f4:	0018      	movs	r0, r3
 80080f6:	e037      	b.n	8008168 <_printf_i+0x204>
 80080f8:	0022      	movs	r2, r4
 80080fa:	2301      	movs	r3, #1
 80080fc:	3219      	adds	r2, #25
 80080fe:	9904      	ldr	r1, [sp, #16]
 8008100:	9803      	ldr	r0, [sp, #12]
 8008102:	9e05      	ldr	r6, [sp, #20]
 8008104:	47b0      	blx	r6
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	d02c      	beq.n	8008164 <_printf_i+0x200>
 800810a:	3501      	adds	r5, #1
 800810c:	68e3      	ldr	r3, [r4, #12]
 800810e:	9a07      	ldr	r2, [sp, #28]
 8008110:	1a9b      	subs	r3, r3, r2
 8008112:	42ab      	cmp	r3, r5
 8008114:	dcf0      	bgt.n	80080f8 <_printf_i+0x194>
 8008116:	e7e9      	b.n	80080ec <_printf_i+0x188>
 8008118:	2500      	movs	r5, #0
 800811a:	e7f7      	b.n	800810c <_printf_i+0x1a8>
 800811c:	2800      	cmp	r0, #0
 800811e:	d0ad      	beq.n	800807c <_printf_i+0x118>
 8008120:	9d02      	ldr	r5, [sp, #8]
 8008122:	0039      	movs	r1, r7
 8008124:	f7f8 f876 	bl	8000214 <__aeabi_uidivmod>
 8008128:	5c73      	ldrb	r3, [r6, r1]
 800812a:	3d01      	subs	r5, #1
 800812c:	702b      	strb	r3, [r5, #0]
 800812e:	2800      	cmp	r0, #0
 8008130:	d1f7      	bne.n	8008122 <_printf_i+0x1be>
 8008132:	2f08      	cmp	r7, #8
 8008134:	d109      	bne.n	800814a <_printf_i+0x1e6>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	07db      	lsls	r3, r3, #31
 800813a:	d506      	bpl.n	800814a <_printf_i+0x1e6>
 800813c:	6863      	ldr	r3, [r4, #4]
 800813e:	6922      	ldr	r2, [r4, #16]
 8008140:	4293      	cmp	r3, r2
 8008142:	dc02      	bgt.n	800814a <_printf_i+0x1e6>
 8008144:	2330      	movs	r3, #48	; 0x30
 8008146:	3d01      	subs	r5, #1
 8008148:	702b      	strb	r3, [r5, #0]
 800814a:	9b02      	ldr	r3, [sp, #8]
 800814c:	1b5b      	subs	r3, r3, r5
 800814e:	6123      	str	r3, [r4, #16]
 8008150:	9b05      	ldr	r3, [sp, #20]
 8008152:	aa07      	add	r2, sp, #28
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	0021      	movs	r1, r4
 8008158:	9b04      	ldr	r3, [sp, #16]
 800815a:	9803      	ldr	r0, [sp, #12]
 800815c:	f7ff fe94 	bl	8007e88 <_printf_common>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d1b8      	bne.n	80080d6 <_printf_i+0x172>
 8008164:	2001      	movs	r0, #1
 8008166:	4240      	negs	r0, r0
 8008168:	b009      	add	sp, #36	; 0x24
 800816a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800816c:	08008e61 	.word	0x08008e61
 8008170:	08008e72 	.word	0x08008e72

08008174 <memchr>:
 8008174:	b2c9      	uxtb	r1, r1
 8008176:	1882      	adds	r2, r0, r2
 8008178:	4290      	cmp	r0, r2
 800817a:	d101      	bne.n	8008180 <memchr+0xc>
 800817c:	2000      	movs	r0, #0
 800817e:	4770      	bx	lr
 8008180:	7803      	ldrb	r3, [r0, #0]
 8008182:	428b      	cmp	r3, r1
 8008184:	d0fb      	beq.n	800817e <memchr+0xa>
 8008186:	3001      	adds	r0, #1
 8008188:	e7f6      	b.n	8008178 <memchr+0x4>

0800818a <memmove>:
 800818a:	b510      	push	{r4, lr}
 800818c:	4288      	cmp	r0, r1
 800818e:	d902      	bls.n	8008196 <memmove+0xc>
 8008190:	188b      	adds	r3, r1, r2
 8008192:	4298      	cmp	r0, r3
 8008194:	d303      	bcc.n	800819e <memmove+0x14>
 8008196:	2300      	movs	r3, #0
 8008198:	e007      	b.n	80081aa <memmove+0x20>
 800819a:	5c8b      	ldrb	r3, [r1, r2]
 800819c:	5483      	strb	r3, [r0, r2]
 800819e:	3a01      	subs	r2, #1
 80081a0:	d2fb      	bcs.n	800819a <memmove+0x10>
 80081a2:	bd10      	pop	{r4, pc}
 80081a4:	5ccc      	ldrb	r4, [r1, r3]
 80081a6:	54c4      	strb	r4, [r0, r3]
 80081a8:	3301      	adds	r3, #1
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d1fa      	bne.n	80081a4 <memmove+0x1a>
 80081ae:	e7f8      	b.n	80081a2 <memmove+0x18>

080081b0 <_free_r>:
 80081b0:	b570      	push	{r4, r5, r6, lr}
 80081b2:	0005      	movs	r5, r0
 80081b4:	2900      	cmp	r1, #0
 80081b6:	d010      	beq.n	80081da <_free_r+0x2a>
 80081b8:	1f0c      	subs	r4, r1, #4
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	da00      	bge.n	80081c2 <_free_r+0x12>
 80081c0:	18e4      	adds	r4, r4, r3
 80081c2:	0028      	movs	r0, r5
 80081c4:	f000 f8d4 	bl	8008370 <__malloc_lock>
 80081c8:	4a1d      	ldr	r2, [pc, #116]	; (8008240 <_free_r+0x90>)
 80081ca:	6813      	ldr	r3, [r2, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d105      	bne.n	80081dc <_free_r+0x2c>
 80081d0:	6063      	str	r3, [r4, #4]
 80081d2:	6014      	str	r4, [r2, #0]
 80081d4:	0028      	movs	r0, r5
 80081d6:	f000 f8cc 	bl	8008372 <__malloc_unlock>
 80081da:	bd70      	pop	{r4, r5, r6, pc}
 80081dc:	42a3      	cmp	r3, r4
 80081de:	d909      	bls.n	80081f4 <_free_r+0x44>
 80081e0:	6821      	ldr	r1, [r4, #0]
 80081e2:	1860      	adds	r0, r4, r1
 80081e4:	4283      	cmp	r3, r0
 80081e6:	d1f3      	bne.n	80081d0 <_free_r+0x20>
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	1841      	adds	r1, r0, r1
 80081ee:	6021      	str	r1, [r4, #0]
 80081f0:	e7ee      	b.n	80081d0 <_free_r+0x20>
 80081f2:	0013      	movs	r3, r2
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	d001      	beq.n	80081fe <_free_r+0x4e>
 80081fa:	42a2      	cmp	r2, r4
 80081fc:	d9f9      	bls.n	80081f2 <_free_r+0x42>
 80081fe:	6819      	ldr	r1, [r3, #0]
 8008200:	1858      	adds	r0, r3, r1
 8008202:	42a0      	cmp	r0, r4
 8008204:	d10b      	bne.n	800821e <_free_r+0x6e>
 8008206:	6820      	ldr	r0, [r4, #0]
 8008208:	1809      	adds	r1, r1, r0
 800820a:	1858      	adds	r0, r3, r1
 800820c:	6019      	str	r1, [r3, #0]
 800820e:	4282      	cmp	r2, r0
 8008210:	d1e0      	bne.n	80081d4 <_free_r+0x24>
 8008212:	6810      	ldr	r0, [r2, #0]
 8008214:	6852      	ldr	r2, [r2, #4]
 8008216:	1841      	adds	r1, r0, r1
 8008218:	6019      	str	r1, [r3, #0]
 800821a:	605a      	str	r2, [r3, #4]
 800821c:	e7da      	b.n	80081d4 <_free_r+0x24>
 800821e:	42a0      	cmp	r0, r4
 8008220:	d902      	bls.n	8008228 <_free_r+0x78>
 8008222:	230c      	movs	r3, #12
 8008224:	602b      	str	r3, [r5, #0]
 8008226:	e7d5      	b.n	80081d4 <_free_r+0x24>
 8008228:	6821      	ldr	r1, [r4, #0]
 800822a:	1860      	adds	r0, r4, r1
 800822c:	4282      	cmp	r2, r0
 800822e:	d103      	bne.n	8008238 <_free_r+0x88>
 8008230:	6810      	ldr	r0, [r2, #0]
 8008232:	6852      	ldr	r2, [r2, #4]
 8008234:	1841      	adds	r1, r0, r1
 8008236:	6021      	str	r1, [r4, #0]
 8008238:	6062      	str	r2, [r4, #4]
 800823a:	605c      	str	r4, [r3, #4]
 800823c:	e7ca      	b.n	80081d4 <_free_r+0x24>
 800823e:	46c0      	nop			; (mov r8, r8)
 8008240:	20000424 	.word	0x20000424

08008244 <_malloc_r>:
 8008244:	2303      	movs	r3, #3
 8008246:	b570      	push	{r4, r5, r6, lr}
 8008248:	1ccd      	adds	r5, r1, #3
 800824a:	439d      	bics	r5, r3
 800824c:	3508      	adds	r5, #8
 800824e:	0006      	movs	r6, r0
 8008250:	2d0c      	cmp	r5, #12
 8008252:	d21e      	bcs.n	8008292 <_malloc_r+0x4e>
 8008254:	250c      	movs	r5, #12
 8008256:	42a9      	cmp	r1, r5
 8008258:	d81d      	bhi.n	8008296 <_malloc_r+0x52>
 800825a:	0030      	movs	r0, r6
 800825c:	f000 f888 	bl	8008370 <__malloc_lock>
 8008260:	4a25      	ldr	r2, [pc, #148]	; (80082f8 <_malloc_r+0xb4>)
 8008262:	6814      	ldr	r4, [r2, #0]
 8008264:	0021      	movs	r1, r4
 8008266:	2900      	cmp	r1, #0
 8008268:	d119      	bne.n	800829e <_malloc_r+0x5a>
 800826a:	4c24      	ldr	r4, [pc, #144]	; (80082fc <_malloc_r+0xb8>)
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d103      	bne.n	800827a <_malloc_r+0x36>
 8008272:	0030      	movs	r0, r6
 8008274:	f000 f86a 	bl	800834c <_sbrk_r>
 8008278:	6020      	str	r0, [r4, #0]
 800827a:	0029      	movs	r1, r5
 800827c:	0030      	movs	r0, r6
 800827e:	f000 f865 	bl	800834c <_sbrk_r>
 8008282:	1c43      	adds	r3, r0, #1
 8008284:	d12b      	bne.n	80082de <_malloc_r+0x9a>
 8008286:	230c      	movs	r3, #12
 8008288:	0030      	movs	r0, r6
 800828a:	6033      	str	r3, [r6, #0]
 800828c:	f000 f871 	bl	8008372 <__malloc_unlock>
 8008290:	e003      	b.n	800829a <_malloc_r+0x56>
 8008292:	2d00      	cmp	r5, #0
 8008294:	dadf      	bge.n	8008256 <_malloc_r+0x12>
 8008296:	230c      	movs	r3, #12
 8008298:	6033      	str	r3, [r6, #0]
 800829a:	2000      	movs	r0, #0
 800829c:	bd70      	pop	{r4, r5, r6, pc}
 800829e:	680b      	ldr	r3, [r1, #0]
 80082a0:	1b5b      	subs	r3, r3, r5
 80082a2:	d419      	bmi.n	80082d8 <_malloc_r+0x94>
 80082a4:	2b0b      	cmp	r3, #11
 80082a6:	d903      	bls.n	80082b0 <_malloc_r+0x6c>
 80082a8:	600b      	str	r3, [r1, #0]
 80082aa:	18cc      	adds	r4, r1, r3
 80082ac:	6025      	str	r5, [r4, #0]
 80082ae:	e003      	b.n	80082b8 <_malloc_r+0x74>
 80082b0:	684b      	ldr	r3, [r1, #4]
 80082b2:	428c      	cmp	r4, r1
 80082b4:	d10d      	bne.n	80082d2 <_malloc_r+0x8e>
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	0030      	movs	r0, r6
 80082ba:	f000 f85a 	bl	8008372 <__malloc_unlock>
 80082be:	0020      	movs	r0, r4
 80082c0:	2207      	movs	r2, #7
 80082c2:	300b      	adds	r0, #11
 80082c4:	1d23      	adds	r3, r4, #4
 80082c6:	4390      	bics	r0, r2
 80082c8:	1ac3      	subs	r3, r0, r3
 80082ca:	d0e7      	beq.n	800829c <_malloc_r+0x58>
 80082cc:	425a      	negs	r2, r3
 80082ce:	50e2      	str	r2, [r4, r3]
 80082d0:	e7e4      	b.n	800829c <_malloc_r+0x58>
 80082d2:	6063      	str	r3, [r4, #4]
 80082d4:	000c      	movs	r4, r1
 80082d6:	e7ef      	b.n	80082b8 <_malloc_r+0x74>
 80082d8:	000c      	movs	r4, r1
 80082da:	6849      	ldr	r1, [r1, #4]
 80082dc:	e7c3      	b.n	8008266 <_malloc_r+0x22>
 80082de:	2303      	movs	r3, #3
 80082e0:	1cc4      	adds	r4, r0, #3
 80082e2:	439c      	bics	r4, r3
 80082e4:	42a0      	cmp	r0, r4
 80082e6:	d0e1      	beq.n	80082ac <_malloc_r+0x68>
 80082e8:	1a21      	subs	r1, r4, r0
 80082ea:	0030      	movs	r0, r6
 80082ec:	f000 f82e 	bl	800834c <_sbrk_r>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d1db      	bne.n	80082ac <_malloc_r+0x68>
 80082f4:	e7c7      	b.n	8008286 <_malloc_r+0x42>
 80082f6:	46c0      	nop			; (mov r8, r8)
 80082f8:	20000424 	.word	0x20000424
 80082fc:	20000428 	.word	0x20000428

08008300 <_realloc_r>:
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	0007      	movs	r7, r0
 8008304:	000d      	movs	r5, r1
 8008306:	0016      	movs	r6, r2
 8008308:	2900      	cmp	r1, #0
 800830a:	d105      	bne.n	8008318 <_realloc_r+0x18>
 800830c:	0011      	movs	r1, r2
 800830e:	f7ff ff99 	bl	8008244 <_malloc_r>
 8008312:	0004      	movs	r4, r0
 8008314:	0020      	movs	r0, r4
 8008316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008318:	2a00      	cmp	r2, #0
 800831a:	d103      	bne.n	8008324 <_realloc_r+0x24>
 800831c:	f7ff ff48 	bl	80081b0 <_free_r>
 8008320:	0034      	movs	r4, r6
 8008322:	e7f7      	b.n	8008314 <_realloc_r+0x14>
 8008324:	f000 f826 	bl	8008374 <_malloc_usable_size_r>
 8008328:	002c      	movs	r4, r5
 800832a:	42b0      	cmp	r0, r6
 800832c:	d2f2      	bcs.n	8008314 <_realloc_r+0x14>
 800832e:	0031      	movs	r1, r6
 8008330:	0038      	movs	r0, r7
 8008332:	f7ff ff87 	bl	8008244 <_malloc_r>
 8008336:	1e04      	subs	r4, r0, #0
 8008338:	d0ec      	beq.n	8008314 <_realloc_r+0x14>
 800833a:	0029      	movs	r1, r5
 800833c:	0032      	movs	r2, r6
 800833e:	f7ff fbed 	bl	8007b1c <memcpy>
 8008342:	0029      	movs	r1, r5
 8008344:	0038      	movs	r0, r7
 8008346:	f7ff ff33 	bl	80081b0 <_free_r>
 800834a:	e7e3      	b.n	8008314 <_realloc_r+0x14>

0800834c <_sbrk_r>:
 800834c:	2300      	movs	r3, #0
 800834e:	b570      	push	{r4, r5, r6, lr}
 8008350:	4c06      	ldr	r4, [pc, #24]	; (800836c <_sbrk_r+0x20>)
 8008352:	0005      	movs	r5, r0
 8008354:	0008      	movs	r0, r1
 8008356:	6023      	str	r3, [r4, #0]
 8008358:	f7fe fca2 	bl	8006ca0 <_sbrk>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d103      	bne.n	8008368 <_sbrk_r+0x1c>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d000      	beq.n	8008368 <_sbrk_r+0x1c>
 8008366:	602b      	str	r3, [r5, #0]
 8008368:	bd70      	pop	{r4, r5, r6, pc}
 800836a:	46c0      	nop			; (mov r8, r8)
 800836c:	20001198 	.word	0x20001198

08008370 <__malloc_lock>:
 8008370:	4770      	bx	lr

08008372 <__malloc_unlock>:
 8008372:	4770      	bx	lr

08008374 <_malloc_usable_size_r>:
 8008374:	1f0b      	subs	r3, r1, #4
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	1f18      	subs	r0, r3, #4
 800837a:	2b00      	cmp	r3, #0
 800837c:	da01      	bge.n	8008382 <_malloc_usable_size_r+0xe>
 800837e:	580b      	ldr	r3, [r1, r0]
 8008380:	18c0      	adds	r0, r0, r3
 8008382:	4770      	bx	lr

08008384 <_init>:
 8008384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008386:	46c0      	nop			; (mov r8, r8)
 8008388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800838a:	bc08      	pop	{r3}
 800838c:	469e      	mov	lr, r3
 800838e:	4770      	bx	lr

08008390 <_fini>:
 8008390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008392:	46c0      	nop			; (mov r8, r8)
 8008394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008396:	bc08      	pop	{r3}
 8008398:	469e      	mov	lr, r3
 800839a:	4770      	bx	lr
