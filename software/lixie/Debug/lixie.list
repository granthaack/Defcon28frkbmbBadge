
lixie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007228  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  080072e8  080072e8  000172e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007850  08007850  00020178  2**0
                  CONTENTS
  4 .ARM          00000000  08007850  08007850  00020178  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007850  08007850  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007850  08007850  00017850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007854  08007854  00017854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08007858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001030  20000178  080079d0  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011a8  080079d0  000211a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179c6  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000386b  00000000  00000000  00037b66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec8  00000000  00000000  0003b3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d10  00000000  00000000  0003c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001794e  00000000  00000000  0003cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010666  00000000  00000000  000548fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d29f  00000000  00000000  00064f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2203  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003238  00000000  00000000  000e2280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000178 	.word	0x20000178
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080072d0 	.word	0x080072d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000017c 	.word	0x2000017c
 8000104:	080072d0 	.word	0x080072d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <HAL_Init+0x3c>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <HAL_Init+0x3c>)
 8000232:	2140      	movs	r1, #64	; 0x40
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000238:	2000      	movs	r0, #0
 800023a:	f000 f811 	bl	8000260 <HAL_InitTick>
 800023e:	1e03      	subs	r3, r0, #0
 8000240:	d003      	beq.n	800024a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
 8000248:	e001      	b.n	800024e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800024a:	f006 f897 	bl	800637c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800024e:	1dfb      	adds	r3, r7, #7
 8000250:	781b      	ldrb	r3, [r3, #0]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	40022000 	.word	0x40022000

08000260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000268:	230f      	movs	r3, #15
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <HAL_InitTick+0x50>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	23fa      	movs	r3, #250	; 0xfa
 8000276:	0099      	lsls	r1, r3, #2
 8000278:	0010      	movs	r0, r2
 800027a:	f7ff ff45 	bl	8000108 <__udivsi3>
 800027e:	0003      	movs	r3, r0
 8000280:	0018      	movs	r0, r3
 8000282:	f000 f8fa 	bl	800047a <HAL_SYSTICK_Config>
 8000286:	1e03      	subs	r3, r0, #0
 8000288:	d004      	beq.n	8000294 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800028a:	230f      	movs	r3, #15
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
 8000292:	e006      	b.n	80002a2 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	2301      	movs	r3, #1
 8000298:	425b      	negs	r3, r3
 800029a:	2200      	movs	r2, #0
 800029c:	0018      	movs	r0, r3
 800029e:	f000 f8c7 	bl	8000430 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80002a2:	230f      	movs	r3, #15
 80002a4:	18fb      	adds	r3, r7, r3
 80002a6:	781b      	ldrb	r3, [r3, #0]
}
 80002a8:	0018      	movs	r0, r3
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b004      	add	sp, #16
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000110 	.word	0x20000110

080002b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  uwTick++;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <HAL_IncTick+0x14>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	1c5a      	adds	r2, r3, #1
 80002be:	4b02      	ldr	r3, [pc, #8]	; (80002c8 <HAL_IncTick+0x14>)
 80002c0:	601a      	str	r2, [r3, #0]
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	200003b8 	.word	0x200003b8

080002cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  return uwTick;
 80002d0:	4b02      	ldr	r3, [pc, #8]	; (80002dc <HAL_GetTick+0x10>)
 80002d2:	681b      	ldr	r3, [r3, #0]
}
 80002d4:	0018      	movs	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	200003b8 	.word	0x200003b8

080002e0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	0002      	movs	r2, r0
 80002e8:	1dfb      	adds	r3, r7, #7
 80002ea:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002ec:	1dfb      	adds	r3, r7, #7
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	001a      	movs	r2, r3
 80002f2:	231f      	movs	r3, #31
 80002f4:	401a      	ands	r2, r3
 80002f6:	4b04      	ldr	r3, [pc, #16]	; (8000308 <NVIC_EnableIRQ+0x28>)
 80002f8:	2101      	movs	r1, #1
 80002fa:	4091      	lsls	r1, r2
 80002fc:	000a      	movs	r2, r1
 80002fe:	601a      	str	r2, [r3, #0]
}
 8000300:	46c0      	nop			; (mov r8, r8)
 8000302:	46bd      	mov	sp, r7
 8000304:	b002      	add	sp, #8
 8000306:	bd80      	pop	{r7, pc}
 8000308:	e000e100 	.word	0xe000e100

0800030c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800030c:	b590      	push	{r4, r7, lr}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	0002      	movs	r2, r0
 8000314:	6039      	str	r1, [r7, #0]
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800031a:	1dfb      	adds	r3, r7, #7
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b7f      	cmp	r3, #127	; 0x7f
 8000320:	d932      	bls.n	8000388 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000322:	4a2f      	ldr	r2, [pc, #188]	; (80003e0 <NVIC_SetPriority+0xd4>)
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	0019      	movs	r1, r3
 800032a:	230f      	movs	r3, #15
 800032c:	400b      	ands	r3, r1
 800032e:	3b08      	subs	r3, #8
 8000330:	089b      	lsrs	r3, r3, #2
 8000332:	3306      	adds	r3, #6
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	18d3      	adds	r3, r2, r3
 8000338:	3304      	adds	r3, #4
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	1dfa      	adds	r2, r7, #7
 800033e:	7812      	ldrb	r2, [r2, #0]
 8000340:	0011      	movs	r1, r2
 8000342:	2203      	movs	r2, #3
 8000344:	400a      	ands	r2, r1
 8000346:	00d2      	lsls	r2, r2, #3
 8000348:	21ff      	movs	r1, #255	; 0xff
 800034a:	4091      	lsls	r1, r2
 800034c:	000a      	movs	r2, r1
 800034e:	43d2      	mvns	r2, r2
 8000350:	401a      	ands	r2, r3
 8000352:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	019b      	lsls	r3, r3, #6
 8000358:	22ff      	movs	r2, #255	; 0xff
 800035a:	401a      	ands	r2, r3
 800035c:	1dfb      	adds	r3, r7, #7
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	0018      	movs	r0, r3
 8000362:	2303      	movs	r3, #3
 8000364:	4003      	ands	r3, r0
 8000366:	00db      	lsls	r3, r3, #3
 8000368:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800036a:	481d      	ldr	r0, [pc, #116]	; (80003e0 <NVIC_SetPriority+0xd4>)
 800036c:	1dfb      	adds	r3, r7, #7
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	001c      	movs	r4, r3
 8000372:	230f      	movs	r3, #15
 8000374:	4023      	ands	r3, r4
 8000376:	3b08      	subs	r3, #8
 8000378:	089b      	lsrs	r3, r3, #2
 800037a:	430a      	orrs	r2, r1
 800037c:	3306      	adds	r3, #6
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	18c3      	adds	r3, r0, r3
 8000382:	3304      	adds	r3, #4
 8000384:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000386:	e027      	b.n	80003d8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000388:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <NVIC_SetPriority+0xd8>)
 800038a:	1dfb      	adds	r3, r7, #7
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	b25b      	sxtb	r3, r3
 8000390:	089b      	lsrs	r3, r3, #2
 8000392:	33c0      	adds	r3, #192	; 0xc0
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	589b      	ldr	r3, [r3, r2]
 8000398:	1dfa      	adds	r2, r7, #7
 800039a:	7812      	ldrb	r2, [r2, #0]
 800039c:	0011      	movs	r1, r2
 800039e:	2203      	movs	r2, #3
 80003a0:	400a      	ands	r2, r1
 80003a2:	00d2      	lsls	r2, r2, #3
 80003a4:	21ff      	movs	r1, #255	; 0xff
 80003a6:	4091      	lsls	r1, r2
 80003a8:	000a      	movs	r2, r1
 80003aa:	43d2      	mvns	r2, r2
 80003ac:	401a      	ands	r2, r3
 80003ae:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	019b      	lsls	r3, r3, #6
 80003b4:	22ff      	movs	r2, #255	; 0xff
 80003b6:	401a      	ands	r2, r3
 80003b8:	1dfb      	adds	r3, r7, #7
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	0018      	movs	r0, r3
 80003be:	2303      	movs	r3, #3
 80003c0:	4003      	ands	r3, r0
 80003c2:	00db      	lsls	r3, r3, #3
 80003c4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003c6:	4807      	ldr	r0, [pc, #28]	; (80003e4 <NVIC_SetPriority+0xd8>)
 80003c8:	1dfb      	adds	r3, r7, #7
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	b25b      	sxtb	r3, r3
 80003ce:	089b      	lsrs	r3, r3, #2
 80003d0:	430a      	orrs	r2, r1
 80003d2:	33c0      	adds	r3, #192	; 0xc0
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	501a      	str	r2, [r3, r0]
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	b003      	add	sp, #12
 80003de:	bd90      	pop	{r4, r7, pc}
 80003e0:	e000ed00 	.word	0xe000ed00
 80003e4:	e000e100 	.word	0xe000e100

080003e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	3b01      	subs	r3, #1
 80003f4:	4a0c      	ldr	r2, [pc, #48]	; (8000428 <SysTick_Config+0x40>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d901      	bls.n	80003fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003fa:	2301      	movs	r3, #1
 80003fc:	e010      	b.n	8000420 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <SysTick_Config+0x44>)
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	3a01      	subs	r2, #1
 8000404:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000406:	2301      	movs	r3, #1
 8000408:	425b      	negs	r3, r3
 800040a:	2103      	movs	r1, #3
 800040c:	0018      	movs	r0, r3
 800040e:	f7ff ff7d 	bl	800030c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <SysTick_Config+0x44>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <SysTick_Config+0x44>)
 800041a:	2207      	movs	r2, #7
 800041c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800041e:	2300      	movs	r3, #0
}
 8000420:	0018      	movs	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}
 8000428:	00ffffff 	.word	0x00ffffff
 800042c:	e000e010 	.word	0xe000e010

08000430 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	60b9      	str	r1, [r7, #8]
 8000438:	607a      	str	r2, [r7, #4]
 800043a:	210f      	movs	r1, #15
 800043c:	187b      	adds	r3, r7, r1
 800043e:	1c02      	adds	r2, r0, #0
 8000440:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000442:	68ba      	ldr	r2, [r7, #8]
 8000444:	187b      	adds	r3, r7, r1
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	b25b      	sxtb	r3, r3
 800044a:	0011      	movs	r1, r2
 800044c:	0018      	movs	r0, r3
 800044e:	f7ff ff5d 	bl	800030c <NVIC_SetPriority>
}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	b004      	add	sp, #16
 8000458:	bd80      	pop	{r7, pc}

0800045a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	0002      	movs	r2, r0
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	b25b      	sxtb	r3, r3
 800046c:	0018      	movs	r0, r3
 800046e:	f7ff ff37 	bl	80002e0 <NVIC_EnableIRQ>
}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b002      	add	sp, #8
 8000478:	bd80      	pop	{r7, pc}

0800047a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b082      	sub	sp, #8
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	0018      	movs	r0, r3
 8000486:	f7ff ffaf 	bl	80003e8 <SysTick_Config>
 800048a:	0003      	movs	r3, r0
}
 800048c:	0018      	movs	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	b002      	add	sp, #8
 8000492:	bd80      	pop	{r7, pc}

08000494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004a2:	2300      	movs	r3, #0
 80004a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004a6:	2300      	movs	r3, #0
 80004a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80004aa:	e155      	b.n	8000758 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2101      	movs	r1, #1
 80004b2:	697a      	ldr	r2, [r7, #20]
 80004b4:	4091      	lsls	r1, r2
 80004b6:	000a      	movs	r2, r1
 80004b8:	4013      	ands	r3, r2
 80004ba:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d100      	bne.n	80004c4 <HAL_GPIO_Init+0x30>
 80004c2:	e146      	b.n	8000752 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	2b02      	cmp	r3, #2
 80004ca:	d003      	beq.n	80004d4 <HAL_GPIO_Init+0x40>
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	2b12      	cmp	r3, #18
 80004d2:	d123      	bne.n	800051c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	08da      	lsrs	r2, r3, #3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	3208      	adds	r2, #8
 80004dc:	0092      	lsls	r2, r2, #2
 80004de:	58d3      	ldr	r3, [r2, r3]
 80004e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	2207      	movs	r2, #7
 80004e6:	4013      	ands	r3, r2
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	220f      	movs	r2, #15
 80004ec:	409a      	lsls	r2, r3
 80004ee:	0013      	movs	r3, r2
 80004f0:	43da      	mvns	r2, r3
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	4013      	ands	r3, r2
 80004f6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	691a      	ldr	r2, [r3, #16]
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	2107      	movs	r1, #7
 8000500:	400b      	ands	r3, r1
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	409a      	lsls	r2, r3
 8000506:	0013      	movs	r3, r2
 8000508:	693a      	ldr	r2, [r7, #16]
 800050a:	4313      	orrs	r3, r2
 800050c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	08da      	lsrs	r2, r3, #3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3208      	adds	r2, #8
 8000516:	0092      	lsls	r2, r2, #2
 8000518:	6939      	ldr	r1, [r7, #16]
 800051a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d00b      	beq.n	800053c <HAL_GPIO_Init+0xa8>
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d007      	beq.n	800053c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000530:	2b11      	cmp	r3, #17
 8000532:	d003      	beq.n	800053c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	2b12      	cmp	r3, #18
 800053a:	d130      	bne.n	800059e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	2203      	movs	r2, #3
 8000548:	409a      	lsls	r2, r3
 800054a:	0013      	movs	r3, r2
 800054c:	43da      	mvns	r2, r3
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	4013      	ands	r3, r2
 8000552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	68da      	ldr	r2, [r3, #12]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	409a      	lsls	r2, r3
 800055e:	0013      	movs	r3, r2
 8000560:	693a      	ldr	r2, [r7, #16]
 8000562:	4313      	orrs	r3, r2
 8000564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	693a      	ldr	r2, [r7, #16]
 800056a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000572:	2201      	movs	r2, #1
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	409a      	lsls	r2, r3
 8000578:	0013      	movs	r3, r2
 800057a:	43da      	mvns	r2, r3
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	4013      	ands	r3, r2
 8000580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	091b      	lsrs	r3, r3, #4
 8000588:	2201      	movs	r2, #1
 800058a:	401a      	ands	r2, r3
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	409a      	lsls	r2, r3
 8000590:	0013      	movs	r3, r2
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	4313      	orrs	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	2203      	movs	r2, #3
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0013      	movs	r3, r2
 80005ae:	43da      	mvns	r2, r3
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	4013      	ands	r3, r2
 80005b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	2203      	movs	r2, #3
 80005bc:	401a      	ands	r2, r3
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0013      	movs	r3, r2
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	2203      	movs	r2, #3
 80005de:	409a      	lsls	r2, r3
 80005e0:	0013      	movs	r3, r2
 80005e2:	43da      	mvns	r2, r3
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	4013      	ands	r3, r2
 80005e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	689a      	ldr	r2, [r3, #8]
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	409a      	lsls	r2, r3
 80005f4:	0013      	movs	r3, r2
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	685a      	ldr	r2, [r3, #4]
 8000606:	2380      	movs	r3, #128	; 0x80
 8000608:	055b      	lsls	r3, r3, #21
 800060a:	4013      	ands	r3, r2
 800060c:	d100      	bne.n	8000610 <HAL_GPIO_Init+0x17c>
 800060e:	e0a0      	b.n	8000752 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000610:	4b57      	ldr	r3, [pc, #348]	; (8000770 <HAL_GPIO_Init+0x2dc>)
 8000612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000614:	4b56      	ldr	r3, [pc, #344]	; (8000770 <HAL_GPIO_Init+0x2dc>)
 8000616:	2101      	movs	r1, #1
 8000618:	430a      	orrs	r2, r1
 800061a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 800061c:	4a55      	ldr	r2, [pc, #340]	; (8000774 <HAL_GPIO_Init+0x2e0>)
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	089b      	lsrs	r3, r3, #2
 8000622:	3302      	adds	r3, #2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	589b      	ldr	r3, [r3, r2]
 8000628:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	2203      	movs	r2, #3
 800062e:	4013      	ands	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	220f      	movs	r2, #15
 8000634:	409a      	lsls	r2, r3
 8000636:	0013      	movs	r3, r2
 8000638:	43da      	mvns	r2, r3
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	4013      	ands	r3, r2
 800063e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	23a0      	movs	r3, #160	; 0xa0
 8000644:	05db      	lsls	r3, r3, #23
 8000646:	429a      	cmp	r2, r3
 8000648:	d01f      	beq.n	800068a <HAL_GPIO_Init+0x1f6>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a4a      	ldr	r2, [pc, #296]	; (8000778 <HAL_GPIO_Init+0x2e4>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d019      	beq.n	8000686 <HAL_GPIO_Init+0x1f2>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a49      	ldr	r2, [pc, #292]	; (800077c <HAL_GPIO_Init+0x2e8>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d013      	beq.n	8000682 <HAL_GPIO_Init+0x1ee>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a48      	ldr	r2, [pc, #288]	; (8000780 <HAL_GPIO_Init+0x2ec>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d00d      	beq.n	800067e <HAL_GPIO_Init+0x1ea>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a47      	ldr	r2, [pc, #284]	; (8000784 <HAL_GPIO_Init+0x2f0>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d007      	beq.n	800067a <HAL_GPIO_Init+0x1e6>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a46      	ldr	r2, [pc, #280]	; (8000788 <HAL_GPIO_Init+0x2f4>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d101      	bne.n	8000676 <HAL_GPIO_Init+0x1e2>
 8000672:	2305      	movs	r3, #5
 8000674:	e00a      	b.n	800068c <HAL_GPIO_Init+0x1f8>
 8000676:	2306      	movs	r3, #6
 8000678:	e008      	b.n	800068c <HAL_GPIO_Init+0x1f8>
 800067a:	2304      	movs	r3, #4
 800067c:	e006      	b.n	800068c <HAL_GPIO_Init+0x1f8>
 800067e:	2303      	movs	r3, #3
 8000680:	e004      	b.n	800068c <HAL_GPIO_Init+0x1f8>
 8000682:	2302      	movs	r3, #2
 8000684:	e002      	b.n	800068c <HAL_GPIO_Init+0x1f8>
 8000686:	2301      	movs	r3, #1
 8000688:	e000      	b.n	800068c <HAL_GPIO_Init+0x1f8>
 800068a:	2300      	movs	r3, #0
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	2103      	movs	r1, #3
 8000690:	400a      	ands	r2, r1
 8000692:	0092      	lsls	r2, r2, #2
 8000694:	4093      	lsls	r3, r2
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	4313      	orrs	r3, r2
 800069a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800069c:	4935      	ldr	r1, [pc, #212]	; (8000774 <HAL_GPIO_Init+0x2e0>)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	089b      	lsrs	r3, r3, #2
 80006a2:	3302      	adds	r3, #2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006aa:	4b38      	ldr	r3, [pc, #224]	; (800078c <HAL_GPIO_Init+0x2f8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	43da      	mvns	r2, r3
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	4013      	ands	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	025b      	lsls	r3, r3, #9
 80006c2:	4013      	ands	r3, r2
 80006c4:	d003      	beq.n	80006ce <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <HAL_GPIO_Init+0x2f8>)
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80006d4:	4b2d      	ldr	r3, [pc, #180]	; (800078c <HAL_GPIO_Init+0x2f8>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	43da      	mvns	r2, r3
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	4013      	ands	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	029b      	lsls	r3, r3, #10
 80006ec:	4013      	ands	r3, r2
 80006ee:	d003      	beq.n	80006f8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <HAL_GPIO_Init+0x2f8>)
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <HAL_GPIO_Init+0x2f8>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	43da      	mvns	r2, r3
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	4013      	ands	r3, r2
 800070c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	035b      	lsls	r3, r3, #13
 8000716:	4013      	ands	r3, r2
 8000718:	d003      	beq.n	8000722 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4313      	orrs	r3, r2
 8000720:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <HAL_GPIO_Init+0x2f8>)
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_GPIO_Init+0x2f8>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	43da      	mvns	r2, r3
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	4013      	ands	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685a      	ldr	r2, [r3, #4]
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	039b      	lsls	r3, r3, #14
 8000740:	4013      	ands	r3, r2
 8000742:	d003      	beq.n	800074c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4313      	orrs	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_GPIO_Init+0x2f8>)
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	40da      	lsrs	r2, r3
 8000760:	1e13      	subs	r3, r2, #0
 8000762:	d000      	beq.n	8000766 <HAL_GPIO_Init+0x2d2>
 8000764:	e6a2      	b.n	80004ac <HAL_GPIO_Init+0x18>
  }
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b006      	add	sp, #24
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40021000 	.word	0x40021000
 8000774:	40010000 	.word	0x40010000
 8000778:	50000400 	.word	0x50000400
 800077c:	50000800 	.word	0x50000800
 8000780:	50000c00 	.word	0x50000c00
 8000784:	50001000 	.word	0x50001000
 8000788:	50001c00 	.word	0x50001c00
 800078c:	40010400 	.word	0x40010400

08000790 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	0008      	movs	r0, r1
 800079a:	0011      	movs	r1, r2
 800079c:	1cbb      	adds	r3, r7, #2
 800079e:	1c02      	adds	r2, r0, #0
 80007a0:	801a      	strh	r2, [r3, #0]
 80007a2:	1c7b      	adds	r3, r7, #1
 80007a4:	1c0a      	adds	r2, r1, #0
 80007a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80007a8:	1c7b      	adds	r3, r7, #1
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d004      	beq.n	80007ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007b0:	1cbb      	adds	r3, r7, #2
 80007b2:	881a      	ldrh	r2, [r3, #0]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80007b8:	e003      	b.n	80007c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80007ba:	1cbb      	adds	r3, r7, #2
 80007bc:	881a      	ldrh	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b002      	add	sp, #8
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e082      	b.n	80008e4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2241      	movs	r2, #65	; 0x41
 80007e2:	5c9b      	ldrb	r3, [r3, r2]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d107      	bne.n	80007fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2240      	movs	r2, #64	; 0x40
 80007ee:	2100      	movs	r1, #0
 80007f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	0018      	movs	r0, r3
 80007f6:	f005 fdd5 	bl	80063a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2241      	movs	r2, #65	; 0x41
 80007fe:	2124      	movs	r1, #36	; 0x24
 8000800:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2101      	movs	r1, #1
 800080e:	438a      	bics	r2, r1
 8000810:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4934      	ldr	r1, [pc, #208]	; (80008ec <HAL_I2C_Init+0x120>)
 800081c:	400a      	ands	r2, r1
 800081e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	689a      	ldr	r2, [r3, #8]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4931      	ldr	r1, [pc, #196]	; (80008f0 <HAL_I2C_Init+0x124>)
 800082c:	400a      	ands	r2, r1
 800082e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d108      	bne.n	800084a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689a      	ldr	r2, [r3, #8]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	0209      	lsls	r1, r1, #8
 8000844:	430a      	orrs	r2, r1
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	e007      	b.n	800085a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2184      	movs	r1, #132	; 0x84
 8000854:	0209      	lsls	r1, r1, #8
 8000856:	430a      	orrs	r2, r1
 8000858:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	2b02      	cmp	r3, #2
 8000860:	d104      	bne.n	800086c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	0112      	lsls	r2, r2, #4
 800086a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	491f      	ldr	r1, [pc, #124]	; (80008f4 <HAL_I2C_Init+0x128>)
 8000878:	430a      	orrs	r2, r1
 800087a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	68da      	ldr	r2, [r3, #12]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	491a      	ldr	r1, [pc, #104]	; (80008f0 <HAL_I2C_Init+0x124>)
 8000888:	400a      	ands	r2, r1
 800088a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	691a      	ldr	r2, [r3, #16]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	431a      	orrs	r2, r3
 8000896:	0011      	movs	r1, r2
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	021a      	lsls	r2, r3, #8
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	430a      	orrs	r2, r1
 80008a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	69d9      	ldr	r1, [r3, #28]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6a1a      	ldr	r2, [r3, #32]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2101      	movs	r1, #1
 80008c2:	430a      	orrs	r2, r1
 80008c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2241      	movs	r2, #65	; 0x41
 80008d0:	2120      	movs	r1, #32
 80008d2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2200      	movs	r2, #0
 80008d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2242      	movs	r2, #66	; 0x42
 80008de:	2100      	movs	r1, #0
 80008e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	f0ffffff 	.word	0xf0ffffff
 80008f0:	ffff7fff 	.word	0xffff7fff
 80008f4:	02008000 	.word	0x02008000

080008f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2241      	movs	r2, #65	; 0x41
 8000906:	5c9b      	ldrb	r3, [r3, r2]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b20      	cmp	r3, #32
 800090c:	d138      	bne.n	8000980 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2240      	movs	r2, #64	; 0x40
 8000912:	5c9b      	ldrb	r3, [r3, r2]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d101      	bne.n	800091c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000918:	2302      	movs	r3, #2
 800091a:	e032      	b.n	8000982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2240      	movs	r2, #64	; 0x40
 8000920:	2101      	movs	r1, #1
 8000922:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2241      	movs	r2, #65	; 0x41
 8000928:	2124      	movs	r1, #36	; 0x24
 800092a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2101      	movs	r1, #1
 8000938:	438a      	bics	r2, r1
 800093a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4911      	ldr	r1, [pc, #68]	; (800098c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000948:	400a      	ands	r2, r1
 800094a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6819      	ldr	r1, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	430a      	orrs	r2, r1
 800095a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2101      	movs	r1, #1
 8000968:	430a      	orrs	r2, r1
 800096a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2241      	movs	r2, #65	; 0x41
 8000970:	2120      	movs	r1, #32
 8000972:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2240      	movs	r2, #64	; 0x40
 8000978:	2100      	movs	r1, #0
 800097a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800097c:	2300      	movs	r3, #0
 800097e:	e000      	b.n	8000982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000980:	2302      	movs	r3, #2
  }
}
 8000982:	0018      	movs	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	b002      	add	sp, #8
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	ffffefff 	.word	0xffffefff

08000990 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2241      	movs	r2, #65	; 0x41
 800099e:	5c9b      	ldrb	r3, [r3, r2]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b20      	cmp	r3, #32
 80009a4:	d139      	bne.n	8000a1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2240      	movs	r2, #64	; 0x40
 80009aa:	5c9b      	ldrb	r3, [r3, r2]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d101      	bne.n	80009b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80009b0:	2302      	movs	r3, #2
 80009b2:	e033      	b.n	8000a1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2240      	movs	r2, #64	; 0x40
 80009b8:	2101      	movs	r1, #1
 80009ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2241      	movs	r2, #65	; 0x41
 80009c0:	2124      	movs	r1, #36	; 0x24
 80009c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2101      	movs	r1, #1
 80009d0:	438a      	bics	r2, r1
 80009d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	021b      	lsls	r3, r3, #8
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2101      	movs	r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2241      	movs	r2, #65	; 0x41
 8000a0a:	2120      	movs	r1, #32
 8000a0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2240      	movs	r2, #64	; 0x40
 8000a12:	2100      	movs	r1, #0
 8000a14:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e000      	b.n	8000a1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000a1a:	2302      	movs	r3, #2
  }
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b004      	add	sp, #16
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	fffff0ff 	.word	0xfffff0ff

08000a28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2a:	b08b      	sub	sp, #44	; 0x2c
 8000a2c:	af06      	add	r7, sp, #24
 8000a2e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e0e4      	b.n	8000c04 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a73      	ldr	r2, [pc, #460]	; (8000c0c <HAL_PCD_Init+0x1e4>)
 8000a3e:	5c9b      	ldrb	r3, [r3, r2]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d108      	bne.n	8000a58 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	238a      	movs	r3, #138	; 0x8a
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	0018      	movs	r0, r3
 8000a54:	f005 ff52 	bl	80068fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a6c      	ldr	r2, [pc, #432]	; (8000c0c <HAL_PCD_Init+0x1e4>)
 8000a5c:	2103      	movs	r1, #3
 8000a5e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	0018      	movs	r0, r3
 8000a66:	f001 ff33 	bl	80028d0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a6a:	230f      	movs	r3, #15
 8000a6c:	18fb      	adds	r3, r7, r3
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
 8000a72:	e043      	b.n	8000afc <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000a74:	200f      	movs	r0, #15
 8000a76:	183b      	adds	r3, r7, r0
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	2129      	movs	r1, #41	; 0x29
 8000a7e:	015b      	lsls	r3, r3, #5
 8000a80:	18d3      	adds	r3, r2, r3
 8000a82:	185b      	adds	r3, r3, r1
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000a88:	183b      	adds	r3, r7, r0
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	2128      	movs	r1, #40	; 0x28
 8000a90:	015b      	lsls	r3, r3, #5
 8000a92:	18d3      	adds	r3, r2, r3
 8000a94:	185b      	adds	r3, r3, r1
 8000a96:	183a      	adds	r2, r7, r0
 8000a98:	7812      	ldrb	r2, [r2, #0]
 8000a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000a9c:	183b      	adds	r3, r7, r0
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	183a      	adds	r2, r7, r0
 8000aa2:	7812      	ldrb	r2, [r2, #0]
 8000aa4:	b291      	uxth	r1, r2
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	015b      	lsls	r3, r3, #5
 8000aaa:	18d3      	adds	r3, r2, r3
 8000aac:	3336      	adds	r3, #54	; 0x36
 8000aae:	1c0a      	adds	r2, r1, #0
 8000ab0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ab2:	183b      	adds	r3, r7, r0
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	212b      	movs	r1, #43	; 0x2b
 8000aba:	015b      	lsls	r3, r3, #5
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	185b      	adds	r3, r3, r1
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ac4:	183b      	adds	r3, r7, r0
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	015b      	lsls	r3, r3, #5
 8000acc:	18d3      	adds	r3, r2, r3
 8000ace:	3338      	adds	r3, #56	; 0x38
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ad4:	183b      	adds	r3, r7, r0
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	015b      	lsls	r3, r3, #5
 8000adc:	18d3      	adds	r3, r2, r3
 8000ade:	333c      	adds	r3, #60	; 0x3c
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ae4:	183b      	adds	r3, r7, r0
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3202      	adds	r2, #2
 8000aec:	0152      	lsls	r2, r2, #5
 8000aee:	2100      	movs	r1, #0
 8000af0:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000af2:	183b      	adds	r3, r7, r0
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	183b      	adds	r3, r7, r0
 8000af8:	3201      	adds	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	230f      	movs	r3, #15
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	781a      	ldrb	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d3b4      	bcc.n	8000a74 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e03f      	b.n	8000b94 <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b14:	200f      	movs	r0, #15
 8000b16:	183b      	adds	r3, r7, r0
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	232a      	movs	r3, #42	; 0x2a
 8000b1e:	33ff      	adds	r3, #255	; 0xff
 8000b20:	0152      	lsls	r2, r2, #5
 8000b22:	188a      	adds	r2, r1, r2
 8000b24:	18d3      	adds	r3, r2, r3
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000b2a:	183b      	adds	r3, r7, r0
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	2394      	movs	r3, #148	; 0x94
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	0152      	lsls	r2, r2, #5
 8000b36:	188a      	adds	r2, r1, r2
 8000b38:	18d3      	adds	r3, r2, r3
 8000b3a:	183a      	adds	r2, r7, r0
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b40:	183b      	adds	r3, r7, r0
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	232c      	movs	r3, #44	; 0x2c
 8000b48:	33ff      	adds	r3, #255	; 0xff
 8000b4a:	0152      	lsls	r2, r2, #5
 8000b4c:	188a      	adds	r2, r1, r2
 8000b4e:	18d3      	adds	r3, r2, r3
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b54:	183b      	adds	r3, r7, r0
 8000b56:	781a      	ldrb	r2, [r3, #0]
 8000b58:	6879      	ldr	r1, [r7, #4]
 8000b5a:	239c      	movs	r3, #156	; 0x9c
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	0152      	lsls	r2, r2, #5
 8000b60:	188a      	adds	r2, r1, r2
 8000b62:	18d3      	adds	r3, r2, r3
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b68:	183b      	adds	r3, r7, r0
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	6879      	ldr	r1, [r7, #4]
 8000b6e:	239e      	movs	r3, #158	; 0x9e
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	0152      	lsls	r2, r2, #5
 8000b74:	188a      	adds	r2, r1, r2
 8000b76:	18d3      	adds	r3, r2, r3
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b7c:	183b      	adds	r3, r7, r0
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	320a      	adds	r2, #10
 8000b84:	0152      	lsls	r2, r2, #5
 8000b86:	2100      	movs	r1, #0
 8000b88:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b8a:	183b      	adds	r3, r7, r0
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	183b      	adds	r3, r7, r0
 8000b90:	3201      	adds	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	230f      	movs	r3, #15
 8000b96:	18fb      	adds	r3, r7, r3
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d3b8      	bcc.n	8000b14 <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	466a      	mov	r2, sp
 8000baa:	0011      	movs	r1, r2
 8000bac:	001a      	movs	r2, r3
 8000bae:	3210      	adds	r2, #16
 8000bb0:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000bb2:	c170      	stmia	r1!, {r4, r5, r6}
 8000bb4:	ca30      	ldmia	r2!, {r4, r5}
 8000bb6:	c130      	stmia	r1!, {r4, r5}
 8000bb8:	6859      	ldr	r1, [r3, #4]
 8000bba:	689a      	ldr	r2, [r3, #8]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	f001 fea7 	bl	8002910 <USB_DevInit>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d005      	beq.n	8000bd2 <HAL_PCD_Init+0x1aa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_PCD_Init+0x1e4>)
 8000bca:	2102      	movs	r1, #2
 8000bcc:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e018      	b.n	8000c04 <HAL_PCD_Init+0x1dc>
  }

  hpcd->USB_Address = 0U;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2224      	movs	r2, #36	; 0x24
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <HAL_PCD_Init+0x1e4>)
 8000bde:	2101      	movs	r1, #1
 8000be0:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d103      	bne.n	8000bf2 <HAL_PCD_Init+0x1ca>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	0018      	movs	r0, r3
 8000bee:	f000 ff2e 	bl	8001a4e <HAL_PCDEx_ActivateLPM>
  }


  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a1b      	ldr	r3, [r3, #32]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d103      	bne.n	8000c02 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f000 ff01 	bl	8001a04 <HAL_PCDEx_ActivateBCD>
  }

  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b005      	add	sp, #20
 8000c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0c:	00000229 	.word	0x00000229

08000c10 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	238a      	movs	r3, #138	; 0x8a
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	5cd3      	ldrb	r3, [r2, r3]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d101      	bne.n	8000c28 <HAL_PCD_Start+0x18>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e014      	b.n	8000c52 <HAL_PCD_Start+0x42>
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	238a      	movs	r3, #138	; 0x8a
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	2101      	movs	r1, #1
 8000c30:	54d1      	strb	r1, [r2, r3]
  (void)USB_DevConnect(hpcd->Instance);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	0018      	movs	r0, r3
 8000c38:	f002 fe92 	bl	8003960 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	0018      	movs	r0, r3
 8000c42:	f001 fe2b 	bl	800289c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	238a      	movs	r3, #138	; 0x8a
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	0018      	movs	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b002      	add	sp, #8
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f002 fe8f 	bl	800398c <USB_ReadInterrupts>
 8000c6e:	0002      	movs	r2, r0
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	401a      	ands	r2, r3
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d103      	bne.n	8000c86 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	0018      	movs	r0, r3
 8000c82:	f000 fbaf 	bl	80013e4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f002 fe7e 	bl	800398c <USB_ReadInterrupts>
 8000c90:	0002      	movs	r2, r0
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	401a      	ands	r2, r3
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d114      	bne.n	8000cca <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2244      	movs	r2, #68	; 0x44
 8000ca6:	5a9b      	ldrh	r3, [r3, r2]
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	49a8      	ldr	r1, [pc, #672]	; (8000f50 <HAL_PCD_IRQHandler+0x2f4>)
 8000cb0:	400a      	ands	r2, r1
 8000cb2:	b291      	uxth	r1, r2
 8000cb4:	2244      	movs	r2, #68	; 0x44
 8000cb6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f005 fe9a 	bl	80069f4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 f951 	bl	8000f6c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f002 fe5c 	bl	800398c <USB_ReadInterrupts>
 8000cd4:	0002      	movs	r2, r0
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	01db      	lsls	r3, r3, #7
 8000cda:	401a      	ands	r2, r3
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	01db      	lsls	r3, r3, #7
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d10b      	bne.n	8000cfc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2244      	movs	r2, #68	; 0x44
 8000cea:	5a9b      	ldrh	r3, [r3, r2]
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4998      	ldr	r1, [pc, #608]	; (8000f54 <HAL_PCD_IRQHandler+0x2f8>)
 8000cf4:	400a      	ands	r2, r1
 8000cf6:	b291      	uxth	r1, r2
 8000cf8:	2244      	movs	r2, #68	; 0x44
 8000cfa:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	0018      	movs	r0, r3
 8000d02:	f002 fe43 	bl	800398c <USB_ReadInterrupts>
 8000d06:	0002      	movs	r2, r0
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	019b      	lsls	r3, r3, #6
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	019b      	lsls	r3, r3, #6
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d10b      	bne.n	8000d2e <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2244      	movs	r2, #68	; 0x44
 8000d1c:	5a9b      	ldrh	r3, [r3, r2]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	498c      	ldr	r1, [pc, #560]	; (8000f58 <HAL_PCD_IRQHandler+0x2fc>)
 8000d26:	400a      	ands	r2, r1
 8000d28:	b291      	uxth	r1, r2
 8000d2a:	2244      	movs	r2, #68	; 0x44
 8000d2c:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	0018      	movs	r0, r3
 8000d34:	f002 fe2a 	bl	800398c <USB_ReadInterrupts>
 8000d38:	0002      	movs	r2, r0
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	015b      	lsls	r3, r3, #5
 8000d3e:	401a      	ands	r2, r3
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	015b      	lsls	r3, r3, #5
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d137      	bne.n	8000db8 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2240      	movs	r2, #64	; 0x40
 8000d4e:	5a9b      	ldrh	r3, [r3, r2]
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2104      	movs	r1, #4
 8000d58:	438a      	bics	r2, r1
 8000d5a:	b291      	uxth	r1, r2
 8000d5c:	2240      	movs	r2, #64	; 0x40
 8000d5e:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2240      	movs	r2, #64	; 0x40
 8000d66:	5a9b      	ldrh	r3, [r3, r2]
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2108      	movs	r1, #8
 8000d70:	438a      	bics	r2, r1
 8000d72:	b291      	uxth	r1, r2
 8000d74:	2240      	movs	r2, #64	; 0x40
 8000d76:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	2398      	movs	r3, #152	; 0x98
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	5cd3      	ldrb	r3, [r2, r3]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d109      	bne.n	8000d98 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	2398      	movs	r3, #152	; 0x98
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2100      	movs	r1, #0
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 fe85 	bl	8001aa2 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f005 fe6a 	bl	8006a74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2244      	movs	r2, #68	; 0x44
 8000da6:	5a9b      	ldrh	r3, [r3, r2]
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	496b      	ldr	r1, [pc, #428]	; (8000f5c <HAL_PCD_IRQHandler+0x300>)
 8000db0:	400a      	ands	r2, r1
 8000db2:	b291      	uxth	r1, r2
 8000db4:	2244      	movs	r2, #68	; 0x44
 8000db6:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f002 fde5 	bl	800398c <USB_ReadInterrupts>
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	401a      	ands	r2, r3
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	011b      	lsls	r3, r3, #4
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d134      	bne.n	8000e3c <HAL_PCD_IRQHandler+0x1e0>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2240      	movs	r2, #64	; 0x40
 8000dd8:	5a9b      	ldrh	r3, [r3, r2]
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2108      	movs	r1, #8
 8000de2:	430a      	orrs	r2, r1
 8000de4:	b291      	uxth	r1, r2
 8000de6:	2240      	movs	r2, #64	; 0x40
 8000de8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2244      	movs	r2, #68	; 0x44
 8000df0:	5a9b      	ldrh	r3, [r3, r2]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4959      	ldr	r1, [pc, #356]	; (8000f60 <HAL_PCD_IRQHandler+0x304>)
 8000dfa:	400a      	ands	r2, r1
 8000dfc:	b291      	uxth	r1, r2
 8000dfe:	2244      	movs	r2, #68	; 0x44
 8000e00:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2240      	movs	r2, #64	; 0x40
 8000e08:	5a9b      	ldrh	r3, [r3, r2]
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2104      	movs	r1, #4
 8000e12:	430a      	orrs	r2, r1
 8000e14:	b291      	uxth	r1, r2
 8000e16:	2240      	movs	r2, #64	; 0x40
 8000e18:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f002 fdb4 	bl	800398c <USB_ReadInterrupts>
 8000e24:	0002      	movs	r2, r0
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	015b      	lsls	r3, r3, #5
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	015b      	lsls	r3, r3, #5
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d003      	beq.n	8000e3c <HAL_PCD_IRQHandler+0x1e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	0018      	movs	r0, r3
 8000e38:	f005 fe00 	bl	8006a3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	0018      	movs	r0, r3
 8000e42:	f002 fda3 	bl	800398c <USB_ReadInterrupts>
 8000e46:	0002      	movs	r2, r0
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b80      	cmp	r3, #128	; 0x80
 8000e4e:	d145      	bne.n	8000edc <HAL_PCD_IRQHandler+0x280>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2244      	movs	r2, #68	; 0x44
 8000e56:	5a9b      	ldrh	r3, [r3, r2]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	438a      	bics	r2, r1
 8000e62:	b291      	uxth	r1, r2
 8000e64:	2244      	movs	r2, #68	; 0x44
 8000e66:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	2398      	movs	r3, #152	; 0x98
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	5cd3      	ldrb	r3, [r2, r3]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d12f      	bne.n	8000ed4 <HAL_PCD_IRQHandler+0x278>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2240      	movs	r2, #64	; 0x40
 8000e7a:	5a9b      	ldrh	r3, [r3, r2]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2104      	movs	r1, #4
 8000e84:	430a      	orrs	r2, r1
 8000e86:	b291      	uxth	r1, r2
 8000e88:	2240      	movs	r2, #64	; 0x40
 8000e8a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2240      	movs	r2, #64	; 0x40
 8000e92:	5a9b      	ldrh	r3, [r3, r2]
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2108      	movs	r1, #8
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	b291      	uxth	r1, r2
 8000ea0:	2240      	movs	r2, #64	; 0x40
 8000ea2:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	2398      	movs	r3, #152	; 0x98
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	2101      	movs	r1, #1
 8000eac:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2254      	movs	r2, #84	; 0x54
 8000eb4:	5a9b      	ldrh	r3, [r3, r2]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	223c      	movs	r2, #60	; 0x3c
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	0019      	movs	r1, r3
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	2399      	movs	r3, #153	; 0x99
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2101      	movs	r1, #1
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f000 fde8 	bl	8001aa2 <HAL_PCDEx_LPM_Callback>
 8000ed2:	e003      	b.n	8000edc <HAL_PCD_IRQHandler+0x280>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f005 fdb0 	bl	8006a3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f002 fd53 	bl	800398c <USB_ReadInterrupts>
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	401a      	ands	r2, r3
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d10f      	bne.n	8000f16 <HAL_PCD_IRQHandler+0x2ba>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2244      	movs	r2, #68	; 0x44
 8000efc:	5a9b      	ldrh	r3, [r3, r2]
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4917      	ldr	r1, [pc, #92]	; (8000f64 <HAL_PCD_IRQHandler+0x308>)
 8000f06:	400a      	ands	r2, r1
 8000f08:	b291      	uxth	r1, r2
 8000f0a:	2244      	movs	r2, #68	; 0x44
 8000f0c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	0018      	movs	r0, r3
 8000f12:	f005 fd60 	bl	80069d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f002 fd36 	bl	800398c <USB_ReadInterrupts>
 8000f20:	0002      	movs	r2, r0
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	401a      	ands	r2, r3
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d10b      	bne.n	8000f48 <HAL_PCD_IRQHandler+0x2ec>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2244      	movs	r2, #68	; 0x44
 8000f36:	5a9b      	ldrh	r3, [r3, r2]
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	490a      	ldr	r1, [pc, #40]	; (8000f68 <HAL_PCD_IRQHandler+0x30c>)
 8000f40:	400a      	ands	r2, r1
 8000f42:	b291      	uxth	r1, r2
 8000f44:	2244      	movs	r2, #68	; 0x44
 8000f46:	5299      	strh	r1, [r3, r2]
  }
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	fffffbff 	.word	0xfffffbff
 8000f54:	ffffbfff 	.word	0xffffbfff
 8000f58:	ffffdfff 	.word	0xffffdfff
 8000f5c:	ffffefff 	.word	0xffffefff
 8000f60:	fffff7ff 	.word	0xfffff7ff
 8000f64:	fffffdff 	.word	0xfffffdff
 8000f68:	fffffeff 	.word	0xfffffeff

08000f6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	000a      	movs	r2, r1
 8000f76:	1cfb      	adds	r3, r7, #3
 8000f78:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	238a      	movs	r3, #138	; 0x8a
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	5cd3      	ldrb	r3, [r2, r3]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d101      	bne.n	8000f8a <HAL_PCD_SetAddress+0x1e>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e017      	b.n	8000fba <HAL_PCD_SetAddress+0x4e>
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	238a      	movs	r3, #138	; 0x8a
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	2101      	movs	r1, #1
 8000f92:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	1cfa      	adds	r2, r7, #3
 8000f98:	2124      	movs	r1, #36	; 0x24
 8000f9a:	7812      	ldrb	r2, [r2, #0]
 8000f9c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	1cfb      	adds	r3, r7, #3
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	0010      	movs	r0, r2
 8000faa:	f002 fcc5 	bl	8003938 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	238a      	movs	r3, #138	; 0x8a
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	0018      	movs	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b002      	add	sp, #8
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000fc2:	b590      	push	{r4, r7, lr}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	000c      	movs	r4, r1
 8000fcc:	0010      	movs	r0, r2
 8000fce:	0019      	movs	r1, r3
 8000fd0:	1cfb      	adds	r3, r7, #3
 8000fd2:	1c22      	adds	r2, r4, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	003b      	movs	r3, r7
 8000fd8:	1c02      	adds	r2, r0, #0
 8000fda:	801a      	strh	r2, [r3, #0]
 8000fdc:	1cbb      	adds	r3, r7, #2
 8000fde:	1c0a      	adds	r2, r1, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000fe2:	230b      	movs	r3, #11
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000fea:	1cfb      	adds	r3, r7, #3
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	da0c      	bge.n	800100e <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ff4:	1cfb      	adds	r3, r7, #3
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	015b      	lsls	r3, r3, #5
 8000ffe:	3328      	adds	r3, #40	; 0x28
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	18d3      	adds	r3, r2, r3
 8001004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2201      	movs	r2, #1
 800100a:	705a      	strb	r2, [r3, #1]
 800100c:	e00c      	b.n	8001028 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800100e:	1cfb      	adds	r3, r7, #3
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2207      	movs	r2, #7
 8001014:	4013      	ands	r3, r2
 8001016:	015b      	lsls	r3, r3, #5
 8001018:	3329      	adds	r3, #41	; 0x29
 800101a:	33ff      	adds	r3, #255	; 0xff
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	18d3      	adds	r3, r2, r3
 8001020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2200      	movs	r2, #0
 8001026:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001028:	1cfb      	adds	r3, r7, #3
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2207      	movs	r2, #7
 800102e:	4013      	ands	r3, r2
 8001030:	b2da      	uxtb	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001036:	003b      	movs	r3, r7
 8001038:	881a      	ldrh	r2, [r3, #0]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1cba      	adds	r2, r7, #2
 8001042:	7812      	ldrb	r2, [r2, #0]
 8001044:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	785b      	ldrb	r3, [r3, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d004      	beq.n	8001058 <HAL_PCD_EP_Open+0x96>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b29a      	uxth	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001058:	1cbb      	adds	r3, r7, #2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d102      	bne.n	8001066 <HAL_PCD_EP_Open+0xa4>
  {
    ep->data_pid_start = 0U;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	238a      	movs	r3, #138	; 0x8a
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	5cd3      	ldrb	r3, [r2, r3]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d101      	bne.n	8001076 <HAL_PCD_EP_Open+0xb4>
 8001072:	2302      	movs	r3, #2
 8001074:	e013      	b.n	800109e <HAL_PCD_EP_Open+0xdc>
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	238a      	movs	r3, #138	; 0x8a
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	2101      	movs	r1, #1
 800107e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	0011      	movs	r1, r2
 8001088:	0018      	movs	r0, r3
 800108a:	f001 fc71 	bl	8002970 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	238a      	movs	r3, #138	; 0x8a
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	2100      	movs	r1, #0
 8001096:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001098:	230b      	movs	r3, #11
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	781b      	ldrb	r3, [r3, #0]
}
 800109e:	0018      	movs	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b005      	add	sp, #20
 80010a4:	bd90      	pop	{r4, r7, pc}

080010a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	000a      	movs	r2, r1
 80010b0:	1cfb      	adds	r3, r7, #3
 80010b2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010b4:	1cfb      	adds	r3, r7, #3
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da0c      	bge.n	80010d8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010be:	1cfb      	adds	r3, r7, #3
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2207      	movs	r2, #7
 80010c4:	4013      	ands	r3, r2
 80010c6:	015b      	lsls	r3, r3, #5
 80010c8:	3328      	adds	r3, #40	; 0x28
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	18d3      	adds	r3, r2, r3
 80010ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2201      	movs	r2, #1
 80010d4:	705a      	strb	r2, [r3, #1]
 80010d6:	e00c      	b.n	80010f2 <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010d8:	1cfb      	adds	r3, r7, #3
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2207      	movs	r2, #7
 80010de:	4013      	ands	r3, r2
 80010e0:	015b      	lsls	r3, r3, #5
 80010e2:	3329      	adds	r3, #41	; 0x29
 80010e4:	33ff      	adds	r3, #255	; 0xff
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	18d3      	adds	r3, r2, r3
 80010ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80010f2:	1cfb      	adds	r3, r7, #3
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2207      	movs	r2, #7
 80010f8:	4013      	ands	r3, r2
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	238a      	movs	r3, #138	; 0x8a
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	5cd3      	ldrb	r3, [r2, r3]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d101      	bne.n	8001110 <HAL_PCD_EP_Close+0x6a>
 800110c:	2302      	movs	r3, #2
 800110e:	e011      	b.n	8001134 <HAL_PCD_EP_Close+0x8e>
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	238a      	movs	r3, #138	; 0x8a
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	2101      	movs	r1, #1
 8001118:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	0011      	movs	r1, r2
 8001122:	0018      	movs	r0, r3
 8001124:	f001 ff14 	bl	8002f50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	238a      	movs	r3, #138	; 0x8a
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	2100      	movs	r1, #0
 8001130:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	0018      	movs	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	b004      	add	sp, #16
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	200b      	movs	r0, #11
 800114a:	183b      	adds	r3, r7, r0
 800114c:	1c0a      	adds	r2, r1, #0
 800114e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001150:	0001      	movs	r1, r0
 8001152:	187b      	adds	r3, r7, r1
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2207      	movs	r2, #7
 8001158:	4013      	ands	r3, r2
 800115a:	015b      	lsls	r3, r3, #5
 800115c:	3329      	adds	r3, #41	; 0x29
 800115e:	33ff      	adds	r3, #255	; 0xff
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	18d3      	adds	r3, r2, r3
 8001164:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	2200      	movs	r2, #0
 800117c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2207      	movs	r2, #7
 8001184:	4013      	ands	r3, r2
 8001186:	b2da      	uxtb	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800118c:	187b      	adds	r3, r7, r1
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2207      	movs	r2, #7
 8001192:	4013      	ands	r3, r2
 8001194:	d107      	bne.n	80011a6 <HAL_PCD_EP_Receive+0x6a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	0011      	movs	r1, r2
 800119e:	0018      	movs	r0, r3
 80011a0:	f002 f84c 	bl	800323c <USB_EPStartXfer>
 80011a4:	e006      	b.n	80011b4 <HAL_PCD_EP_Receive+0x78>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	0011      	movs	r1, r2
 80011ae:	0018      	movs	r0, r3
 80011b0:	f002 f844 	bl	800323c <USB_EPStartXfer>
  }

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b006      	add	sp, #24
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	000a      	movs	r2, r1
 80011c8:	1cfb      	adds	r3, r7, #3
 80011ca:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80011cc:	1cfb      	adds	r3, r7, #3
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2207      	movs	r2, #7
 80011d2:	4013      	ands	r3, r2
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	330a      	adds	r3, #10
 80011d8:	015b      	lsls	r3, r3, #5
 80011da:	18d3      	adds	r3, r2, r3
 80011dc:	3304      	adds	r3, #4
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	200b      	movs	r0, #11
 80011f6:	183b      	adds	r3, r7, r0
 80011f8:	1c0a      	adds	r2, r1, #0
 80011fa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011fc:	0001      	movs	r1, r0
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2207      	movs	r2, #7
 8001204:	4013      	ands	r3, r2
 8001206:	015b      	lsls	r3, r3, #5
 8001208:	3328      	adds	r3, #40	; 0x28
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	18d3      	adds	r3, r2, r3
 800120e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2201      	movs	r2, #1
 8001226:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001228:	187b      	adds	r3, r7, r1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2207      	movs	r2, #7
 800122e:	4013      	ands	r3, r2
 8001230:	b2da      	uxtb	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001236:	187b      	adds	r3, r7, r1
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2207      	movs	r2, #7
 800123c:	4013      	ands	r3, r2
 800123e:	d107      	bne.n	8001250 <HAL_PCD_EP_Transmit+0x68>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	0011      	movs	r1, r2
 8001248:	0018      	movs	r0, r3
 800124a:	f001 fff7 	bl	800323c <USB_EPStartXfer>
 800124e:	e006      	b.n	800125e <HAL_PCD_EP_Transmit+0x76>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	0011      	movs	r1, r2
 8001258:	0018      	movs	r0, r3
 800125a:	f001 ffef 	bl	800323c <USB_EPStartXfer>
  }

  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	0018      	movs	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	b006      	add	sp, #24
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	000a      	movs	r2, r1
 8001272:	1cfb      	adds	r3, r7, #3
 8001274:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001276:	1cfb      	adds	r3, r7, #3
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2207      	movs	r2, #7
 800127c:	401a      	ands	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	429a      	cmp	r2, r3
 8001284:	d901      	bls.n	800128a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e050      	b.n	800132c <HAL_PCD_EP_SetStall+0xc4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800128a:	1cfb      	adds	r3, r7, #3
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b25b      	sxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	da0c      	bge.n	80012ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001294:	1cfb      	adds	r3, r7, #3
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2207      	movs	r2, #7
 800129a:	4013      	ands	r3, r2
 800129c:	015b      	lsls	r3, r3, #5
 800129e:	3328      	adds	r3, #40	; 0x28
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	18d3      	adds	r3, r2, r3
 80012a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2201      	movs	r2, #1
 80012aa:	705a      	strb	r2, [r3, #1]
 80012ac:	e00a      	b.n	80012c4 <HAL_PCD_EP_SetStall+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012ae:	1cfb      	adds	r3, r7, #3
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	015b      	lsls	r3, r3, #5
 80012b4:	3329      	adds	r3, #41	; 0x29
 80012b6:	33ff      	adds	r3, #255	; 0xff
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	18d3      	adds	r3, r2, r3
 80012bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2200      	movs	r2, #0
 80012c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2201      	movs	r2, #1
 80012c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012ca:	1cfb      	adds	r3, r7, #3
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2207      	movs	r2, #7
 80012d0:	4013      	ands	r3, r2
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	238a      	movs	r3, #138	; 0x8a
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	5cd3      	ldrb	r3, [r2, r3]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_PCD_EP_SetStall+0x80>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e021      	b.n	800132c <HAL_PCD_EP_SetStall+0xc4>
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	238a      	movs	r3, #138	; 0x8a
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	2101      	movs	r1, #1
 80012f0:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	0011      	movs	r1, r2
 80012fa:	0018      	movs	r0, r3
 80012fc:	f002 fa4e 	bl	800379c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001300:	1cfb      	adds	r3, r7, #3
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2207      	movs	r2, #7
 8001306:	4013      	ands	r3, r2
 8001308:	d10a      	bne.n	8001320 <HAL_PCD_EP_SetStall+0xb8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	218c      	movs	r1, #140	; 0x8c
 8001312:	0089      	lsls	r1, r1, #2
 8001314:	468c      	mov	ip, r1
 8001316:	4463      	add	r3, ip
 8001318:	0019      	movs	r1, r3
 800131a:	0010      	movs	r0, r2
 800131c:	f002 fb44 	bl	80039a8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	238a      	movs	r3, #138	; 0x8a
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	2100      	movs	r1, #0
 8001328:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	b004      	add	sp, #16
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	000a      	movs	r2, r1
 800133e:	1cfb      	adds	r3, r7, #3
 8001340:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001342:	1cfb      	adds	r3, r7, #3
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	220f      	movs	r2, #15
 8001348:	401a      	ands	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	429a      	cmp	r2, r3
 8001350:	d901      	bls.n	8001356 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e042      	b.n	80013dc <HAL_PCD_EP_ClrStall+0xa8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001356:	1cfb      	adds	r3, r7, #3
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	da0c      	bge.n	800137a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001360:	1cfb      	adds	r3, r7, #3
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2207      	movs	r2, #7
 8001366:	4013      	ands	r3, r2
 8001368:	015b      	lsls	r3, r3, #5
 800136a:	3328      	adds	r3, #40	; 0x28
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	18d3      	adds	r3, r2, r3
 8001370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2201      	movs	r2, #1
 8001376:	705a      	strb	r2, [r3, #1]
 8001378:	e00c      	b.n	8001394 <HAL_PCD_EP_ClrStall+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800137a:	1cfb      	adds	r3, r7, #3
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2207      	movs	r2, #7
 8001380:	4013      	ands	r3, r2
 8001382:	015b      	lsls	r3, r3, #5
 8001384:	3329      	adds	r3, #41	; 0x29
 8001386:	33ff      	adds	r3, #255	; 0xff
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	18d3      	adds	r3, r2, r3
 800138c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2200      	movs	r2, #0
 8001398:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800139a:	1cfb      	adds	r3, r7, #3
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2207      	movs	r2, #7
 80013a0:	4013      	ands	r3, r2
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	238a      	movs	r3, #138	; 0x8a
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	5cd3      	ldrb	r3, [r2, r3]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_PCD_EP_ClrStall+0x84>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e011      	b.n	80013dc <HAL_PCD_EP_ClrStall+0xa8>
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	238a      	movs	r3, #138	; 0x8a
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	2101      	movs	r1, #1
 80013c0:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	0011      	movs	r1, r2
 80013ca:	0018      	movs	r0, r3
 80013cc:	f002 fa28 	bl	8003820 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	238a      	movs	r3, #138	; 0x8a
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	2100      	movs	r1, #0
 80013d8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	b004      	add	sp, #16
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013ec:	e2a7      	b.n	800193e <PCD_EP_ISR_Handler+0x55a>
  {
    wIstr = hpcd->Instance->ISTR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	2016      	movs	r0, #22
 80013f4:	183b      	adds	r3, r7, r0
 80013f6:	2144      	movs	r1, #68	; 0x44
 80013f8:	5a52      	ldrh	r2, [r2, r1]
 80013fa:	801a      	strh	r2, [r3, #0]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80013fc:	183b      	adds	r3, r7, r0
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	2015      	movs	r0, #21
 8001404:	183b      	adds	r3, r7, r0
 8001406:	210f      	movs	r1, #15
 8001408:	400a      	ands	r2, r1
 800140a:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800140c:	183b      	adds	r3, r7, r0
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d000      	beq.n	8001416 <PCD_EP_ISR_Handler+0x32>
 8001414:	e135      	b.n	8001682 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001416:	2316      	movs	r3, #22
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	2210      	movs	r2, #16
 800141e:	4013      	ands	r3, r2
 8001420:	d14e      	bne.n	80014c0 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	b29b      	uxth	r3, r3
 800142a:	4ade      	ldr	r2, [pc, #888]	; (80017a4 <PCD_EP_ISR_Handler+0x3c0>)
 800142c:	4013      	ands	r3, r2
 800142e:	b29c      	uxth	r4, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4adc      	ldr	r2, [pc, #880]	; (80017a8 <PCD_EP_ISR_Handler+0x3c4>)
 8001436:	4322      	orrs	r2, r4
 8001438:	b292      	uxth	r2, r2
 800143a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3328      	adds	r3, #40	; 0x28
 8001440:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2250      	movs	r2, #80	; 0x50
 8001448:	5a9b      	ldrh	r3, [r3, r2]
 800144a:	b29b      	uxth	r3, r3
 800144c:	001a      	movs	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	18d2      	adds	r2, r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	18d3      	adds	r3, r2, r3
 800145c:	4ad3      	ldr	r2, [pc, #844]	; (80017ac <PCD_EP_ISR_Handler+0x3c8>)
 800145e:	4694      	mov	ip, r2
 8001460:	4463      	add	r3, ip
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	059b      	lsls	r3, r3, #22
 8001466:	0d9a      	lsrs	r2, r3, #22
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	695a      	ldr	r2, [r3, #20]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	18d2      	adds	r2, r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2100      	movs	r1, #0
 800147e:	0018      	movs	r0, r3
 8001480:	f005 fa8e 	bl	80069a0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2224      	movs	r2, #36	; 0x24
 8001488:	5c9b      	ldrb	r3, [r3, r2]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d100      	bne.n	8001492 <PCD_EP_ISR_Handler+0xae>
 8001490:	e255      	b.n	800193e <PCD_EP_ISR_Handler+0x55a>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d000      	beq.n	800149c <PCD_EP_ISR_Handler+0xb8>
 800149a:	e250      	b.n	800193e <PCD_EP_ISR_Handler+0x55a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2224      	movs	r2, #36	; 0x24
 80014a0:	5c9b      	ldrb	r3, [r3, r2]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	4252      	negs	r2, r2
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	b291      	uxth	r1, r2
 80014b2:	224c      	movs	r2, #76	; 0x4c
 80014b4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2224      	movs	r2, #36	; 0x24
 80014ba:	2100      	movs	r1, #0
 80014bc:	5499      	strb	r1, [r3, r2]
 80014be:	e23e      	b.n	800193e <PCD_EP_ISR_Handler+0x55a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3329      	adds	r3, #41	; 0x29
 80014c4:	33ff      	adds	r3, #255	; 0xff
 80014c6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2112      	movs	r1, #18
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	8812      	ldrh	r2, [r2, #0]
 80014d2:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	881a      	ldrh	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	4013      	ands	r3, r2
 80014de:	d033      	beq.n	8001548 <PCD_EP_ISR_Handler+0x164>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2250      	movs	r2, #80	; 0x50
 80014e6:	5a9b      	ldrh	r3, [r3, r2]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	001a      	movs	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	18d2      	adds	r2, r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	18d3      	adds	r3, r2, r3
 80014fa:	4aad      	ldr	r2, [pc, #692]	; (80017b0 <PCD_EP_ISR_Handler+0x3cc>)
 80014fc:	4694      	mov	ip, r2
 80014fe:	4463      	add	r3, ip
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	059b      	lsls	r3, r3, #22
 8001504:	0d9a      	lsrs	r2, r3, #22
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	228c      	movs	r2, #140	; 0x8c
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	1899      	adds	r1, r3, r2
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	88da      	ldrh	r2, [r3, #6]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	b29b      	uxth	r3, r3
 8001520:	f002 fa8f 	bl	8003a42 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	4aa1      	ldr	r2, [pc, #644]	; (80017b4 <PCD_EP_ISR_Handler+0x3d0>)
 800152e:	4013      	ands	r3, r2
 8001530:	b29c      	uxth	r4, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	4322      	orrs	r2, r4
 800153a:	b292      	uxth	r2, r2
 800153c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	0018      	movs	r0, r3
 8001542:	f005 f9fb 	bl	800693c <HAL_PCD_SetupStageCallback>
 8001546:	e1fa      	b.n	800193e <PCD_EP_ISR_Handler+0x55a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001548:	2312      	movs	r3, #18
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	2200      	movs	r2, #0
 800154e:	5e9b      	ldrsh	r3, [r3, r2]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db00      	blt.n	8001556 <PCD_EP_ISR_Handler+0x172>
 8001554:	e1f3      	b.n	800193e <PCD_EP_ISR_Handler+0x55a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	4a95      	ldr	r2, [pc, #596]	; (80017b4 <PCD_EP_ISR_Handler+0x3d0>)
 8001560:	4013      	ands	r3, r2
 8001562:	b29c      	uxth	r4, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2280      	movs	r2, #128	; 0x80
 800156a:	4322      	orrs	r2, r4
 800156c:	b292      	uxth	r2, r2
 800156e:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2250      	movs	r2, #80	; 0x50
 8001576:	5a9b      	ldrh	r3, [r3, r2]
 8001578:	b29b      	uxth	r3, r3
 800157a:	001a      	movs	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	18d2      	adds	r2, r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	18d3      	adds	r3, r2, r3
 800158a:	4a89      	ldr	r2, [pc, #548]	; (80017b0 <PCD_EP_ISR_Handler+0x3cc>)
 800158c:	4694      	mov	ip, r2
 800158e:	4463      	add	r3, ip
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	059b      	lsls	r3, r3, #22
 8001594:	0d9a      	lsrs	r2, r3, #22
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 0U)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d011      	beq.n	80015c6 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6959      	ldr	r1, [r3, #20]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	88da      	ldrh	r2, [r3, #6]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f002 fa45 	bl	8003a42 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	695a      	ldr	r2, [r3, #20]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	18d2      	adds	r2, r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	615a      	str	r2, [r3, #20]

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2100      	movs	r1, #0
 80015ca:	0018      	movs	r0, r3
 80015cc:	f005 f9cb 	bl	8006966 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	001c      	movs	r4, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2250      	movs	r2, #80	; 0x50
 80015dc:	5a9b      	ldrh	r3, [r3, r2]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	18e4      	adds	r4, r4, r3
 80015e2:	4b73      	ldr	r3, [pc, #460]	; (80017b0 <PCD_EP_ISR_Handler+0x3cc>)
 80015e4:	18e3      	adds	r3, r4, r3
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10e      	bne.n	800160e <PCD_EP_ISR_Handler+0x22a>
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	4a70      	ldr	r2, [pc, #448]	; (80017b8 <PCD_EP_ISR_Handler+0x3d4>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	801a      	strh	r2, [r3, #0]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	4a69      	ldr	r2, [pc, #420]	; (80017a8 <PCD_EP_ISR_Handler+0x3c4>)
 8001604:	4313      	orrs	r3, r2
 8001606:	b29a      	uxth	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	801a      	strh	r2, [r3, #0]
 800160c:	e023      	b.n	8001656 <PCD_EP_ISR_Handler+0x272>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2b3d      	cmp	r3, #61	; 0x3d
 8001614:	d812      	bhi.n	800163c <PCD_EP_ISR_Handler+0x258>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	61bb      	str	r3, [r7, #24]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	2201      	movs	r2, #1
 8001624:	4013      	ands	r3, r2
 8001626:	d002      	beq.n	800162e <PCD_EP_ISR_Handler+0x24a>
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	3301      	adds	r3, #1
 800162c:	61bb      	str	r3, [r7, #24]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	b29b      	uxth	r3, r3
 8001632:	029b      	lsls	r3, r3, #10
 8001634:	b29a      	uxth	r2, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	801a      	strh	r2, [r3, #0]
 800163a:	e00c      	b.n	8001656 <PCD_EP_ISR_Handler+0x272>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	095b      	lsrs	r3, r3, #5
 8001642:	61bb      	str	r3, [r7, #24]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	b29b      	uxth	r3, r3
 8001648:	029b      	lsls	r3, r3, #10
 800164a:	b29b      	uxth	r3, r3
 800164c:	4a56      	ldr	r2, [pc, #344]	; (80017a8 <PCD_EP_ISR_Handler+0x3c4>)
 800164e:	4313      	orrs	r3, r2
 8001650:	b29a      	uxth	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	b29b      	uxth	r3, r3
 800165e:	4a57      	ldr	r2, [pc, #348]	; (80017bc <PCD_EP_ISR_Handler+0x3d8>)
 8001660:	4013      	ands	r3, r2
 8001662:	b29c      	uxth	r4, r3
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	015b      	lsls	r3, r3, #5
 8001668:	4063      	eors	r3, r4
 800166a:	b29c      	uxth	r4, r3
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	019b      	lsls	r3, r3, #6
 8001670:	4063      	eors	r3, r4
 8001672:	b29c      	uxth	r4, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a51      	ldr	r2, [pc, #324]	; (80017c0 <PCD_EP_ISR_Handler+0x3dc>)
 800167a:	4322      	orrs	r2, r4
 800167c:	b292      	uxth	r2, r2
 800167e:	801a      	strh	r2, [r3, #0]
 8001680:	e15d      	b.n	800193e <PCD_EP_ISR_Handler+0x55a>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	001a      	movs	r2, r3
 8001688:	2315      	movs	r3, #21
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	18d2      	adds	r2, r2, r3
 8001692:	2112      	movs	r1, #18
 8001694:	187b      	adds	r3, r7, r1
 8001696:	8812      	ldrh	r2, [r2, #0]
 8001698:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2200      	movs	r2, #0
 800169e:	5e9b      	ldrsh	r3, [r3, r2]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db00      	blt.n	80016a6 <PCD_EP_ISR_Handler+0x2c2>
 80016a4:	e0f5      	b.n	8001892 <PCD_EP_ISR_Handler+0x4ae>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	001a      	movs	r2, r3
 80016ac:	2115      	movs	r1, #21
 80016ae:	187b      	adds	r3, r7, r1
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	18d3      	adds	r3, r2, r3
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	4a3e      	ldr	r2, [pc, #248]	; (80017b4 <PCD_EP_ISR_Handler+0x3d0>)
 80016bc:	4013      	ands	r3, r2
 80016be:	b29c      	uxth	r4, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	001a      	movs	r2, r3
 80016c6:	187b      	adds	r3, r7, r1
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	18d3      	adds	r3, r2, r3
 80016ce:	2280      	movs	r2, #128	; 0x80
 80016d0:	4322      	orrs	r2, r4
 80016d2:	b292      	uxth	r2, r2
 80016d4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	015b      	lsls	r3, r3, #5
 80016dc:	3329      	adds	r3, #41	; 0x29
 80016de:	33ff      	adds	r3, #255	; 0xff
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	18d3      	adds	r3, r2, r3
 80016e4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	7b1b      	ldrb	r3, [r3, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d126      	bne.n	800173c <PCD_EP_ISR_Handler+0x358>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2250      	movs	r2, #80	; 0x50
 80016f4:	5a9b      	ldrh	r3, [r3, r2]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	001a      	movs	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	18d2      	adds	r2, r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	18d3      	adds	r3, r2, r3
 8001708:	4a29      	ldr	r2, [pc, #164]	; (80017b0 <PCD_EP_ISR_Handler+0x3cc>)
 800170a:	4694      	mov	ip, r2
 800170c:	4463      	add	r3, ip
 800170e:	881a      	ldrh	r2, [r3, #0]
 8001710:	211e      	movs	r1, #30
 8001712:	187b      	adds	r3, r7, r1
 8001714:	0592      	lsls	r2, r2, #22
 8001716:	0d92      	lsrs	r2, r2, #22
 8001718:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 800171a:	187b      	adds	r3, r7, r1
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d100      	bne.n	8001724 <PCD_EP_ISR_Handler+0x340>
 8001722:	e08b      	b.n	800183c <PCD_EP_ISR_Handler+0x458>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6959      	ldr	r1, [r3, #20]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	88da      	ldrh	r2, [r3, #6]
 8001730:	231e      	movs	r3, #30
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	f002 f984 	bl	8003a42 <USB_ReadPMA>
 800173a:	e07f      	b.n	800183c <PCD_EP_ISR_Handler+0x458>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	001a      	movs	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	18d3      	adds	r3, r2, r3
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	b29b      	uxth	r3, r3
 800174e:	001a      	movs	r2, r3
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	01db      	lsls	r3, r3, #7
 8001754:	4013      	ands	r3, r2
 8001756:	d035      	beq.n	80017c4 <PCD_EP_ISR_Handler+0x3e0>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2250      	movs	r2, #80	; 0x50
 800175e:	5a9b      	ldrh	r3, [r3, r2]
 8001760:	b29b      	uxth	r3, r3
 8001762:	001a      	movs	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	18d2      	adds	r2, r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	18d3      	adds	r3, r2, r3
 8001772:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <PCD_EP_ISR_Handler+0x3c8>)
 8001774:	4694      	mov	ip, r2
 8001776:	4463      	add	r3, ip
 8001778:	881a      	ldrh	r2, [r3, #0]
 800177a:	211e      	movs	r1, #30
 800177c:	187b      	adds	r3, r7, r1
 800177e:	0592      	lsls	r2, r2, #22
 8001780:	0d92      	lsrs	r2, r2, #22
 8001782:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8001784:	187b      	adds	r3, r7, r1
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d040      	beq.n	800180e <PCD_EP_ISR_Handler+0x42a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6959      	ldr	r1, [r3, #20]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	891a      	ldrh	r2, [r3, #8]
 8001798:	231e      	movs	r3, #30
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	f002 f950 	bl	8003a42 <USB_ReadPMA>
 80017a2:	e034      	b.n	800180e <PCD_EP_ISR_Handler+0x42a>
 80017a4:	ffff8f0f 	.word	0xffff8f0f
 80017a8:	ffff8000 	.word	0xffff8000
 80017ac:	00000402 	.word	0x00000402
 80017b0:	00000406 	.word	0x00000406
 80017b4:	00000f8f 	.word	0x00000f8f
 80017b8:	ffff83ff 	.word	0xffff83ff
 80017bc:	ffffbf8f 	.word	0xffffbf8f
 80017c0:	ffff8080 	.word	0xffff8080
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2250      	movs	r2, #80	; 0x50
 80017ca:	5a9b      	ldrh	r3, [r3, r2]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	001a      	movs	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	18d2      	adds	r2, r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	18d3      	adds	r3, r2, r3
 80017de:	4a5f      	ldr	r2, [pc, #380]	; (800195c <PCD_EP_ISR_Handler+0x578>)
 80017e0:	4694      	mov	ip, r2
 80017e2:	4463      	add	r3, ip
 80017e4:	881a      	ldrh	r2, [r3, #0]
 80017e6:	211e      	movs	r1, #30
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	0592      	lsls	r2, r2, #22
 80017ec:	0d92      	lsrs	r2, r2, #22
 80017ee:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 80017f0:	187b      	adds	r3, r7, r1
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00a      	beq.n	800180e <PCD_EP_ISR_Handler+0x42a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6959      	ldr	r1, [r3, #20]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	895a      	ldrh	r2, [r3, #10]
 8001804:	231e      	movs	r3, #30
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	f002 f91a 	bl	8003a42 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	001a      	movs	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	18d3      	adds	r3, r2, r3
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	b29b      	uxth	r3, r3
 8001820:	4a4f      	ldr	r2, [pc, #316]	; (8001960 <PCD_EP_ISR_Handler+0x57c>)
 8001822:	4013      	ands	r3, r2
 8001824:	b29c      	uxth	r4, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	001a      	movs	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	18d3      	adds	r3, r2, r3
 8001834:	4a4b      	ldr	r2, [pc, #300]	; (8001964 <PCD_EP_ISR_Handler+0x580>)
 8001836:	4322      	orrs	r2, r4
 8001838:	b292      	uxth	r2, r2
 800183a:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	69da      	ldr	r2, [r3, #28]
 8001840:	211e      	movs	r1, #30
 8001842:	187b      	adds	r3, r7, r1
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	18d2      	adds	r2, r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	695a      	ldr	r2, [r3, #20]
 8001850:	187b      	adds	r3, r7, r1
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	18d2      	adds	r2, r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <PCD_EP_ISR_Handler+0x48c>
 8001862:	231e      	movs	r3, #30
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	881a      	ldrh	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <PCD_EP_ISR_Handler+0x49c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	781a      	ldrb	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	0011      	movs	r1, r2
 8001878:	0018      	movs	r0, r3
 800187a:	f005 f874 	bl	8006966 <HAL_PCD_DataOutStageCallback>
 800187e:	e008      	b.n	8001892 <PCD_EP_ISR_Handler+0x4ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	7819      	ldrb	r1, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff fc55 	bl	800113c <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001892:	2312      	movs	r3, #18
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	4013      	ands	r3, r2
 800189c:	d04f      	beq.n	800193e <PCD_EP_ISR_Handler+0x55a>
      {
        ep = &hpcd->IN_ep[epindex];
 800189e:	2115      	movs	r1, #21
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	015b      	lsls	r3, r3, #5
 80018a6:	3328      	adds	r3, #40	; 0x28
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	18d3      	adds	r3, r2, r3
 80018ac:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	001a      	movs	r2, r3
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	18d3      	adds	r3, r2, r3
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4a29      	ldr	r2, [pc, #164]	; (8001968 <PCD_EP_ISR_Handler+0x584>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	b29c      	uxth	r4, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	001a      	movs	r2, r3
 80018cc:	187b      	adds	r3, r7, r1
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	18d3      	adds	r3, r2, r3
 80018d4:	4a25      	ldr	r2, [pc, #148]	; (800196c <PCD_EP_ISR_Handler+0x588>)
 80018d6:	4322      	orrs	r2, r4
 80018d8:	b292      	uxth	r2, r2
 80018da:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2250      	movs	r2, #80	; 0x50
 80018e2:	5a9b      	ldrh	r3, [r3, r2]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	001a      	movs	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	18d2      	adds	r2, r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	18d3      	adds	r3, r2, r3
 80018f6:	4a1e      	ldr	r2, [pc, #120]	; (8001970 <PCD_EP_ISR_Handler+0x58c>)
 80018f8:	4694      	mov	ip, r2
 80018fa:	4463      	add	r3, ip
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	059b      	lsls	r3, r3, #22
 8001900:	0d9a      	lsrs	r2, r3, #22
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	18d2      	adds	r2, r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d107      	bne.n	800192c <PCD_EP_ISR_Handler+0x548>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0011      	movs	r1, r2
 8001924:	0018      	movs	r0, r3
 8001926:	f005 f83b 	bl	80069a0 <HAL_PCD_DataInStageCallback>
 800192a:	e008      	b.n	800193e <PCD_EP_ISR_Handler+0x55a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	7819      	ldrb	r1, [r3, #0]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fc55 	bl	80011e8 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2244      	movs	r2, #68	; 0x44
 8001944:	5a9b      	ldrh	r3, [r3, r2]
 8001946:	b29b      	uxth	r3, r3
 8001948:	b21b      	sxth	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	da00      	bge.n	8001950 <PCD_EP_ISR_Handler+0x56c>
 800194e:	e54e      	b.n	80013ee <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b009      	add	sp, #36	; 0x24
 8001958:	bd90      	pop	{r4, r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	00000406 	.word	0x00000406
 8001960:	ffff8f8f 	.word	0xffff8f8f
 8001964:	ffff80c0 	.word	0xffff80c0
 8001968:	ffff8f0f 	.word	0xffff8f0f
 800196c:	ffff8000 	.word	0xffff8000
 8001970:	00000402 	.word	0x00000402

08001974 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	0008      	movs	r0, r1
 800197e:	0011      	movs	r1, r2
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	240a      	movs	r4, #10
 8001984:	193b      	adds	r3, r7, r4
 8001986:	1c02      	adds	r2, r0, #0
 8001988:	801a      	strh	r2, [r3, #0]
 800198a:	2308      	movs	r3, #8
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	1c0a      	adds	r2, r1, #0
 8001990:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001992:	193b      	adds	r3, r7, r4
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	4013      	ands	r3, r2
 800199a:	b29b      	uxth	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00a      	beq.n	80019b6 <HAL_PCDEx_PMAConfig+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019a0:	230a      	movs	r3, #10
 80019a2:	18fb      	adds	r3, r7, r3
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	2207      	movs	r2, #7
 80019a8:	4013      	ands	r3, r2
 80019aa:	015b      	lsls	r3, r3, #5
 80019ac:	3328      	adds	r3, #40	; 0x28
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	18d3      	adds	r3, r2, r3
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	e008      	b.n	80019c8 <HAL_PCDEx_PMAConfig+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019b6:	230a      	movs	r3, #10
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	015b      	lsls	r3, r3, #5
 80019be:	3329      	adds	r3, #41	; 0x29
 80019c0:	33ff      	adds	r3, #255	; 0xff
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	18d3      	adds	r3, r2, r3
 80019c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80019c8:	2308      	movs	r3, #8
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <HAL_PCDEx_PMAConfig+0x6e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2200      	movs	r2, #0
 80019d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	80da      	strh	r2, [r3, #6]
 80019e0:	e00b      	b.n	80019fa <HAL_PCDEx_PMAConfig+0x86>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2201      	movs	r2, #1
 80019e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	0c1b      	lsrs	r3, r3, #16
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b007      	add	sp, #28
 8001a02:	bd90      	pop	{r4, r7, pc}

08001a04 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	239b      	movs	r3, #155	; 0x9b
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	2101      	movs	r1, #1
 8001a1a:	50d1      	str	r1, [r2, r3]

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2258      	movs	r2, #88	; 0x58
 8001a20:	5a9b      	ldrh	r3, [r3, r2]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2201      	movs	r2, #1
 8001a26:	4313      	orrs	r3, r2
 8001a28:	b299      	uxth	r1, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2258      	movs	r2, #88	; 0x58
 8001a2e:	5299      	strh	r1, [r3, r2]
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2258      	movs	r2, #88	; 0x58
 8001a34:	5a9b      	ldrh	r3, [r3, r2]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	2202      	movs	r2, #2
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b299      	uxth	r1, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2258      	movs	r2, #88	; 0x58
 8001a42:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	0018      	movs	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b004      	add	sp, #16
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	239a      	movs	r3, #154	; 0x9a
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	2101      	movs	r1, #1
 8001a64:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	2398      	movs	r3, #152	; 0x98
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2254      	movs	r2, #84	; 0x54
 8001a74:	5a9b      	ldrh	r3, [r3, r2]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b299      	uxth	r1, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2254      	movs	r2, #84	; 0x54
 8001a82:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2254      	movs	r2, #84	; 0x54
 8001a88:	5a9b      	ldrh	r3, [r3, r2]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	b299      	uxth	r1, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2254      	movs	r2, #84	; 0x54
 8001a96:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b004      	add	sp, #16
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	000a      	movs	r2, r1
 8001aac:	1cfb      	adds	r3, r7, #3
 8001aae:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001ab0:	46c0      	nop			; (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b002      	add	sp, #8
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d102      	bne.n	8001acc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f000 fbbc 	bl	8002244 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001acc:	4bc8      	ldr	r3, [pc, #800]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	220c      	movs	r2, #12
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad6:	4bc6      	ldr	r3, [pc, #792]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	025b      	lsls	r3, r3, #9
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d100      	bne.n	8001aee <HAL_RCC_OscConfig+0x36>
 8001aec:	e07e      	b.n	8001bec <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d007      	beq.n	8001b04 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d112      	bne.n	8001b20 <HAL_RCC_OscConfig+0x68>
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	025b      	lsls	r3, r3, #9
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d10d      	bne.n	8001b20 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	4bba      	ldr	r3, [pc, #744]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	029b      	lsls	r3, r3, #10
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d100      	bne.n	8001b12 <HAL_RCC_OscConfig+0x5a>
 8001b10:	e06b      	b.n	8001bea <HAL_RCC_OscConfig+0x132>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d167      	bne.n	8001bea <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f000 fb92 	bl	8002244 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	025b      	lsls	r3, r3, #9
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_OscConfig+0x84>
 8001b2c:	4bb0      	ldr	r3, [pc, #704]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4baf      	ldr	r3, [pc, #700]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001b32:	2180      	movs	r1, #128	; 0x80
 8001b34:	0249      	lsls	r1, r1, #9
 8001b36:	430a      	orrs	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e027      	b.n	8001b8c <HAL_RCC_OscConfig+0xd4>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	23a0      	movs	r3, #160	; 0xa0
 8001b42:	02db      	lsls	r3, r3, #11
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d10e      	bne.n	8001b66 <HAL_RCC_OscConfig+0xae>
 8001b48:	4ba9      	ldr	r3, [pc, #676]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4ba8      	ldr	r3, [pc, #672]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001b4e:	2180      	movs	r1, #128	; 0x80
 8001b50:	02c9      	lsls	r1, r1, #11
 8001b52:	430a      	orrs	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	4ba6      	ldr	r3, [pc, #664]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4ba5      	ldr	r3, [pc, #660]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	0249      	lsls	r1, r1, #9
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e012      	b.n	8001b8c <HAL_RCC_OscConfig+0xd4>
 8001b66:	4ba2      	ldr	r3, [pc, #648]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4ba1      	ldr	r3, [pc, #644]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001b6c:	49a1      	ldr	r1, [pc, #644]	; (8001df4 <HAL_RCC_OscConfig+0x33c>)
 8001b6e:	400a      	ands	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	4b9f      	ldr	r3, [pc, #636]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	025b      	lsls	r3, r3, #9
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4b9b      	ldr	r3, [pc, #620]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b9a      	ldr	r3, [pc, #616]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001b86:	499c      	ldr	r1, [pc, #624]	; (8001df8 <HAL_RCC_OscConfig+0x340>)
 8001b88:	400a      	ands	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d015      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7fe fb9a 	bl	80002cc <HAL_GetTick>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b9c:	e009      	b.n	8001bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b9e:	f7fe fb95 	bl	80002cc <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b64      	cmp	r3, #100	; 0x64
 8001baa:	d902      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	f000 fb49 	bl	8002244 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bb2:	4b8f      	ldr	r3, [pc, #572]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	029b      	lsls	r3, r3, #10
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d0ef      	beq.n	8001b9e <HAL_RCC_OscConfig+0xe6>
 8001bbe:	e015      	b.n	8001bec <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7fe fb84 	bl	80002cc <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bca:	f7fe fb7f 	bl	80002cc <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b64      	cmp	r3, #100	; 0x64
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e333      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bdc:	4b84      	ldr	r3, [pc, #528]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	029b      	lsls	r3, r3, #10
 8001be4:	4013      	ands	r3, r2
 8001be6:	d1f0      	bne.n	8001bca <HAL_RCC_OscConfig+0x112>
 8001be8:	e000      	b.n	8001bec <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d100      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x140>
 8001bf6:	e098      	b.n	8001d2a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	2220      	movs	r2, #32
 8001c02:	4013      	ands	r3, r2
 8001c04:	d009      	beq.n	8001c1a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001c06:	4b7a      	ldr	r3, [pc, #488]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b79      	ldr	r3, [pc, #484]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001c0c:	2120      	movs	r1, #32
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	2220      	movs	r2, #32
 8001c16:	4393      	bics	r3, r2
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d13d      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x1ea>
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d13a      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c2c:	4b70      	ldr	r3, [pc, #448]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2204      	movs	r2, #4
 8001c32:	4013      	ands	r3, r2
 8001c34:	d004      	beq.n	8001c40 <HAL_RCC_OscConfig+0x188>
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e301      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c40:	4b6b      	ldr	r3, [pc, #428]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a6d      	ldr	r2, [pc, #436]	; (8001dfc <HAL_RCC_OscConfig+0x344>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	021a      	lsls	r2, r3, #8
 8001c50:	4b67      	ldr	r3, [pc, #412]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001c52:	430a      	orrs	r2, r1
 8001c54:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c56:	4b66      	ldr	r3, [pc, #408]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2209      	movs	r2, #9
 8001c5c:	4393      	bics	r3, r2
 8001c5e:	0019      	movs	r1, r3
 8001c60:	4b63      	ldr	r3, [pc, #396]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c68:	f000 fc20 	bl	80024ac <HAL_RCC_GetSysClockFreq>
 8001c6c:	0001      	movs	r1, r0
 8001c6e:	4b60      	ldr	r3, [pc, #384]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	220f      	movs	r2, #15
 8001c76:	4013      	ands	r3, r2
 8001c78:	4a61      	ldr	r2, [pc, #388]	; (8001e00 <HAL_RCC_OscConfig+0x348>)
 8001c7a:	5cd3      	ldrb	r3, [r2, r3]
 8001c7c:	000a      	movs	r2, r1
 8001c7e:	40da      	lsrs	r2, r3
 8001c80:	4b60      	ldr	r3, [pc, #384]	; (8001e04 <HAL_RCC_OscConfig+0x34c>)
 8001c82:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001c84:	2513      	movs	r5, #19
 8001c86:	197c      	adds	r4, r7, r5
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7fe fae9 	bl	8000260 <HAL_InitTick>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c92:	197b      	adds	r3, r7, r5
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d047      	beq.n	8001d2a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001c9a:	2313      	movs	r3, #19
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	e2d0      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d027      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ca8:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2209      	movs	r2, #9
 8001cae:	4393      	bics	r3, r2
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	4b4f      	ldr	r3, [pc, #316]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7fe fb07 	bl	80002cc <HAL_GetTick>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc4:	f7fe fb02 	bl	80002cc <HAL_GetTick>
 8001cc8:	0002      	movs	r2, r0
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e2b6      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cd6:	4b46      	ldr	r3, [pc, #280]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2204      	movs	r2, #4
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d0f1      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b43      	ldr	r3, [pc, #268]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4a45      	ldr	r2, [pc, #276]	; (8001dfc <HAL_RCC_OscConfig+0x344>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	0019      	movs	r1, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	021a      	lsls	r2, r3, #8
 8001cf0:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	e018      	b.n	8001d2a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf8:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b3c      	ldr	r3, [pc, #240]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001cfe:	2101      	movs	r1, #1
 8001d00:	438a      	bics	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7fe fae2 	bl	80002cc <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7fe fadd 	bl	80002cc <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e291      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d20:	4b33      	ldr	r3, [pc, #204]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2204      	movs	r2, #4
 8001d26:	4013      	ands	r3, r2
 8001d28:	d1f1      	bne.n	8001d0e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2210      	movs	r2, #16
 8001d30:	4013      	ands	r3, r2
 8001d32:	d100      	bne.n	8001d36 <HAL_RCC_OscConfig+0x27e>
 8001d34:	e09f      	b.n	8001e76 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d13f      	bne.n	8001dbc <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d3c:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_OscConfig+0x29c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e277      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d54:	4b26      	ldr	r3, [pc, #152]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a2b      	ldr	r2, [pc, #172]	; (8001e08 <HAL_RCC_OscConfig+0x350>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d62:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001d64:	430a      	orrs	r2, r1
 8001d66:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d68:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	0a19      	lsrs	r1, r3, #8
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	061a      	lsls	r2, r3, #24
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	0b5b      	lsrs	r3, r3, #13
 8001d82:	3301      	adds	r3, #1
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	0212      	lsls	r2, r2, #8
 8001d88:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	210f      	movs	r1, #15
 8001d92:	400b      	ands	r3, r1
 8001d94:	491a      	ldr	r1, [pc, #104]	; (8001e00 <HAL_RCC_OscConfig+0x348>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <HAL_RCC_OscConfig+0x34c>)
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001d9e:	2513      	movs	r5, #19
 8001da0:	197c      	adds	r4, r7, r5
 8001da2:	2000      	movs	r0, #0
 8001da4:	f7fe fa5c 	bl	8000260 <HAL_InitTick>
 8001da8:	0003      	movs	r3, r0
 8001daa:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001dac:	197b      	adds	r3, r7, r5
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d060      	beq.n	8001e76 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001db4:	2313      	movs	r3, #19
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	e243      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d03e      	beq.n	8001e42 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_RCC_OscConfig+0x338>)
 8001dca:	2180      	movs	r1, #128	; 0x80
 8001dcc:	0049      	lsls	r1, r1, #1
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7fe fa7b 	bl	80002cc <HAL_GetTick>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dda:	e017      	b.n	8001e0c <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ddc:	f7fe fa76 	bl	80002cc <HAL_GetTick>
 8001de0:	0002      	movs	r2, r0
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d910      	bls.n	8001e0c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e22a      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	40021000 	.word	0x40021000
 8001df4:	fffeffff 	.word	0xfffeffff
 8001df8:	fffbffff 	.word	0xfffbffff
 8001dfc:	ffffe0ff 	.word	0xffffe0ff
 8001e00:	080077a4 	.word	0x080077a4
 8001e04:	20000110 	.word	0x20000110
 8001e08:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e0c:	4bc6      	ldr	r3, [pc, #792]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4013      	ands	r3, r2
 8001e16:	d0e1      	beq.n	8001ddc <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e18:	4bc3      	ldr	r3, [pc, #780]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4ac3      	ldr	r2, [pc, #780]	; (800212c <HAL_RCC_OscConfig+0x674>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	0019      	movs	r1, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e26:	4bc0      	ldr	r3, [pc, #768]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e2c:	4bbe      	ldr	r3, [pc, #760]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	0a19      	lsrs	r1, r3, #8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	061a      	lsls	r2, r3, #24
 8001e3a:	4bbb      	ldr	r3, [pc, #748]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	e019      	b.n	8001e76 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e42:	4bb9      	ldr	r3, [pc, #740]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4bb8      	ldr	r3, [pc, #736]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001e48:	49b9      	ldr	r1, [pc, #740]	; (8002130 <HAL_RCC_OscConfig+0x678>)
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7fe fa3d 	bl	80002cc <HAL_GetTick>
 8001e52:	0003      	movs	r3, r0
 8001e54:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e58:	f7fe fa38 	bl	80002cc <HAL_GetTick>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e1ec      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e6a:	4baf      	ldr	r3, [pc, #700]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4013      	ands	r3, r2
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2208      	movs	r2, #8
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d036      	beq.n	8001eee <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d019      	beq.n	8001ebc <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e88:	4ba7      	ldr	r3, [pc, #668]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001e8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e8c:	4ba6      	ldr	r3, [pc, #664]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	430a      	orrs	r2, r1
 8001e92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e94:	f7fe fa1a 	bl	80002cc <HAL_GetTick>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9e:	f7fe fa15 	bl	80002cc <HAL_GetTick>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e1c9      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001eb0:	4b9d      	ldr	r3, [pc, #628]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d0f1      	beq.n	8001e9e <HAL_RCC_OscConfig+0x3e6>
 8001eba:	e018      	b.n	8001eee <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebc:	4b9a      	ldr	r3, [pc, #616]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001ebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ec0:	4b99      	ldr	r3, [pc, #612]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	438a      	bics	r2, r1
 8001ec6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec8:	f7fe fa00 	bl	80002cc <HAL_GetTick>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed2:	f7fe f9fb 	bl	80002cc <HAL_GetTick>
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e1af      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ee4:	4b90      	ldr	r3, [pc, #576]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee8:	2202      	movs	r2, #2
 8001eea:	4013      	ands	r3, r2
 8001eec:	d1f1      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d100      	bne.n	8001efa <HAL_RCC_OscConfig+0x442>
 8001ef8:	e0af      	b.n	800205a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efa:	2323      	movs	r3, #35	; 0x23
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f02:	4b89      	ldr	r3, [pc, #548]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	055b      	lsls	r3, r3, #21
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d10a      	bne.n	8001f24 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4b86      	ldr	r3, [pc, #536]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f12:	4b85      	ldr	r3, [pc, #532]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001f14:	2180      	movs	r1, #128	; 0x80
 8001f16:	0549      	lsls	r1, r1, #21
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f1c:	2323      	movs	r3, #35	; 0x23
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	4b83      	ldr	r3, [pc, #524]	; (8002134 <HAL_RCC_OscConfig+0x67c>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d11a      	bne.n	8001f66 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f30:	4b80      	ldr	r3, [pc, #512]	; (8002134 <HAL_RCC_OscConfig+0x67c>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b7f      	ldr	r3, [pc, #508]	; (8002134 <HAL_RCC_OscConfig+0x67c>)
 8001f36:	2180      	movs	r1, #128	; 0x80
 8001f38:	0049      	lsls	r1, r1, #1
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3e:	f7fe f9c5 	bl	80002cc <HAL_GetTick>
 8001f42:	0003      	movs	r3, r0
 8001f44:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f48:	f7fe f9c0 	bl	80002cc <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	; 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e174      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5a:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x67c>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4013      	ands	r3, r2
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_OscConfig+0x4ca>
 8001f72:	4b6d      	ldr	r3, [pc, #436]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001f74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f76:	4b6c      	ldr	r3, [pc, #432]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	0049      	lsls	r1, r1, #1
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	651a      	str	r2, [r3, #80]	; 0x50
 8001f80:	e031      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
 8001f8a:	4b67      	ldr	r3, [pc, #412]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001f8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f8e:	4b66      	ldr	r3, [pc, #408]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001f90:	4967      	ldr	r1, [pc, #412]	; (8002130 <HAL_RCC_OscConfig+0x678>)
 8001f92:	400a      	ands	r2, r1
 8001f94:	651a      	str	r2, [r3, #80]	; 0x50
 8001f96:	4b64      	ldr	r3, [pc, #400]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001f98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001f9c:	4966      	ldr	r1, [pc, #408]	; (8002138 <HAL_RCC_OscConfig+0x680>)
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	651a      	str	r2, [r3, #80]	; 0x50
 8001fa2:	e020      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	23a0      	movs	r3, #160	; 0xa0
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d10e      	bne.n	8001fce <HAL_RCC_OscConfig+0x516>
 8001fb0:	4b5d      	ldr	r3, [pc, #372]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001fb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fb4:	4b5c      	ldr	r3, [pc, #368]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	00c9      	lsls	r1, r1, #3
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	651a      	str	r2, [r3, #80]	; 0x50
 8001fbe:	4b5a      	ldr	r3, [pc, #360]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001fc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fc2:	4b59      	ldr	r3, [pc, #356]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	0049      	lsls	r1, r1, #1
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	651a      	str	r2, [r3, #80]	; 0x50
 8001fcc:	e00b      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
 8001fce:	4b56      	ldr	r3, [pc, #344]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001fd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd2:	4b55      	ldr	r3, [pc, #340]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001fd4:	4956      	ldr	r1, [pc, #344]	; (8002130 <HAL_RCC_OscConfig+0x678>)
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	651a      	str	r2, [r3, #80]	; 0x50
 8001fda:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001fdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fde:	4b52      	ldr	r3, [pc, #328]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8001fe0:	4955      	ldr	r1, [pc, #340]	; (8002138 <HAL_RCC_OscConfig+0x680>)
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d015      	beq.n	800201a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fee:	f7fe f96d 	bl	80002cc <HAL_GetTick>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ff6:	e009      	b.n	800200c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7fe f968 	bl	80002cc <HAL_GetTick>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	4a4e      	ldr	r2, [pc, #312]	; (800213c <HAL_RCC_OscConfig+0x684>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e11b      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800200c:	4b46      	ldr	r3, [pc, #280]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 800200e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d0ef      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x540>
 8002018:	e014      	b.n	8002044 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201a:	f7fe f957 	bl	80002cc <HAL_GetTick>
 800201e:	0003      	movs	r3, r0
 8002020:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002022:	e009      	b.n	8002038 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f7fe f952 	bl	80002cc <HAL_GetTick>
 8002028:	0002      	movs	r2, r0
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	4a43      	ldr	r2, [pc, #268]	; (800213c <HAL_RCC_OscConfig+0x684>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e105      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002038:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 800203a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4013      	ands	r3, r2
 8002042:	d1ef      	bne.n	8002024 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002044:	2323      	movs	r3, #35	; 0x23
 8002046:	18fb      	adds	r3, r7, r3
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d105      	bne.n	800205a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204e:	4b36      	ldr	r3, [pc, #216]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8002050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002052:	4b35      	ldr	r3, [pc, #212]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8002054:	493a      	ldr	r1, [pc, #232]	; (8002140 <HAL_RCC_OscConfig+0x688>)
 8002056:	400a      	ands	r2, r1
 8002058:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2220      	movs	r2, #32
 8002060:	4013      	ands	r3, r2
 8002062:	d049      	beq.n	80020f8 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d026      	beq.n	80020ba <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800206c:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8002072:	2101      	movs	r1, #1
 8002074:	430a      	orrs	r2, r1
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 800207a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800207c:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 800207e:	2101      	movs	r1, #1
 8002080:	430a      	orrs	r2, r1
 8002082:	635a      	str	r2, [r3, #52]	; 0x34
 8002084:	4b2f      	ldr	r3, [pc, #188]	; (8002144 <HAL_RCC_OscConfig+0x68c>)
 8002086:	6a1a      	ldr	r2, [r3, #32]
 8002088:	4b2e      	ldr	r3, [pc, #184]	; (8002144 <HAL_RCC_OscConfig+0x68c>)
 800208a:	2180      	movs	r1, #128	; 0x80
 800208c:	0189      	lsls	r1, r1, #6
 800208e:	430a      	orrs	r2, r1
 8002090:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7fe f91b 	bl	80002cc <HAL_GetTick>
 8002096:	0003      	movs	r3, r0
 8002098:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800209c:	f7fe f916 	bl	80002cc <HAL_GetTick>
 80020a0:	0002      	movs	r2, r0
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e0ca      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020ae:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2202      	movs	r2, #2
 80020b4:	4013      	ands	r3, r2
 80020b6:	d0f1      	beq.n	800209c <HAL_RCC_OscConfig+0x5e4>
 80020b8:	e01e      	b.n	80020f8 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 80020c0:	2101      	movs	r1, #1
 80020c2:	438a      	bics	r2, r1
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_RCC_OscConfig+0x68c>)
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_RCC_OscConfig+0x68c>)
 80020cc:	491e      	ldr	r1, [pc, #120]	; (8002148 <HAL_RCC_OscConfig+0x690>)
 80020ce:	400a      	ands	r2, r1
 80020d0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7fe f8fb 	bl	80002cc <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020dc:	f7fe f8f6 	bl	80002cc <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e0aa      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2202      	movs	r2, #2
 80020f4:	4013      	ands	r3, r2
 80020f6:	d1f1      	bne.n	80020dc <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d100      	bne.n	8002102 <HAL_RCC_OscConfig+0x64a>
 8002100:	e09f      	b.n	8002242 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	2b0c      	cmp	r3, #12
 8002106:	d100      	bne.n	800210a <HAL_RCC_OscConfig+0x652>
 8002108:	e078      	b.n	80021fc <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	2b02      	cmp	r3, #2
 8002110:	d159      	bne.n	80021c6 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <HAL_RCC_OscConfig+0x670>)
 8002118:	490c      	ldr	r1, [pc, #48]	; (800214c <HAL_RCC_OscConfig+0x694>)
 800211a:	400a      	ands	r2, r1
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7fe f8d5 	bl	80002cc <HAL_GetTick>
 8002122:	0003      	movs	r3, r0
 8002124:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002126:	e01c      	b.n	8002162 <HAL_RCC_OscConfig+0x6aa>
 8002128:	40021000 	.word	0x40021000
 800212c:	ffff1fff 	.word	0xffff1fff
 8002130:	fffffeff 	.word	0xfffffeff
 8002134:	40007000 	.word	0x40007000
 8002138:	fffffbff 	.word	0xfffffbff
 800213c:	00001388 	.word	0x00001388
 8002140:	efffffff 	.word	0xefffffff
 8002144:	40010000 	.word	0x40010000
 8002148:	ffffdfff 	.word	0xffffdfff
 800214c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002150:	f7fe f8bc 	bl	80002cc <HAL_GetTick>
 8002154:	0002      	movs	r2, r0
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e070      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002162:	4b3a      	ldr	r3, [pc, #232]	; (800224c <HAL_RCC_OscConfig+0x794>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	049b      	lsls	r3, r3, #18
 800216a:	4013      	ands	r3, r2
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800216e:	4b37      	ldr	r3, [pc, #220]	; (800224c <HAL_RCC_OscConfig+0x794>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	4a37      	ldr	r2, [pc, #220]	; (8002250 <HAL_RCC_OscConfig+0x798>)
 8002174:	4013      	ands	r3, r2
 8002176:	0019      	movs	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002186:	431a      	orrs	r2, r3
 8002188:	4b30      	ldr	r3, [pc, #192]	; (800224c <HAL_RCC_OscConfig+0x794>)
 800218a:	430a      	orrs	r2, r1
 800218c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800218e:	4b2f      	ldr	r3, [pc, #188]	; (800224c <HAL_RCC_OscConfig+0x794>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b2e      	ldr	r3, [pc, #184]	; (800224c <HAL_RCC_OscConfig+0x794>)
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	0449      	lsls	r1, r1, #17
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7fe f896 	bl	80002cc <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a6:	f7fe f891 	bl	80002cc <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e045      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021b8:	4b24      	ldr	r3, [pc, #144]	; (800224c <HAL_RCC_OscConfig+0x794>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	049b      	lsls	r3, r3, #18
 80021c0:	4013      	ands	r3, r2
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x6ee>
 80021c4:	e03d      	b.n	8002242 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c6:	4b21      	ldr	r3, [pc, #132]	; (800224c <HAL_RCC_OscConfig+0x794>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_RCC_OscConfig+0x794>)
 80021cc:	4921      	ldr	r1, [pc, #132]	; (8002254 <HAL_RCC_OscConfig+0x79c>)
 80021ce:	400a      	ands	r2, r1
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7fe f87b 	bl	80002cc <HAL_GetTick>
 80021d6:	0003      	movs	r3, r0
 80021d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021dc:	f7fe f876 	bl	80002cc <HAL_GetTick>
 80021e0:	0002      	movs	r2, r0
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e02a      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <HAL_RCC_OscConfig+0x794>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	049b      	lsls	r3, r3, #18
 80021f6:	4013      	ands	r3, r2
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x724>
 80021fa:	e022      	b.n	8002242 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e01d      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <HAL_RCC_OscConfig+0x794>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	025b      	lsls	r3, r3, #9
 8002214:	401a      	ands	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	429a      	cmp	r2, r3
 800221c:	d10f      	bne.n	800223e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	23f0      	movs	r3, #240	; 0xf0
 8002222:	039b      	lsls	r3, r3, #14
 8002224:	401a      	ands	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d107      	bne.n	800223e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	23c0      	movs	r3, #192	; 0xc0
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	401a      	ands	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b00a      	add	sp, #40	; 0x28
 800224a:	bdb0      	pop	{r4, r5, r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	ff02ffff 	.word	0xff02ffff
 8002254:	feffffff 	.word	0xfeffffff

08002258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002258:	b5b0      	push	{r4, r5, r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e10d      	b.n	8002488 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800226c:	4b88      	ldr	r3, [pc, #544]	; (8002490 <HAL_RCC_ClockConfig+0x238>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2201      	movs	r2, #1
 8002272:	4013      	ands	r3, r2
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d911      	bls.n	800229e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b85      	ldr	r3, [pc, #532]	; (8002490 <HAL_RCC_ClockConfig+0x238>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2201      	movs	r2, #1
 8002280:	4393      	bics	r3, r2
 8002282:	0019      	movs	r1, r3
 8002284:	4b82      	ldr	r3, [pc, #520]	; (8002490 <HAL_RCC_ClockConfig+0x238>)
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228c:	4b80      	ldr	r3, [pc, #512]	; (8002490 <HAL_RCC_ClockConfig+0x238>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2201      	movs	r2, #1
 8002292:	4013      	ands	r3, r2
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d001      	beq.n	800229e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0f4      	b.n	8002488 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2202      	movs	r2, #2
 80022a4:	4013      	ands	r3, r2
 80022a6:	d009      	beq.n	80022bc <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a8:	4b7a      	ldr	r3, [pc, #488]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	22f0      	movs	r2, #240	; 0xf0
 80022ae:	4393      	bics	r3, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	4b77      	ldr	r3, [pc, #476]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 80022b8:	430a      	orrs	r2, r1
 80022ba:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2201      	movs	r2, #1
 80022c2:	4013      	ands	r3, r2
 80022c4:	d100      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x70>
 80022c6:	e089      	b.n	80023dc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022d0:	4b70      	ldr	r3, [pc, #448]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	029b      	lsls	r3, r3, #10
 80022d8:	4013      	ands	r3, r2
 80022da:	d120      	bne.n	800231e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0d3      	b.n	8002488 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022e8:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	049b      	lsls	r3, r3, #18
 80022f0:	4013      	ands	r3, r2
 80022f2:	d114      	bne.n	800231e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0c7      	b.n	8002488 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d106      	bne.n	800230e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002300:	4b64      	ldr	r3, [pc, #400]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2204      	movs	r2, #4
 8002306:	4013      	ands	r3, r2
 8002308:	d109      	bne.n	800231e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0bc      	b.n	8002488 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800230e:	4b61      	ldr	r3, [pc, #388]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4013      	ands	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0b4      	b.n	8002488 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231e:	4b5d      	ldr	r3, [pc, #372]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2203      	movs	r2, #3
 8002324:	4393      	bics	r3, r2
 8002326:	0019      	movs	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	4b59      	ldr	r3, [pc, #356]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 800232e:	430a      	orrs	r2, r1
 8002330:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002332:	f7fd ffcb 	bl	80002cc <HAL_GetTick>
 8002336:	0003      	movs	r3, r0
 8002338:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d111      	bne.n	8002366 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002342:	e009      	b.n	8002358 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002344:	f7fd ffc2 	bl	80002cc <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	4a52      	ldr	r2, [pc, #328]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e097      	b.n	8002488 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002358:	4b4e      	ldr	r3, [pc, #312]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	220c      	movs	r2, #12
 800235e:	4013      	ands	r3, r2
 8002360:	2b08      	cmp	r3, #8
 8002362:	d1ef      	bne.n	8002344 <HAL_RCC_ClockConfig+0xec>
 8002364:	e03a      	b.n	80023dc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d111      	bne.n	8002392 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236e:	e009      	b.n	8002384 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002370:	f7fd ffac 	bl	80002cc <HAL_GetTick>
 8002374:	0002      	movs	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	4a47      	ldr	r2, [pc, #284]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e081      	b.n	8002488 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002384:	4b43      	ldr	r3, [pc, #268]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	220c      	movs	r2, #12
 800238a:	4013      	ands	r3, r2
 800238c:	2b0c      	cmp	r3, #12
 800238e:	d1ef      	bne.n	8002370 <HAL_RCC_ClockConfig+0x118>
 8002390:	e024      	b.n	80023dc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d11b      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800239a:	e009      	b.n	80023b0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239c:	f7fd ff96 	bl	80002cc <HAL_GetTick>
 80023a0:	0002      	movs	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	4a3c      	ldr	r2, [pc, #240]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e06b      	b.n	8002488 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b0:	4b38      	ldr	r3, [pc, #224]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	220c      	movs	r2, #12
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d1ef      	bne.n	800239c <HAL_RCC_ClockConfig+0x144>
 80023bc:	e00e      	b.n	80023dc <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023be:	f7fd ff85 	bl	80002cc <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	4a33      	ldr	r2, [pc, #204]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e05a      	b.n	8002488 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80023d2:	4b30      	ldr	r3, [pc, #192]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	220c      	movs	r2, #12
 80023d8:	4013      	ands	r3, r2
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023dc:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <HAL_RCC_ClockConfig+0x238>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d211      	bcs.n	800240e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b29      	ldr	r3, [pc, #164]	; (8002490 <HAL_RCC_ClockConfig+0x238>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2201      	movs	r2, #1
 80023f0:	4393      	bics	r3, r2
 80023f2:	0019      	movs	r1, r3
 80023f4:	4b26      	ldr	r3, [pc, #152]	; (8002490 <HAL_RCC_ClockConfig+0x238>)
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fc:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_RCC_ClockConfig+0x238>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2201      	movs	r2, #1
 8002402:	4013      	ands	r3, r2
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d001      	beq.n	800240e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e03c      	b.n	8002488 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2204      	movs	r2, #4
 8002414:	4013      	ands	r3, r2
 8002416:	d009      	beq.n	800242c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002418:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a1f      	ldr	r2, [pc, #124]	; (800249c <HAL_RCC_ClockConfig+0x244>)
 800241e:	4013      	ands	r3, r2
 8002420:	0019      	movs	r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 8002428:	430a      	orrs	r2, r1
 800242a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2208      	movs	r2, #8
 8002432:	4013      	ands	r3, r2
 8002434:	d00a      	beq.n	800244c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	4a19      	ldr	r2, [pc, #100]	; (80024a0 <HAL_RCC_ClockConfig+0x248>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	00da      	lsls	r2, r3, #3
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 8002448:	430a      	orrs	r2, r1
 800244a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800244c:	f000 f82e 	bl	80024ac <HAL_RCC_GetSysClockFreq>
 8002450:	0001      	movs	r1, r0
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	220f      	movs	r2, #15
 800245a:	4013      	ands	r3, r2
 800245c:	4a11      	ldr	r2, [pc, #68]	; (80024a4 <HAL_RCC_ClockConfig+0x24c>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	000a      	movs	r2, r1
 8002462:	40da      	lsrs	r2, r3
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_RCC_ClockConfig+0x250>)
 8002466:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002468:	250b      	movs	r5, #11
 800246a:	197c      	adds	r4, r7, r5
 800246c:	2000      	movs	r0, #0
 800246e:	f7fd fef7 	bl	8000260 <HAL_InitTick>
 8002472:	0003      	movs	r3, r0
 8002474:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002476:	197b      	adds	r3, r7, r5
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800247e:	230b      	movs	r3, #11
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	e000      	b.n	8002488 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b004      	add	sp, #16
 800248e:	bdb0      	pop	{r4, r5, r7, pc}
 8002490:	40022000 	.word	0x40022000
 8002494:	40021000 	.word	0x40021000
 8002498:	00001388 	.word	0x00001388
 800249c:	fffff8ff 	.word	0xfffff8ff
 80024a0:	ffffc7ff 	.word	0xffffc7ff
 80024a4:	080077a4 	.word	0x080077a4
 80024a8:	20000110 	.word	0x20000110

080024ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80024b2:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	220c      	movs	r2, #12
 80024bc:	4013      	ands	r3, r2
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d00e      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x34>
 80024c2:	2b0c      	cmp	r3, #12
 80024c4:	d00f      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d157      	bne.n	800257a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80024ca:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2210      	movs	r2, #16
 80024d0:	4013      	ands	r3, r2
 80024d2:	d002      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80024d4:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024d6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80024d8:	e05d      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80024da:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80024dc:	613b      	str	r3, [r7, #16]
      break;
 80024de:	e05a      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024e0:	4b32      	ldr	r3, [pc, #200]	; (80025ac <HAL_RCC_GetSysClockFreq+0x100>)
 80024e2:	613b      	str	r3, [r7, #16]
      break;
 80024e4:	e057      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	0c9b      	lsrs	r3, r3, #18
 80024ea:	220f      	movs	r2, #15
 80024ec:	4013      	ands	r3, r2
 80024ee:	4a30      	ldr	r2, [pc, #192]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80024f0:	5cd3      	ldrb	r3, [r2, r3]
 80024f2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	0d9b      	lsrs	r3, r3, #22
 80024f8:	2203      	movs	r2, #3
 80024fa:	4013      	ands	r3, r2
 80024fc:	3301      	adds	r3, #1
 80024fe:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	025b      	lsls	r3, r3, #9
 8002508:	4013      	ands	r3, r2
 800250a:	d00f      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	000a      	movs	r2, r1
 8002510:	0152      	lsls	r2, r2, #5
 8002512:	1a52      	subs	r2, r2, r1
 8002514:	0193      	lsls	r3, r2, #6
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	185b      	adds	r3, r3, r1
 800251c:	025b      	lsls	r3, r3, #9
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	0018      	movs	r0, r3
 8002522:	f7fd fdf1 	bl	8000108 <__udivsi3>
 8002526:	0003      	movs	r3, r0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	e023      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800252c:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2210      	movs	r2, #16
 8002532:	4013      	ands	r3, r2
 8002534:	d00f      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	000a      	movs	r2, r1
 800253a:	0152      	lsls	r2, r2, #5
 800253c:	1a52      	subs	r2, r2, r1
 800253e:	0193      	lsls	r3, r2, #6
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	185b      	adds	r3, r3, r1
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	0018      	movs	r0, r3
 800254c:	f7fd fddc 	bl	8000108 <__udivsi3>
 8002550:	0003      	movs	r3, r0
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	e00e      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	000a      	movs	r2, r1
 800255a:	0152      	lsls	r2, r2, #5
 800255c:	1a52      	subs	r2, r2, r1
 800255e:	0193      	lsls	r3, r2, #6
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	185b      	adds	r3, r3, r1
 8002566:	029b      	lsls	r3, r3, #10
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	0018      	movs	r0, r3
 800256c:	f7fd fdcc 	bl	8000108 <__udivsi3>
 8002570:	0003      	movs	r3, r0
 8002572:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	613b      	str	r3, [r7, #16]
      break;
 8002578:	e00d      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	0b5b      	lsrs	r3, r3, #13
 8002580:	2207      	movs	r2, #7
 8002582:	4013      	ands	r3, r2
 8002584:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	0212      	lsls	r2, r2, #8
 800258e:	409a      	lsls	r2, r3
 8002590:	0013      	movs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
      break;
 8002594:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002596:	693b      	ldr	r3, [r7, #16]
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b006      	add	sp, #24
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	003d0900 	.word	0x003d0900
 80025a8:	00f42400 	.word	0x00f42400
 80025ac:	007a1200 	.word	0x007a1200
 80025b0:	080077b4 	.word	0x080077b4

080025b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2220      	movs	r2, #32
 80025c2:	4013      	ands	r3, r2
 80025c4:	d106      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	4013      	ands	r3, r2
 80025d0:	d100      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80025d2:	e0dd      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80025d4:	2317      	movs	r3, #23
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025dc:	4ba4      	ldr	r3, [pc, #656]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	055b      	lsls	r3, r3, #21
 80025e4:	4013      	ands	r3, r2
 80025e6:	d10a      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e8:	4ba1      	ldr	r3, [pc, #644]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ec:	4ba0      	ldr	r3, [pc, #640]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025ee:	2180      	movs	r1, #128	; 0x80
 80025f0:	0549      	lsls	r1, r1, #21
 80025f2:	430a      	orrs	r2, r1
 80025f4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80025f6:	2317      	movs	r3, #23
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	2201      	movs	r2, #1
 80025fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	4b9d      	ldr	r3, [pc, #628]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4013      	ands	r3, r2
 8002608:	d11a      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260a:	4b9a      	ldr	r3, [pc, #616]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4b99      	ldr	r3, [pc, #612]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	0049      	lsls	r1, r1, #1
 8002614:	430a      	orrs	r2, r1
 8002616:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002618:	f7fd fe58 	bl	80002cc <HAL_GetTick>
 800261c:	0003      	movs	r3, r0
 800261e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	e008      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002622:	f7fd fe53 	bl	80002cc <HAL_GetTick>
 8002626:	0002      	movs	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b64      	cmp	r3, #100	; 0x64
 800262e:	d901      	bls.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e118      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	4b8f      	ldr	r3, [pc, #572]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4013      	ands	r3, r2
 800263e:	d0f0      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002640:	4b8b      	ldr	r3, [pc, #556]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	23c0      	movs	r3, #192	; 0xc0
 8002646:	039b      	lsls	r3, r3, #14
 8002648:	4013      	ands	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	23c0      	movs	r3, #192	; 0xc0
 8002652:	039b      	lsls	r3, r3, #14
 8002654:	4013      	ands	r3, r2
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	429a      	cmp	r2, r3
 800265a:	d107      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	23c0      	movs	r3, #192	; 0xc0
 8002662:	039b      	lsls	r3, r3, #14
 8002664:	4013      	ands	r3, r2
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	429a      	cmp	r2, r3
 800266a:	d013      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	23c0      	movs	r3, #192	; 0xc0
 8002672:	029b      	lsls	r3, r3, #10
 8002674:	401a      	ands	r2, r3
 8002676:	23c0      	movs	r3, #192	; 0xc0
 8002678:	029b      	lsls	r3, r3, #10
 800267a:	429a      	cmp	r2, r3
 800267c:	d10a      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800267e:	4b7c      	ldr	r3, [pc, #496]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	029b      	lsls	r3, r3, #10
 8002686:	401a      	ands	r2, r3
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	029b      	lsls	r3, r3, #10
 800268c:	429a      	cmp	r2, r3
 800268e:	d101      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0e8      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002694:	4b76      	ldr	r3, [pc, #472]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002698:	23c0      	movs	r3, #192	; 0xc0
 800269a:	029b      	lsls	r3, r3, #10
 800269c:	4013      	ands	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d049      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	23c0      	movs	r3, #192	; 0xc0
 80026ac:	029b      	lsls	r3, r3, #10
 80026ae:	4013      	ands	r3, r2
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d004      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2220      	movs	r2, #32
 80026bc:	4013      	ands	r3, r2
 80026be:	d10d      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	23c0      	movs	r3, #192	; 0xc0
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	4013      	ands	r3, r2
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d034      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	4013      	ands	r3, r2
 80026da:	d02e      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80026dc:	4b64      	ldr	r3, [pc, #400]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e0:	4a65      	ldr	r2, [pc, #404]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026e6:	4b62      	ldr	r3, [pc, #392]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026ea:	4b61      	ldr	r3, [pc, #388]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026ec:	2180      	movs	r1, #128	; 0x80
 80026ee:	0309      	lsls	r1, r1, #12
 80026f0:	430a      	orrs	r2, r1
 80026f2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026f4:	4b5e      	ldr	r3, [pc, #376]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026f8:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026fa:	4960      	ldr	r1, [pc, #384]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80026fc:	400a      	ands	r2, r1
 80026fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002700:	4b5b      	ldr	r3, [pc, #364]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4013      	ands	r3, r2
 800270e:	d014      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7fd fddc 	bl	80002cc <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002718:	e009      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271a:	f7fd fdd7 	bl	80002cc <HAL_GetTick>
 800271e:	0002      	movs	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	4a56      	ldr	r2, [pc, #344]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e09b      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800272e:	4b50      	ldr	r3, [pc, #320]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002730:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4013      	ands	r3, r2
 8002738:	d0ef      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	23c0      	movs	r3, #192	; 0xc0
 8002740:	029b      	lsls	r3, r3, #10
 8002742:	401a      	ands	r2, r3
 8002744:	23c0      	movs	r3, #192	; 0xc0
 8002746:	029b      	lsls	r3, r3, #10
 8002748:	429a      	cmp	r2, r3
 800274a:	d10c      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800274c:	4b48      	ldr	r3, [pc, #288]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a4c      	ldr	r2, [pc, #304]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002752:	4013      	ands	r3, r2
 8002754:	0019      	movs	r1, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	23c0      	movs	r3, #192	; 0xc0
 800275c:	039b      	lsls	r3, r3, #14
 800275e:	401a      	ands	r2, r3
 8002760:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	4b42      	ldr	r3, [pc, #264]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002768:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	23c0      	movs	r3, #192	; 0xc0
 8002770:	029b      	lsls	r3, r3, #10
 8002772:	401a      	ands	r2, r3
 8002774:	4b3e      	ldr	r3, [pc, #248]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002776:	430a      	orrs	r2, r1
 8002778:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800277a:	2317      	movs	r3, #23
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002784:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002788:	4b39      	ldr	r3, [pc, #228]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800278a:	493f      	ldr	r1, [pc, #252]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800278c:	400a      	ands	r2, r1
 800278e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2201      	movs	r2, #1
 8002796:	4013      	ands	r3, r2
 8002798:	d009      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800279a:	4b35      	ldr	r3, [pc, #212]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	2203      	movs	r2, #3
 80027a0:	4393      	bics	r3, r2
 80027a2:	0019      	movs	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	4b31      	ldr	r3, [pc, #196]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027aa:	430a      	orrs	r2, r1
 80027ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2202      	movs	r2, #2
 80027b4:	4013      	ands	r3, r2
 80027b6:	d009      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027b8:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027bc:	220c      	movs	r2, #12
 80027be:	4393      	bics	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027c8:	430a      	orrs	r2, r1
 80027ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2204      	movs	r2, #4
 80027d2:	4013      	ands	r3, r2
 80027d4:	d009      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027d6:	4b26      	ldr	r3, [pc, #152]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	4a2c      	ldr	r2, [pc, #176]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80027dc:	4013      	ands	r3, r2
 80027de:	0019      	movs	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	4b22      	ldr	r3, [pc, #136]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027e6:	430a      	orrs	r2, r1
 80027e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2208      	movs	r2, #8
 80027f0:	4013      	ands	r3, r2
 80027f2:	d009      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f4:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f8:	4a25      	ldr	r2, [pc, #148]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	0019      	movs	r1, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002804:	430a      	orrs	r2, r1
 8002806:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4013      	ands	r3, r2
 8002812:	d009      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002814:	4b16      	ldr	r3, [pc, #88]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002818:	4a17      	ldr	r2, [pc, #92]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800281a:	4013      	ands	r3, r2
 800281c:	0019      	movs	r1, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002824:	430a      	orrs	r2, r1
 8002826:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2240      	movs	r2, #64	; 0x40
 800282e:	4013      	ands	r3, r2
 8002830:	d009      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002836:	4a17      	ldr	r2, [pc, #92]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002838:	4013      	ands	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002842:	430a      	orrs	r2, r1
 8002844:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	4013      	ands	r3, r2
 800284e:	d009      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002854:	4a10      	ldr	r2, [pc, #64]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002856:	4013      	ands	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1a      	ldr	r2, [r3, #32]
 800285e:	4b04      	ldr	r3, [pc, #16]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002860:	430a      	orrs	r2, r1
 8002862:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b006      	add	sp, #24
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	40021000 	.word	0x40021000
 8002874:	40007000 	.word	0x40007000
 8002878:	fffcffff 	.word	0xfffcffff
 800287c:	fff7ffff 	.word	0xfff7ffff
 8002880:	00001388 	.word	0x00001388
 8002884:	ffcfffff 	.word	0xffcfffff
 8002888:	efffffff 	.word	0xefffffff
 800288c:	fffff3ff 	.word	0xfffff3ff
 8002890:	ffffcfff 	.word	0xffffcfff
 8002894:	fbffffff 	.word	0xfbffffff
 8002898:	fff3ffff 	.word	0xfff3ffff

0800289c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80028a4:	210e      	movs	r1, #14
 80028a6:	187b      	adds	r3, r7, r1
 80028a8:	4a08      	ldr	r2, [pc, #32]	; (80028cc <USB_EnableGlobalInt+0x30>)
 80028aa:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	5a9b      	ldrh	r3, [r3, r2]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	187b      	adds	r3, r7, r1
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	b299      	uxth	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2240      	movs	r2, #64	; 0x40
 80028c0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b004      	add	sp, #16
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	ffffbf80 	.word	0xffffbf80

080028d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80028d8:	210e      	movs	r1, #14
 80028da:	187b      	adds	r3, r7, r1
 80028dc:	4a0b      	ldr	r2, [pc, #44]	; (800290c <USB_DisableGlobalInt+0x3c>)
 80028de:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2240      	movs	r2, #64	; 0x40
 80028e4:	5a9b      	ldrh	r3, [r3, r2]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	b21b      	sxth	r3, r3
 80028ea:	187a      	adds	r2, r7, r1
 80028ec:	2100      	movs	r1, #0
 80028ee:	5e52      	ldrsh	r2, [r2, r1]
 80028f0:	43d2      	mvns	r2, r2
 80028f2:	b212      	sxth	r2, r2
 80028f4:	4013      	ands	r3, r2
 80028f6:	b21b      	sxth	r3, r3
 80028f8:	b299      	uxth	r1, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2240      	movs	r2, #64	; 0x40
 80028fe:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	0018      	movs	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	b004      	add	sp, #16
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	ffffbf80 	.word	0xffffbf80

08002910 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002910:	b084      	sub	sp, #16
 8002912:	b590      	push	{r4, r7, lr}
 8002914:	46c6      	mov	lr, r8
 8002916:	b500      	push	{lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	2004      	movs	r0, #4
 8002920:	2410      	movs	r4, #16
 8002922:	46a4      	mov	ip, r4
 8002924:	2408      	movs	r4, #8
 8002926:	46a0      	mov	r8, r4
 8002928:	44b8      	add	r8, r7
 800292a:	44c4      	add	ip, r8
 800292c:	4460      	add	r0, ip
 800292e:	6001      	str	r1, [r0, #0]
 8002930:	6042      	str	r2, [r0, #4]
 8002932:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2240      	movs	r2, #64	; 0x40
 8002938:	2101      	movs	r1, #1
 800293a:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2240      	movs	r2, #64	; 0x40
 8002940:	2100      	movs	r1, #0
 8002942:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2244      	movs	r2, #68	; 0x44
 8002948:	2100      	movs	r1, #0
 800294a:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2250      	movs	r2, #80	; 0x50
 8002950:	2100      	movs	r1, #0
 8002952:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	0018      	movs	r0, r3
 8002958:	f7ff ffa0 	bl	800289c <USB_EnableGlobalInt>

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	0018      	movs	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	b002      	add	sp, #8
 8002964:	bc04      	pop	{r2}
 8002966:	4690      	mov	r8, r2
 8002968:	bc90      	pop	{r4, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	b004      	add	sp, #16
 800296e:	4718      	bx	r3

08002970 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800297a:	2317      	movs	r3, #23
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	18d3      	adds	r3, r2, r3
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	b29a      	uxth	r2, r3
 8002990:	2314      	movs	r3, #20
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	49ae      	ldr	r1, [pc, #696]	; (8002c50 <USB_ActivateEndpoint+0x2e0>)
 8002996:	400a      	ands	r2, r1
 8002998:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	78db      	ldrb	r3, [r3, #3]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d020      	beq.n	80029e4 <USB_ActivateEndpoint+0x74>
 80029a2:	dc02      	bgt.n	80029aa <USB_ActivateEndpoint+0x3a>
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <USB_ActivateEndpoint+0x44>
 80029a8:	e025      	b.n	80029f6 <USB_ActivateEndpoint+0x86>
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d00b      	beq.n	80029c6 <USB_ActivateEndpoint+0x56>
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d00f      	beq.n	80029d2 <USB_ActivateEndpoint+0x62>
 80029b2:	e020      	b.n	80029f6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80029b4:	2214      	movs	r2, #20
 80029b6:	18bb      	adds	r3, r7, r2
 80029b8:	18ba      	adds	r2, r7, r2
 80029ba:	8812      	ldrh	r2, [r2, #0]
 80029bc:	2180      	movs	r1, #128	; 0x80
 80029be:	0089      	lsls	r1, r1, #2
 80029c0:	430a      	orrs	r2, r1
 80029c2:	801a      	strh	r2, [r3, #0]
      break;
 80029c4:	e01c      	b.n	8002a00 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80029c6:	2214      	movs	r2, #20
 80029c8:	18bb      	adds	r3, r7, r2
 80029ca:	18ba      	adds	r2, r7, r2
 80029cc:	8812      	ldrh	r2, [r2, #0]
 80029ce:	801a      	strh	r2, [r3, #0]
      break;
 80029d0:	e016      	b.n	8002a00 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80029d2:	2214      	movs	r2, #20
 80029d4:	18bb      	adds	r3, r7, r2
 80029d6:	18ba      	adds	r2, r7, r2
 80029d8:	8812      	ldrh	r2, [r2, #0]
 80029da:	21c0      	movs	r1, #192	; 0xc0
 80029dc:	00c9      	lsls	r1, r1, #3
 80029de:	430a      	orrs	r2, r1
 80029e0:	801a      	strh	r2, [r3, #0]
      break;
 80029e2:	e00d      	b.n	8002a00 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80029e4:	2214      	movs	r2, #20
 80029e6:	18bb      	adds	r3, r7, r2
 80029e8:	18ba      	adds	r2, r7, r2
 80029ea:	8812      	ldrh	r2, [r2, #0]
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	00c9      	lsls	r1, r1, #3
 80029f0:	430a      	orrs	r2, r1
 80029f2:	801a      	strh	r2, [r3, #0]
      break;
 80029f4:	e004      	b.n	8002a00 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80029f6:	2317      	movs	r3, #23
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
      break;
 80029fe:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	18d3      	adds	r3, r2, r3
 8002a0a:	2214      	movs	r2, #20
 8002a0c:	18ba      	adds	r2, r7, r2
 8002a0e:	8812      	ldrh	r2, [r2, #0]
 8002a10:	4990      	ldr	r1, [pc, #576]	; (8002c54 <USB_ActivateEndpoint+0x2e4>)
 8002a12:	430a      	orrs	r2, r1
 8002a14:	b292      	uxth	r2, r2
 8002a16:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	18d3      	adds	r3, r2, r3
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	b21b      	sxth	r3, r3
 8002a28:	4a8b      	ldr	r2, [pc, #556]	; (8002c58 <USB_ActivateEndpoint+0x2e8>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	b21a      	sxth	r2, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	4313      	orrs	r3, r2
 8002a36:	b21b      	sxth	r3, r3
 8002a38:	b29c      	uxth	r4, r3
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	18d3      	adds	r3, r2, r3
 8002a44:	4a83      	ldr	r2, [pc, #524]	; (8002c54 <USB_ActivateEndpoint+0x2e4>)
 8002a46:	4322      	orrs	r2, r4
 8002a48:	b292      	uxth	r2, r2
 8002a4a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	7b1b      	ldrb	r3, [r3, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d000      	beq.n	8002a56 <USB_ActivateEndpoint+0xe6>
 8002a54:	e112      	b.n	8002c7c <USB_ActivateEndpoint+0x30c>
  {
    if (ep->is_in != 0U)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	785b      	ldrb	r3, [r3, #1]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d062      	beq.n	8002b24 <USB_ActivateEndpoint+0x1b4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002a5e:	687c      	ldr	r4, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2250      	movs	r2, #80	; 0x50
 8002a64:	5a9b      	ldrh	r3, [r3, r2]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	18e4      	adds	r4, r4, r3
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	18e3      	adds	r3, r4, r3
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	00d2      	lsls	r2, r2, #3
 8002a76:	4694      	mov	ip, r2
 8002a78:	4463      	add	r3, ip
 8002a7a:	001c      	movs	r4, r3
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	88db      	ldrh	r3, [r3, #6]
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	18db      	adds	r3, r3, r3
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	18d3      	adds	r3, r2, r3
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b29c      	uxth	r4, r3
 8002a98:	0022      	movs	r2, r4
 8002a9a:	2340      	movs	r3, #64	; 0x40
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d012      	beq.n	8002ac6 <USB_ActivateEndpoint+0x156>
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	18d3      	adds	r3, r2, r3
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	4a6a      	ldr	r2, [pc, #424]	; (8002c58 <USB_ActivateEndpoint+0x2e8>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	b29c      	uxth	r4, r3
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	18d3      	adds	r3, r2, r3
 8002abe:	4a67      	ldr	r2, [pc, #412]	; (8002c5c <USB_ActivateEndpoint+0x2ec>)
 8002ac0:	4322      	orrs	r2, r4
 8002ac2:	b292      	uxth	r2, r2
 8002ac4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	78db      	ldrb	r3, [r3, #3]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d016      	beq.n	8002afc <USB_ActivateEndpoint+0x18c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	18d3      	adds	r3, r2, r3
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	4a60      	ldr	r2, [pc, #384]	; (8002c60 <USB_ActivateEndpoint+0x2f0>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	b29c      	uxth	r4, r3
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	4063      	eors	r3, r4
 8002ae6:	b29c      	uxth	r4, r3
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	18d3      	adds	r3, r2, r3
 8002af2:	4a58      	ldr	r2, [pc, #352]	; (8002c54 <USB_ActivateEndpoint+0x2e4>)
 8002af4:	4322      	orrs	r2, r4
 8002af6:	b292      	uxth	r2, r2
 8002af8:	801a      	strh	r2, [r3, #0]
 8002afa:	e212      	b.n	8002f22 <USB_ActivateEndpoint+0x5b2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	18d3      	adds	r3, r2, r3
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4a55      	ldr	r2, [pc, #340]	; (8002c60 <USB_ActivateEndpoint+0x2f0>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	b29c      	uxth	r4, r3
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	18d3      	adds	r3, r2, r3
 8002b1a:	4a4e      	ldr	r2, [pc, #312]	; (8002c54 <USB_ActivateEndpoint+0x2e4>)
 8002b1c:	4322      	orrs	r2, r4
 8002b1e:	b292      	uxth	r2, r2
 8002b20:	801a      	strh	r2, [r3, #0]
 8002b22:	e1fe      	b.n	8002f22 <USB_ActivateEndpoint+0x5b2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b24:	687c      	ldr	r4, [r7, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2250      	movs	r2, #80	; 0x50
 8002b2a:	5a9b      	ldrh	r3, [r3, r2]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	18e4      	adds	r4, r4, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	18e3      	adds	r3, r4, r3
 8002b38:	4a4a      	ldr	r2, [pc, #296]	; (8002c64 <USB_ActivateEndpoint+0x2f4>)
 8002b3a:	4694      	mov	ip, r2
 8002b3c:	4463      	add	r3, ip
 8002b3e:	001c      	movs	r4, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	88db      	ldrh	r3, [r3, #6]
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	18db      	adds	r3, r3, r3
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002b4e:	687c      	ldr	r4, [r7, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2250      	movs	r2, #80	; 0x50
 8002b54:	5a9b      	ldrh	r3, [r3, r2]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	18e4      	adds	r4, r4, r3
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	18e3      	adds	r3, r4, r3
 8002b62:	4a41      	ldr	r2, [pc, #260]	; (8002c68 <USB_ActivateEndpoint+0x2f8>)
 8002b64:	4694      	mov	ip, r2
 8002b66:	4463      	add	r3, ip
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10e      	bne.n	8002b90 <USB_ActivateEndpoint+0x220>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	4a3d      	ldr	r2, [pc, #244]	; (8002c6c <USB_ActivateEndpoint+0x2fc>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	801a      	strh	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	4a3a      	ldr	r2, [pc, #232]	; (8002c70 <USB_ActivateEndpoint+0x300>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	e023      	b.n	8002bd8 <USB_ActivateEndpoint+0x268>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2b3d      	cmp	r3, #61	; 0x3d
 8002b96:	d812      	bhi.n	8002bbe <USB_ActivateEndpoint+0x24e>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d002      	beq.n	8002bb0 <USB_ActivateEndpoint+0x240>
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	3301      	adds	r3, #1
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	029b      	lsls	r3, r3, #10
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	801a      	strh	r2, [r3, #0]
 8002bbc:	e00c      	b.n	8002bd8 <USB_ActivateEndpoint+0x268>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	029b      	lsls	r3, r3, #10
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	4a28      	ldr	r2, [pc, #160]	; (8002c70 <USB_ActivateEndpoint+0x300>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	18d3      	adds	r3, r2, r3
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	b29c      	uxth	r4, r3
 8002be6:	0022      	movs	r2, r4
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	01db      	lsls	r3, r3, #7
 8002bec:	4013      	ands	r3, r2
 8002bee:	d012      	beq.n	8002c16 <USB_ActivateEndpoint+0x2a6>
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	18d3      	adds	r3, r2, r3
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	4a16      	ldr	r2, [pc, #88]	; (8002c58 <USB_ActivateEndpoint+0x2e8>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	b29c      	uxth	r4, r3
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	18d3      	adds	r3, r2, r3
 8002c0e:	4a19      	ldr	r2, [pc, #100]	; (8002c74 <USB_ActivateEndpoint+0x304>)
 8002c10:	4322      	orrs	r2, r4
 8002c12:	b292      	uxth	r2, r2
 8002c14:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	18d3      	adds	r3, r2, r3
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <USB_ActivateEndpoint+0x308>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	b29c      	uxth	r4, r3
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	015b      	lsls	r3, r3, #5
 8002c2e:	4063      	eors	r3, r4
 8002c30:	b29c      	uxth	r4, r3
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	019b      	lsls	r3, r3, #6
 8002c36:	4063      	eors	r3, r4
 8002c38:	b29c      	uxth	r4, r3
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	18d3      	adds	r3, r2, r3
 8002c44:	4a03      	ldr	r2, [pc, #12]	; (8002c54 <USB_ActivateEndpoint+0x2e4>)
 8002c46:	4322      	orrs	r2, r4
 8002c48:	b292      	uxth	r2, r2
 8002c4a:	801a      	strh	r2, [r3, #0]
 8002c4c:	e169      	b.n	8002f22 <USB_ActivateEndpoint+0x5b2>
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	ffff898f 	.word	0xffff898f
 8002c54:	ffff8080 	.word	0xffff8080
 8002c58:	ffff8f8f 	.word	0xffff8f8f
 8002c5c:	ffff80c0 	.word	0xffff80c0
 8002c60:	ffff8fbf 	.word	0xffff8fbf
 8002c64:	00000404 	.word	0x00000404
 8002c68:	00000406 	.word	0x00000406
 8002c6c:	ffff83ff 	.word	0xffff83ff
 8002c70:	ffff8000 	.word	0xffff8000
 8002c74:	ffffc080 	.word	0xffffc080
 8002c78:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	18d3      	adds	r3, r2, r3
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	4aa9      	ldr	r2, [pc, #676]	; (8002f30 <USB_ActivateEndpoint+0x5c0>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	b29c      	uxth	r4, r3
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	18d3      	adds	r3, r2, r3
 8002c9a:	4aa6      	ldr	r2, [pc, #664]	; (8002f34 <USB_ActivateEndpoint+0x5c4>)
 8002c9c:	4322      	orrs	r2, r4
 8002c9e:	b292      	uxth	r2, r2
 8002ca0:	801a      	strh	r2, [r3, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002ca2:	687c      	ldr	r4, [r7, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2250      	movs	r2, #80	; 0x50
 8002ca8:	5a9b      	ldrh	r3, [r3, r2]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	18e4      	adds	r4, r4, r3
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	18e3      	adds	r3, r4, r3
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	00d2      	lsls	r2, r2, #3
 8002cba:	4694      	mov	ip, r2
 8002cbc:	4463      	add	r3, ip
 8002cbe:	001c      	movs	r4, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	891b      	ldrh	r3, [r3, #8]
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	18db      	adds	r3, r3, r3
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	8023      	strh	r3, [r4, #0]
 8002cce:	687c      	ldr	r4, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2250      	movs	r2, #80	; 0x50
 8002cd4:	5a9b      	ldrh	r3, [r3, r2]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	18e4      	adds	r4, r4, r3
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	18e3      	adds	r3, r4, r3
 8002ce2:	4a95      	ldr	r2, [pc, #596]	; (8002f38 <USB_ActivateEndpoint+0x5c8>)
 8002ce4:	4694      	mov	ip, r2
 8002ce6:	4463      	add	r3, ip
 8002ce8:	001c      	movs	r4, r3
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	895b      	ldrh	r3, [r3, #10]
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	18db      	adds	r3, r3, r3
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	785b      	ldrb	r3, [r3, #1]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d000      	beq.n	8002d02 <USB_ActivateEndpoint+0x392>
 8002d00:	e07e      	b.n	8002e00 <USB_ActivateEndpoint+0x490>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	18d3      	adds	r3, r2, r3
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	b29c      	uxth	r4, r3
 8002d10:	0022      	movs	r2, r4
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	01db      	lsls	r3, r3, #7
 8002d16:	4013      	ands	r3, r2
 8002d18:	d012      	beq.n	8002d40 <USB_ActivateEndpoint+0x3d0>
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	18d3      	adds	r3, r2, r3
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	4a81      	ldr	r2, [pc, #516]	; (8002f30 <USB_ActivateEndpoint+0x5c0>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	b29c      	uxth	r4, r3
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	18d3      	adds	r3, r2, r3
 8002d38:	4a80      	ldr	r2, [pc, #512]	; (8002f3c <USB_ActivateEndpoint+0x5cc>)
 8002d3a:	4322      	orrs	r2, r4
 8002d3c:	b292      	uxth	r2, r2
 8002d3e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	18d3      	adds	r3, r2, r3
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29c      	uxth	r4, r3
 8002d4e:	0022      	movs	r2, r4
 8002d50:	2340      	movs	r3, #64	; 0x40
 8002d52:	4013      	ands	r3, r2
 8002d54:	d012      	beq.n	8002d7c <USB_ActivateEndpoint+0x40c>
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	18d3      	adds	r3, r2, r3
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	4a72      	ldr	r2, [pc, #456]	; (8002f30 <USB_ActivateEndpoint+0x5c0>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	b29c      	uxth	r4, r3
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	18d3      	adds	r3, r2, r3
 8002d74:	4a72      	ldr	r2, [pc, #456]	; (8002f40 <USB_ActivateEndpoint+0x5d0>)
 8002d76:	4322      	orrs	r2, r4
 8002d78:	b292      	uxth	r2, r2
 8002d7a:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	18d3      	adds	r3, r2, r3
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	4a69      	ldr	r2, [pc, #420]	; (8002f30 <USB_ActivateEndpoint+0x5c0>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	b29c      	uxth	r4, r3
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	18d3      	adds	r3, r2, r3
 8002d9a:	4a69      	ldr	r2, [pc, #420]	; (8002f40 <USB_ActivateEndpoint+0x5d0>)
 8002d9c:	4322      	orrs	r2, r4
 8002d9e:	b292      	uxth	r2, r2
 8002da0:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	18d3      	adds	r3, r2, r3
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4a64      	ldr	r2, [pc, #400]	; (8002f44 <USB_ActivateEndpoint+0x5d4>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	b29c      	uxth	r4, r3
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	015b      	lsls	r3, r3, #5
 8002dba:	4063      	eors	r3, r4
 8002dbc:	b29c      	uxth	r4, r3
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	019b      	lsls	r3, r3, #6
 8002dc2:	4063      	eors	r3, r4
 8002dc4:	b29c      	uxth	r4, r3
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	18d3      	adds	r3, r2, r3
 8002dd0:	4a5d      	ldr	r2, [pc, #372]	; (8002f48 <USB_ActivateEndpoint+0x5d8>)
 8002dd2:	4322      	orrs	r2, r4
 8002dd4:	b292      	uxth	r2, r2
 8002dd6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	18d3      	adds	r3, r2, r3
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	4a59      	ldr	r2, [pc, #356]	; (8002f4c <USB_ActivateEndpoint+0x5dc>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	b29c      	uxth	r4, r3
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	18d3      	adds	r3, r2, r3
 8002df6:	4a54      	ldr	r2, [pc, #336]	; (8002f48 <USB_ActivateEndpoint+0x5d8>)
 8002df8:	4322      	orrs	r2, r4
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	801a      	strh	r2, [r3, #0]
 8002dfe:	e090      	b.n	8002f22 <USB_ActivateEndpoint+0x5b2>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	18d3      	adds	r3, r2, r3
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	b29c      	uxth	r4, r3
 8002e0e:	0022      	movs	r2, r4
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	01db      	lsls	r3, r3, #7
 8002e14:	4013      	ands	r3, r2
 8002e16:	d012      	beq.n	8002e3e <USB_ActivateEndpoint+0x4ce>
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	18d3      	adds	r3, r2, r3
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	4a42      	ldr	r2, [pc, #264]	; (8002f30 <USB_ActivateEndpoint+0x5c0>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	b29c      	uxth	r4, r3
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	18d3      	adds	r3, r2, r3
 8002e36:	4a41      	ldr	r2, [pc, #260]	; (8002f3c <USB_ActivateEndpoint+0x5cc>)
 8002e38:	4322      	orrs	r2, r4
 8002e3a:	b292      	uxth	r2, r2
 8002e3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	18d3      	adds	r3, r2, r3
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	b29c      	uxth	r4, r3
 8002e4c:	0022      	movs	r2, r4
 8002e4e:	2340      	movs	r3, #64	; 0x40
 8002e50:	4013      	ands	r3, r2
 8002e52:	d012      	beq.n	8002e7a <USB_ActivateEndpoint+0x50a>
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	18d3      	adds	r3, r2, r3
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	4a33      	ldr	r2, [pc, #204]	; (8002f30 <USB_ActivateEndpoint+0x5c0>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	b29c      	uxth	r4, r3
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	18d3      	adds	r3, r2, r3
 8002e72:	4a33      	ldr	r2, [pc, #204]	; (8002f40 <USB_ActivateEndpoint+0x5d0>)
 8002e74:	4322      	orrs	r2, r4
 8002e76:	b292      	uxth	r2, r2
 8002e78:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	18d3      	adds	r3, r2, r3
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	4a29      	ldr	r2, [pc, #164]	; (8002f30 <USB_ActivateEndpoint+0x5c0>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	b29c      	uxth	r4, r3
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	18d3      	adds	r3, r2, r3
 8002e98:	4a28      	ldr	r2, [pc, #160]	; (8002f3c <USB_ActivateEndpoint+0x5cc>)
 8002e9a:	4322      	orrs	r2, r4
 8002e9c:	b292      	uxth	r2, r2
 8002e9e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	78db      	ldrb	r3, [r3, #3]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d016      	beq.n	8002ed6 <USB_ActivateEndpoint+0x566>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	18d3      	adds	r3, r2, r3
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	4a25      	ldr	r2, [pc, #148]	; (8002f4c <USB_ActivateEndpoint+0x5dc>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	b29c      	uxth	r4, r3
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	4063      	eors	r3, r4
 8002ec0:	b29c      	uxth	r4, r3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	18d3      	adds	r3, r2, r3
 8002ecc:	4a1e      	ldr	r2, [pc, #120]	; (8002f48 <USB_ActivateEndpoint+0x5d8>)
 8002ece:	4322      	orrs	r2, r4
 8002ed0:	b292      	uxth	r2, r2
 8002ed2:	801a      	strh	r2, [r3, #0]
 8002ed4:	e012      	b.n	8002efc <USB_ActivateEndpoint+0x58c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	18d3      	adds	r3, r2, r3
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	4a19      	ldr	r2, [pc, #100]	; (8002f4c <USB_ActivateEndpoint+0x5dc>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	b29c      	uxth	r4, r3
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	18d3      	adds	r3, r2, r3
 8002ef4:	4a14      	ldr	r2, [pc, #80]	; (8002f48 <USB_ActivateEndpoint+0x5d8>)
 8002ef6:	4322      	orrs	r2, r4
 8002ef8:	b292      	uxth	r2, r2
 8002efa:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	18d3      	adds	r3, r2, r3
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <USB_ActivateEndpoint+0x5d4>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	b29c      	uxth	r4, r3
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	18d3      	adds	r3, r2, r3
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <USB_ActivateEndpoint+0x5d8>)
 8002f1c:	4322      	orrs	r2, r4
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8002f22:	2317      	movs	r3, #23
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	781b      	ldrb	r3, [r3, #0]
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b007      	add	sp, #28
 8002f2e:	bd90      	pop	{r4, r7, pc}
 8002f30:	ffff8f8f 	.word	0xffff8f8f
 8002f34:	ffff8180 	.word	0xffff8180
 8002f38:	00000404 	.word	0x00000404
 8002f3c:	ffffc080 	.word	0xffffc080
 8002f40:	ffff80c0 	.word	0xffff80c0
 8002f44:	ffffbf8f 	.word	0xffffbf8f
 8002f48:	ffff8080 	.word	0xffff8080
 8002f4c:	ffff8fbf 	.word	0xffff8fbf

08002f50 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	7b1b      	ldrb	r3, [r3, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d168      	bne.n	8003034 <USB_DeactivateEndpoint+0xe4>
  {
    if (ep->is_in != 0U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	785b      	ldrb	r3, [r3, #1]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d031      	beq.n	8002fce <USB_DeactivateEndpoint+0x7e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	18d3      	adds	r3, r2, r3
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b29c      	uxth	r4, r3
 8002f78:	0022      	movs	r2, r4
 8002f7a:	2340      	movs	r3, #64	; 0x40
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d012      	beq.n	8002fa6 <USB_DeactivateEndpoint+0x56>
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	18d3      	adds	r3, r2, r3
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	4aa5      	ldr	r2, [pc, #660]	; (8003224 <USB_DeactivateEndpoint+0x2d4>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29c      	uxth	r4, r3
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	18d3      	adds	r3, r2, r3
 8002f9e:	4aa2      	ldr	r2, [pc, #648]	; (8003228 <USB_DeactivateEndpoint+0x2d8>)
 8002fa0:	4322      	orrs	r2, r4
 8002fa2:	b292      	uxth	r2, r2
 8002fa4:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	18d3      	adds	r3, r2, r3
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	4a9d      	ldr	r2, [pc, #628]	; (800322c <USB_DeactivateEndpoint+0x2dc>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	b29c      	uxth	r4, r3
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	18d3      	adds	r3, r2, r3
 8002fc4:	4a9a      	ldr	r2, [pc, #616]	; (8003230 <USB_DeactivateEndpoint+0x2e0>)
 8002fc6:	4322      	orrs	r2, r4
 8002fc8:	b292      	uxth	r2, r2
 8002fca:	801a      	strh	r2, [r3, #0]
 8002fcc:	e124      	b.n	8003218 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	18d3      	adds	r3, r2, r3
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	b29c      	uxth	r4, r3
 8002fdc:	0022      	movs	r2, r4
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	01db      	lsls	r3, r3, #7
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d012      	beq.n	800300c <USB_DeactivateEndpoint+0xbc>
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	18d3      	adds	r3, r2, r3
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	4a8b      	ldr	r2, [pc, #556]	; (8003224 <USB_DeactivateEndpoint+0x2d4>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	b29c      	uxth	r4, r3
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	18d3      	adds	r3, r2, r3
 8003004:	4a8b      	ldr	r2, [pc, #556]	; (8003234 <USB_DeactivateEndpoint+0x2e4>)
 8003006:	4322      	orrs	r2, r4
 8003008:	b292      	uxth	r2, r2
 800300a:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	18d3      	adds	r3, r2, r3
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	4a87      	ldr	r2, [pc, #540]	; (8003238 <USB_DeactivateEndpoint+0x2e8>)
 800301c:	4013      	ands	r3, r2
 800301e:	b29c      	uxth	r4, r3
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	18d3      	adds	r3, r2, r3
 800302a:	4a81      	ldr	r2, [pc, #516]	; (8003230 <USB_DeactivateEndpoint+0x2e0>)
 800302c:	4322      	orrs	r2, r4
 800302e:	b292      	uxth	r2, r2
 8003030:	801a      	strh	r2, [r3, #0]
 8003032:	e0f1      	b.n	8003218 <USB_DeactivateEndpoint+0x2c8>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	785b      	ldrb	r3, [r3, #1]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d000      	beq.n	800303e <USB_DeactivateEndpoint+0xee>
 800303c:	e076      	b.n	800312c <USB_DeactivateEndpoint+0x1dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	18d3      	adds	r3, r2, r3
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	b29c      	uxth	r4, r3
 800304c:	0022      	movs	r2, r4
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	01db      	lsls	r3, r3, #7
 8003052:	4013      	ands	r3, r2
 8003054:	d012      	beq.n	800307c <USB_DeactivateEndpoint+0x12c>
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	18d3      	adds	r3, r2, r3
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	4a6f      	ldr	r2, [pc, #444]	; (8003224 <USB_DeactivateEndpoint+0x2d4>)
 8003066:	4013      	ands	r3, r2
 8003068:	b29c      	uxth	r4, r3
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	18d3      	adds	r3, r2, r3
 8003074:	4a6f      	ldr	r2, [pc, #444]	; (8003234 <USB_DeactivateEndpoint+0x2e4>)
 8003076:	4322      	orrs	r2, r4
 8003078:	b292      	uxth	r2, r2
 800307a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	18d3      	adds	r3, r2, r3
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b29c      	uxth	r4, r3
 800308a:	0022      	movs	r2, r4
 800308c:	2340      	movs	r3, #64	; 0x40
 800308e:	4013      	ands	r3, r2
 8003090:	d012      	beq.n	80030b8 <USB_DeactivateEndpoint+0x168>
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	18d3      	adds	r3, r2, r3
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	4a60      	ldr	r2, [pc, #384]	; (8003224 <USB_DeactivateEndpoint+0x2d4>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	b29c      	uxth	r4, r3
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	18d3      	adds	r3, r2, r3
 80030b0:	4a5d      	ldr	r2, [pc, #372]	; (8003228 <USB_DeactivateEndpoint+0x2d8>)
 80030b2:	4322      	orrs	r2, r4
 80030b4:	b292      	uxth	r2, r2
 80030b6:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	18d3      	adds	r3, r2, r3
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4a57      	ldr	r2, [pc, #348]	; (8003224 <USB_DeactivateEndpoint+0x2d4>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	b29c      	uxth	r4, r3
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	18d3      	adds	r3, r2, r3
 80030d6:	4a54      	ldr	r2, [pc, #336]	; (8003228 <USB_DeactivateEndpoint+0x2d8>)
 80030d8:	4322      	orrs	r2, r4
 80030da:	b292      	uxth	r2, r2
 80030dc:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	18d3      	adds	r3, r2, r3
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	4a52      	ldr	r2, [pc, #328]	; (8003238 <USB_DeactivateEndpoint+0x2e8>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	b29c      	uxth	r4, r3
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	18d3      	adds	r3, r2, r3
 80030fc:	4a4c      	ldr	r2, [pc, #304]	; (8003230 <USB_DeactivateEndpoint+0x2e0>)
 80030fe:	4322      	orrs	r2, r4
 8003100:	b292      	uxth	r2, r2
 8003102:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	18d3      	adds	r3, r2, r3
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	4a46      	ldr	r2, [pc, #280]	; (800322c <USB_DeactivateEndpoint+0x2dc>)
 8003114:	4013      	ands	r3, r2
 8003116:	b29c      	uxth	r4, r3
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	18d3      	adds	r3, r2, r3
 8003122:	4a43      	ldr	r2, [pc, #268]	; (8003230 <USB_DeactivateEndpoint+0x2e0>)
 8003124:	4322      	orrs	r2, r4
 8003126:	b292      	uxth	r2, r2
 8003128:	801a      	strh	r2, [r3, #0]
 800312a:	e075      	b.n	8003218 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	18d3      	adds	r3, r2, r3
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	b29c      	uxth	r4, r3
 800313a:	0022      	movs	r2, r4
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	01db      	lsls	r3, r3, #7
 8003140:	4013      	ands	r3, r2
 8003142:	d012      	beq.n	800316a <USB_DeactivateEndpoint+0x21a>
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	18d3      	adds	r3, r2, r3
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	b29b      	uxth	r3, r3
 8003152:	4a34      	ldr	r2, [pc, #208]	; (8003224 <USB_DeactivateEndpoint+0x2d4>)
 8003154:	4013      	ands	r3, r2
 8003156:	b29c      	uxth	r4, r3
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	18d3      	adds	r3, r2, r3
 8003162:	4a34      	ldr	r2, [pc, #208]	; (8003234 <USB_DeactivateEndpoint+0x2e4>)
 8003164:	4322      	orrs	r2, r4
 8003166:	b292      	uxth	r2, r2
 8003168:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	18d3      	adds	r3, r2, r3
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29c      	uxth	r4, r3
 8003178:	0022      	movs	r2, r4
 800317a:	2340      	movs	r3, #64	; 0x40
 800317c:	4013      	ands	r3, r2
 800317e:	d012      	beq.n	80031a6 <USB_DeactivateEndpoint+0x256>
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	18d3      	adds	r3, r2, r3
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	4a25      	ldr	r2, [pc, #148]	; (8003224 <USB_DeactivateEndpoint+0x2d4>)
 8003190:	4013      	ands	r3, r2
 8003192:	b29c      	uxth	r4, r3
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	18d3      	adds	r3, r2, r3
 800319e:	4a22      	ldr	r2, [pc, #136]	; (8003228 <USB_DeactivateEndpoint+0x2d8>)
 80031a0:	4322      	orrs	r2, r4
 80031a2:	b292      	uxth	r2, r2
 80031a4:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	18d3      	adds	r3, r2, r3
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	4a1b      	ldr	r2, [pc, #108]	; (8003224 <USB_DeactivateEndpoint+0x2d4>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	b29c      	uxth	r4, r3
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	18d3      	adds	r3, r2, r3
 80031c4:	4a1b      	ldr	r2, [pc, #108]	; (8003234 <USB_DeactivateEndpoint+0x2e4>)
 80031c6:	4322      	orrs	r2, r4
 80031c8:	b292      	uxth	r2, r2
 80031ca:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	18d3      	adds	r3, r2, r3
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	4a14      	ldr	r2, [pc, #80]	; (800322c <USB_DeactivateEndpoint+0x2dc>)
 80031dc:	4013      	ands	r3, r2
 80031de:	b29c      	uxth	r4, r3
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	18d3      	adds	r3, r2, r3
 80031ea:	4a11      	ldr	r2, [pc, #68]	; (8003230 <USB_DeactivateEndpoint+0x2e0>)
 80031ec:	4322      	orrs	r2, r4
 80031ee:	b292      	uxth	r2, r2
 80031f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	18d3      	adds	r3, r2, r3
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <USB_DeactivateEndpoint+0x2e8>)
 8003202:	4013      	ands	r3, r2
 8003204:	b29c      	uxth	r4, r3
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	18d3      	adds	r3, r2, r3
 8003210:	4a07      	ldr	r2, [pc, #28]	; (8003230 <USB_DeactivateEndpoint+0x2e0>)
 8003212:	4322      	orrs	r2, r4
 8003214:	b292      	uxth	r2, r2
 8003216:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b003      	add	sp, #12
 8003220:	bd90      	pop	{r4, r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	ffff8f8f 	.word	0xffff8f8f
 8003228:	ffff80c0 	.word	0xffff80c0
 800322c:	ffff8fbf 	.word	0xffff8fbf
 8003230:	ffff8080 	.word	0xffff8080
 8003234:	ffffc080 	.word	0xffffc080
 8003238:	ffffbf8f 	.word	0xffffbf8f

0800323c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b095      	sub	sp, #84	; 0x54
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	785b      	ldrb	r3, [r3, #1]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d000      	beq.n	8003250 <USB_EPStartXfer+0x14>
 800324e:	e155      	b.n	80034fc <USB_EPStartXfer+0x2c0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	699a      	ldr	r2, [r3, #24]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	429a      	cmp	r2, r3
 800325a:	d909      	bls.n	8003270 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003268:	1ad2      	subs	r2, r2, r3
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	619a      	str	r2, [r3, #24]
 800326e:	e005      	b.n	800327c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2200      	movs	r2, #0
 800327a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	7b1b      	ldrb	r3, [r3, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d11b      	bne.n	80032bc <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6959      	ldr	r1, [r3, #20]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	88da      	ldrh	r2, [r3, #6]
 800328c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800328e:	b29b      	uxth	r3, r3
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fb93 	bl	80039bc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003296:	687c      	ldr	r4, [r7, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2250      	movs	r2, #80	; 0x50
 800329c:	5a9b      	ldrh	r3, [r3, r2]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	18e4      	adds	r4, r4, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	18e3      	adds	r3, r4, r3
 80032aa:	4ad4      	ldr	r2, [pc, #848]	; (80035fc <USB_EPStartXfer+0x3c0>)
 80032ac:	4694      	mov	ip, r2
 80032ae:	4463      	add	r3, ip
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	801a      	strh	r2, [r3, #0]
 80032ba:	e105      	b.n	80034c8 <USB_EPStartXfer+0x28c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	18d3      	adds	r3, r2, r3
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	001a      	movs	r2, r3
 80032cc:	2340      	movs	r3, #64	; 0x40
 80032ce:	4013      	ands	r3, r2
 80032d0:	d060      	beq.n	8003394 <USB_EPStartXfer+0x158>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80032d2:	687c      	ldr	r4, [r7, #4]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	785b      	ldrb	r3, [r3, #1]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d140      	bne.n	800335e <USB_EPStartXfer+0x122>
 80032dc:	687c      	ldr	r4, [r7, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2250      	movs	r2, #80	; 0x50
 80032e2:	5a9b      	ldrh	r3, [r3, r2]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	18e4      	adds	r4, r4, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	18e3      	adds	r3, r4, r3
 80032f0:	4ac3      	ldr	r2, [pc, #780]	; (8003600 <USB_EPStartXfer+0x3c4>)
 80032f2:	4694      	mov	ip, r2
 80032f4:	4463      	add	r3, ip
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10e      	bne.n	800331c <USB_EPStartXfer+0xe0>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	4ac0      	ldr	r2, [pc, #768]	; (8003604 <USB_EPStartXfer+0x3c8>)
 8003304:	4013      	ands	r3, r2
 8003306:	b29a      	uxth	r2, r3
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	801a      	strh	r2, [r3, #0]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	4abd      	ldr	r2, [pc, #756]	; (8003608 <USB_EPStartXfer+0x3cc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	b29a      	uxth	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	801a      	strh	r2, [r3, #0]
 800331a:	e035      	b.n	8003388 <USB_EPStartXfer+0x14c>
 800331c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800331e:	2b3d      	cmp	r3, #61	; 0x3d
 8003320:	d810      	bhi.n	8003344 <USB_EPStartXfer+0x108>
 8003322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003324:	085b      	lsrs	r3, r3, #1
 8003326:	647b      	str	r3, [r7, #68]	; 0x44
 8003328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800332a:	2201      	movs	r2, #1
 800332c:	4013      	ands	r3, r2
 800332e:	d002      	beq.n	8003336 <USB_EPStartXfer+0xfa>
 8003330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003332:	3301      	adds	r3, #1
 8003334:	647b      	str	r3, [r7, #68]	; 0x44
 8003336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003338:	b29b      	uxth	r3, r3
 800333a:	029b      	lsls	r3, r3, #10
 800333c:	b29a      	uxth	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	801a      	strh	r2, [r3, #0]
 8003342:	e021      	b.n	8003388 <USB_EPStartXfer+0x14c>
 8003344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	647b      	str	r3, [r7, #68]	; 0x44
 800334a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800334c:	b29b      	uxth	r3, r3
 800334e:	029b      	lsls	r3, r3, #10
 8003350:	b29b      	uxth	r3, r3
 8003352:	4aad      	ldr	r2, [pc, #692]	; (8003608 <USB_EPStartXfer+0x3cc>)
 8003354:	4313      	orrs	r3, r2
 8003356:	b29a      	uxth	r2, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	801a      	strh	r2, [r3, #0]
 800335c:	e014      	b.n	8003388 <USB_EPStartXfer+0x14c>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	785b      	ldrb	r3, [r3, #1]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d110      	bne.n	8003388 <USB_EPStartXfer+0x14c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2250      	movs	r2, #80	; 0x50
 800336a:	5a9b      	ldrh	r3, [r3, r2]
 800336c:	b29b      	uxth	r3, r3
 800336e:	18e4      	adds	r4, r4, r3
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	18e3      	adds	r3, r4, r3
 8003378:	4aa1      	ldr	r2, [pc, #644]	; (8003600 <USB_EPStartXfer+0x3c4>)
 800337a:	4694      	mov	ip, r2
 800337c:	4463      	add	r3, ip
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003382:	b29a      	uxth	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003388:	234e      	movs	r3, #78	; 0x4e
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	8952      	ldrh	r2, [r2, #10]
 8003390:	801a      	strh	r2, [r3, #0]
 8003392:	e05f      	b.n	8003454 <USB_EPStartXfer+0x218>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	785b      	ldrb	r3, [r3, #1]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d140      	bne.n	800341e <USB_EPStartXfer+0x1e2>
 800339c:	687c      	ldr	r4, [r7, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2250      	movs	r2, #80	; 0x50
 80033a2:	5a9b      	ldrh	r3, [r3, r2]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	18e4      	adds	r4, r4, r3
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	18e3      	adds	r3, r4, r3
 80033b0:	4a92      	ldr	r2, [pc, #584]	; (80035fc <USB_EPStartXfer+0x3c0>)
 80033b2:	4694      	mov	ip, r2
 80033b4:	4463      	add	r3, ip
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10e      	bne.n	80033dc <USB_EPStartXfer+0x1a0>
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	4a90      	ldr	r2, [pc, #576]	; (8003604 <USB_EPStartXfer+0x3c8>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	801a      	strh	r2, [r3, #0]
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	4a8d      	ldr	r2, [pc, #564]	; (8003608 <USB_EPStartXfer+0x3cc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	801a      	strh	r2, [r3, #0]
 80033da:	e036      	b.n	800344a <USB_EPStartXfer+0x20e>
 80033dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033de:	2b3d      	cmp	r3, #61	; 0x3d
 80033e0:	d810      	bhi.n	8003404 <USB_EPStartXfer+0x1c8>
 80033e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	643b      	str	r3, [r7, #64]	; 0x40
 80033e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ea:	2201      	movs	r2, #1
 80033ec:	4013      	ands	r3, r2
 80033ee:	d002      	beq.n	80033f6 <USB_EPStartXfer+0x1ba>
 80033f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f2:	3301      	adds	r3, #1
 80033f4:	643b      	str	r3, [r7, #64]	; 0x40
 80033f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	029b      	lsls	r3, r3, #10
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	801a      	strh	r2, [r3, #0]
 8003402:	e022      	b.n	800344a <USB_EPStartXfer+0x20e>
 8003404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	643b      	str	r3, [r7, #64]	; 0x40
 800340a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800340c:	b29b      	uxth	r3, r3
 800340e:	029b      	lsls	r3, r3, #10
 8003410:	b29b      	uxth	r3, r3
 8003412:	4a7d      	ldr	r2, [pc, #500]	; (8003608 <USB_EPStartXfer+0x3cc>)
 8003414:	4313      	orrs	r3, r2
 8003416:	b29a      	uxth	r2, r3
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	801a      	strh	r2, [r3, #0]
 800341c:	e015      	b.n	800344a <USB_EPStartXfer+0x20e>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	785b      	ldrb	r3, [r3, #1]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d111      	bne.n	800344a <USB_EPStartXfer+0x20e>
 8003426:	687c      	ldr	r4, [r7, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2250      	movs	r2, #80	; 0x50
 800342c:	5a9b      	ldrh	r3, [r3, r2]
 800342e:	b29b      	uxth	r3, r3
 8003430:	18e4      	adds	r4, r4, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	18e3      	adds	r3, r4, r3
 800343a:	4a70      	ldr	r2, [pc, #448]	; (80035fc <USB_EPStartXfer+0x3c0>)
 800343c:	4694      	mov	ip, r2
 800343e:	4463      	add	r3, ip
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003444:	b29a      	uxth	r2, r3
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800344a:	234e      	movs	r3, #78	; 0x4e
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	8912      	ldrh	r2, [r2, #8]
 8003452:	801a      	strh	r2, [r3, #0]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6959      	ldr	r1, [r3, #20]
 8003458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345a:	b29c      	uxth	r4, r3
 800345c:	234e      	movs	r3, #78	; 0x4e
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	881a      	ldrh	r2, [r3, #0]
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	0023      	movs	r3, r4
 8003466:	f000 faa9 	bl	80039bc <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	785b      	ldrb	r3, [r3, #1]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d113      	bne.n	800349a <USB_EPStartXfer+0x25e>
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	18d3      	adds	r3, r2, r3
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	b29b      	uxth	r3, r3
 8003480:	4a62      	ldr	r2, [pc, #392]	; (800360c <USB_EPStartXfer+0x3d0>)
 8003482:	4013      	ands	r3, r2
 8003484:	b29c      	uxth	r4, r3
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	18d3      	adds	r3, r2, r3
 8003490:	4a5f      	ldr	r2, [pc, #380]	; (8003610 <USB_EPStartXfer+0x3d4>)
 8003492:	4322      	orrs	r2, r4
 8003494:	b292      	uxth	r2, r2
 8003496:	801a      	strh	r2, [r3, #0]
 8003498:	e016      	b.n	80034c8 <USB_EPStartXfer+0x28c>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	785b      	ldrb	r3, [r3, #1]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d112      	bne.n	80034c8 <USB_EPStartXfer+0x28c>
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	18d3      	adds	r3, r2, r3
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	4a56      	ldr	r2, [pc, #344]	; (800360c <USB_EPStartXfer+0x3d0>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	b29c      	uxth	r4, r3
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	18d3      	adds	r3, r2, r3
 80034c0:	4a54      	ldr	r2, [pc, #336]	; (8003614 <USB_EPStartXfer+0x3d8>)
 80034c2:	4322      	orrs	r2, r4
 80034c4:	b292      	uxth	r2, r2
 80034c6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	18d3      	adds	r3, r2, r3
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	4a50      	ldr	r2, [pc, #320]	; (8003618 <USB_EPStartXfer+0x3dc>)
 80034d8:	4013      	ands	r3, r2
 80034da:	b29c      	uxth	r4, r3
 80034dc:	2310      	movs	r3, #16
 80034de:	4063      	eors	r3, r4
 80034e0:	b29c      	uxth	r4, r3
 80034e2:	2320      	movs	r3, #32
 80034e4:	4063      	eors	r3, r4
 80034e6:	b29c      	uxth	r4, r3
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	18d3      	adds	r3, r2, r3
 80034f2:	4a4a      	ldr	r2, [pc, #296]	; (800361c <USB_EPStartXfer+0x3e0>)
 80034f4:	4322      	orrs	r2, r4
 80034f6:	b292      	uxth	r2, r2
 80034f8:	801a      	strh	r2, [r3, #0]
 80034fa:	e13e      	b.n	800377a <USB_EPStartXfer+0x53e>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	699a      	ldr	r2, [r3, #24]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	429a      	cmp	r2, r3
 8003506:	d909      	bls.n	800351c <USB_EPStartXfer+0x2e0>
    {
      len = ep->maxpacket;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003514:	1ad2      	subs	r2, r2, r3
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	619a      	str	r2, [r3, #24]
 800351a:	e005      	b.n	8003528 <USB_EPStartXfer+0x2ec>
    }
    else
    {
      len = ep->xfer_len;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2200      	movs	r2, #0
 8003526:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	7b1b      	ldrb	r3, [r3, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d140      	bne.n	80035b2 <USB_EPStartXfer+0x376>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003530:	687c      	ldr	r4, [r7, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2250      	movs	r2, #80	; 0x50
 8003536:	5a9b      	ldrh	r3, [r3, r2]
 8003538:	b29b      	uxth	r3, r3
 800353a:	18e4      	adds	r4, r4, r3
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	18e3      	adds	r3, r4, r3
 8003544:	4a2e      	ldr	r2, [pc, #184]	; (8003600 <USB_EPStartXfer+0x3c4>)
 8003546:	4694      	mov	ip, r2
 8003548:	4463      	add	r3, ip
 800354a:	623b      	str	r3, [r7, #32]
 800354c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10e      	bne.n	8003570 <USB_EPStartXfer+0x334>
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	4a2b      	ldr	r2, [pc, #172]	; (8003604 <USB_EPStartXfer+0x3c8>)
 8003558:	4013      	ands	r3, r2
 800355a:	b29a      	uxth	r2, r3
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	801a      	strh	r2, [r3, #0]
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	4a28      	ldr	r2, [pc, #160]	; (8003608 <USB_EPStartXfer+0x3cc>)
 8003566:	4313      	orrs	r3, r2
 8003568:	b29a      	uxth	r2, r3
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	801a      	strh	r2, [r3, #0]
 800356e:	e0e9      	b.n	8003744 <USB_EPStartXfer+0x508>
 8003570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003572:	2b3d      	cmp	r3, #61	; 0x3d
 8003574:	d810      	bhi.n	8003598 <USB_EPStartXfer+0x35c>
 8003576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003578:	085b      	lsrs	r3, r3, #1
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800357c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800357e:	2201      	movs	r2, #1
 8003580:	4013      	ands	r3, r2
 8003582:	d002      	beq.n	800358a <USB_EPStartXfer+0x34e>
 8003584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003586:	3301      	adds	r3, #1
 8003588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800358a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358c:	b29b      	uxth	r3, r3
 800358e:	029b      	lsls	r3, r3, #10
 8003590:	b29a      	uxth	r2, r3
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	801a      	strh	r2, [r3, #0]
 8003596:	e0d5      	b.n	8003744 <USB_EPStartXfer+0x508>
 8003598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800359e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	029b      	lsls	r3, r3, #10
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	4a18      	ldr	r2, [pc, #96]	; (8003608 <USB_EPStartXfer+0x3cc>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	801a      	strh	r2, [r3, #0]
 80035b0:	e0c8      	b.n	8003744 <USB_EPStartXfer+0x508>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	785b      	ldrb	r3, [r3, #1]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d153      	bne.n	8003662 <USB_EPStartXfer+0x426>
 80035ba:	687c      	ldr	r4, [r7, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2250      	movs	r2, #80	; 0x50
 80035c0:	5a9b      	ldrh	r3, [r3, r2]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	18e4      	adds	r4, r4, r3
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	18e3      	adds	r3, r4, r3
 80035ce:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <USB_EPStartXfer+0x3c0>)
 80035d0:	4694      	mov	ip, r2
 80035d2:	4463      	add	r3, ip
 80035d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d121      	bne.n	8003620 <USB_EPStartXfer+0x3e4>
 80035dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	4a08      	ldr	r2, [pc, #32]	; (8003604 <USB_EPStartXfer+0x3c8>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	801a      	strh	r2, [r3, #0]
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	4a06      	ldr	r2, [pc, #24]	; (8003608 <USB_EPStartXfer+0x3cc>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f6:	801a      	strh	r2, [r3, #0]
 80035f8:	e049      	b.n	800368e <USB_EPStartXfer+0x452>
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	00000402 	.word	0x00000402
 8003600:	00000406 	.word	0x00000406
 8003604:	ffff83ff 	.word	0xffff83ff
 8003608:	ffff8000 	.word	0xffff8000
 800360c:	ffff8f8f 	.word	0xffff8f8f
 8003610:	ffff80c0 	.word	0xffff80c0
 8003614:	ffffc080 	.word	0xffffc080
 8003618:	ffff8fbf 	.word	0xffff8fbf
 800361c:	ffff8080 	.word	0xffff8080
 8003620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003622:	2b3d      	cmp	r3, #61	; 0x3d
 8003624:	d810      	bhi.n	8003648 <USB_EPStartXfer+0x40c>
 8003626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	63bb      	str	r3, [r7, #56]	; 0x38
 800362c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800362e:	2201      	movs	r2, #1
 8003630:	4013      	ands	r3, r2
 8003632:	d002      	beq.n	800363a <USB_EPStartXfer+0x3fe>
 8003634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003636:	3301      	adds	r3, #1
 8003638:	63bb      	str	r3, [r7, #56]	; 0x38
 800363a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363c:	b29b      	uxth	r3, r3
 800363e:	029b      	lsls	r3, r3, #10
 8003640:	b29a      	uxth	r2, r3
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	801a      	strh	r2, [r3, #0]
 8003646:	e022      	b.n	800368e <USB_EPStartXfer+0x452>
 8003648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	63bb      	str	r3, [r7, #56]	; 0x38
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	b29b      	uxth	r3, r3
 8003652:	029b      	lsls	r3, r3, #10
 8003654:	b29b      	uxth	r3, r3
 8003656:	4a4b      	ldr	r2, [pc, #300]	; (8003784 <USB_EPStartXfer+0x548>)
 8003658:	4313      	orrs	r3, r2
 800365a:	b29a      	uxth	r2, r3
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365e:	801a      	strh	r2, [r3, #0]
 8003660:	e015      	b.n	800368e <USB_EPStartXfer+0x452>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	785b      	ldrb	r3, [r3, #1]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d111      	bne.n	800368e <USB_EPStartXfer+0x452>
 800366a:	687c      	ldr	r4, [r7, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2250      	movs	r2, #80	; 0x50
 8003670:	5a9b      	ldrh	r3, [r3, r2]
 8003672:	b29b      	uxth	r3, r3
 8003674:	18e4      	adds	r4, r4, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	18e3      	adds	r3, r4, r3
 800367e:	4a42      	ldr	r2, [pc, #264]	; (8003788 <USB_EPStartXfer+0x54c>)
 8003680:	4694      	mov	ip, r2
 8003682:	4463      	add	r3, ip
 8003684:	633b      	str	r3, [r7, #48]	; 0x30
 8003686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003688:	b29a      	uxth	r2, r3
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	801a      	strh	r2, [r3, #0]
 800368e:	687c      	ldr	r4, [r7, #4]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	785b      	ldrb	r3, [r3, #1]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d140      	bne.n	800371a <USB_EPStartXfer+0x4de>
 8003698:	687c      	ldr	r4, [r7, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2250      	movs	r2, #80	; 0x50
 800369e:	5a9b      	ldrh	r3, [r3, r2]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	18e4      	adds	r4, r4, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	18e3      	adds	r3, r4, r3
 80036ac:	4a37      	ldr	r2, [pc, #220]	; (800378c <USB_EPStartXfer+0x550>)
 80036ae:	4694      	mov	ip, r2
 80036b0:	4463      	add	r3, ip
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
 80036b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10e      	bne.n	80036d8 <USB_EPStartXfer+0x49c>
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	4a34      	ldr	r2, [pc, #208]	; (8003790 <USB_EPStartXfer+0x554>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	801a      	strh	r2, [r3, #0]
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	4a2d      	ldr	r2, [pc, #180]	; (8003784 <USB_EPStartXfer+0x548>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	801a      	strh	r2, [r3, #0]
 80036d6:	e035      	b.n	8003744 <USB_EPStartXfer+0x508>
 80036d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036da:	2b3d      	cmp	r3, #61	; 0x3d
 80036dc:	d810      	bhi.n	8003700 <USB_EPStartXfer+0x4c4>
 80036de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e0:	085b      	lsrs	r3, r3, #1
 80036e2:	637b      	str	r3, [r7, #52]	; 0x34
 80036e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e6:	2201      	movs	r2, #1
 80036e8:	4013      	ands	r3, r2
 80036ea:	d002      	beq.n	80036f2 <USB_EPStartXfer+0x4b6>
 80036ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ee:	3301      	adds	r3, #1
 80036f0:	637b      	str	r3, [r7, #52]	; 0x34
 80036f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	029b      	lsls	r3, r3, #10
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	e021      	b.n	8003744 <USB_EPStartXfer+0x508>
 8003700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	637b      	str	r3, [r7, #52]	; 0x34
 8003706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003708:	b29b      	uxth	r3, r3
 800370a:	029b      	lsls	r3, r3, #10
 800370c:	b29b      	uxth	r3, r3
 800370e:	4a1d      	ldr	r2, [pc, #116]	; (8003784 <USB_EPStartXfer+0x548>)
 8003710:	4313      	orrs	r3, r2
 8003712:	b29a      	uxth	r2, r3
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	801a      	strh	r2, [r3, #0]
 8003718:	e014      	b.n	8003744 <USB_EPStartXfer+0x508>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	785b      	ldrb	r3, [r3, #1]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d110      	bne.n	8003744 <USB_EPStartXfer+0x508>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2250      	movs	r2, #80	; 0x50
 8003726:	5a9b      	ldrh	r3, [r3, r2]
 8003728:	b29b      	uxth	r3, r3
 800372a:	18e4      	adds	r4, r4, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	18e3      	adds	r3, r4, r3
 8003734:	4a15      	ldr	r2, [pc, #84]	; (800378c <USB_EPStartXfer+0x550>)
 8003736:	4694      	mov	ip, r2
 8003738:	4463      	add	r3, ip
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28
 800373c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800373e:	b29a      	uxth	r2, r3
 8003740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003742:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	18d3      	adds	r3, r2, r3
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	b29b      	uxth	r3, r3
 8003752:	4a10      	ldr	r2, [pc, #64]	; (8003794 <USB_EPStartXfer+0x558>)
 8003754:	4013      	ands	r3, r2
 8003756:	b29c      	uxth	r4, r3
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	015b      	lsls	r3, r3, #5
 800375c:	4063      	eors	r3, r4
 800375e:	b29c      	uxth	r4, r3
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	019b      	lsls	r3, r3, #6
 8003764:	4063      	eors	r3, r4
 8003766:	b29c      	uxth	r4, r3
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	18d3      	adds	r3, r2, r3
 8003772:	4a09      	ldr	r2, [pc, #36]	; (8003798 <USB_EPStartXfer+0x55c>)
 8003774:	4322      	orrs	r2, r4
 8003776:	b292      	uxth	r2, r2
 8003778:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	0018      	movs	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	b015      	add	sp, #84	; 0x54
 8003782:	bd90      	pop	{r4, r7, pc}
 8003784:	ffff8000 	.word	0xffff8000
 8003788:	00000402 	.word	0x00000402
 800378c:	00000406 	.word	0x00000406
 8003790:	ffff83ff 	.word	0xffff83ff
 8003794:	ffffbf8f 	.word	0xffffbf8f
 8003798:	ffff8080 	.word	0xffff8080

0800379c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	785b      	ldrb	r3, [r3, #1]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d016      	beq.n	80037dc <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	18d3      	adds	r3, r2, r3
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	4a15      	ldr	r2, [pc, #84]	; (8003814 <USB_EPSetStall+0x78>)
 80037be:	4013      	ands	r3, r2
 80037c0:	b29c      	uxth	r4, r3
 80037c2:	2310      	movs	r3, #16
 80037c4:	4063      	eors	r3, r4
 80037c6:	b29c      	uxth	r4, r3
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	18d3      	adds	r3, r2, r3
 80037d2:	4a11      	ldr	r2, [pc, #68]	; (8003818 <USB_EPSetStall+0x7c>)
 80037d4:	4322      	orrs	r2, r4
 80037d6:	b292      	uxth	r2, r2
 80037d8:	801a      	strh	r2, [r3, #0]
 80037da:	e016      	b.n	800380a <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	18d3      	adds	r3, r2, r3
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	4a0c      	ldr	r2, [pc, #48]	; (800381c <USB_EPSetStall+0x80>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	b29c      	uxth	r4, r3
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	015b      	lsls	r3, r3, #5
 80037f4:	4063      	eors	r3, r4
 80037f6:	b29c      	uxth	r4, r3
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	18d3      	adds	r3, r2, r3
 8003802:	4a05      	ldr	r2, [pc, #20]	; (8003818 <USB_EPSetStall+0x7c>)
 8003804:	4322      	orrs	r2, r4
 8003806:	b292      	uxth	r2, r2
 8003808:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	b003      	add	sp, #12
 8003812:	bd90      	pop	{r4, r7, pc}
 8003814:	ffff8fbf 	.word	0xffff8fbf
 8003818:	ffff8080 	.word	0xffff8080
 800381c:	ffffbf8f 	.word	0xffffbf8f

08003820 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003820:	b590      	push	{r4, r7, lr}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	785b      	ldrb	r3, [r3, #1]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d037      	beq.n	80038a2 <USB_EPClearStall+0x82>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	18d3      	adds	r3, r2, r3
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	b29c      	uxth	r4, r3
 8003840:	0022      	movs	r2, r4
 8003842:	2340      	movs	r3, #64	; 0x40
 8003844:	4013      	ands	r3, r2
 8003846:	d012      	beq.n	800386e <USB_EPClearStall+0x4e>
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	18d3      	adds	r3, r2, r3
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	4a32      	ldr	r2, [pc, #200]	; (8003920 <USB_EPClearStall+0x100>)
 8003858:	4013      	ands	r3, r2
 800385a:	b29c      	uxth	r4, r3
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	18d3      	adds	r3, r2, r3
 8003866:	4a2f      	ldr	r2, [pc, #188]	; (8003924 <USB_EPClearStall+0x104>)
 8003868:	4322      	orrs	r2, r4
 800386a:	b292      	uxth	r2, r2
 800386c:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	18d3      	adds	r3, r2, r3
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	4a2a      	ldr	r2, [pc, #168]	; (8003928 <USB_EPClearStall+0x108>)
 800387e:	4013      	ands	r3, r2
 8003880:	b29c      	uxth	r4, r3
 8003882:	2310      	movs	r3, #16
 8003884:	4063      	eors	r3, r4
 8003886:	b29c      	uxth	r4, r3
 8003888:	2320      	movs	r3, #32
 800388a:	4063      	eors	r3, r4
 800388c:	b29c      	uxth	r4, r3
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	18d3      	adds	r3, r2, r3
 8003898:	4a24      	ldr	r2, [pc, #144]	; (800392c <USB_EPClearStall+0x10c>)
 800389a:	4322      	orrs	r2, r4
 800389c:	b292      	uxth	r2, r2
 800389e:	801a      	strh	r2, [r3, #0]
 80038a0:	e039      	b.n	8003916 <USB_EPClearStall+0xf6>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	18d3      	adds	r3, r2, r3
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b29c      	uxth	r4, r3
 80038b0:	0022      	movs	r2, r4
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	01db      	lsls	r3, r3, #7
 80038b6:	4013      	ands	r3, r2
 80038b8:	d012      	beq.n	80038e0 <USB_EPClearStall+0xc0>
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	18d3      	adds	r3, r2, r3
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <USB_EPClearStall+0x100>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	b29c      	uxth	r4, r3
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	18d3      	adds	r3, r2, r3
 80038d8:	4a15      	ldr	r2, [pc, #84]	; (8003930 <USB_EPClearStall+0x110>)
 80038da:	4322      	orrs	r2, r4
 80038dc:	b292      	uxth	r2, r2
 80038de:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	18d3      	adds	r3, r2, r3
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	4a11      	ldr	r2, [pc, #68]	; (8003934 <USB_EPClearStall+0x114>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	b29c      	uxth	r4, r3
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	015b      	lsls	r3, r3, #5
 80038f8:	4063      	eors	r3, r4
 80038fa:	b29c      	uxth	r4, r3
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	019b      	lsls	r3, r3, #6
 8003900:	4063      	eors	r3, r4
 8003902:	b29c      	uxth	r4, r3
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	18d3      	adds	r3, r2, r3
 800390e:	4a07      	ldr	r2, [pc, #28]	; (800392c <USB_EPClearStall+0x10c>)
 8003910:	4322      	orrs	r2, r4
 8003912:	b292      	uxth	r2, r2
 8003914:	801a      	strh	r2, [r3, #0]
  }
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	0018      	movs	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	b003      	add	sp, #12
 800391e:	bd90      	pop	{r4, r7, pc}
 8003920:	ffff8f8f 	.word	0xffff8f8f
 8003924:	ffff80c0 	.word	0xffff80c0
 8003928:	ffff8fbf 	.word	0xffff8fbf
 800392c:	ffff8080 	.word	0xffff8080
 8003930:	ffffc080 	.word	0xffffc080
 8003934:	ffffbf8f 	.word	0xffffbf8f

08003938 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	000a      	movs	r2, r1
 8003942:	1cfb      	adds	r3, r7, #3
 8003944:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8003946:	1cfb      	adds	r3, r7, #3
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d103      	bne.n	8003956 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	224c      	movs	r2, #76	; 0x4c
 8003952:	2180      	movs	r1, #128	; 0x80
 8003954:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}

08003960 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2258      	movs	r2, #88	; 0x58
 800396c:	5a9b      	ldrh	r3, [r3, r2]
 800396e:	b29b      	uxth	r3, r3
 8003970:	4a05      	ldr	r2, [pc, #20]	; (8003988 <USB_DevConnect+0x28>)
 8003972:	4313      	orrs	r3, r2
 8003974:	b299      	uxth	r1, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2258      	movs	r2, #88	; 0x58
 800397a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	0018      	movs	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	b002      	add	sp, #8
 8003984:	bd80      	pop	{r7, pc}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	ffff8000 	.word	0xffff8000

0800398c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2244      	movs	r2, #68	; 0x44
 8003998:	5a9b      	ldrh	r3, [r3, r2]
 800399a:	b29b      	uxth	r3, r3
 800399c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800399e:	68fb      	ldr	r3, [r7, #12]
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b004      	add	sp, #16
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b002      	add	sp, #8
 80039ba:	bd80      	pop	{r7, pc}

080039bc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08c      	sub	sp, #48	; 0x30
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	0019      	movs	r1, r3
 80039c8:	1dbb      	adds	r3, r7, #6
 80039ca:	801a      	strh	r2, [r3, #0]
 80039cc:	1d3b      	adds	r3, r7, #4
 80039ce:	1c0a      	adds	r2, r1, #0
 80039d0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80039d2:	1d3b      	adds	r3, r7, #4
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	3301      	adds	r3, #1
 80039d8:	085b      	lsrs	r3, r3, #1
 80039da:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80039e4:	1dbb      	adds	r3, r7, #6
 80039e6:	881a      	ldrh	r2, [r3, #0]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	18d3      	adds	r3, r2, r3
 80039ec:	2280      	movs	r2, #128	; 0x80
 80039ee:	00d2      	lsls	r2, r2, #3
 80039f0:	4694      	mov	ip, r2
 80039f2:	4463      	add	r3, ip
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039fa:	e01b      	b.n	8003a34 <USB_WritePMA+0x78>
  {
    temp1 = (uint16_t) * pBuf;
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	3301      	adds	r3, #1
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	001a      	movs	r2, r3
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a24:	3302      	adds	r3, #2
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a30:	3b01      	subs	r3, #1
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e0      	bne.n	80039fc <USB_WritePMA+0x40>
  }
}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b00c      	add	sp, #48	; 0x30
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b08a      	sub	sp, #40	; 0x28
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	1dbb      	adds	r3, r7, #6
 8003a50:	801a      	strh	r2, [r3, #0]
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	1c0a      	adds	r2, r1, #0
 8003a56:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a6a:	1dbb      	adds	r3, r7, #6
 8003a6c:	881a      	ldrh	r2, [r3, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	18d3      	adds	r3, r2, r3
 8003a72:	2280      	movs	r2, #128	; 0x80
 8003a74:	00d2      	lsls	r2, r2, #3
 8003a76:	4694      	mov	ip, r2
 8003a78:	4463      	add	r3, ip
 8003a7a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a80:	e017      	b.n	8003ab2 <USB_ReadPMA+0x70>
  {
    temp = *pdwVal;
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e4      	bne.n	8003a82 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003ab8:	1d3b      	adds	r3, r7, #4
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	2201      	movs	r2, #1
 8003abe:	4013      	ands	r3, r2
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d006      	beq.n	8003ad4 <USB_ReadPMA+0x92>
  {
    temp = *pdwVal;
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	701a      	strb	r2, [r3, #0]
  }
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b00a      	add	sp, #40	; 0x28
 8003ada:	bd80      	pop	{r7, pc}

08003adc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	000a      	movs	r2, r1
 8003ae6:	1cfb      	adds	r3, r7, #3
 8003ae8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8003aea:	230f      	movs	r3, #15
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	7c1b      	ldrb	r3, [r3, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d116      	bne.n	8003b28 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	2181      	movs	r1, #129	; 0x81
 8003b04:	f003 f85e 	bl	8006bc4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	2202      	movs	r2, #2
 8003b16:	2101      	movs	r1, #1
 8003b18:	f003 f854 	bl	8006bc4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	23ac      	movs	r3, #172	; 0xac
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	2101      	movs	r1, #1
 8003b24:	50d1      	str	r1, [r2, r3]
 8003b26:	e013      	b.n	8003b50 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	2340      	movs	r3, #64	; 0x40
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	2181      	movs	r1, #129	; 0x81
 8003b30:	f003 f848 	bl	8006bc4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	2340      	movs	r3, #64	; 0x40
 8003b3e:	2202      	movs	r2, #2
 8003b40:	2101      	movs	r1, #1
 8003b42:	f003 f83f 	bl	8006bc4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	23ac      	movs	r3, #172	; 0xac
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	2308      	movs	r3, #8
 8003b54:	2203      	movs	r2, #3
 8003b56:	2182      	movs	r1, #130	; 0x82
 8003b58:	f003 f834 	bl	8006bc4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003b62:	2387      	movs	r3, #135	; 0x87
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	0018      	movs	r0, r3
 8003b68:	f003 f9c4 	bl	8006ef4 <USBD_static_malloc>
 8003b6c:	0001      	movs	r1, r0
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	23a4      	movs	r3, #164	; 0xa4
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	50d1      	str	r1, [r2, r3]

  if(pdev->pClassData == NULL)
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	23a4      	movs	r3, #164	; 0xa4
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	58d3      	ldr	r3, [r2, r3]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d104      	bne.n	8003b8c <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8003b82:	230f      	movs	r3, #15
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	e02c      	b.n	8003be6 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	23a4      	movs	r3, #164	; 0xa4
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	58d3      	ldr	r3, [r2, r3]
 8003b94:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	23a5      	movs	r3, #165	; 0xa5
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	58d3      	ldr	r3, [r2, r3]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	2385      	movs	r3, #133	; 0x85
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	2100      	movs	r1, #0
 8003baa:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	2386      	movs	r3, #134	; 0x86
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	50d1      	str	r1, [r2, r3]

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	7c1b      	ldrb	r3, [r3, #16]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	2381      	movs	r3, #129	; 0x81
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	58d2      	ldr	r2, [r2, r3]
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	2101      	movs	r1, #1
 8003bce:	f003 f943 	bl	8006e58 <USBD_LL_PrepareReceive>
 8003bd2:	e008      	b.n	8003be6 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	2381      	movs	r3, #129	; 0x81
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	58d2      	ldr	r2, [r2, r3]
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	2340      	movs	r3, #64	; 0x40
 8003be0:	2101      	movs	r1, #1
 8003be2:	f003 f939 	bl	8006e58 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003be6:	230f      	movs	r3, #15
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	781b      	ldrb	r3, [r3, #0]
}
 8003bec:	0018      	movs	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b004      	add	sp, #16
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	000a      	movs	r2, r1
 8003bfe:	1cfb      	adds	r3, r7, #3
 8003c00:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8003c02:	230f      	movs	r3, #15
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2181      	movs	r1, #129	; 0x81
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f003 f80f 	bl	8006c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f003 f807 	bl	8006c32 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	23ac      	movs	r3, #172	; 0xac
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2182      	movs	r1, #130	; 0x82
 8003c32:	0018      	movs	r0, r3
 8003c34:	f002 fffd 	bl	8006c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	23a4      	movs	r3, #164	; 0xa4
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	58d3      	ldr	r3, [r2, r3]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d011      	beq.n	8003c6e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	23a5      	movs	r3, #165	; 0xa5
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	58d3      	ldr	r3, [r2, r3]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	23a4      	movs	r3, #164	; 0xa4
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	58d3      	ldr	r3, [r2, r3]
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f003 f954 	bl	8006f0c <USBD_static_free>
    pdev->pClassData = NULL;
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	23a4      	movs	r3, #164	; 0xa4
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8003c6e:	230f      	movs	r3, #15
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b004      	add	sp, #16
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	23a4      	movs	r3, #164	; 0xa4
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	58d3      	ldr	r3, [r2, r3]
 8003c8e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003c90:	230f      	movs	r3, #15
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8003c98:	230c      	movs	r3, #12
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8003ca0:	2317      	movs	r3, #23
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	001a      	movs	r2, r3
 8003cae:	2360      	movs	r3, #96	; 0x60
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d03d      	beq.n	8003d30 <USBD_CDC_Setup+0xb4>
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d000      	beq.n	8003cba <USBD_CDC_Setup+0x3e>
 8003cb8:	e092      	b.n	8003de0 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	88db      	ldrh	r3, [r3, #6]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d02b      	beq.n	8003d1a <USBD_CDC_Setup+0x9e>
    {
      if (req->bmRequest & 0x80U)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	b25b      	sxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	da12      	bge.n	8003cf2 <USBD_CDC_Setup+0x76>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	23a5      	movs	r3, #165	; 0xa5
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	58d3      	ldr	r3, [r2, r3]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8003cda:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	88d2      	ldrh	r2, [r2, #6]
 8003ce0:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003ce2:	6939      	ldr	r1, [r7, #16]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	88da      	ldrh	r2, [r3, #6]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	0018      	movs	r0, r3
 8003cec:	f001 fb12 	bl	8005314 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8003cf0:	e081      	b.n	8003df6 <USBD_CDC_Setup+0x17a>
        hcdc->CmdOpCode = req->bRequest;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	7859      	ldrb	r1, [r3, #1]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	54d1      	strb	r1, [r2, r3]
        hcdc->CmdLength = (uint8_t)req->wLength;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	88db      	ldrh	r3, [r3, #6]
 8003d02:	b2d9      	uxtb	r1, r3
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4a3f      	ldr	r2, [pc, #252]	; (8003e04 <USBD_CDC_Setup+0x188>)
 8003d08:	5499      	strb	r1, [r3, r2]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003d0a:	6939      	ldr	r1, [r7, #16]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	88da      	ldrh	r2, [r3, #6]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	0018      	movs	r0, r3
 8003d14:	f001 fb31 	bl	800537a <USBD_CtlPrepareRx>
    break;
 8003d18:	e06d      	b.n	8003df6 <USBD_CDC_Setup+0x17a>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	23a5      	movs	r3, #165	; 0xa5
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	58d3      	ldr	r3, [r2, r3]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	7850      	ldrb	r0, [r2, #1]
 8003d28:	6839      	ldr	r1, [r7, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	4798      	blx	r3
    break;
 8003d2e:	e062      	b.n	8003df6 <USBD_CDC_Setup+0x17a>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	785b      	ldrb	r3, [r3, #1]
 8003d34:	2b0a      	cmp	r3, #10
 8003d36:	d01c      	beq.n	8003d72 <USBD_CDC_Setup+0xf6>
 8003d38:	2b0b      	cmp	r3, #11
 8003d3a:	d033      	beq.n	8003da4 <USBD_CDC_Setup+0x128>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d142      	bne.n	8003dc6 <USBD_CDC_Setup+0x14a>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	239d      	movs	r3, #157	; 0x9d
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	5cd3      	ldrb	r3, [r2, r3]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d107      	bne.n	8003d5c <USBD_CDC_Setup+0xe0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8003d4c:	230c      	movs	r3, #12
 8003d4e:	18f9      	adds	r1, r7, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	0018      	movs	r0, r3
 8003d56:	f001 fadd 	bl	8005314 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8003d5a:	e040      	b.n	8003dde <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0011      	movs	r1, r2
 8003d62:	0018      	movs	r0, r3
 8003d64:	f001 fa57 	bl	8005216 <USBD_CtlError>
			  ret = USBD_FAIL;
 8003d68:	2317      	movs	r3, #23
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	701a      	strb	r2, [r3, #0]
      break;
 8003d70:	e035      	b.n	8003dde <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	239d      	movs	r3, #157	; 0x9d
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	5cd3      	ldrb	r3, [r2, r3]
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d107      	bne.n	8003d8e <USBD_CDC_Setup+0x112>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8003d7e:	230f      	movs	r3, #15
 8003d80:	18f9      	adds	r1, r7, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	0018      	movs	r0, r3
 8003d88:	f001 fac4 	bl	8005314 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8003d8c:	e027      	b.n	8003dde <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	0011      	movs	r1, r2
 8003d94:	0018      	movs	r0, r3
 8003d96:	f001 fa3e 	bl	8005216 <USBD_CtlError>
			  ret = USBD_FAIL;
 8003d9a:	2317      	movs	r3, #23
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	2202      	movs	r2, #2
 8003da0:	701a      	strb	r2, [r3, #0]
      break;
 8003da2:	e01c      	b.n	8003dde <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	239d      	movs	r3, #157	; 0x9d
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	5cd3      	ldrb	r3, [r2, r3]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d015      	beq.n	8003ddc <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError (pdev, req);
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	0011      	movs	r1, r2
 8003db6:	0018      	movs	r0, r3
 8003db8:	f001 fa2d 	bl	8005216 <USBD_CtlError>
			  ret = USBD_FAIL;
 8003dbc:	2317      	movs	r3, #23
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003dc4:	e00a      	b.n	8003ddc <USBD_CDC_Setup+0x160>

    default:
      USBD_CtlError (pdev, req);
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	0011      	movs	r1, r2
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f001 fa22 	bl	8005216 <USBD_CtlError>
      ret = USBD_FAIL;
 8003dd2:	2317      	movs	r3, #23
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	701a      	strb	r2, [r3, #0]
      break;
 8003dda:	e000      	b.n	8003dde <USBD_CDC_Setup+0x162>
      break;
 8003ddc:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8003dde:	e00a      	b.n	8003df6 <USBD_CDC_Setup+0x17a>

  default:
    USBD_CtlError (pdev, req);
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	0011      	movs	r1, r2
 8003de6:	0018      	movs	r0, r3
 8003de8:	f001 fa15 	bl	8005216 <USBD_CtlError>
    ret = USBD_FAIL;
 8003dec:	2317      	movs	r3, #23
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	2202      	movs	r2, #2
 8003df2:	701a      	strb	r2, [r3, #0]
    break;
 8003df4:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8003df6:	2317      	movs	r3, #23
 8003df8:	18fb      	adds	r3, r7, r3
 8003dfa:	781b      	ldrb	r3, [r3, #0]
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b006      	add	sp, #24
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	00000201 	.word	0x00000201

08003e08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	000a      	movs	r2, r1
 8003e12:	1cfb      	adds	r3, r7, #3
 8003e14:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	23a4      	movs	r3, #164	; 0xa4
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	58d3      	ldr	r3, [r2, r3]
 8003e1e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	23a6      	movs	r3, #166	; 0xa6
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	58d3      	ldr	r3, [r2, r3]
 8003e28:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	23a4      	movs	r3, #164	; 0xa4
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	58d3      	ldr	r3, [r2, r3]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d03b      	beq.n	8003eae <USBD_CDC_DataIn+0xa6>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003e36:	1cfb      	adds	r3, r7, #3
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	0013      	movs	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	189b      	adds	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	18cb      	adds	r3, r1, r3
 8003e46:	331c      	adds	r3, #28
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d028      	beq.n	8003ea0 <USBD_CDC_DataIn+0x98>
 8003e4e:	1cfb      	adds	r3, r7, #3
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	0013      	movs	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	189b      	adds	r3, r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	18cb      	adds	r3, r1, r3
 8003e5e:	331c      	adds	r3, #28
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	1cfb      	adds	r3, r7, #3
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	015b      	lsls	r3, r3, #5
 8003e6a:	18d3      	adds	r3, r2, r3
 8003e6c:	3338      	adds	r3, #56	; 0x38
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	0019      	movs	r1, r3
 8003e72:	f7fc f9cf 	bl	8000214 <__aeabi_uidivmod>
 8003e76:	1e0b      	subs	r3, r1, #0
 8003e78:	d112      	bne.n	8003ea0 <USBD_CDC_DataIn+0x98>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003e7a:	1cfb      	adds	r3, r7, #3
 8003e7c:	781a      	ldrb	r2, [r3, #0]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	0013      	movs	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	189b      	adds	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	18cb      	adds	r3, r1, r3
 8003e8a:	331c      	adds	r3, #28
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8003e90:	1cfb      	adds	r3, r7, #3
 8003e92:	7819      	ldrb	r1, [r3, #0]
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	2300      	movs	r3, #0
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f002 ffa5 	bl	8006de8 <USBD_LL_Transmit>
 8003e9e:	e004      	b.n	8003eaa <USBD_CDC_DataIn+0xa2>
    }
    else
    {
      hcdc->TxState = 0U;
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	2385      	movs	r3, #133	; 0x85
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e000      	b.n	8003eb0 <USBD_CDC_DataIn+0xa8>
  }
  else
  {
    return USBD_FAIL;
 8003eae:	2302      	movs	r3, #2
  }
}
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b004      	add	sp, #16
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	000a      	movs	r2, r1
 8003ec2:	1cfb      	adds	r3, r7, #3
 8003ec4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	23a4      	movs	r3, #164	; 0xa4
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	58d3      	ldr	r3, [r2, r3]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003ed0:	1cfb      	adds	r3, r7, #3
 8003ed2:	781a      	ldrb	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	0011      	movs	r1, r2
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f002 fff5 	bl	8006ec8 <USBD_LL_GetRxDataSize>
 8003ede:	0001      	movs	r1, r0
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	2383      	movs	r3, #131	; 0x83
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	23a4      	movs	r3, #164	; 0xa4
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	58d3      	ldr	r3, [r2, r3]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d011      	beq.n	8003f18 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	23a5      	movs	r3, #165	; 0xa5
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	58d3      	ldr	r3, [r2, r3]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	2281      	movs	r2, #129	; 0x81
 8003f02:	0092      	lsls	r2, r2, #2
 8003f04:	5888      	ldr	r0, [r1, r2]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	2183      	movs	r1, #131	; 0x83
 8003f0a:	0089      	lsls	r1, r1, #2
 8003f0c:	468c      	mov	ip, r1
 8003f0e:	4462      	add	r2, ip
 8003f10:	0011      	movs	r1, r2
 8003f12:	4798      	blx	r3

    return USBD_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	e000      	b.n	8003f1a <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8003f18:	2302      	movs	r3, #2
  }
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b004      	add	sp, #16
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	23a4      	movs	r3, #164	; 0xa4
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	58d3      	ldr	r3, [r2, r3]
 8003f34:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	23a5      	movs	r3, #165	; 0xa5
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	58d3      	ldr	r3, [r2, r3]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01a      	beq.n	8003f78 <USBD_CDC_EP0_RxReady+0x54>
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	5cd3      	ldrb	r3, [r2, r3]
 8003f4a:	2bff      	cmp	r3, #255	; 0xff
 8003f4c:	d014      	beq.n	8003f78 <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	23a5      	movs	r3, #165	; 0xa5
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	58d3      	ldr	r3, [r2, r3]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	68f9      	ldr	r1, [r7, #12]
 8003f5a:	2280      	movs	r2, #128	; 0x80
 8003f5c:	0092      	lsls	r2, r2, #2
 8003f5e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8003f60:	68fc      	ldr	r4, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4907      	ldr	r1, [pc, #28]	; (8003f84 <USBD_CDC_EP0_RxReady+0x60>)
 8003f66:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003f68:	b292      	uxth	r2, r2
 8003f6a:	0021      	movs	r1, r4
 8003f6c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	21ff      	movs	r1, #255	; 0xff
 8003f76:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b005      	add	sp, #20
 8003f80:	bd90      	pop	{r4, r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	00000201 	.word	0x00000201

08003f88 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2243      	movs	r2, #67	; 0x43
 8003f94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8003f96:	4b02      	ldr	r3, [pc, #8]	; (8003fa0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000088 	.word	0x20000088

08003fa4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2243      	movs	r2, #67	; 0x43
 8003fb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8003fb2:	4b02      	ldr	r3, [pc, #8]	; (8003fbc <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b002      	add	sp, #8
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20000044 	.word	0x20000044

08003fc0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2243      	movs	r2, #67	; 0x43
 8003fcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8003fce:	4b02      	ldr	r3, [pc, #8]	; (8003fd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b002      	add	sp, #8
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	200000cc 	.word	0x200000cc

08003fdc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	220a      	movs	r2, #10
 8003fe8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8003fea:	4b02      	ldr	r3, [pc, #8]	; (8003ff4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b002      	add	sp, #8
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20000000 	.word	0x20000000

08003ff8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004002:	230f      	movs	r3, #15
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	2202      	movs	r2, #2
 8004008:	701a      	strb	r2, [r3, #0]

  if(fops != NULL)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData= fops;
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	23a5      	movs	r3, #165	; 0xa5
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	6839      	ldr	r1, [r7, #0]
 8004018:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800401a:	230f      	movs	r3, #15
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	2200      	movs	r2, #0
 8004020:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004022:	230f      	movs	r3, #15
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	781b      	ldrb	r3, [r3, #0]
}
 8004028:	0018      	movs	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	b004      	add	sp, #16
 800402e:	bd80      	pop	{r7, pc}

08004030 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	1dbb      	adds	r3, r7, #6
 800403c:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	23a4      	movs	r3, #164	; 0xa4
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	58d3      	ldr	r3, [r2, r3]
 8004046:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	2382      	movs	r3, #130	; 0x82
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8004052:	1dbb      	adds	r3, r7, #6
 8004054:	8819      	ldrh	r1, [r3, #0]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	2384      	movs	r3, #132	; 0x84
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	0018      	movs	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	b006      	add	sp, #24
 8004066:	bd80      	pop	{r7, pc}

08004068 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	23a4      	movs	r3, #164	; 0xa4
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	58d3      	ldr	r3, [r2, r3]
 800407a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	2381      	movs	r3, #129	; 0x81
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	6839      	ldr	r1, [r7, #0]
 8004084:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b004      	add	sp, #16
 800408e:	bd80      	pop	{r7, pc}

08004090 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	23a4      	movs	r3, #164	; 0xa4
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	58d3      	ldr	r3, [r2, r3]
 80040a0:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	23a4      	movs	r3, #164	; 0xa4
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	58d3      	ldr	r3, [r2, r3]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d022      	beq.n	80040f4 <USBD_CDC_TransmitPacket+0x64>
  {
    if(hcdc->TxState == 0U)
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	2385      	movs	r3, #133	; 0x85
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	58d3      	ldr	r3, [r2, r3]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d11a      	bne.n	80040f0 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	2385      	movs	r3, #133	; 0x85
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	2101      	movs	r1, #1
 80040c2:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	2384      	movs	r3, #132	; 0x84
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	58d2      	ldr	r2, [r2, r3]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	2382      	movs	r3, #130	; 0x82
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	2384      	movs	r3, #132	; 0x84
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	000a      	movs	r2, r1
 80040e6:	2181      	movs	r1, #129	; 0x81
 80040e8:	f002 fe7e 	bl	8006de8 <USBD_LL_Transmit>

      return USBD_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	e002      	b.n	80040f6 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 80040f4:	2302      	movs	r3, #2
  }
}
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b004      	add	sp, #16
 80040fc:	bd80      	pop	{r7, pc}

080040fe <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	23a4      	movs	r3, #164	; 0xa4
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	58d3      	ldr	r3, [r2, r3]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	23a4      	movs	r3, #164	; 0xa4
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	58d3      	ldr	r3, [r2, r3]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d019      	beq.n	8004150 <USBD_CDC_ReceivePacket+0x52>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	7c1b      	ldrb	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	2381      	movs	r3, #129	; 0x81
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	58d2      	ldr	r2, [r2, r3]
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	2101      	movs	r1, #1
 8004134:	f002 fe90 	bl	8006e58 <USBD_LL_PrepareReceive>
 8004138:	e008      	b.n	800414c <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	2381      	movs	r3, #129	; 0x81
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	58d2      	ldr	r2, [r2, r3]
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	2340      	movs	r3, #64	; 0x40
 8004146:	2101      	movs	r1, #1
 8004148:	f002 fe86 	bl	8006e58 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e000      	b.n	8004152 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8004150:	2302      	movs	r3, #2
  }
}
 8004152:	0018      	movs	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	b004      	add	sp, #16
 8004158:	bd80      	pop	{r7, pc}

0800415a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	1dfb      	adds	r3, r7, #7
 8004166:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800416e:	2302      	movs	r3, #2
 8004170:	e020      	b.n	80041b4 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	23a3      	movs	r3, #163	; 0xa3
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	58d3      	ldr	r3, [r2, r3]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d004      	beq.n	8004188 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	23a3      	movs	r3, #163	; 0xa3
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	2100      	movs	r1, #0
 8004186:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	23a2      	movs	r3, #162	; 0xa2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	239d      	movs	r3, #157	; 0x9d
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	2101      	movs	r1, #1
 80041a0:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1dfa      	adds	r2, r7, #7
 80041a6:	7812      	ldrb	r2, [r2, #0]
 80041a8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	0018      	movs	r0, r3
 80041ae:	f002 fc7f 	bl	8006ab0 <USBD_LL_Init>

  return USBD_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b004      	add	sp, #16
 80041ba:	bd80      	pop	{r7, pc}

080041bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80041c6:	230f      	movs	r3, #15
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	2200      	movs	r2, #0
 80041cc:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d009      	beq.n	80041e8 <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	23a3      	movs	r3, #163	; 0xa3
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	6839      	ldr	r1, [r7, #0]
 80041dc:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80041de:	230f      	movs	r3, #15
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
 80041e6:	e003      	b.n	80041f0 <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80041e8:	230f      	movs	r3, #15
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	2202      	movs	r2, #2
 80041ee:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80041f0:	230f      	movs	r3, #15
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	781b      	ldrb	r3, [r3, #0]
}
 80041f6:	0018      	movs	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b004      	add	sp, #16
 80041fc:	bd80      	pop	{r7, pc}

080041fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	0018      	movs	r0, r3
 800420a:	f002 fcb5 	bl	8006b78 <USBD_LL_Start>

  return USBD_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	0018      	movs	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	b002      	add	sp, #8
 8004216:	bd80      	pop	{r7, pc}

08004218 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	0018      	movs	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	b002      	add	sp, #8
 8004228:	bd80      	pop	{r7, pc}

0800422a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	000a      	movs	r2, r1
 8004234:	1cfb      	adds	r3, r7, #3
 8004236:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004238:	230f      	movs	r3, #15
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	2202      	movs	r2, #2
 800423e:	701a      	strb	r2, [r3, #0]

  if(pdev->pClass != NULL)
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	23a3      	movs	r3, #163	; 0xa3
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	58d3      	ldr	r3, [r2, r3]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00f      	beq.n	800426c <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	23a3      	movs	r3, #163	; 0xa3
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	58d3      	ldr	r3, [r2, r3]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	1cfa      	adds	r2, r7, #3
 8004258:	7811      	ldrb	r1, [r2, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	0010      	movs	r0, r2
 800425e:	4798      	blx	r3
 8004260:	1e03      	subs	r3, r0, #0
 8004262:	d103      	bne.n	800426c <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8004264:	230f      	movs	r3, #15
 8004266:	18fb      	adds	r3, r7, r3
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800426c:	230f      	movs	r3, #15
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	781b      	ldrb	r3, [r3, #0]
}
 8004272:	0018      	movs	r0, r3
 8004274:	46bd      	mov	sp, r7
 8004276:	b004      	add	sp, #16
 8004278:	bd80      	pop	{r7, pc}

0800427a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	000a      	movs	r2, r1
 8004284:	1cfb      	adds	r3, r7, #3
 8004286:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	23a3      	movs	r3, #163	; 0xa3
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	58d3      	ldr	r3, [r2, r3]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	1cfa      	adds	r2, r7, #3
 8004294:	7811      	ldrb	r1, [r2, #0]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	0010      	movs	r0, r2
 800429a:	4798      	blx	r3
  return USBD_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	0018      	movs	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b002      	add	sp, #8
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	22a0      	movs	r2, #160	; 0xa0
 80042b6:	0092      	lsls	r2, r2, #2
 80042b8:	4694      	mov	ip, r2
 80042ba:	4463      	add	r3, ip
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	0011      	movs	r1, r2
 80042c0:	0018      	movs	r0, r3
 80042c2:	f000 ff6d 	bl	80051a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	239b      	movs	r3, #155	; 0x9b
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	2101      	movs	r1, #1
 80042ce:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a22      	ldr	r2, [pc, #136]	; (800435c <USBD_LL_SetupStage+0xb4>)
 80042d4:	5a9b      	ldrh	r3, [r3, r2]
 80042d6:	0019      	movs	r1, r3
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	239c      	movs	r3, #156	; 0x9c
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	23a0      	movs	r3, #160	; 0xa0
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	5cd3      	ldrb	r3, [r2, r3]
 80042e8:	001a      	movs	r2, r3
 80042ea:	231f      	movs	r3, #31
 80042ec:	4013      	ands	r3, r2
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d00d      	beq.n	800430e <USBD_LL_SetupStage+0x66>
 80042f2:	d302      	bcc.n	80042fa <USBD_LL_SetupStage+0x52>
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d014      	beq.n	8004322 <USBD_LL_SetupStage+0x7a>
 80042f8:	e01d      	b.n	8004336 <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	22a0      	movs	r2, #160	; 0xa0
 80042fe:	0092      	lsls	r2, r2, #2
 8004300:	189a      	adds	r2, r3, r2
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	0011      	movs	r1, r2
 8004306:	0018      	movs	r0, r3
 8004308:	f000 fa0a 	bl	8004720 <USBD_StdDevReq>
    break;
 800430c:	e020      	b.n	8004350 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	22a0      	movs	r2, #160	; 0xa0
 8004312:	0092      	lsls	r2, r2, #2
 8004314:	189a      	adds	r2, r3, r2
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	0011      	movs	r1, r2
 800431a:	0018      	movs	r0, r3
 800431c:	f000 fa72 	bl	8004804 <USBD_StdItfReq>
    break;
 8004320:	e016      	b.n	8004350 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	22a0      	movs	r2, #160	; 0xa0
 8004326:	0092      	lsls	r2, r2, #2
 8004328:	189a      	adds	r2, r3, r2
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	0011      	movs	r1, r2
 800432e:	0018      	movs	r0, r3
 8004330:	f000 fabf 	bl	80048b2 <USBD_StdEPReq>
    break;
 8004334:	e00c      	b.n	8004350 <USBD_LL_SetupStage+0xa8>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	23a0      	movs	r3, #160	; 0xa0
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	5cd3      	ldrb	r3, [r2, r3]
 800433e:	227f      	movs	r2, #127	; 0x7f
 8004340:	4393      	bics	r3, r2
 8004342:	b2da      	uxtb	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	0011      	movs	r1, r2
 8004348:	0018      	movs	r0, r3
 800434a:	f002 fc9e 	bl	8006c8a <USBD_LL_StallEP>
    break;
 800434e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	0018      	movs	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	b002      	add	sp, #8
 8004358:	bd80      	pop	{r7, pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	00000286 	.word	0x00000286

08004360 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	200b      	movs	r0, #11
 800436c:	183b      	adds	r3, r7, r0
 800436e:	1c0a      	adds	r2, r1, #0
 8004370:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8004372:	183b      	adds	r3, r7, r0
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d154      	bne.n	8004424 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3341      	adds	r3, #65	; 0x41
 800437e:	33ff      	adds	r3, #255	; 0xff
 8004380:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	239b      	movs	r3, #155	; 0x9b
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	58d3      	ldr	r3, [r2, r3]
 800438a:	2b03      	cmp	r3, #3
 800438c:	d139      	bne.n	8004402 <USBD_LL_DataOutStage+0xa2>
    {
      if(pep->rem_length > pep->maxpacket)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	429a      	cmp	r2, r3
 8004398:	d919      	bls.n	80043ce <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -=  pep->maxpacket;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	1ad2      	subs	r2, r2, r3
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d203      	bcs.n	80043bc <USBD_LL_DataOutStage+0x5c>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	e002      	b.n	80043c2 <USBD_LL_DataOutStage+0x62>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	001a      	movs	r2, r3
 80043c8:	f000 fffb 	bl	80053c2 <USBD_CtlContinueRx>
 80043cc:	e045      	b.n	800445a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	23a3      	movs	r3, #163	; 0xa3
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	58d3      	ldr	r3, [r2, r3]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <USBD_LL_DataOutStage+0x98>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	239d      	movs	r3, #157	; 0x9d
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d107      	bne.n	80043f8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	23a3      	movs	r3, #163	; 0xa3
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	58d3      	ldr	r3, [r2, r3]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	0010      	movs	r0, r2
 80043f6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	0018      	movs	r0, r3
 80043fc:	f000 fff4 	bl	80053e8 <USBD_CtlSendStatus>
 8004400:	e02b      	b.n	800445a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	239b      	movs	r3, #155	; 0x9b
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	58d3      	ldr	r3, [r2, r3]
 800440a:	2b05      	cmp	r3, #5
 800440c:	d125      	bne.n	800445a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	239b      	movs	r3, #155	; 0x9b
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	2100      	movs	r1, #0
 8004416:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2100      	movs	r1, #0
 800441c:	0018      	movs	r0, r3
 800441e:	f002 fc34 	bl	8006c8a <USBD_LL_StallEP>
 8004422:	e01a      	b.n	800445a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	23a3      	movs	r3, #163	; 0xa3
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	58d3      	ldr	r3, [r2, r3]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d011      	beq.n	8004456 <USBD_LL_DataOutStage+0xf6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	239d      	movs	r3, #157	; 0x9d
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL) &&
 800443a:	2b03      	cmp	r3, #3
 800443c:	d10b      	bne.n	8004456 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	23a3      	movs	r3, #163	; 0xa3
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	58d3      	ldr	r3, [r2, r3]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	220b      	movs	r2, #11
 800444a:	18ba      	adds	r2, r7, r2
 800444c:	7811      	ldrb	r1, [r2, #0]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	0010      	movs	r0, r2
 8004452:	4798      	blx	r3
 8004454:	e001      	b.n	800445a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004456:	2302      	movs	r3, #2
 8004458:	e000      	b.n	800445c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	0018      	movs	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	b006      	add	sp, #24
 8004462:	bd80      	pop	{r7, pc}

08004464 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	200b      	movs	r0, #11
 8004470:	183b      	adds	r3, r7, r0
 8004472:	1c0a      	adds	r2, r1, #0
 8004474:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8004476:	183b      	adds	r3, r7, r0
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d000      	beq.n	8004480 <USBD_LL_DataInStage+0x1c>
 800447e:	e08e      	b.n	800459e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3314      	adds	r3, #20
 8004484:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	239b      	movs	r3, #155	; 0x9b
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	58d3      	ldr	r3, [r2, r3]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d164      	bne.n	800455c <USBD_LL_DataInStage+0xf8>
    {
      if(pep->rem_length > pep->maxpacket)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	429a      	cmp	r2, r3
 800449c:	d915      	bls.n	80044ca <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	1ad2      	subs	r2, r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	0018      	movs	r0, r3
 80044b8:	f000 ff4c 	bl	8005354 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	2300      	movs	r3, #0
 80044c0:	2200      	movs	r2, #0
 80044c2:	2100      	movs	r1, #0
 80044c4:	f002 fcc8 	bl	8006e58 <USBD_LL_PrepareReceive>
 80044c8:	e059      	b.n	800457e <USBD_LL_DataInStage+0x11a>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	0019      	movs	r1, r3
 80044d4:	0010      	movs	r0, r2
 80044d6:	f7fb fe9d 	bl	8000214 <__aeabi_uidivmod>
 80044da:	1e0b      	subs	r3, r1, #0
 80044dc:	d11f      	bne.n	800451e <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d319      	bcc.n	800451e <USBD_LL_DataInStage+0xba>
           (pep->total_length < pdev->ep0_data_len))
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	68f9      	ldr	r1, [r7, #12]
 80044f0:	239c      	movs	r3, #156	; 0x9c
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d211      	bcs.n	800451e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	2100      	movs	r1, #0
 8004500:	0018      	movs	r0, r3
 8004502:	f000 ff27 	bl	8005354 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	239c      	movs	r3, #156	; 0x9c
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	2100      	movs	r1, #0
 800450e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	2300      	movs	r3, #0
 8004514:	2200      	movs	r2, #0
 8004516:	2100      	movs	r1, #0
 8004518:	f002 fc9e 	bl	8006e58 <USBD_LL_PrepareReceive>
 800451c:	e02f      	b.n	800457e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	23a3      	movs	r3, #163	; 0xa3
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	58d3      	ldr	r3, [r2, r3]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00d      	beq.n	8004548 <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	239d      	movs	r3, #157	; 0x9d
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004534:	2b03      	cmp	r3, #3
 8004536:	d107      	bne.n	8004548 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	23a3      	movs	r3, #163	; 0xa3
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	58d3      	ldr	r3, [r2, r3]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	0010      	movs	r0, r2
 8004546:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2180      	movs	r1, #128	; 0x80
 800454c:	0018      	movs	r0, r3
 800454e:	f002 fb9c 	bl	8006c8a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	0018      	movs	r0, r3
 8004556:	f000 ff5b 	bl	8005410 <USBD_CtlReceiveStatus>
 800455a:	e010      	b.n	800457e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	239b      	movs	r3, #155	; 0x9b
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	58d3      	ldr	r3, [r2, r3]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d005      	beq.n	8004574 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	239b      	movs	r3, #155	; 0x9b
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	0018      	movs	r0, r3
 800457a:	f002 fb86 	bl	8006c8a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	239e      	movs	r3, #158	; 0x9e
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	5cd3      	ldrb	r3, [r2, r3]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d124      	bne.n	80045d4 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	0018      	movs	r0, r3
 800458e:	f7ff fe43 	bl	8004218 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	239e      	movs	r3, #158	; 0x9e
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	2100      	movs	r1, #0
 800459a:	54d1      	strb	r1, [r2, r3]
 800459c:	e01a      	b.n	80045d4 <USBD_LL_DataInStage+0x170>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	23a3      	movs	r3, #163	; 0xa3
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	58d3      	ldr	r3, [r2, r3]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d011      	beq.n	80045d0 <USBD_LL_DataInStage+0x16c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	239d      	movs	r3, #157	; 0x9d
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL) &&
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d10b      	bne.n	80045d0 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	23a3      	movs	r3, #163	; 0xa3
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	58d3      	ldr	r3, [r2, r3]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	220b      	movs	r2, #11
 80045c4:	18ba      	adds	r2, r7, r2
 80045c6:	7811      	ldrb	r1, [r2, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	0010      	movs	r0, r2
 80045cc:	4798      	blx	r3
 80045ce:	e001      	b.n	80045d4 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80045d0:	2302      	movs	r3, #2
 80045d2:	e000      	b.n	80045d6 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	0018      	movs	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	b006      	add	sp, #24
 80045dc:	bd80      	pop	{r7, pc}

080045de <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	2340      	movs	r3, #64	; 0x40
 80045ea:	2200      	movs	r2, #0
 80045ec:	2100      	movs	r1, #0
 80045ee:	f002 fae9 	bl	8006bc4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	23a2      	movs	r3, #162	; 0xa2
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	2101      	movs	r1, #1
 80045fa:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	23a8      	movs	r3, #168	; 0xa8
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	2140      	movs	r1, #64	; 0x40
 8004604:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	2340      	movs	r3, #64	; 0x40
 800460a:	2200      	movs	r2, #0
 800460c:	2180      	movs	r1, #128	; 0x80
 800460e:	f002 fad9 	bl	8006bc4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2240      	movs	r2, #64	; 0x40
 800461c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	239d      	movs	r3, #157	; 0x9d
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	2101      	movs	r1, #1
 8004626:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	239b      	movs	r3, #155	; 0x9b
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	2100      	movs	r1, #0
 8004630:	50d1      	str	r1, [r2, r3]
  pdev->dev_config= 0U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	239f      	movs	r3, #159	; 0x9f
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	2100      	movs	r1, #0
 8004640:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	23a4      	movs	r3, #164	; 0xa4
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	58d3      	ldr	r3, [r2, r3]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	23a3      	movs	r3, #163	; 0xa3
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	58d3      	ldr	r3, [r2, r3]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	b2d9      	uxtb	r1, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	0018      	movs	r0, r3
 8004662:	4790      	blx	r2
  }

  return USBD_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	0018      	movs	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	b002      	add	sp, #8
 800466c:	bd80      	pop	{r7, pc}

0800466e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	000a      	movs	r2, r1
 8004678:	1cfb      	adds	r3, r7, #3
 800467a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	1cfa      	adds	r2, r7, #3
 8004680:	7812      	ldrb	r2, [r2, #0]
 8004682:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	b002      	add	sp, #8
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	239d      	movs	r3, #157	; 0x9d
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	5cd1      	ldrb	r1, [r2, r3]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a06      	ldr	r2, [pc, #24]	; (80046bc <USBD_LL_Suspend+0x2c>)
 80046a4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	239d      	movs	r3, #157	; 0x9d
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	2104      	movs	r1, #4
 80046ae:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b002      	add	sp, #8
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	00000275 	.word	0x00000275

080046c0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a05      	ldr	r2, [pc, #20]	; (80046e0 <USBD_LL_Resume+0x20>)
 80046cc:	5c99      	ldrb	r1, [r3, r2]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	239d      	movs	r3, #157	; 0x9d
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	0018      	movs	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	b002      	add	sp, #8
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	00000275 	.word	0x00000275

080046e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	239d      	movs	r3, #157	; 0x9d
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	5cd3      	ldrb	r3, [r2, r3]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d10e      	bne.n	8004716 <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	23a3      	movs	r3, #163	; 0xa3
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	58d3      	ldr	r3, [r2, r3]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d007      	beq.n	8004716 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	23a3      	movs	r3, #163	; 0xa3
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	58d3      	ldr	r3, [r2, r3]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	0010      	movs	r0, r2
 8004714:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	0018      	movs	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	b002      	add	sp, #8
 800471e:	bd80      	pop	{r7, pc}

08004720 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800472a:	230f      	movs	r3, #15
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	2200      	movs	r2, #0
 8004730:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	001a      	movs	r2, r3
 8004738:	2360      	movs	r3, #96	; 0x60
 800473a:	4013      	ands	r3, r2
 800473c:	2b20      	cmp	r3, #32
 800473e:	d004      	beq.n	800474a <USBD_StdDevReq+0x2a>
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d002      	beq.n	800474a <USBD_StdDevReq+0x2a>
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <USBD_StdDevReq+0x3e>
 8004748:	e04b      	b.n	80047e2 <USBD_StdDevReq+0xc2>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	23a3      	movs	r3, #163	; 0xa3
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	58d3      	ldr	r3, [r2, r3]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	6839      	ldr	r1, [r7, #0]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	0010      	movs	r0, r2
 800475a:	4798      	blx	r3
    break;
 800475c:	e048      	b.n	80047f0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	785b      	ldrb	r3, [r3, #1]
 8004762:	2b09      	cmp	r3, #9
 8004764:	d835      	bhi.n	80047d2 <USBD_StdDevReq+0xb2>
 8004766:	009a      	lsls	r2, r3, #2
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <USBD_StdDevReq+0xe0>)
 800476a:	18d3      	adds	r3, r2, r3
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	469f      	mov	pc, r3
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	0011      	movs	r1, r2
 8004776:	0018      	movs	r0, r3
 8004778:	f000 fa58 	bl	8004c2c <USBD_GetDescriptor>
      break;
 800477c:	e030      	b.n	80047e0 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	0011      	movs	r1, r2
 8004784:	0018      	movs	r0, r3
 8004786:	f000 fb63 	bl	8004e50 <USBD_SetAddress>
      break;
 800478a:	e029      	b.n	80047e0 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	0011      	movs	r1, r2
 8004792:	0018      	movs	r0, r3
 8004794:	f000 fbb0 	bl	8004ef8 <USBD_SetConfig>
      break;
 8004798:	e022      	b.n	80047e0 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	0011      	movs	r1, r2
 80047a0:	0018      	movs	r0, r3
 80047a2:	f000 fc4d 	bl	8005040 <USBD_GetConfig>
      break;
 80047a6:	e01b      	b.n	80047e0 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	0011      	movs	r1, r2
 80047ae:	0018      	movs	r0, r3
 80047b0:	f000 fc80 	bl	80050b4 <USBD_GetStatus>
      break;
 80047b4:	e014      	b.n	80047e0 <USBD_StdDevReq+0xc0>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	0011      	movs	r1, r2
 80047bc:	0018      	movs	r0, r3
 80047be:	f000 fcb3 	bl	8005128 <USBD_SetFeature>
      break;
 80047c2:	e00d      	b.n	80047e0 <USBD_StdDevReq+0xc0>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	0011      	movs	r1, r2
 80047ca:	0018      	movs	r0, r3
 80047cc:	f000 fcc2 	bl	8005154 <USBD_ClrFeature>
      break;
 80047d0:	e006      	b.n	80047e0 <USBD_StdDevReq+0xc0>

    default:
      USBD_CtlError(pdev, req);
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	0011      	movs	r1, r2
 80047d8:	0018      	movs	r0, r3
 80047da:	f000 fd1c 	bl	8005216 <USBD_CtlError>
      break;
 80047de:	46c0      	nop			; (mov r8, r8)
    }
    break;
 80047e0:	e006      	b.n	80047f0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	0011      	movs	r1, r2
 80047e8:	0018      	movs	r0, r3
 80047ea:	f000 fd14 	bl	8005216 <USBD_CtlError>
    break;
 80047ee:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80047f0:	230f      	movs	r3, #15
 80047f2:	18fb      	adds	r3, r7, r3
 80047f4:	781b      	ldrb	r3, [r3, #0]
}
 80047f6:	0018      	movs	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b004      	add	sp, #16
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	08007494 	.word	0x08007494

08004804 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800480e:	230f      	movs	r3, #15
 8004810:	18fb      	adds	r3, r7, r3
 8004812:	2200      	movs	r2, #0
 8004814:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	001a      	movs	r2, r3
 800481c:	2360      	movs	r3, #96	; 0x60
 800481e:	4013      	ands	r3, r2
 8004820:	2b20      	cmp	r3, #32
 8004822:	d003      	beq.n	800482c <USBD_StdItfReq+0x28>
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	d001      	beq.n	800482c <USBD_StdItfReq+0x28>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d136      	bne.n	800489a <USBD_StdItfReq+0x96>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	239d      	movs	r3, #157	; 0x9d
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	5cd3      	ldrb	r3, [r2, r3]
 8004834:	3b01      	subs	r3, #1
 8004836:	2b02      	cmp	r3, #2
 8004838:	d826      	bhi.n	8004888 <USBD_StdItfReq+0x84>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	889b      	ldrh	r3, [r3, #4]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d81a      	bhi.n	800487a <USBD_StdItfReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	23a3      	movs	r3, #163	; 0xa3
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	58d3      	ldr	r3, [r2, r3]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	220f      	movs	r2, #15
 8004850:	18bc      	adds	r4, r7, r2
 8004852:	6839      	ldr	r1, [r7, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	0010      	movs	r0, r2
 8004858:	4798      	blx	r3
 800485a:	0003      	movs	r3, r0
 800485c:	7023      	strb	r3, [r4, #0]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	88db      	ldrh	r3, [r3, #6]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d117      	bne.n	8004896 <USBD_StdItfReq+0x92>
 8004866:	230f      	movs	r3, #15
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d112      	bne.n	8004896 <USBD_StdItfReq+0x92>
        {
          USBD_CtlSendStatus(pdev);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	0018      	movs	r0, r3
 8004874:	f000 fdb8 	bl	80053e8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004878:	e00d      	b.n	8004896 <USBD_StdItfReq+0x92>
        USBD_CtlError(pdev, req);
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	0011      	movs	r1, r2
 8004880:	0018      	movs	r0, r3
 8004882:	f000 fcc8 	bl	8005216 <USBD_CtlError>
      break;
 8004886:	e006      	b.n	8004896 <USBD_StdItfReq+0x92>

    default:
      USBD_CtlError(pdev, req);
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	0011      	movs	r1, r2
 800488e:	0018      	movs	r0, r3
 8004890:	f000 fcc1 	bl	8005216 <USBD_CtlError>
      break;
 8004894:	e000      	b.n	8004898 <USBD_StdItfReq+0x94>
      break;
 8004896:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8004898:	e006      	b.n	80048a8 <USBD_StdItfReq+0xa4>

  default:
    USBD_CtlError(pdev, req);
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	0011      	movs	r1, r2
 80048a0:	0018      	movs	r0, r3
 80048a2:	f000 fcb8 	bl	8005216 <USBD_CtlError>
    break;
 80048a6:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	0018      	movs	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	b005      	add	sp, #20
 80048b0:	bd90      	pop	{r4, r7, pc}

080048b2 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80048b2:	b5b0      	push	{r4, r5, r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80048bc:	230f      	movs	r3, #15
 80048be:	18fb      	adds	r3, r7, r3
 80048c0:	2200      	movs	r2, #0
 80048c2:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	889a      	ldrh	r2, [r3, #4]
 80048c8:	230e      	movs	r3, #14
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	001a      	movs	r2, r3
 80048d4:	2360      	movs	r3, #96	; 0x60
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d004      	beq.n	80048e6 <USBD_StdEPReq+0x34>
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	d002      	beq.n	80048e6 <USBD_StdEPReq+0x34>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <USBD_StdEPReq+0x48>
 80048e4:	e193      	b.n	8004c0e <USBD_StdEPReq+0x35c>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	23a3      	movs	r3, #163	; 0xa3
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	58d3      	ldr	r3, [r2, r3]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	6839      	ldr	r1, [r7, #0]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	0010      	movs	r0, r2
 80048f6:	4798      	blx	r3
    break;
 80048f8:	e190      	b.n	8004c1c <USBD_StdEPReq+0x36a>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	001a      	movs	r2, r3
 8004900:	2360      	movs	r3, #96	; 0x60
 8004902:	4013      	ands	r3, r2
 8004904:	2b20      	cmp	r3, #32
 8004906:	d10f      	bne.n	8004928 <USBD_StdEPReq+0x76>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	23a3      	movs	r3, #163	; 0xa3
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	58d3      	ldr	r3, [r2, r3]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	250f      	movs	r5, #15
 8004914:	197c      	adds	r4, r7, r5
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	0010      	movs	r0, r2
 800491c:	4798      	blx	r3
 800491e:	0003      	movs	r3, r0
 8004920:	7023      	strb	r3, [r4, #0]

      return ret;
 8004922:	197b      	adds	r3, r7, r5
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	e17c      	b.n	8004c22 <USBD_StdEPReq+0x370>
    }

    switch (req->bRequest)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d054      	beq.n	80049da <USBD_StdEPReq+0x128>
 8004930:	2b03      	cmp	r3, #3
 8004932:	d003      	beq.n	800493c <USBD_StdEPReq+0x8a>
 8004934:	2b00      	cmp	r3, #0
 8004936:	d100      	bne.n	800493a <USBD_StdEPReq+0x88>
 8004938:	e097      	b.n	8004a6a <USBD_StdEPReq+0x1b8>
 800493a:	e160      	b.n	8004bfe <USBD_StdEPReq+0x34c>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	239d      	movs	r3, #157	; 0x9d
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	5cd3      	ldrb	r3, [r2, r3]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d002      	beq.n	800494e <USBD_StdEPReq+0x9c>
 8004948:	2b03      	cmp	r3, #3
 800494a:	d01f      	beq.n	800498c <USBD_StdEPReq+0xda>
 800494c:	e03d      	b.n	80049ca <USBD_StdEPReq+0x118>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800494e:	230e      	movs	r3, #14
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d012      	beq.n	800497e <USBD_StdEPReq+0xcc>
 8004958:	230e      	movs	r3, #14
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b80      	cmp	r3, #128	; 0x80
 8004960:	d00d      	beq.n	800497e <USBD_StdEPReq+0xcc>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004962:	230e      	movs	r3, #14
 8004964:	18fb      	adds	r3, r7, r3
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	0011      	movs	r1, r2
 800496c:	0018      	movs	r0, r3
 800496e:	f002 f98c 	bl	8006c8a <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2180      	movs	r1, #128	; 0x80
 8004976:	0018      	movs	r0, r3
 8004978:	f002 f987 	bl	8006c8a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800497c:	e02c      	b.n	80049d8 <USBD_StdEPReq+0x126>
          USBD_CtlError(pdev, req);
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	0011      	movs	r1, r2
 8004984:	0018      	movs	r0, r3
 8004986:	f000 fc46 	bl	8005216 <USBD_CtlError>
        break;
 800498a:	e025      	b.n	80049d8 <USBD_StdEPReq+0x126>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	885b      	ldrh	r3, [r3, #2]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d115      	bne.n	80049c0 <USBD_StdEPReq+0x10e>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004994:	230e      	movs	r3, #14
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d010      	beq.n	80049c0 <USBD_StdEPReq+0x10e>
 800499e:	230e      	movs	r3, #14
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b80      	cmp	r3, #128	; 0x80
 80049a6:	d00b      	beq.n	80049c0 <USBD_StdEPReq+0x10e>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	88db      	ldrh	r3, [r3, #6]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d107      	bne.n	80049c0 <USBD_StdEPReq+0x10e>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80049b0:	230e      	movs	r3, #14
 80049b2:	18fb      	adds	r3, r7, r3
 80049b4:	781a      	ldrb	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	0011      	movs	r1, r2
 80049ba:	0018      	movs	r0, r3
 80049bc:	f002 f965 	bl	8006c8a <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	0018      	movs	r0, r3
 80049c4:	f000 fd10 	bl	80053e8 <USBD_CtlSendStatus>

        break;
 80049c8:	e006      	b.n	80049d8 <USBD_StdEPReq+0x126>

      default:
        USBD_CtlError(pdev, req);
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	0011      	movs	r1, r2
 80049d0:	0018      	movs	r0, r3
 80049d2:	f000 fc20 	bl	8005216 <USBD_CtlError>
        break;
 80049d6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80049d8:	e118      	b.n	8004c0c <USBD_StdEPReq+0x35a>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	239d      	movs	r3, #157	; 0x9d
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	5cd3      	ldrb	r3, [r2, r3]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d002      	beq.n	80049ec <USBD_StdEPReq+0x13a>
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d01f      	beq.n	8004a2a <USBD_StdEPReq+0x178>
 80049ea:	e035      	b.n	8004a58 <USBD_StdEPReq+0x1a6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80049ec:	230e      	movs	r3, #14
 80049ee:	18fb      	adds	r3, r7, r3
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d012      	beq.n	8004a1c <USBD_StdEPReq+0x16a>
 80049f6:	230e      	movs	r3, #14
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b80      	cmp	r3, #128	; 0x80
 80049fe:	d00d      	beq.n	8004a1c <USBD_StdEPReq+0x16a>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004a00:	230e      	movs	r3, #14
 8004a02:	18fb      	adds	r3, r7, r3
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	0011      	movs	r1, r2
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	f002 f93d 	bl	8006c8a <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2180      	movs	r1, #128	; 0x80
 8004a14:	0018      	movs	r0, r3
 8004a16:	f002 f938 	bl	8006c8a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004a1a:	e025      	b.n	8004a68 <USBD_StdEPReq+0x1b6>
          USBD_CtlError(pdev, req);
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	0011      	movs	r1, r2
 8004a22:	0018      	movs	r0, r3
 8004a24:	f000 fbf7 	bl	8005216 <USBD_CtlError>
        break;
 8004a28:	e01e      	b.n	8004a68 <USBD_StdEPReq+0x1b6>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	885b      	ldrh	r3, [r3, #2]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d119      	bne.n	8004a66 <USBD_StdEPReq+0x1b4>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004a32:	230e      	movs	r3, #14
 8004a34:	18fb      	adds	r3, r7, r3
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	227f      	movs	r2, #127	; 0x7f
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d007      	beq.n	8004a4e <USBD_StdEPReq+0x19c>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8004a3e:	230e      	movs	r3, #14
 8004a40:	18fb      	adds	r3, r7, r3
 8004a42:	781a      	ldrb	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	0011      	movs	r1, r2
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f002 f94a 	bl	8006ce2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f000 fcc9 	bl	80053e8 <USBD_CtlSendStatus>
        }
        break;
 8004a56:	e006      	b.n	8004a66 <USBD_StdEPReq+0x1b4>

      default:
        USBD_CtlError(pdev, req);
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	0011      	movs	r1, r2
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f000 fbd9 	bl	8005216 <USBD_CtlError>
        break;
 8004a64:	e000      	b.n	8004a68 <USBD_StdEPReq+0x1b6>
        break;
 8004a66:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8004a68:	e0d0      	b.n	8004c0c <USBD_StdEPReq+0x35a>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	239d      	movs	r3, #157	; 0x9d
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	5cd3      	ldrb	r3, [r2, r3]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d002      	beq.n	8004a7c <USBD_StdEPReq+0x1ca>
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d03d      	beq.n	8004af6 <USBD_StdEPReq+0x244>
 8004a7a:	e0b8      	b.n	8004bee <USBD_StdEPReq+0x33c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a7c:	230e      	movs	r3, #14
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00b      	beq.n	8004a9e <USBD_StdEPReq+0x1ec>
 8004a86:	230e      	movs	r3, #14
 8004a88:	18fb      	adds	r3, r7, r3
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b80      	cmp	r3, #128	; 0x80
 8004a8e:	d006      	beq.n	8004a9e <USBD_StdEPReq+0x1ec>
        {
          USBD_CtlError(pdev, req);
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	0011      	movs	r1, r2
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 fbbd 	bl	8005216 <USBD_CtlError>
          break;
 8004a9c:	e0ae      	b.n	8004bfc <USBD_StdEPReq+0x34a>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004a9e:	230e      	movs	r3, #14
 8004aa0:	18fb      	adds	r3, r7, r3
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	b25b      	sxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da0d      	bge.n	8004ac6 <USBD_StdEPReq+0x214>
 8004aaa:	230e      	movs	r3, #14
 8004aac:	18fb      	adds	r3, r7, r3
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	227f      	movs	r2, #127	; 0x7f
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	0013      	movs	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	189b      	adds	r3, r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	3310      	adds	r3, #16
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	18d3      	adds	r3, r2, r3
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	e00c      	b.n	8004ae0 <USBD_StdEPReq+0x22e>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004ac6:	230e      	movs	r3, #14
 8004ac8:	18fb      	adds	r3, r7, r3
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	227f      	movs	r2, #127	; 0x7f
 8004ace:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004ad0:	0013      	movs	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	189b      	adds	r3, r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	3341      	adds	r3, #65	; 0x41
 8004ada:	33ff      	adds	r3, #255	; 0xff
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	18d3      	adds	r3, r2, r3
 8004ae0:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004ae8:	68b9      	ldr	r1, [r7, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	0018      	movs	r0, r3
 8004af0:	f000 fc10 	bl	8005314 <USBD_CtlSendData>
          break;
 8004af4:	e082      	b.n	8004bfc <USBD_StdEPReq+0x34a>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8004af6:	230e      	movs	r3, #14
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	b25b      	sxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	da15      	bge.n	8004b2e <USBD_StdEPReq+0x27c>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004b02:	230e      	movs	r3, #14
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	220f      	movs	r2, #15
 8004b0a:	401a      	ands	r2, r3
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	0013      	movs	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	189b      	adds	r3, r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	18cb      	adds	r3, r1, r3
 8004b18:	3318      	adds	r3, #24
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d11e      	bne.n	8004b5e <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0011      	movs	r1, r2
 8004b26:	0018      	movs	r0, r3
 8004b28:	f000 fb75 	bl	8005216 <USBD_CtlError>
            break;
 8004b2c:	e066      	b.n	8004bfc <USBD_StdEPReq+0x34a>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004b2e:	230e      	movs	r3, #14
 8004b30:	18fb      	adds	r3, r7, r3
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	220f      	movs	r2, #15
 8004b36:	401a      	ands	r2, r3
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	23a2      	movs	r3, #162	; 0xa2
 8004b3c:	0059      	lsls	r1, r3, #1
 8004b3e:	0013      	movs	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	189b      	adds	r3, r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	18c3      	adds	r3, r0, r3
 8004b48:	185b      	adds	r3, r3, r1
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	0011      	movs	r1, r2
 8004b56:	0018      	movs	r0, r3
 8004b58:	f000 fb5d 	bl	8005216 <USBD_CtlError>
            break;
 8004b5c:	e04e      	b.n	8004bfc <USBD_StdEPReq+0x34a>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004b5e:	230e      	movs	r3, #14
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	b25b      	sxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	da0d      	bge.n	8004b86 <USBD_StdEPReq+0x2d4>
 8004b6a:	230e      	movs	r3, #14
 8004b6c:	18fb      	adds	r3, r7, r3
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	227f      	movs	r2, #127	; 0x7f
 8004b72:	401a      	ands	r2, r3
 8004b74:	0013      	movs	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	189b      	adds	r3, r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	3310      	adds	r3, #16
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	18d3      	adds	r3, r2, r3
 8004b82:	3304      	adds	r3, #4
 8004b84:	e00c      	b.n	8004ba0 <USBD_StdEPReq+0x2ee>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004b86:	230e      	movs	r3, #14
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	227f      	movs	r2, #127	; 0x7f
 8004b8e:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004b90:	0013      	movs	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	189b      	adds	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	3341      	adds	r3, #65	; 0x41
 8004b9a:	33ff      	adds	r3, #255	; 0xff
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	18d3      	adds	r3, r2, r3
 8004ba0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004ba2:	230e      	movs	r3, #14
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d004      	beq.n	8004bb6 <USBD_StdEPReq+0x304>
 8004bac:	230e      	movs	r3, #14
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b80      	cmp	r3, #128	; 0x80
 8004bb4:	d103      	bne.n	8004bbe <USBD_StdEPReq+0x30c>
          {
            pep->status = 0x0000U;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	e010      	b.n	8004be0 <USBD_StdEPReq+0x32e>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004bbe:	230e      	movs	r3, #14
 8004bc0:	18fb      	adds	r3, r7, r3
 8004bc2:	781a      	ldrb	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	0011      	movs	r1, r2
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f002 f8b6 	bl	8006d3a <USBD_LL_IsStallEP>
 8004bce:	1e03      	subs	r3, r0, #0
 8004bd0:	d003      	beq.n	8004bda <USBD_StdEPReq+0x328>
          {
            pep->status = 0x0001U;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e002      	b.n	8004be0 <USBD_StdEPReq+0x32e>
          }
          else
          {
            pep->status = 0x0000U;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2202      	movs	r2, #2
 8004be6:	0018      	movs	r0, r3
 8004be8:	f000 fb94 	bl	8005314 <USBD_CtlSendData>
          break;
 8004bec:	e006      	b.n	8004bfc <USBD_StdEPReq+0x34a>

      default:
        USBD_CtlError(pdev, req);
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	0011      	movs	r1, r2
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f000 fb0e 	bl	8005216 <USBD_CtlError>
        break;
 8004bfa:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8004bfc:	e006      	b.n	8004c0c <USBD_StdEPReq+0x35a>

    default:
      USBD_CtlError(pdev, req);
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	0011      	movs	r1, r2
 8004c04:	0018      	movs	r0, r3
 8004c06:	f000 fb06 	bl	8005216 <USBD_CtlError>
      break;
 8004c0a:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8004c0c:	e006      	b.n	8004c1c <USBD_StdEPReq+0x36a>

  default:
    USBD_CtlError(pdev, req);
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	0011      	movs	r1, r2
 8004c14:	0018      	movs	r0, r3
 8004c16:	f000 fafe 	bl	8005216 <USBD_CtlError>
    break;
 8004c1a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8004c1c:	230f      	movs	r3, #15
 8004c1e:	18fb      	adds	r3, r7, r3
 8004c20:	781b      	ldrb	r3, [r3, #0]
}
 8004c22:	0018      	movs	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b004      	add	sp, #16
 8004c28:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004c2c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	885b      	ldrh	r3, [r3, #2]
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b07      	cmp	r3, #7
 8004c40:	d900      	bls.n	8004c44 <USBD_GetDescriptor+0x18>
 8004c42:	e0ce      	b.n	8004de2 <USBD_GetDescriptor+0x1b6>
 8004c44:	009a      	lsls	r2, r3, #2
 8004c46:	4b80      	ldr	r3, [pc, #512]	; (8004e48 <USBD_GetDescriptor+0x21c>)
 8004c48:	18d3      	adds	r3, r2, r3
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	23a2      	movs	r3, #162	; 0xa2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	58d3      	ldr	r3, [r2, r3]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	7c12      	ldrb	r2, [r2, #16]
 8004c5c:	210a      	movs	r1, #10
 8004c5e:	1879      	adds	r1, r7, r1
 8004c60:	0010      	movs	r0, r2
 8004c62:	4798      	blx	r3
 8004c64:	0003      	movs	r3, r0
 8004c66:	60fb      	str	r3, [r7, #12]
    break;
 8004c68:	e0c2      	b.n	8004df0 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	7c1b      	ldrb	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10f      	bne.n	8004c92 <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	23a3      	movs	r3, #163	; 0xa3
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	58d3      	ldr	r3, [r2, r3]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	220a      	movs	r2, #10
 8004c7e:	18ba      	adds	r2, r7, r2
 8004c80:	0010      	movs	r0, r2
 8004c82:	4798      	blx	r3
 8004c84:	0003      	movs	r3, r0
 8004c86:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004c90:	e0ae      	b.n	8004df0 <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	23a3      	movs	r3, #163	; 0xa3
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	58d3      	ldr	r3, [r2, r3]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	220a      	movs	r2, #10
 8004c9e:	18ba      	adds	r2, r7, r2
 8004ca0:	0010      	movs	r0, r2
 8004ca2:	4798      	blx	r3
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3301      	adds	r3, #1
 8004cac:	2202      	movs	r2, #2
 8004cae:	701a      	strb	r2, [r3, #0]
    break;
 8004cb0:	e09e      	b.n	8004df0 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	885b      	ldrh	r3, [r3, #2]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b05      	cmp	r3, #5
 8004cba:	d858      	bhi.n	8004d6e <USBD_GetDescriptor+0x142>
 8004cbc:	009a      	lsls	r2, r3, #2
 8004cbe:	4b63      	ldr	r3, [pc, #396]	; (8004e4c <USBD_GetDescriptor+0x220>)
 8004cc0:	18d3      	adds	r3, r2, r3
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	23a2      	movs	r3, #162	; 0xa2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	58d3      	ldr	r3, [r2, r3]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	7c12      	ldrb	r2, [r2, #16]
 8004cd4:	210a      	movs	r1, #10
 8004cd6:	1879      	adds	r1, r7, r1
 8004cd8:	0010      	movs	r0, r2
 8004cda:	4798      	blx	r3
 8004cdc:	0003      	movs	r3, r0
 8004cde:	60fb      	str	r3, [r7, #12]
      break;
 8004ce0:	e04c      	b.n	8004d7c <USBD_GetDescriptor+0x150>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	23a2      	movs	r3, #162	; 0xa2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	58d3      	ldr	r3, [r2, r3]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	7c12      	ldrb	r2, [r2, #16]
 8004cf0:	210a      	movs	r1, #10
 8004cf2:	1879      	adds	r1, r7, r1
 8004cf4:	0010      	movs	r0, r2
 8004cf6:	4798      	blx	r3
 8004cf8:	0003      	movs	r3, r0
 8004cfa:	60fb      	str	r3, [r7, #12]
      break;
 8004cfc:	e03e      	b.n	8004d7c <USBD_GetDescriptor+0x150>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	23a2      	movs	r3, #162	; 0xa2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	58d3      	ldr	r3, [r2, r3]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	7c12      	ldrb	r2, [r2, #16]
 8004d0c:	210a      	movs	r1, #10
 8004d0e:	1879      	adds	r1, r7, r1
 8004d10:	0010      	movs	r0, r2
 8004d12:	4798      	blx	r3
 8004d14:	0003      	movs	r3, r0
 8004d16:	60fb      	str	r3, [r7, #12]
      break;
 8004d18:	e030      	b.n	8004d7c <USBD_GetDescriptor+0x150>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	23a2      	movs	r3, #162	; 0xa2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	58d3      	ldr	r3, [r2, r3]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	7c12      	ldrb	r2, [r2, #16]
 8004d28:	210a      	movs	r1, #10
 8004d2a:	1879      	adds	r1, r7, r1
 8004d2c:	0010      	movs	r0, r2
 8004d2e:	4798      	blx	r3
 8004d30:	0003      	movs	r3, r0
 8004d32:	60fb      	str	r3, [r7, #12]
      break;
 8004d34:	e022      	b.n	8004d7c <USBD_GetDescriptor+0x150>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	23a2      	movs	r3, #162	; 0xa2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	58d3      	ldr	r3, [r2, r3]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	7c12      	ldrb	r2, [r2, #16]
 8004d44:	210a      	movs	r1, #10
 8004d46:	1879      	adds	r1, r7, r1
 8004d48:	0010      	movs	r0, r2
 8004d4a:	4798      	blx	r3
 8004d4c:	0003      	movs	r3, r0
 8004d4e:	60fb      	str	r3, [r7, #12]
      break;
 8004d50:	e014      	b.n	8004d7c <USBD_GetDescriptor+0x150>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	23a2      	movs	r3, #162	; 0xa2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	58d3      	ldr	r3, [r2, r3]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	7c12      	ldrb	r2, [r2, #16]
 8004d60:	210a      	movs	r1, #10
 8004d62:	1879      	adds	r1, r7, r1
 8004d64:	0010      	movs	r0, r2
 8004d66:	4798      	blx	r3
 8004d68:	0003      	movs	r3, r0
 8004d6a:	60fb      	str	r3, [r7, #12]
      break;
 8004d6c:	e006      	b.n	8004d7c <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	0011      	movs	r1, r2
 8004d74:	0018      	movs	r0, r3
 8004d76:	f000 fa4e 	bl	8005216 <USBD_CtlError>
      return;
 8004d7a:	e061      	b.n	8004e40 <USBD_GetDescriptor+0x214>
#endif
    }
    break;
 8004d7c:	e038      	b.n	8004df0 <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	7c1b      	ldrb	r3, [r3, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10b      	bne.n	8004d9e <USBD_GetDescriptor+0x172>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	23a3      	movs	r3, #163	; 0xa3
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	58d3      	ldr	r3, [r2, r3]
 8004d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d90:	220a      	movs	r2, #10
 8004d92:	18ba      	adds	r2, r7, r2
 8004d94:	0010      	movs	r0, r2
 8004d96:	4798      	blx	r3
 8004d98:	0003      	movs	r3, r0
 8004d9a:	60fb      	str	r3, [r7, #12]
      break;
 8004d9c:	e028      	b.n	8004df0 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	0011      	movs	r1, r2
 8004da4:	0018      	movs	r0, r3
 8004da6:	f000 fa36 	bl	8005216 <USBD_CtlError>
      return;
 8004daa:	e049      	b.n	8004e40 <USBD_GetDescriptor+0x214>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	7c1b      	ldrb	r3, [r3, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10f      	bne.n	8004dd4 <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	23a3      	movs	r3, #163	; 0xa3
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	58d3      	ldr	r3, [r2, r3]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	220a      	movs	r2, #10
 8004dc0:	18ba      	adds	r2, r7, r2
 8004dc2:	0010      	movs	r0, r2
 8004dc4:	4798      	blx	r3
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	2207      	movs	r2, #7
 8004dd0:	701a      	strb	r2, [r3, #0]
      break;
 8004dd2:	e00d      	b.n	8004df0 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	0011      	movs	r1, r2
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f000 fa1b 	bl	8005216 <USBD_CtlError>
      return;
 8004de0:	e02e      	b.n	8004e40 <USBD_GetDescriptor+0x214>
    }

  default:
     USBD_CtlError(pdev , req);
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	0011      	movs	r1, r2
 8004de8:	0018      	movs	r0, r3
 8004dea:	f000 fa14 	bl	8005216 <USBD_CtlError>
    return;
 8004dee:	e027      	b.n	8004e40 <USBD_GetDescriptor+0x214>
  }

  if((len != 0U) && (req->wLength != 0U))
 8004df0:	230a      	movs	r3, #10
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01a      	beq.n	8004e30 <USBD_GetDescriptor+0x204>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	88db      	ldrh	r3, [r3, #6]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d016      	beq.n	8004e30 <USBD_GetDescriptor+0x204>
  {

    len = MIN(len, req->wLength);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	88da      	ldrh	r2, [r3, #6]
 8004e06:	230a      	movs	r3, #10
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	1c18      	adds	r0, r3, #0
 8004e0e:	1c11      	adds	r1, r2, #0
 8004e10:	b28a      	uxth	r2, r1
 8004e12:	b283      	uxth	r3, r0
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d900      	bls.n	8004e1a <USBD_GetDescriptor+0x1ee>
 8004e18:	1c01      	adds	r1, r0, #0
 8004e1a:	b28a      	uxth	r2, r1
 8004e1c:	210a      	movs	r1, #10
 8004e1e:	187b      	adds	r3, r7, r1
 8004e20:	801a      	strh	r2, [r3, #0]

    USBD_CtlSendData (pdev, pbuf, len);
 8004e22:	187b      	adds	r3, r7, r1
 8004e24:	881a      	ldrh	r2, [r3, #0]
 8004e26:	68f9      	ldr	r1, [r7, #12]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f000 fa72 	bl	8005314 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	88db      	ldrh	r3, [r3, #6]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d103      	bne.n	8004e40 <USBD_GetDescriptor+0x214>
  {
   USBD_CtlSendStatus(pdev);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f000 fad4 	bl	80053e8 <USBD_CtlSendStatus>
  }
}
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b004      	add	sp, #16
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	080074bc 	.word	0x080074bc
 8004e4c:	080074dc 	.word	0x080074dc

08004e50 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004e50:	b590      	push	{r4, r7, lr}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	889b      	ldrh	r3, [r3, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d13d      	bne.n	8004ede <USBD_SetAddress+0x8e>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	88db      	ldrh	r3, [r3, #6]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d139      	bne.n	8004ede <USBD_SetAddress+0x8e>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	885b      	ldrh	r3, [r3, #2]
 8004e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e70:	d835      	bhi.n	8004ede <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	885b      	ldrh	r3, [r3, #2]
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	230f      	movs	r3, #15
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	217f      	movs	r1, #127	; 0x7f
 8004e7e:	400a      	ands	r2, r1
 8004e80:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	239d      	movs	r3, #157	; 0x9d
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	5cd3      	ldrb	r3, [r2, r3]
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d106      	bne.n	8004e9c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev , req);
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	0011      	movs	r1, r2
 8004e94:	0018      	movs	r0, r3
 8004e96:	f000 f9be 	bl	8005216 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e9a:	e026      	b.n	8004eea <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	240f      	movs	r4, #15
 8004ea0:	193a      	adds	r2, r7, r4
 8004ea2:	4914      	ldr	r1, [pc, #80]	; (8004ef4 <USBD_SetAddress+0xa4>)
 8004ea4:	7812      	ldrb	r2, [r2, #0]
 8004ea6:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004ea8:	193b      	adds	r3, r7, r4
 8004eaa:	781a      	ldrb	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	0011      	movs	r1, r2
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f001 ff6d 	bl	8006d90 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f000 fa95 	bl	80053e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004ebe:	193b      	adds	r3, r7, r4
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	239d      	movs	r3, #157	; 0x9d
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	2102      	movs	r1, #2
 8004ece:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ed0:	e00b      	b.n	8004eea <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	239d      	movs	r3, #157	; 0x9d
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	2101      	movs	r1, #1
 8004eda:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004edc:	e005      	b.n	8004eea <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	0011      	movs	r1, r2
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f000 f996 	bl	8005216 <USBD_CtlError>
  }
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b005      	add	sp, #20
 8004ef0:	bd90      	pop	{r4, r7, pc}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	00000276 	.word	0x00000276

08004ef8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	885b      	ldrh	r3, [r3, #2]
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	4b4c      	ldr	r3, [pc, #304]	; (800503c <USBD_SetConfig+0x144>)
 8004f0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004f0c:	4b4b      	ldr	r3, [pc, #300]	; (800503c <USBD_SetConfig+0x144>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d906      	bls.n	8004f22 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	0011      	movs	r1, r2
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f000 f97b 	bl	8005216 <USBD_CtlError>
 8004f20:	e088      	b.n	8005034 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	239d      	movs	r3, #157	; 0x9d
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	5cd3      	ldrb	r3, [r2, r3]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d002      	beq.n	8004f34 <USBD_SetConfig+0x3c>
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d029      	beq.n	8004f86 <USBD_SetConfig+0x8e>
 8004f32:	e071      	b.n	8005018 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8004f34:	4b41      	ldr	r3, [pc, #260]	; (800503c <USBD_SetConfig+0x144>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01f      	beq.n	8004f7c <USBD_SetConfig+0x84>
      {
        pdev->dev_config = cfgidx;
 8004f3c:	4b3f      	ldr	r3, [pc, #252]	; (800503c <USBD_SetConfig+0x144>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	001a      	movs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	239d      	movs	r3, #157	; 0x9d
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	2103      	movs	r1, #3
 8004f4e:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004f50:	4b3a      	ldr	r3, [pc, #232]	; (800503c <USBD_SetConfig+0x144>)
 8004f52:	781a      	ldrb	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	0011      	movs	r1, r2
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f7ff f966 	bl	800422a <USBD_SetClassConfig>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d106      	bne.n	8004f72 <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev, req);
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	0011      	movs	r1, r2
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f000 f953 	bl	8005216 <USBD_CtlError>
          return;
 8004f70:	e060      	b.n	8005034 <USBD_SetConfig+0x13c>
        }
        USBD_CtlSendStatus(pdev);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	0018      	movs	r0, r3
 8004f76:	f000 fa37 	bl	80053e8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004f7a:	e05b      	b.n	8005034 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	0018      	movs	r0, r3
 8004f80:	f000 fa32 	bl	80053e8 <USBD_CtlSendStatus>
      break;
 8004f84:	e056      	b.n	8005034 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8004f86:	4b2d      	ldr	r3, [pc, #180]	; (800503c <USBD_SetConfig+0x144>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d115      	bne.n	8004fba <USBD_SetConfig+0xc2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	239d      	movs	r3, #157	; 0x9d
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	2102      	movs	r1, #2
 8004f96:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 8004f98:	4b28      	ldr	r3, [pc, #160]	; (800503c <USBD_SetConfig+0x144>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	001a      	movs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8004fa2:	4b26      	ldr	r3, [pc, #152]	; (800503c <USBD_SetConfig+0x144>)
 8004fa4:	781a      	ldrb	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	0011      	movs	r1, r2
 8004faa:	0018      	movs	r0, r3
 8004fac:	f7ff f965 	bl	800427a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f000 fa18 	bl	80053e8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004fb8:	e03c      	b.n	8005034 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8004fba:	4b20      	ldr	r3, [pc, #128]	; (800503c <USBD_SetConfig+0x144>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	001a      	movs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d022      	beq.n	800500e <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	0011      	movs	r1, r2
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f7ff f951 	bl	800427a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004fd8:	4b18      	ldr	r3, [pc, #96]	; (800503c <USBD_SetConfig+0x144>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	001a      	movs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004fe2:	4b16      	ldr	r3, [pc, #88]	; (800503c <USBD_SetConfig+0x144>)
 8004fe4:	781a      	ldrb	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	0011      	movs	r1, r2
 8004fea:	0018      	movs	r0, r3
 8004fec:	f7ff f91d 	bl	800422a <USBD_SetClassConfig>
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d106      	bne.n	8005004 <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev, req);
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	0011      	movs	r1, r2
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f000 f90a 	bl	8005216 <USBD_CtlError>
          return;
 8005002:	e017      	b.n	8005034 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	0018      	movs	r0, r3
 8005008:	f000 f9ee 	bl	80053e8 <USBD_CtlSendStatus>
      break;
 800500c:	e012      	b.n	8005034 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	0018      	movs	r0, r3
 8005012:	f000 f9e9 	bl	80053e8 <USBD_CtlSendStatus>
      break;
 8005016:	e00d      	b.n	8005034 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	0011      	movs	r1, r2
 800501e:	0018      	movs	r0, r3
 8005020:	f000 f8f9 	bl	8005216 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <USBD_SetConfig+0x144>)
 8005026:	781a      	ldrb	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	0011      	movs	r1, r2
 800502c:	0018      	movs	r0, r3
 800502e:	f7ff f924 	bl	800427a <USBD_ClrClassConfig>
      break;
 8005032:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8005034:	46bd      	mov	sp, r7
 8005036:	b002      	add	sp, #8
 8005038:	bd80      	pop	{r7, pc}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	20000194 	.word	0x20000194

08005040 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	88db      	ldrh	r3, [r3, #6]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d006      	beq.n	8005060 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev , req);
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	0011      	movs	r1, r2
 8005058:	0018      	movs	r0, r3
 800505a:	f000 f8dc 	bl	8005216 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800505e:	e025      	b.n	80050ac <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	239d      	movs	r3, #157	; 0x9d
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	5cd3      	ldrb	r3, [r2, r3]
 8005068:	2b01      	cmp	r3, #1
 800506a:	db18      	blt.n	800509e <USBD_GetConfig+0x5e>
 800506c:	2b02      	cmp	r3, #2
 800506e:	dd02      	ble.n	8005076 <USBD_GetConfig+0x36>
 8005070:	2b03      	cmp	r3, #3
 8005072:	d00c      	beq.n	800508e <USBD_GetConfig+0x4e>
 8005074:	e013      	b.n	800509e <USBD_GetConfig+0x5e>
      pdev->dev_default_config = 0U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3308      	adds	r3, #8
 8005080:	0019      	movs	r1, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	0018      	movs	r0, r3
 8005088:	f000 f944 	bl	8005314 <USBD_CtlSendData>
      break;
 800508c:	e00e      	b.n	80050ac <USBD_GetConfig+0x6c>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	1d19      	adds	r1, r3, #4
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	0018      	movs	r0, r3
 8005098:	f000 f93c 	bl	8005314 <USBD_CtlSendData>
      break;
 800509c:	e006      	b.n	80050ac <USBD_GetConfig+0x6c>
      USBD_CtlError(pdev , req);
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	0011      	movs	r1, r2
 80050a4:	0018      	movs	r0, r3
 80050a6:	f000 f8b6 	bl	8005216 <USBD_CtlError>
      break;
 80050aa:	46c0      	nop			; (mov r8, r8)
}
 80050ac:	46c0      	nop			; (mov r8, r8)
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b002      	add	sp, #8
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	239d      	movs	r3, #157	; 0x9d
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	5cd3      	ldrb	r3, [r2, r3]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d822      	bhi.n	8005112 <USBD_GetStatus+0x5e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	88db      	ldrh	r3, [r3, #6]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d006      	beq.n	80050e2 <USBD_GetStatus+0x2e>
    {
      USBD_CtlError(pdev, req);
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	0011      	movs	r1, r2
 80050da:	0018      	movs	r0, r3
 80050dc:	f000 f89b 	bl	8005216 <USBD_CtlError>
      break;
 80050e0:	e01e      	b.n	8005120 <USBD_GetStatus+0x6c>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	239f      	movs	r3, #159	; 0x9f
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	58d3      	ldr	r3, [r2, r3]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <USBD_GetStatus+0x4c>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	2202      	movs	r2, #2
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	330c      	adds	r3, #12
 8005104:	0019      	movs	r1, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	0018      	movs	r0, r3
 800510c:	f000 f902 	bl	8005314 <USBD_CtlSendData>
    break;
 8005110:	e006      	b.n	8005120 <USBD_GetStatus+0x6c>

  default :
    USBD_CtlError(pdev , req);
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	0011      	movs	r1, r2
 8005118:	0018      	movs	r0, r3
 800511a:	f000 f87c 	bl	8005216 <USBD_CtlError>
    break;
 800511e:	46c0      	nop			; (mov r8, r8)
  }
}
 8005120:	46c0      	nop			; (mov r8, r8)
 8005122:	46bd      	mov	sp, r7
 8005124:	b002      	add	sp, #8
 8005126:	bd80      	pop	{r7, pc}

08005128 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	885b      	ldrh	r3, [r3, #2]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d108      	bne.n	800514c <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	239f      	movs	r3, #159	; 0x9f
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	2101      	movs	r1, #1
 8005142:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	0018      	movs	r0, r3
 8005148:	f000 f94e 	bl	80053e8 <USBD_CtlSendStatus>
  }

}
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b002      	add	sp, #8
 8005152:	bd80      	pop	{r7, pc}

08005154 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	239d      	movs	r3, #157	; 0x9d
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	5cd3      	ldrb	r3, [r2, r3]
 8005166:	3b01      	subs	r3, #1
 8005168:	2b02      	cmp	r3, #2
 800516a:	d80d      	bhi.n	8005188 <USBD_ClrFeature+0x34>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	885b      	ldrh	r3, [r3, #2]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d110      	bne.n	8005196 <USBD_ClrFeature+0x42>
    {
      pdev->dev_remote_wakeup = 0U;
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	239f      	movs	r3, #159	; 0x9f
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	2100      	movs	r1, #0
 800517c:	50d1      	str	r1, [r2, r3]
      USBD_CtlSendStatus(pdev);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	0018      	movs	r0, r3
 8005182:	f000 f931 	bl	80053e8 <USBD_CtlSendStatus>
    }
    break;
 8005186:	e006      	b.n	8005196 <USBD_ClrFeature+0x42>

  default :
     USBD_CtlError(pdev , req);
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0011      	movs	r1, r2
 800518e:	0018      	movs	r0, r3
 8005190:	f000 f841 	bl	8005216 <USBD_CtlError>
    break;
 8005194:	e000      	b.n	8005198 <USBD_ClrFeature+0x44>
    break;
 8005196:	46c0      	nop			; (mov r8, r8)
  }
}
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	46bd      	mov	sp, r7
 800519c:	b002      	add	sp, #8
 800519e:	bd80      	pop	{r7, pc}

080051a0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781a      	ldrb	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	785a      	ldrb	r2, [r3, #1]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	3302      	adds	r3, #2
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	3303      	adds	r3, #3
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	021b      	lsls	r3, r3, #8
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	18d3      	adds	r3, r2, r3
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	3304      	adds	r3, #4
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	b29a      	uxth	r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	3305      	adds	r3, #5
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	021b      	lsls	r3, r3, #8
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	18d3      	adds	r3, r2, r3
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	3306      	adds	r3, #6
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	3307      	adds	r3, #7
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	b29b      	uxth	r3, r3
 8005206:	18d3      	adds	r3, r2, r3
 8005208:	b29a      	uxth	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	80da      	strh	r2, [r3, #6]

}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	46bd      	mov	sp, r7
 8005212:	b002      	add	sp, #8
 8005214:	bd80      	pop	{r7, pc}

08005216 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2180      	movs	r1, #128	; 0x80
 8005224:	0018      	movs	r0, r3
 8005226:	f001 fd30 	bl	8006c8a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2100      	movs	r1, #0
 800522e:	0018      	movs	r0, r3
 8005230:	f001 fd2b 	bl	8006c8a <USBD_LL_StallEP>
}
 8005234:	46c0      	nop			; (mov r8, r8)
 8005236:	46bd      	mov	sp, r7
 8005238:	b002      	add	sp, #8
 800523a:	bd80      	pop	{r7, pc}

0800523c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800523c:	b590      	push	{r4, r7, lr}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005248:	2317      	movs	r3, #23
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	2200      	movs	r2, #0
 800524e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d03d      	beq.n	80052d2 <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	0018      	movs	r0, r3
 800525a:	f000 f83e 	bl	80052da <USBD_GetLen>
 800525e:	0003      	movs	r3, r0
 8005260:	3301      	adds	r3, #1
 8005262:	b29b      	uxth	r3, r3
 8005264:	18db      	adds	r3, r3, r3
 8005266:	b29a      	uxth	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800526c:	2017      	movs	r0, #23
 800526e:	183b      	adds	r3, r7, r0
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	183a      	adds	r2, r7, r0
 8005274:	1c59      	adds	r1, r3, #1
 8005276:	7011      	strb	r1, [r2, #0]
 8005278:	001a      	movs	r2, r3
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	189b      	adds	r3, r3, r2
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	7812      	ldrb	r2, [r2, #0]
 8005282:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005284:	183b      	adds	r3, r7, r0
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	183a      	adds	r2, r7, r0
 800528a:	1c59      	adds	r1, r3, #1
 800528c:	7011      	strb	r1, [r2, #0]
 800528e:	001a      	movs	r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	189b      	adds	r3, r3, r2
 8005294:	2203      	movs	r2, #3
 8005296:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005298:	e017      	b.n	80052ca <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	60fa      	str	r2, [r7, #12]
 80052a0:	2417      	movs	r4, #23
 80052a2:	193a      	adds	r2, r7, r4
 80052a4:	7812      	ldrb	r2, [r2, #0]
 80052a6:	1939      	adds	r1, r7, r4
 80052a8:	1c50      	adds	r0, r2, #1
 80052aa:	7008      	strb	r0, [r1, #0]
 80052ac:	0011      	movs	r1, r2
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	1852      	adds	r2, r2, r1
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80052b6:	193b      	adds	r3, r7, r4
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	193a      	adds	r2, r7, r4
 80052bc:	1c59      	adds	r1, r3, #1
 80052be:	7011      	strb	r1, [r2, #0]
 80052c0:	001a      	movs	r2, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	189b      	adds	r3, r3, r2
 80052c6:	2200      	movs	r2, #0
 80052c8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e3      	bne.n	800529a <USBD_GetString+0x5e>
    }
  }
}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	46bd      	mov	sp, r7
 80052d6:	b007      	add	sp, #28
 80052d8:	bd90      	pop	{r4, r7, pc}

080052da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80052e2:	230f      	movs	r3, #15
 80052e4:	18fb      	adds	r3, r7, r3
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0')
 80052ea:	e008      	b.n	80052fe <USBD_GetLen+0x24>
    {
        len++;
 80052ec:	210f      	movs	r1, #15
 80052ee:	187b      	adds	r3, r7, r1
 80052f0:	781a      	ldrb	r2, [r3, #0]
 80052f2:	187b      	adds	r3, r7, r1
 80052f4:	3201      	adds	r2, #1
 80052f6:	701a      	strb	r2, [r3, #0]
        buf++;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3301      	adds	r3, #1
 80052fc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f2      	bne.n	80052ec <USBD_GetLen+0x12>
    }

    return len;
 8005306:	230f      	movs	r3, #15
 8005308:	18fb      	adds	r3, r7, r3
 800530a:	781b      	ldrb	r3, [r3, #0]
}
 800530c:	0018      	movs	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	b004      	add	sp, #16
 8005312:	bd80      	pop	{r7, pc}

08005314 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	1dbb      	adds	r3, r7, #6
 8005320:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	239b      	movs	r3, #155	; 0x9b
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	2102      	movs	r1, #2
 800532a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800532c:	1dbb      	adds	r3, r7, #6
 800532e:	881a      	ldrh	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005334:	1dbb      	adds	r3, r7, #6
 8005336:	881a      	ldrh	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800533c:	1dbb      	adds	r3, r7, #6
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	2100      	movs	r1, #0
 8005346:	f001 fd4f 	bl	8006de8 <USBD_LL_Transmit>

  return USBD_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	0018      	movs	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	b004      	add	sp, #16
 8005352:	bd80      	pop	{r7, pc}

08005354 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	1dbb      	adds	r3, r7, #6
 8005360:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005362:	1dbb      	adds	r3, r7, #6
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	2100      	movs	r1, #0
 800536c:	f001 fd3c 	bl	8006de8 <USBD_LL_Transmit>

  return USBD_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	0018      	movs	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	b004      	add	sp, #16
 8005378:	bd80      	pop	{r7, pc}

0800537a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	1dbb      	adds	r3, r7, #6
 8005386:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	239b      	movs	r3, #155	; 0x9b
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	2103      	movs	r1, #3
 8005390:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8005392:	1dbb      	adds	r3, r7, #6
 8005394:	8819      	ldrh	r1, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	23a4      	movs	r3, #164	; 0xa4
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800539e:	1dbb      	adds	r3, r7, #6
 80053a0:	8819      	ldrh	r1, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	23a6      	movs	r3, #166	; 0xa6
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80053aa:	1dbb      	adds	r3, r7, #6
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	2100      	movs	r1, #0
 80053b4:	f001 fd50 	bl	8006e58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	0018      	movs	r0, r3
 80053bc:	46bd      	mov	sp, r7
 80053be:	b004      	add	sp, #16
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	1dbb      	adds	r3, r7, #6
 80053ce:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80053d0:	1dbb      	adds	r3, r7, #6
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	2100      	movs	r1, #0
 80053da:	f001 fd3d 	bl	8006e58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	0018      	movs	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	b004      	add	sp, #16
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	239b      	movs	r3, #155	; 0x9b
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	2104      	movs	r1, #4
 80053f8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	2300      	movs	r3, #0
 80053fe:	2200      	movs	r2, #0
 8005400:	2100      	movs	r1, #0
 8005402:	f001 fcf1 	bl	8006de8 <USBD_LL_Transmit>

  return USBD_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	0018      	movs	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	b002      	add	sp, #8
 800540e:	bd80      	pop	{r7, pc}

08005410 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	239b      	movs	r3, #155	; 0x9b
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	2105      	movs	r1, #5
 8005420:	50d1      	str	r1, [r2, r3]

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	2300      	movs	r3, #0
 8005426:	2200      	movs	r2, #0
 8005428:	2100      	movs	r1, #0
 800542a:	f001 fd15 	bl	8006e58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	0018      	movs	r0, r3
 8005432:	46bd      	mov	sp, r7
 8005434:	b002      	add	sp, #8
 8005436:	bd80      	pop	{r7, pc}

08005438 <InitGame>:
//Output buffer for the game
#define GAME_OUTPUT_BUFFER_SIZE 512

char game_output_buffer[GAME_OUTPUT_BUFFER_SIZE];

void InitGame(){
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
	InitItms();
 800543c:	f000 f986 	bl	800574c <InitItms>
	InitObjs();
 8005440:	f000 fd9e 	bl	8005f80 <InitObjs>
	InitRooms();
 8005444:	f000 fdee 	bl	8006024 <InitRooms>
	current_room = GetRoomByToken(RTKN_TESTSTART);
 8005448:	2001      	movs	r0, #1
 800544a:	f000 ff67 	bl	800631c <GetRoomByToken>
 800544e:	0002      	movs	r2, r0
 8005450:	4b03      	ldr	r3, [pc, #12]	; (8005460 <InitGame+0x28>)
 8005452:	601a      	str	r2, [r3, #0]
	current_state = GSTATE_MOVING;
 8005454:	4b03      	ldr	r3, [pc, #12]	; (8005464 <InitGame+0x2c>)
 8005456:	2201      	movs	r2, #1
 8005458:	801a      	strh	r2, [r3, #0]
}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	200003bc 	.word	0x200003bc
 8005464:	200003c4 	.word	0x200003c4

08005468 <PrintBadInput>:


void PrintBadInput(char* ins, uint8_t index){
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	000a      	movs	r2, r1
 8005472:	1cfb      	adds	r3, r7, #3
 8005474:	701a      	strb	r2, [r3, #0]
	ClearTxBuffer();
 8005476:	f001 f997 	bl	80067a8 <ClearTxBuffer>
	strncpy(UserTxBufferFS, "Invalid input: ", 15);
 800547a:	4a2b      	ldr	r2, [pc, #172]	; (8005528 <PrintBadInput+0xc0>)
 800547c:	4b2b      	ldr	r3, [pc, #172]	; (800552c <PrintBadInput+0xc4>)
 800547e:	0010      	movs	r0, r2
 8005480:	0019      	movs	r1, r3
 8005482:	230f      	movs	r3, #15
 8005484:	001a      	movs	r2, r3
 8005486:	f001 ff01 	bl	800728c <memcpy>
	uint8_t i = 0;
 800548a:	230f      	movs	r3, #15
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
	while(	(i < APP_TX_DATA_SIZE - 18) &&
 8005492:	e015      	b.n	80054c0 <PrintBadInput+0x58>
			(ins[i + index] != '\0') &&
			(ins[i + index] != ' ')){
		UserTxBufferFS[i + 15] = ins[i + index];
 8005494:	210f      	movs	r1, #15
 8005496:	187b      	adds	r3, r7, r1
 8005498:	781a      	ldrb	r2, [r3, #0]
 800549a:	1cfb      	adds	r3, r7, #3
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	18d3      	adds	r3, r2, r3
 80054a0:	001a      	movs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	189a      	adds	r2, r3, r2
 80054a6:	0008      	movs	r0, r1
 80054a8:	187b      	adds	r3, r7, r1
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	330f      	adds	r3, #15
 80054ae:	7811      	ldrb	r1, [r2, #0]
 80054b0:	4a1d      	ldr	r2, [pc, #116]	; (8005528 <PrintBadInput+0xc0>)
 80054b2:	54d1      	strb	r1, [r2, r3]
		i++;
 80054b4:	0001      	movs	r1, r0
 80054b6:	187b      	adds	r3, r7, r1
 80054b8:	781a      	ldrb	r2, [r3, #0]
 80054ba:	187b      	adds	r3, r7, r1
 80054bc:	3201      	adds	r2, #1
 80054be:	701a      	strb	r2, [r3, #0]
			(ins[i + index] != '\0') &&
 80054c0:	230f      	movs	r3, #15
 80054c2:	18fb      	adds	r3, r7, r3
 80054c4:	781a      	ldrb	r2, [r3, #0]
 80054c6:	1cfb      	adds	r3, r7, #3
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	18d3      	adds	r3, r2, r3
 80054cc:	001a      	movs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	189b      	adds	r3, r3, r2
 80054d2:	781b      	ldrb	r3, [r3, #0]
	while(	(i < APP_TX_DATA_SIZE - 18) &&
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00b      	beq.n	80054f0 <PrintBadInput+0x88>
			(ins[i + index] != ' ')){
 80054d8:	230f      	movs	r3, #15
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	781a      	ldrb	r2, [r3, #0]
 80054de:	1cfb      	adds	r3, r7, #3
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	18d3      	adds	r3, r2, r3
 80054e4:	001a      	movs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	189b      	adds	r3, r3, r2
 80054ea:	781b      	ldrb	r3, [r3, #0]
			(ins[i + index] != '\0') &&
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	d1d1      	bne.n	8005494 <PrintBadInput+0x2c>
	}
	UserTxBufferFS[i + 16] = '\r';
 80054f0:	200f      	movs	r0, #15
 80054f2:	183b      	adds	r3, r7, r0
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	3310      	adds	r3, #16
 80054f8:	4a0b      	ldr	r2, [pc, #44]	; (8005528 <PrintBadInput+0xc0>)
 80054fa:	210d      	movs	r1, #13
 80054fc:	54d1      	strb	r1, [r2, r3]
	UserTxBufferFS[i + 17] = '\n';
 80054fe:	183b      	adds	r3, r7, r0
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	3311      	adds	r3, #17
 8005504:	4a08      	ldr	r2, [pc, #32]	; (8005528 <PrintBadInput+0xc0>)
 8005506:	210a      	movs	r1, #10
 8005508:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS(UserTxBufferFS, i + 18);
 800550a:	183b      	adds	r3, r7, r0
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	3312      	adds	r3, #18
 8005512:	b29a      	uxth	r2, r3
 8005514:	4b04      	ldr	r3, [pc, #16]	; (8005528 <PrintBadInput+0xc0>)
 8005516:	0011      	movs	r1, r2
 8005518:	0018      	movs	r0, r3
 800551a:	f001 f8f5 	bl	8006708 <CDC_Transmit_FS>
}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	46bd      	mov	sp, r7
 8005522:	b004      	add	sp, #16
 8005524:	bd80      	pop	{r7, pc}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	200005c8 	.word	0x200005c8
 800552c:	080072e8 	.word	0x080072e8

08005530 <GameLoop>:

void GameLoop(){
 8005530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
	  uint8_t tmp[] = "        ";
 8005536:	1d3b      	adds	r3, r7, #4
 8005538:	4a22      	ldr	r2, [pc, #136]	; (80055c4 <GameLoop+0x94>)
 800553a:	ca03      	ldmia	r2!, {r0, r1}
 800553c:	c303      	stmia	r3!, {r0, r1}
 800553e:	7812      	ldrb	r2, [r2, #0]
 8005540:	701a      	strb	r2, [r3, #0]
	  uint8_t ret = 0;
 8005542:	230f      	movs	r3, #15
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	2200      	movs	r2, #0
 8005548:	701a      	strb	r2, [r3, #0]
	  if(CheckUserDataReady()){
 800554a:	f001 f983 	bl	8006854 <CheckUserDataReady>
 800554e:	1e03      	subs	r3, r0, #0
 8005550:	d033      	beq.n	80055ba <GameLoop+0x8a>
		  ret = TokenizeUserInput(GetUserDataBuf(), GetUserDataSize());
 8005552:	f001 f909 	bl	8006768 <GetUserDataBuf>
 8005556:	0005      	movs	r5, r0
 8005558:	f001 f986 	bl	8006868 <GetUserDataSize>
 800555c:	0003      	movs	r3, r0
 800555e:	260f      	movs	r6, #15
 8005560:	19bc      	adds	r4, r7, r6
 8005562:	0019      	movs	r1, r3
 8005564:	0028      	movs	r0, r5
 8005566:	f000 f949 	bl	80057fc <TokenizeUserInput>
 800556a:	0003      	movs	r3, r0
 800556c:	7023      	strb	r3, [r4, #0]
		  if(ret != 0xFF){
 800556e:	19bb      	adds	r3, r7, r6
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2bff      	cmp	r3, #255	; 0xff
 8005574:	d00c      	beq.n	8005590 <GameLoop+0x60>
			  PrintBadInput(GetUserDataBuf(), ret);
 8005576:	f001 f8f7 	bl	8006768 <GetUserDataBuf>
 800557a:	0002      	movs	r2, r0
 800557c:	230f      	movs	r3, #15
 800557e:	18fb      	adds	r3, r7, r3
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	0019      	movs	r1, r3
 8005584:	0010      	movs	r0, r2
 8005586:	f7ff ff6f 	bl	8005468 <PrintBadInput>
			  ClearUserDataBuf();
 800558a:	f001 f8f5 	bl	8006778 <ClearUserDataBuf>
 800558e:	e012      	b.n	80055b6 <GameLoop+0x86>
		  }
		  else{
			  if(game_tokens[0] == LTKN_ACT_GO){
 8005590:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <GameLoop+0x98>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d102      	bne.n	800559e <GameLoop+0x6e>
				  MovePlayer();
 8005598:	f000 f828 	bl	80055ec <MovePlayer>
 800559c:	e00b      	b.n	80055b6 <GameLoop+0x86>
			  }
			  else if(game_tokens[0] == LTKN_ACT_LOCATION){
 800559e:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <GameLoop+0x98>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b06      	cmp	r3, #6
 80055a4:	d102      	bne.n	80055ac <GameLoop+0x7c>
				  PrintLocation();
 80055a6:	f000 f813 	bl	80055d0 <PrintLocation>
 80055aa:	e004      	b.n	80055b6 <GameLoop+0x86>
			  }
			  else{
				  PrintToConsole("You can't perform that action", 29);
 80055ac:	4b07      	ldr	r3, [pc, #28]	; (80055cc <GameLoop+0x9c>)
 80055ae:	211d      	movs	r1, #29
 80055b0:	0018      	movs	r0, r3
 80055b2:	f001 f907 	bl	80067c4 <PrintToConsole>
			  }
		  }
		  ClearUserDataBuf();
 80055b6:	f001 f8df 	bl	8006778 <ClearUserDataBuf>
	  }
	  else{

	  }
}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	46bd      	mov	sp, r7
 80055be:	b005      	add	sp, #20
 80055c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055c2:	46c0      	nop			; (mov r8, r8)
 80055c4:	08007318 	.word	0x08007318
 80055c8:	200003c0 	.word	0x200003c0
 80055cc:	080072f8 	.word	0x080072f8

080055d0 <PrintLocation>:

void PrintLocation(){
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
	PrintStrToConsole(current_room->name);
 80055d4:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <PrintLocation+0x18>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	0018      	movs	r0, r3
 80055dc:	f001 f94e 	bl	800687c <PrintStrToConsole>
}
 80055e0:	46c0      	nop			; (mov r8, r8)
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	200003bc 	.word	0x200003bc

080055ec <MovePlayer>:

void MovePlayer(){
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
	if(game_tokens[1] <= 0x15 && game_tokens[1] >= 0x10){
 80055f0:	4b4c      	ldr	r3, [pc, #304]	; (8005724 <MovePlayer+0x138>)
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	2b15      	cmp	r3, #21
 80055f6:	d900      	bls.n	80055fa <MovePlayer+0xe>
 80055f8:	e08c      	b.n	8005714 <MovePlayer+0x128>
 80055fa:	4b4a      	ldr	r3, [pc, #296]	; (8005724 <MovePlayer+0x138>)
 80055fc:	785b      	ldrb	r3, [r3, #1]
 80055fe:	2b0f      	cmp	r3, #15
 8005600:	d800      	bhi.n	8005604 <MovePlayer+0x18>
 8005602:	e087      	b.n	8005714 <MovePlayer+0x128>
		if(game_tokens[1] == LTKN_NAVD_NORTH){
 8005604:	4b47      	ldr	r3, [pc, #284]	; (8005724 <MovePlayer+0x138>)
 8005606:	785b      	ldrb	r3, [r3, #1]
 8005608:	2b10      	cmp	r3, #16
 800560a:	d110      	bne.n	800562e <MovePlayer+0x42>
			if(current_room->north_room != 0x00){
 800560c:	4b46      	ldr	r3, [pc, #280]	; (8005728 <MovePlayer+0x13c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <MovePlayer+0x36>
				current_room = current_room->north_room;
 8005616:	4b44      	ldr	r3, [pc, #272]	; (8005728 <MovePlayer+0x13c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4b42      	ldr	r3, [pc, #264]	; (8005728 <MovePlayer+0x13c>)
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	e06e      	b.n	8005700 <MovePlayer+0x114>
			}
			else{
				PrintToConsole("You can't go north", 18);
 8005622:	4b42      	ldr	r3, [pc, #264]	; (800572c <MovePlayer+0x140>)
 8005624:	2112      	movs	r1, #18
 8005626:	0018      	movs	r0, r3
 8005628:	f001 f8cc 	bl	80067c4 <PrintToConsole>
				return;
 800562c:	e077      	b.n	800571e <MovePlayer+0x132>
			}
		}
		else if(game_tokens[1] == LTKN_NAVD_EAST){
 800562e:	4b3d      	ldr	r3, [pc, #244]	; (8005724 <MovePlayer+0x138>)
 8005630:	785b      	ldrb	r3, [r3, #1]
 8005632:	2b12      	cmp	r3, #18
 8005634:	d110      	bne.n	8005658 <MovePlayer+0x6c>
			if(current_room->east_room != 0x00){
 8005636:	4b3c      	ldr	r3, [pc, #240]	; (8005728 <MovePlayer+0x13c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <MovePlayer+0x60>
				current_room = current_room->east_room;
 8005640:	4b39      	ldr	r3, [pc, #228]	; (8005728 <MovePlayer+0x13c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	4b38      	ldr	r3, [pc, #224]	; (8005728 <MovePlayer+0x13c>)
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	e059      	b.n	8005700 <MovePlayer+0x114>
			}
			else{
				PrintToConsole("You can't go east", 17);
 800564c:	4b38      	ldr	r3, [pc, #224]	; (8005730 <MovePlayer+0x144>)
 800564e:	2111      	movs	r1, #17
 8005650:	0018      	movs	r0, r3
 8005652:	f001 f8b7 	bl	80067c4 <PrintToConsole>
				return;
 8005656:	e062      	b.n	800571e <MovePlayer+0x132>
			}
		}
		else if(game_tokens[1] == LTKN_NAVD_SOUTH){
 8005658:	4b32      	ldr	r3, [pc, #200]	; (8005724 <MovePlayer+0x138>)
 800565a:	785b      	ldrb	r3, [r3, #1]
 800565c:	2b11      	cmp	r3, #17
 800565e:	d110      	bne.n	8005682 <MovePlayer+0x96>
			if(current_room->south_room != 0x00){
 8005660:	4b31      	ldr	r3, [pc, #196]	; (8005728 <MovePlayer+0x13c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d005      	beq.n	8005676 <MovePlayer+0x8a>
				current_room = current_room->south_room;
 800566a:	4b2f      	ldr	r3, [pc, #188]	; (8005728 <MovePlayer+0x13c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	4b2d      	ldr	r3, [pc, #180]	; (8005728 <MovePlayer+0x13c>)
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	e044      	b.n	8005700 <MovePlayer+0x114>
			}
			else{
				PrintToConsole("You can't go south", 18);
 8005676:	4b2f      	ldr	r3, [pc, #188]	; (8005734 <MovePlayer+0x148>)
 8005678:	2112      	movs	r1, #18
 800567a:	0018      	movs	r0, r3
 800567c:	f001 f8a2 	bl	80067c4 <PrintToConsole>
				return;
 8005680:	e04d      	b.n	800571e <MovePlayer+0x132>
			}
		}
		else if(game_tokens[1] == LTKN_NAVD_WEST){
 8005682:	4b28      	ldr	r3, [pc, #160]	; (8005724 <MovePlayer+0x138>)
 8005684:	785b      	ldrb	r3, [r3, #1]
 8005686:	2b13      	cmp	r3, #19
 8005688:	d110      	bne.n	80056ac <MovePlayer+0xc0>
			if(current_room->west_room != 0x00){
 800568a:	4b27      	ldr	r3, [pc, #156]	; (8005728 <MovePlayer+0x13c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <MovePlayer+0xb4>
				current_room = current_room->west_room;
 8005694:	4b24      	ldr	r3, [pc, #144]	; (8005728 <MovePlayer+0x13c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	4b23      	ldr	r3, [pc, #140]	; (8005728 <MovePlayer+0x13c>)
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e02f      	b.n	8005700 <MovePlayer+0x114>
			}
			else{
				PrintToConsole("You can't go west", 17);
 80056a0:	4b25      	ldr	r3, [pc, #148]	; (8005738 <MovePlayer+0x14c>)
 80056a2:	2111      	movs	r1, #17
 80056a4:	0018      	movs	r0, r3
 80056a6:	f001 f88d 	bl	80067c4 <PrintToConsole>
				return;
 80056aa:	e038      	b.n	800571e <MovePlayer+0x132>
			}
		}
		else if(game_tokens[1] == LTKN_NAVD_UP){
 80056ac:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <MovePlayer+0x138>)
 80056ae:	785b      	ldrb	r3, [r3, #1]
 80056b0:	2b14      	cmp	r3, #20
 80056b2:	d110      	bne.n	80056d6 <MovePlayer+0xea>
			if(current_room->up_room != 0x00){
 80056b4:	4b1c      	ldr	r3, [pc, #112]	; (8005728 <MovePlayer+0x13c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <MovePlayer+0xde>
				current_room = current_room->up_room;
 80056be:	4b1a      	ldr	r3, [pc, #104]	; (8005728 <MovePlayer+0x13c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	4b18      	ldr	r3, [pc, #96]	; (8005728 <MovePlayer+0x13c>)
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	e01a      	b.n	8005700 <MovePlayer+0x114>
			}
			else{
				PrintToConsole("You can't go up", 15);
 80056ca:	4b1c      	ldr	r3, [pc, #112]	; (800573c <MovePlayer+0x150>)
 80056cc:	210f      	movs	r1, #15
 80056ce:	0018      	movs	r0, r3
 80056d0:	f001 f878 	bl	80067c4 <PrintToConsole>
				return;
 80056d4:	e023      	b.n	800571e <MovePlayer+0x132>
			}
		}
		else if(game_tokens[1] == LTKN_NAVD_DOWN){
 80056d6:	4b13      	ldr	r3, [pc, #76]	; (8005724 <MovePlayer+0x138>)
 80056d8:	785b      	ldrb	r3, [r3, #1]
 80056da:	2b15      	cmp	r3, #21
 80056dc:	d110      	bne.n	8005700 <MovePlayer+0x114>
			if(current_room->down_room != 0x00){
 80056de:	4b12      	ldr	r3, [pc, #72]	; (8005728 <MovePlayer+0x13c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <MovePlayer+0x108>
				current_room = current_room->down_room;
 80056e8:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <MovePlayer+0x13c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695a      	ldr	r2, [r3, #20]
 80056ee:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <MovePlayer+0x13c>)
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	e005      	b.n	8005700 <MovePlayer+0x114>
			}
			else{
				PrintToConsole("You can't go down", 17);
 80056f4:	4b12      	ldr	r3, [pc, #72]	; (8005740 <MovePlayer+0x154>)
 80056f6:	2111      	movs	r1, #17
 80056f8:	0018      	movs	r0, r3
 80056fa:	f001 f863 	bl	80067c4 <PrintToConsole>
				return;
 80056fe:	e00e      	b.n	800571e <MovePlayer+0x132>
			}
		}
		PrintStrToConsole(current_room->flavortext);
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <MovePlayer+0x13c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	0018      	movs	r0, r3
 8005708:	f001 f8b8 	bl	800687c <PrintStrToConsole>
		current_state = GSTATE_MOVING;
 800570c:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <MovePlayer+0x158>)
 800570e:	2201      	movs	r2, #1
 8005710:	801a      	strh	r2, [r3, #0]
 8005712:	e004      	b.n	800571e <MovePlayer+0x132>
	}
	else{
		PrintToConsole("You can't go that way", 21);
 8005714:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <MovePlayer+0x15c>)
 8005716:	2115      	movs	r1, #21
 8005718:	0018      	movs	r0, r3
 800571a:	f001 f853 	bl	80067c4 <PrintToConsole>
	}
}
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	200003c0 	.word	0x200003c0
 8005728:	200003bc 	.word	0x200003bc
 800572c:	08007324 	.word	0x08007324
 8005730:	08007338 	.word	0x08007338
 8005734:	0800734c 	.word	0x0800734c
 8005738:	08007360 	.word	0x08007360
 800573c:	08007374 	.word	0x08007374
 8005740:	08007384 	.word	0x08007384
 8005744:	200003c4 	.word	0x200003c4
 8005748:	08007398 	.word	0x08007398

0800574c <InitItms>:
//Game items
struct itm itm_testitm;
//Array of all the game items
struct itm* game_itms[ITEM_COUNT];

void InitItms(){
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0

	itm_testitm.token = LTKN_ITM_TEST;
 8005750:	4b0d      	ldr	r3, [pc, #52]	; (8005788 <InitItms+0x3c>)
 8005752:	2250      	movs	r2, #80	; 0x50
 8005754:	701a      	strb	r2, [r3, #0]
	itm_testitm.combine_token = ITM_NULL;
 8005756:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <InitItms+0x3c>)
 8005758:	2200      	movs	r2, #0
 800575a:	705a      	strb	r2, [r3, #1]
	itm_testitm.object_token = LTKN_OBJ_TEST;
 800575c:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <InitItms+0x3c>)
 800575e:	2220      	movs	r2, #32
 8005760:	709a      	strb	r2, [r3, #2]
	itm_testitm.state = ITM_NOT_PICKED_UP;
 8005762:	4b09      	ldr	r3, [pc, #36]	; (8005788 <InitItms+0x3c>)
 8005764:	2201      	movs	r2, #1
 8005766:	70da      	strb	r2, [r3, #3]
	itm_testitm.name = itm_testitem_name;
 8005768:	4b07      	ldr	r3, [pc, #28]	; (8005788 <InitItms+0x3c>)
 800576a:	4a08      	ldr	r2, [pc, #32]	; (800578c <InitItms+0x40>)
 800576c:	605a      	str	r2, [r3, #4]
	itm_testitm.seen_text = itm_testitm_seen;
 800576e:	4b06      	ldr	r3, [pc, #24]	; (8005788 <InitItms+0x3c>)
 8005770:	4a07      	ldr	r2, [pc, #28]	; (8005790 <InitItms+0x44>)
 8005772:	609a      	str	r2, [r3, #8]
	itm_testitm.examine_text = itm_testitm_exmn;
 8005774:	4b04      	ldr	r3, [pc, #16]	; (8005788 <InitItms+0x3c>)
 8005776:	4a07      	ldr	r2, [pc, #28]	; (8005794 <InitItms+0x48>)
 8005778:	60da      	str	r2, [r3, #12]
	game_itms[0] = &itm_testitm;
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <InitItms+0x4c>)
 800577c:	4a02      	ldr	r2, [pc, #8]	; (8005788 <InitItms+0x3c>)
 800577e:	601a      	str	r2, [r3, #0]
}
 8005780:	46c0      	nop			; (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	200007cc 	.word	0x200007cc
 800578c:	080074f4 	.word	0x080074f4
 8005790:	08007500 	.word	0x08007500
 8005794:	08007528 	.word	0x08007528
 8005798:	200007c8 	.word	0x200007c8

0800579c <GetItmByToken>:

struct itm* GetItmByToken(uint8_t token){
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	0002      	movs	r2, r0
 80057a4:	1dfb      	adds	r3, r7, #7
 80057a6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < ITEM_COUNT; i++){
 80057a8:	230f      	movs	r3, #15
 80057aa:	18fb      	adds	r3, r7, r3
 80057ac:	2200      	movs	r2, #0
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	e017      	b.n	80057e2 <GetItmByToken+0x46>
		if(game_itms[i]->token == token){
 80057b2:	230f      	movs	r3, #15
 80057b4:	18fb      	adds	r3, r7, r3
 80057b6:	781a      	ldrb	r2, [r3, #0]
 80057b8:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <GetItmByToken+0x5c>)
 80057ba:	0092      	lsls	r2, r2, #2
 80057bc:	58d3      	ldr	r3, [r2, r3]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	1dfa      	adds	r2, r7, #7
 80057c2:	7812      	ldrb	r2, [r2, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d106      	bne.n	80057d6 <GetItmByToken+0x3a>
			return game_itms[i];
 80057c8:	230f      	movs	r3, #15
 80057ca:	18fb      	adds	r3, r7, r3
 80057cc:	781a      	ldrb	r2, [r3, #0]
 80057ce:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <GetItmByToken+0x5c>)
 80057d0:	0092      	lsls	r2, r2, #2
 80057d2:	58d3      	ldr	r3, [r2, r3]
 80057d4:	e00b      	b.n	80057ee <GetItmByToken+0x52>
	for(uint8_t i = 0; i < ITEM_COUNT; i++){
 80057d6:	210f      	movs	r1, #15
 80057d8:	187b      	adds	r3, r7, r1
 80057da:	781a      	ldrb	r2, [r3, #0]
 80057dc:	187b      	adds	r3, r7, r1
 80057de:	3201      	adds	r2, #1
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	230f      	movs	r3, #15
 80057e4:	18fb      	adds	r3, r7, r3
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0e2      	beq.n	80057b2 <GetItmByToken+0x16>
		}
	}
	return NULL;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	0018      	movs	r0, r3
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b004      	add	sp, #16
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	200007c8 	.word	0x200007c8

080057fc <TokenizeUserInput>:
#include "lexer.h"

//Lexically analyze the user input
//Return 0xFF and set global vars if fully understood
//Else, return the index of the first character of the not understood word
uint8_t TokenizeUserInput(char *buf, uint8_t len){
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	000a      	movs	r2, r1
 8005806:	1cfb      	adds	r3, r7, #3
 8005808:	701a      	strb	r2, [r3, #0]
	//Clear the tokens
	memset(game_tokens, LTKN_TOKEN_NULL, MAX_TOKENS);
 800580a:	4bcf      	ldr	r3, [pc, #828]	; (8005b48 <TokenizeUserInput+0x34c>)
 800580c:	2203      	movs	r2, #3
 800580e:	2100      	movs	r1, #0
 8005810:	0018      	movs	r0, r3
 8005812:	f001 fd44 	bl	800729e <memset>
	uint8_t buf_index = 0;
 8005816:	230f      	movs	r3, #15
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
	uint8_t token_count = 0;
 800581e:	230e      	movs	r3, #14
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	2200      	movs	r2, #0
 8005824:	701a      	strb	r2, [r3, #0]
	while(buf[buf_index] != '\0' && token_count < MAX_TOKENS){
 8005826:	e26a      	b.n	8005cfe <TokenizeUserInput+0x502>
		if(!strncmp(&buf[buf_index], "go", 2)){
 8005828:	230f      	movs	r3, #15
 800582a:	18fb      	adds	r3, r7, r3
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	18d3      	adds	r3, r2, r3
 8005832:	49c6      	ldr	r1, [pc, #792]	; (8005b4c <TokenizeUserInput+0x350>)
 8005834:	2202      	movs	r2, #2
 8005836:	0018      	movs	r0, r3
 8005838:	f001 fd39 	bl	80072ae <strncmp>
 800583c:	1e03      	subs	r3, r0, #0
 800583e:	d10c      	bne.n	800585a <TokenizeUserInput+0x5e>
			game_tokens[token_count] = LTKN_ACT_GO;
 8005840:	230e      	movs	r3, #14
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	4ac0      	ldr	r2, [pc, #768]	; (8005b48 <TokenizeUserInput+0x34c>)
 8005848:	2101      	movs	r1, #1
 800584a:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 3;
 800584c:	220f      	movs	r2, #15
 800584e:	18bb      	adds	r3, r7, r2
 8005850:	18ba      	adds	r2, r7, r2
 8005852:	7812      	ldrb	r2, [r2, #0]
 8005854:	3203      	adds	r2, #3
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	e24b      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "use", 3)){
 800585a:	230f      	movs	r3, #15
 800585c:	18fb      	adds	r3, r7, r3
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	18d3      	adds	r3, r2, r3
 8005864:	49ba      	ldr	r1, [pc, #744]	; (8005b50 <TokenizeUserInput+0x354>)
 8005866:	2203      	movs	r2, #3
 8005868:	0018      	movs	r0, r3
 800586a:	f001 fd20 	bl	80072ae <strncmp>
 800586e:	1e03      	subs	r3, r0, #0
 8005870:	d10c      	bne.n	800588c <TokenizeUserInput+0x90>
			game_tokens[token_count] = LTKN_ACT_USE;
 8005872:	230e      	movs	r3, #14
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	4ab3      	ldr	r2, [pc, #716]	; (8005b48 <TokenizeUserInput+0x34c>)
 800587a:	2102      	movs	r1, #2
 800587c:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 4;
 800587e:	220f      	movs	r2, #15
 8005880:	18bb      	adds	r3, r7, r2
 8005882:	18ba      	adds	r2, r7, r2
 8005884:	7812      	ldrb	r2, [r2, #0]
 8005886:	3204      	adds	r2, #4
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	e232      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "push", 4)){
 800588c:	230f      	movs	r3, #15
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	18d3      	adds	r3, r2, r3
 8005896:	49af      	ldr	r1, [pc, #700]	; (8005b54 <TokenizeUserInput+0x358>)
 8005898:	2204      	movs	r2, #4
 800589a:	0018      	movs	r0, r3
 800589c:	f001 fd07 	bl	80072ae <strncmp>
 80058a0:	1e03      	subs	r3, r0, #0
 80058a2:	d10c      	bne.n	80058be <TokenizeUserInput+0xc2>
			game_tokens[token_count] = LTKN_ACT_PUSH;
 80058a4:	230e      	movs	r3, #14
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	4aa7      	ldr	r2, [pc, #668]	; (8005b48 <TokenizeUserInput+0x34c>)
 80058ac:	2103      	movs	r1, #3
 80058ae:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 80058b0:	220f      	movs	r2, #15
 80058b2:	18bb      	adds	r3, r7, r2
 80058b4:	18ba      	adds	r2, r7, r2
 80058b6:	7812      	ldrb	r2, [r2, #0]
 80058b8:	3205      	adds	r2, #5
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	e219      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "pull", 4)){
 80058be:	230f      	movs	r3, #15
 80058c0:	18fb      	adds	r3, r7, r3
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	18d3      	adds	r3, r2, r3
 80058c8:	49a3      	ldr	r1, [pc, #652]	; (8005b58 <TokenizeUserInput+0x35c>)
 80058ca:	2204      	movs	r2, #4
 80058cc:	0018      	movs	r0, r3
 80058ce:	f001 fcee 	bl	80072ae <strncmp>
 80058d2:	1e03      	subs	r3, r0, #0
 80058d4:	d10c      	bne.n	80058f0 <TokenizeUserInput+0xf4>
			game_tokens[token_count] = LTKN_ACT_PULL;
 80058d6:	230e      	movs	r3, #14
 80058d8:	18fb      	adds	r3, r7, r3
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	4a9a      	ldr	r2, [pc, #616]	; (8005b48 <TokenizeUserInput+0x34c>)
 80058de:	2104      	movs	r1, #4
 80058e0:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 80058e2:	220f      	movs	r2, #15
 80058e4:	18bb      	adds	r3, r7, r2
 80058e6:	18ba      	adds	r2, r7, r2
 80058e8:	7812      	ldrb	r2, [r2, #0]
 80058ea:	3205      	adds	r2, #5
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	e200      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "turn", 4)){
 80058f0:	230f      	movs	r3, #15
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	18d3      	adds	r3, r2, r3
 80058fa:	4998      	ldr	r1, [pc, #608]	; (8005b5c <TokenizeUserInput+0x360>)
 80058fc:	2204      	movs	r2, #4
 80058fe:	0018      	movs	r0, r3
 8005900:	f001 fcd5 	bl	80072ae <strncmp>
 8005904:	1e03      	subs	r3, r0, #0
 8005906:	d10c      	bne.n	8005922 <TokenizeUserInput+0x126>
			game_tokens[token_count] = LTKN_ACT_TURN;
 8005908:	230e      	movs	r3, #14
 800590a:	18fb      	adds	r3, r7, r3
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	4a8e      	ldr	r2, [pc, #568]	; (8005b48 <TokenizeUserInput+0x34c>)
 8005910:	2105      	movs	r1, #5
 8005912:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8005914:	220f      	movs	r2, #15
 8005916:	18bb      	adds	r3, r7, r2
 8005918:	18ba      	adds	r2, r7, r2
 800591a:	7812      	ldrb	r2, [r2, #0]
 800591c:	3205      	adds	r2, #5
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	e1e7      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "location", 8)){
 8005922:	230f      	movs	r3, #15
 8005924:	18fb      	adds	r3, r7, r3
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	18d3      	adds	r3, r2, r3
 800592c:	498c      	ldr	r1, [pc, #560]	; (8005b60 <TokenizeUserInput+0x364>)
 800592e:	2208      	movs	r2, #8
 8005930:	0018      	movs	r0, r3
 8005932:	f001 fcbc 	bl	80072ae <strncmp>
 8005936:	1e03      	subs	r3, r0, #0
 8005938:	d10c      	bne.n	8005954 <TokenizeUserInput+0x158>
			game_tokens[token_count] = LTKN_ACT_LOCATION;
 800593a:	230e      	movs	r3, #14
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	4a81      	ldr	r2, [pc, #516]	; (8005b48 <TokenizeUserInput+0x34c>)
 8005942:	2106      	movs	r1, #6
 8005944:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 9;
 8005946:	220f      	movs	r2, #15
 8005948:	18bb      	adds	r3, r7, r2
 800594a:	18ba      	adds	r2, r7, r2
 800594c:	7812      	ldrb	r2, [r2, #0]
 800594e:	3209      	adds	r2, #9
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	e1ce      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "say", 3)){
 8005954:	230f      	movs	r3, #15
 8005956:	18fb      	adds	r3, r7, r3
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	18d3      	adds	r3, r2, r3
 800595e:	4981      	ldr	r1, [pc, #516]	; (8005b64 <TokenizeUserInput+0x368>)
 8005960:	2203      	movs	r2, #3
 8005962:	0018      	movs	r0, r3
 8005964:	f001 fca3 	bl	80072ae <strncmp>
 8005968:	1e03      	subs	r3, r0, #0
 800596a:	d10c      	bne.n	8005986 <TokenizeUserInput+0x18a>
			game_tokens[token_count] = LTKN_ACT_SAY;
 800596c:	230e      	movs	r3, #14
 800596e:	18fb      	adds	r3, r7, r3
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	4a75      	ldr	r2, [pc, #468]	; (8005b48 <TokenizeUserInput+0x34c>)
 8005974:	2107      	movs	r1, #7
 8005976:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 4;
 8005978:	220f      	movs	r2, #15
 800597a:	18bb      	adds	r3, r7, r2
 800597c:	18ba      	adds	r2, r7, r2
 800597e:	7812      	ldrb	r2, [r2, #0]
 8005980:	3204      	adds	r2, #4
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	e1b5      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "get", 3)){
 8005986:	230f      	movs	r3, #15
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	18d3      	adds	r3, r2, r3
 8005990:	4975      	ldr	r1, [pc, #468]	; (8005b68 <TokenizeUserInput+0x36c>)
 8005992:	2203      	movs	r2, #3
 8005994:	0018      	movs	r0, r3
 8005996:	f001 fc8a 	bl	80072ae <strncmp>
 800599a:	1e03      	subs	r3, r0, #0
 800599c:	d10c      	bne.n	80059b8 <TokenizeUserInput+0x1bc>
			game_tokens[token_count] = LTKN_ACT_GET;
 800599e:	230e      	movs	r3, #14
 80059a0:	18fb      	adds	r3, r7, r3
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	4a68      	ldr	r2, [pc, #416]	; (8005b48 <TokenizeUserInput+0x34c>)
 80059a6:	2108      	movs	r1, #8
 80059a8:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 4;
 80059aa:	220f      	movs	r2, #15
 80059ac:	18bb      	adds	r3, r7, r2
 80059ae:	18ba      	adds	r2, r7, r2
 80059b0:	7812      	ldrb	r2, [r2, #0]
 80059b2:	3204      	adds	r2, #4
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	e19c      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "mix", 3)){
 80059b8:	230f      	movs	r3, #15
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	18d3      	adds	r3, r2, r3
 80059c2:	496a      	ldr	r1, [pc, #424]	; (8005b6c <TokenizeUserInput+0x370>)
 80059c4:	2203      	movs	r2, #3
 80059c6:	0018      	movs	r0, r3
 80059c8:	f001 fc71 	bl	80072ae <strncmp>
 80059cc:	1e03      	subs	r3, r0, #0
 80059ce:	d10c      	bne.n	80059ea <TokenizeUserInput+0x1ee>
			game_tokens[token_count] = LTKN_ACT_MIX;
 80059d0:	230e      	movs	r3, #14
 80059d2:	18fb      	adds	r3, r7, r3
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	4a5c      	ldr	r2, [pc, #368]	; (8005b48 <TokenizeUserInput+0x34c>)
 80059d8:	2109      	movs	r1, #9
 80059da:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 4;
 80059dc:	220f      	movs	r2, #15
 80059de:	18bb      	adds	r3, r7, r2
 80059e0:	18ba      	adds	r2, r7, r2
 80059e2:	7812      	ldrb	r2, [r2, #0]
 80059e4:	3204      	adds	r2, #4
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	e183      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "north", 5)){
 80059ea:	230f      	movs	r3, #15
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	18d3      	adds	r3, r2, r3
 80059f4:	495e      	ldr	r1, [pc, #376]	; (8005b70 <TokenizeUserInput+0x374>)
 80059f6:	2205      	movs	r2, #5
 80059f8:	0018      	movs	r0, r3
 80059fa:	f001 fc58 	bl	80072ae <strncmp>
 80059fe:	1e03      	subs	r3, r0, #0
 8005a00:	d10c      	bne.n	8005a1c <TokenizeUserInput+0x220>
			game_tokens[token_count] = LTKN_NAVD_NORTH;
 8005a02:	230e      	movs	r3, #14
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	4a4f      	ldr	r2, [pc, #316]	; (8005b48 <TokenizeUserInput+0x34c>)
 8005a0a:	2110      	movs	r1, #16
 8005a0c:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 6;
 8005a0e:	220f      	movs	r2, #15
 8005a10:	18bb      	adds	r3, r7, r2
 8005a12:	18ba      	adds	r2, r7, r2
 8005a14:	7812      	ldrb	r2, [r2, #0]
 8005a16:	3206      	adds	r2, #6
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	e16a      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "south", 5)){
 8005a1c:	230f      	movs	r3, #15
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	18d3      	adds	r3, r2, r3
 8005a26:	4953      	ldr	r1, [pc, #332]	; (8005b74 <TokenizeUserInput+0x378>)
 8005a28:	2205      	movs	r2, #5
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f001 fc3f 	bl	80072ae <strncmp>
 8005a30:	1e03      	subs	r3, r0, #0
 8005a32:	d10c      	bne.n	8005a4e <TokenizeUserInput+0x252>
			game_tokens[token_count] = LTKN_NAVD_SOUTH;
 8005a34:	230e      	movs	r3, #14
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	4a43      	ldr	r2, [pc, #268]	; (8005b48 <TokenizeUserInput+0x34c>)
 8005a3c:	2111      	movs	r1, #17
 8005a3e:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 6;
 8005a40:	220f      	movs	r2, #15
 8005a42:	18bb      	adds	r3, r7, r2
 8005a44:	18ba      	adds	r2, r7, r2
 8005a46:	7812      	ldrb	r2, [r2, #0]
 8005a48:	3206      	adds	r2, #6
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	e151      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "east", 4)){
 8005a4e:	230f      	movs	r3, #15
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	18d3      	adds	r3, r2, r3
 8005a58:	4947      	ldr	r1, [pc, #284]	; (8005b78 <TokenizeUserInput+0x37c>)
 8005a5a:	2204      	movs	r2, #4
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f001 fc26 	bl	80072ae <strncmp>
 8005a62:	1e03      	subs	r3, r0, #0
 8005a64:	d10c      	bne.n	8005a80 <TokenizeUserInput+0x284>
			game_tokens[token_count] = LTKN_NAVD_EAST;
 8005a66:	230e      	movs	r3, #14
 8005a68:	18fb      	adds	r3, r7, r3
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	4a36      	ldr	r2, [pc, #216]	; (8005b48 <TokenizeUserInput+0x34c>)
 8005a6e:	2112      	movs	r1, #18
 8005a70:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8005a72:	220f      	movs	r2, #15
 8005a74:	18bb      	adds	r3, r7, r2
 8005a76:	18ba      	adds	r2, r7, r2
 8005a78:	7812      	ldrb	r2, [r2, #0]
 8005a7a:	3205      	adds	r2, #5
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	e138      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "west", 4)){
 8005a80:	230f      	movs	r3, #15
 8005a82:	18fb      	adds	r3, r7, r3
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	18d3      	adds	r3, r2, r3
 8005a8a:	493c      	ldr	r1, [pc, #240]	; (8005b7c <TokenizeUserInput+0x380>)
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f001 fc0d 	bl	80072ae <strncmp>
 8005a94:	1e03      	subs	r3, r0, #0
 8005a96:	d10c      	bne.n	8005ab2 <TokenizeUserInput+0x2b6>
			game_tokens[token_count] = LTKN_NAVD_WEST;
 8005a98:	230e      	movs	r3, #14
 8005a9a:	18fb      	adds	r3, r7, r3
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	4a2a      	ldr	r2, [pc, #168]	; (8005b48 <TokenizeUserInput+0x34c>)
 8005aa0:	2113      	movs	r1, #19
 8005aa2:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8005aa4:	220f      	movs	r2, #15
 8005aa6:	18bb      	adds	r3, r7, r2
 8005aa8:	18ba      	adds	r2, r7, r2
 8005aaa:	7812      	ldrb	r2, [r2, #0]
 8005aac:	3205      	adds	r2, #5
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e11f      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "up", 2)){
 8005ab2:	230f      	movs	r3, #15
 8005ab4:	18fb      	adds	r3, r7, r3
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	18d3      	adds	r3, r2, r3
 8005abc:	4930      	ldr	r1, [pc, #192]	; (8005b80 <TokenizeUserInput+0x384>)
 8005abe:	2202      	movs	r2, #2
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	f001 fbf4 	bl	80072ae <strncmp>
 8005ac6:	1e03      	subs	r3, r0, #0
 8005ac8:	d10c      	bne.n	8005ae4 <TokenizeUserInput+0x2e8>
			game_tokens[token_count] = LTKN_NAVD_UP;
 8005aca:	230e      	movs	r3, #14
 8005acc:	18fb      	adds	r3, r7, r3
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	4a1d      	ldr	r2, [pc, #116]	; (8005b48 <TokenizeUserInput+0x34c>)
 8005ad2:	2114      	movs	r1, #20
 8005ad4:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 3;
 8005ad6:	220f      	movs	r2, #15
 8005ad8:	18bb      	adds	r3, r7, r2
 8005ada:	18ba      	adds	r2, r7, r2
 8005adc:	7812      	ldrb	r2, [r2, #0]
 8005ade:	3203      	adds	r2, #3
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	e106      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "down", 4)){
 8005ae4:	230f      	movs	r3, #15
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	18d3      	adds	r3, r2, r3
 8005aee:	4925      	ldr	r1, [pc, #148]	; (8005b84 <TokenizeUserInput+0x388>)
 8005af0:	2204      	movs	r2, #4
 8005af2:	0018      	movs	r0, r3
 8005af4:	f001 fbdb 	bl	80072ae <strncmp>
 8005af8:	1e03      	subs	r3, r0, #0
 8005afa:	d10c      	bne.n	8005b16 <TokenizeUserInput+0x31a>
			game_tokens[token_count] = LTKN_NAVD_DOWN;
 8005afc:	230e      	movs	r3, #14
 8005afe:	18fb      	adds	r3, r7, r3
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	4a11      	ldr	r2, [pc, #68]	; (8005b48 <TokenizeUserInput+0x34c>)
 8005b04:	2115      	movs	r1, #21
 8005b06:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8005b08:	220f      	movs	r2, #15
 8005b0a:	18bb      	adds	r3, r7, r2
 8005b0c:	18ba      	adds	r2, r7, r2
 8005b0e:	7812      	ldrb	r2, [r2, #0]
 8005b10:	3205      	adds	r2, #5
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	e0ed      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "testobj", 7)){
 8005b16:	230f      	movs	r3, #15
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	18d3      	adds	r3, r2, r3
 8005b20:	4919      	ldr	r1, [pc, #100]	; (8005b88 <TokenizeUserInput+0x38c>)
 8005b22:	2207      	movs	r2, #7
 8005b24:	0018      	movs	r0, r3
 8005b26:	f001 fbc2 	bl	80072ae <strncmp>
 8005b2a:	1e03      	subs	r3, r0, #0
 8005b2c:	d12e      	bne.n	8005b8c <TokenizeUserInput+0x390>
			game_tokens[token_count] = LTKN_OBJ_TEST;
 8005b2e:	230e      	movs	r3, #14
 8005b30:	18fb      	adds	r3, r7, r3
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	4a04      	ldr	r2, [pc, #16]	; (8005b48 <TokenizeUserInput+0x34c>)
 8005b36:	2120      	movs	r1, #32
 8005b38:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 8;
 8005b3a:	220f      	movs	r2, #15
 8005b3c:	18bb      	adds	r3, r7, r2
 8005b3e:	18ba      	adds	r2, r7, r2
 8005b40:	7812      	ldrb	r2, [r2, #0]
 8005b42:	3208      	adds	r2, #8
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	e0d4      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
 8005b48:	200003c0 	.word	0x200003c0
 8005b4c:	080073b0 	.word	0x080073b0
 8005b50:	080073b4 	.word	0x080073b4
 8005b54:	080073b8 	.word	0x080073b8
 8005b58:	080073c0 	.word	0x080073c0
 8005b5c:	080073c8 	.word	0x080073c8
 8005b60:	080073d0 	.word	0x080073d0
 8005b64:	080073dc 	.word	0x080073dc
 8005b68:	080073e0 	.word	0x080073e0
 8005b6c:	080073e4 	.word	0x080073e4
 8005b70:	080073e8 	.word	0x080073e8
 8005b74:	080073f0 	.word	0x080073f0
 8005b78:	080073f8 	.word	0x080073f8
 8005b7c:	08007400 	.word	0x08007400
 8005b80:	08007408 	.word	0x08007408
 8005b84:	0800740c 	.word	0x0800740c
 8005b88:	08007414 	.word	0x08007414
		}
		else if(!strncmp(&buf[buf_index], "testitm", 7)){
 8005b8c:	230f      	movs	r3, #15
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	18d3      	adds	r3, r2, r3
 8005b96:	4963      	ldr	r1, [pc, #396]	; (8005d24 <TokenizeUserInput+0x528>)
 8005b98:	2207      	movs	r2, #7
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f001 fb87 	bl	80072ae <strncmp>
 8005ba0:	1e03      	subs	r3, r0, #0
 8005ba2:	d10c      	bne.n	8005bbe <TokenizeUserInput+0x3c2>
			game_tokens[token_count] = LTKN_ITM_TEST;
 8005ba4:	230e      	movs	r3, #14
 8005ba6:	18fb      	adds	r3, r7, r3
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	4a5f      	ldr	r2, [pc, #380]	; (8005d28 <TokenizeUserInput+0x52c>)
 8005bac:	2150      	movs	r1, #80	; 0x50
 8005bae:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 8;
 8005bb0:	220f      	movs	r2, #15
 8005bb2:	18bb      	adds	r3, r7, r2
 8005bb4:	18ba      	adds	r2, r7, r2
 8005bb6:	7812      	ldrb	r2, [r2, #0]
 8005bb8:	3208      	adds	r2, #8
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	e099      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "testcommand", 11)){
 8005bbe:	230f      	movs	r3, #15
 8005bc0:	18fb      	adds	r3, r7, r3
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	18d3      	adds	r3, r2, r3
 8005bc8:	4958      	ldr	r1, [pc, #352]	; (8005d2c <TokenizeUserInput+0x530>)
 8005bca:	220b      	movs	r2, #11
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f001 fb6e 	bl	80072ae <strncmp>
 8005bd2:	1e03      	subs	r3, r0, #0
 8005bd4:	d10c      	bne.n	8005bf0 <TokenizeUserInput+0x3f4>
			game_tokens[token_count] = LTKN_CMD_TEST;
 8005bd6:	230e      	movs	r3, #14
 8005bd8:	18fb      	adds	r3, r7, r3
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	4a52      	ldr	r2, [pc, #328]	; (8005d28 <TokenizeUserInput+0x52c>)
 8005bde:	2180      	movs	r1, #128	; 0x80
 8005be0:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 12;
 8005be2:	220f      	movs	r2, #15
 8005be4:	18bb      	adds	r3, r7, r2
 8005be6:	18ba      	adds	r2, r7, r2
 8005be8:	7812      	ldrb	r2, [r2, #0]
 8005bea:	320c      	adds	r2, #12
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	e080      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "left", 4)){
 8005bf0:	230f      	movs	r3, #15
 8005bf2:	18fb      	adds	r3, r7, r3
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	18d3      	adds	r3, r2, r3
 8005bfa:	494d      	ldr	r1, [pc, #308]	; (8005d30 <TokenizeUserInput+0x534>)
 8005bfc:	2204      	movs	r2, #4
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f001 fb55 	bl	80072ae <strncmp>
 8005c04:	1e03      	subs	r3, r0, #0
 8005c06:	d10c      	bne.n	8005c22 <TokenizeUserInput+0x426>
			game_tokens[token_count] = LTKN_TURND_LEFT;
 8005c08:	230e      	movs	r3, #14
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	4a46      	ldr	r2, [pc, #280]	; (8005d28 <TokenizeUserInput+0x52c>)
 8005c10:	2116      	movs	r1, #22
 8005c12:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8005c14:	220f      	movs	r2, #15
 8005c16:	18bb      	adds	r3, r7, r2
 8005c18:	18ba      	adds	r2, r7, r2
 8005c1a:	7812      	ldrb	r2, [r2, #0]
 8005c1c:	3205      	adds	r2, #5
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	e067      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "right", 5)){
 8005c22:	230f      	movs	r3, #15
 8005c24:	18fb      	adds	r3, r7, r3
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	18d3      	adds	r3, r2, r3
 8005c2c:	4941      	ldr	r1, [pc, #260]	; (8005d34 <TokenizeUserInput+0x538>)
 8005c2e:	2205      	movs	r2, #5
 8005c30:	0018      	movs	r0, r3
 8005c32:	f001 fb3c 	bl	80072ae <strncmp>
 8005c36:	1e03      	subs	r3, r0, #0
 8005c38:	d10c      	bne.n	8005c54 <TokenizeUserInput+0x458>
			game_tokens[token_count] = LTKN_TURND_RIGHT;
 8005c3a:	230e      	movs	r3, #14
 8005c3c:	18fb      	adds	r3, r7, r3
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	4a39      	ldr	r2, [pc, #228]	; (8005d28 <TokenizeUserInput+0x52c>)
 8005c42:	2117      	movs	r1, #23
 8005c44:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 6;
 8005c46:	220f      	movs	r2, #15
 8005c48:	18bb      	adds	r3, r7, r2
 8005c4a:	18ba      	adds	r2, r7, r2
 8005c4c:	7812      	ldrb	r2, [r2, #0]
 8005c4e:	3206      	adds	r2, #6
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	e04e      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "help", 4)){
 8005c54:	230f      	movs	r3, #15
 8005c56:	18fb      	adds	r3, r7, r3
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	18d3      	adds	r3, r2, r3
 8005c5e:	4936      	ldr	r1, [pc, #216]	; (8005d38 <TokenizeUserInput+0x53c>)
 8005c60:	2204      	movs	r2, #4
 8005c62:	0018      	movs	r0, r3
 8005c64:	f001 fb23 	bl	80072ae <strncmp>
 8005c68:	1e03      	subs	r3, r0, #0
 8005c6a:	d10c      	bne.n	8005c86 <TokenizeUserInput+0x48a>
			game_tokens[token_count] = LTKN_ACT_HELP;
 8005c6c:	230e      	movs	r3, #14
 8005c6e:	18fb      	adds	r3, r7, r3
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	4a2d      	ldr	r2, [pc, #180]	; (8005d28 <TokenizeUserInput+0x52c>)
 8005c74:	210a      	movs	r1, #10
 8005c76:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 5;
 8005c78:	220f      	movs	r2, #15
 8005c7a:	18bb      	adds	r3, r7, r2
 8005c7c:	18ba      	adds	r2, r7, r2
 8005c7e:	7812      	ldrb	r2, [r2, #0]
 8005c80:	3205      	adds	r2, #5
 8005c82:	701a      	strb	r2, [r3, #0]
 8005c84:	e035      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "inventory", 9)){
 8005c86:	230f      	movs	r3, #15
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	18d3      	adds	r3, r2, r3
 8005c90:	492a      	ldr	r1, [pc, #168]	; (8005d3c <TokenizeUserInput+0x540>)
 8005c92:	2209      	movs	r2, #9
 8005c94:	0018      	movs	r0, r3
 8005c96:	f001 fb0a 	bl	80072ae <strncmp>
 8005c9a:	1e03      	subs	r3, r0, #0
 8005c9c:	d10c      	bne.n	8005cb8 <TokenizeUserInput+0x4bc>
			game_tokens[token_count] = LTKN_ACT_INVENTORY;
 8005c9e:	230e      	movs	r3, #14
 8005ca0:	18fb      	adds	r3, r7, r3
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	4a20      	ldr	r2, [pc, #128]	; (8005d28 <TokenizeUserInput+0x52c>)
 8005ca6:	210b      	movs	r1, #11
 8005ca8:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 10;
 8005caa:	220f      	movs	r2, #15
 8005cac:	18bb      	adds	r3, r7, r2
 8005cae:	18ba      	adds	r2, r7, r2
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	320a      	adds	r2, #10
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	e01c      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else if(!strncmp(&buf[buf_index], "examine", 7)){
 8005cb8:	230f      	movs	r3, #15
 8005cba:	18fb      	adds	r3, r7, r3
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	18d3      	adds	r3, r2, r3
 8005cc2:	491f      	ldr	r1, [pc, #124]	; (8005d40 <TokenizeUserInput+0x544>)
 8005cc4:	2207      	movs	r2, #7
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f001 faf1 	bl	80072ae <strncmp>
 8005ccc:	1e03      	subs	r3, r0, #0
 8005cce:	d10c      	bne.n	8005cea <TokenizeUserInput+0x4ee>
			game_tokens[token_count] = LTKN_ACT_EXAMINE;
 8005cd0:	230e      	movs	r3, #14
 8005cd2:	18fb      	adds	r3, r7, r3
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	4a14      	ldr	r2, [pc, #80]	; (8005d28 <TokenizeUserInput+0x52c>)
 8005cd8:	210c      	movs	r1, #12
 8005cda:	54d1      	strb	r1, [r2, r3]
			buf_index = buf_index + 8;
 8005cdc:	220f      	movs	r2, #15
 8005cde:	18bb      	adds	r3, r7, r2
 8005ce0:	18ba      	adds	r2, r7, r2
 8005ce2:	7812      	ldrb	r2, [r2, #0]
 8005ce4:	3208      	adds	r2, #8
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	e003      	b.n	8005cf2 <TokenizeUserInput+0x4f6>
		}
		else{
			return buf_index;
 8005cea:	230f      	movs	r3, #15
 8005cec:	18fb      	adds	r3, r7, r3
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	e014      	b.n	8005d1c <TokenizeUserInput+0x520>
		}
		token_count++;
 8005cf2:	210e      	movs	r1, #14
 8005cf4:	187b      	adds	r3, r7, r1
 8005cf6:	781a      	ldrb	r2, [r3, #0]
 8005cf8:	187b      	adds	r3, r7, r1
 8005cfa:	3201      	adds	r2, #1
 8005cfc:	701a      	strb	r2, [r3, #0]
	while(buf[buf_index] != '\0' && token_count < MAX_TOKENS){
 8005cfe:	230f      	movs	r3, #15
 8005d00:	18fb      	adds	r3, r7, r3
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	18d3      	adds	r3, r2, r3
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <TokenizeUserInput+0x51e>
 8005d0e:	230e      	movs	r3, #14
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d800      	bhi.n	8005d1a <TokenizeUserInput+0x51e>
 8005d18:	e586      	b.n	8005828 <TokenizeUserInput+0x2c>
	}
	return 0xFF;
 8005d1a:	23ff      	movs	r3, #255	; 0xff
}
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b004      	add	sp, #16
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	0800741c 	.word	0x0800741c
 8005d28:	200003c0 	.word	0x200003c0
 8005d2c:	08007424 	.word	0x08007424
 8005d30:	08007430 	.word	0x08007430
 8005d34:	08007438 	.word	0x08007438
 8005d38:	08007440 	.word	0x08007440
 8005d3c:	08007448 	.word	0x08007448
 8005d40:	08007454 	.word	0x08007454

08005d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d48:	f7fa fa6a 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d4c:	f000 f80c 	bl	8005d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d50:	f000 f8b8 	bl	8005ec4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005d54:	f000 f876 	bl	8005e44 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8005d58:	f000 fbcc 	bl	80064f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  InitGame();
 8005d5c:	f7ff fb6c 	bl	8005438 <InitGame>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GameLoop();
 8005d60:	f7ff fbe6 	bl	8005530 <GameLoop>
 8005d64:	e7fc      	b.n	8005d60 <main+0x1c>
	...

08005d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d68:	b590      	push	{r4, r7, lr}
 8005d6a:	b09f      	sub	sp, #124	; 0x7c
 8005d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d6e:	2440      	movs	r4, #64	; 0x40
 8005d70:	193b      	adds	r3, r7, r4
 8005d72:	0018      	movs	r0, r3
 8005d74:	2338      	movs	r3, #56	; 0x38
 8005d76:	001a      	movs	r2, r3
 8005d78:	2100      	movs	r1, #0
 8005d7a:	f001 fa90 	bl	800729e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d7e:	232c      	movs	r3, #44	; 0x2c
 8005d80:	18fb      	adds	r3, r7, r3
 8005d82:	0018      	movs	r0, r3
 8005d84:	2314      	movs	r3, #20
 8005d86:	001a      	movs	r2, r3
 8005d88:	2100      	movs	r1, #0
 8005d8a:	f001 fa88 	bl	800729e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005d8e:	1d3b      	adds	r3, r7, #4
 8005d90:	0018      	movs	r0, r3
 8005d92:	2328      	movs	r3, #40	; 0x28
 8005d94:	001a      	movs	r2, r3
 8005d96:	2100      	movs	r1, #0
 8005d98:	f001 fa81 	bl	800729e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d9c:	4b27      	ldr	r3, [pc, #156]	; (8005e3c <SystemClock_Config+0xd4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a27      	ldr	r2, [pc, #156]	; (8005e40 <SystemClock_Config+0xd8>)
 8005da2:	401a      	ands	r2, r3
 8005da4:	4b25      	ldr	r3, [pc, #148]	; (8005e3c <SystemClock_Config+0xd4>)
 8005da6:	2180      	movs	r1, #128	; 0x80
 8005da8:	0109      	lsls	r1, r1, #4
 8005daa:	430a      	orrs	r2, r1
 8005dac:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8005dae:	0021      	movs	r1, r4
 8005db0:	187b      	adds	r3, r7, r1
 8005db2:	2222      	movs	r2, #34	; 0x22
 8005db4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005db6:	187b      	adds	r3, r7, r1
 8005db8:	2201      	movs	r2, #1
 8005dba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005dbc:	187b      	adds	r3, r7, r1
 8005dbe:	2210      	movs	r2, #16
 8005dc0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005dc2:	187b      	adds	r3, r7, r1
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005dc8:	187b      	adds	r3, r7, r1
 8005dca:	2200      	movs	r2, #0
 8005dcc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005dce:	187b      	adds	r3, r7, r1
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f7fb fe71 	bl	8001ab8 <HAL_RCC_OscConfig>
 8005dd6:	1e03      	subs	r3, r0, #0
 8005dd8:	d001      	beq.n	8005dde <SystemClock_Config+0x76>
  {
    Error_Handler();
 8005dda:	f000 f8cb 	bl	8005f74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005dde:	212c      	movs	r1, #44	; 0x2c
 8005de0:	187b      	adds	r3, r7, r1
 8005de2:	220f      	movs	r2, #15
 8005de4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005de6:	187b      	adds	r3, r7, r1
 8005de8:	2201      	movs	r2, #1
 8005dea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005dec:	187b      	adds	r3, r7, r1
 8005dee:	2200      	movs	r2, #0
 8005df0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005df2:	187b      	adds	r3, r7, r1
 8005df4:	2200      	movs	r2, #0
 8005df6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005df8:	187b      	adds	r3, r7, r1
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005dfe:	187b      	adds	r3, r7, r1
 8005e00:	2100      	movs	r1, #0
 8005e02:	0018      	movs	r0, r3
 8005e04:	f7fc fa28 	bl	8002258 <HAL_RCC_ClockConfig>
 8005e08:	1e03      	subs	r3, r0, #0
 8005e0a:	d001      	beq.n	8005e10 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005e0c:	f000 f8b2 	bl	8005f74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8005e10:	1d3b      	adds	r3, r7, #4
 8005e12:	2248      	movs	r2, #72	; 0x48
 8005e14:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005e16:	1d3b      	adds	r3, r7, #4
 8005e18:	2200      	movs	r2, #0
 8005e1a:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8005e1c:	1d3b      	adds	r3, r7, #4
 8005e1e:	2280      	movs	r2, #128	; 0x80
 8005e20:	04d2      	lsls	r2, r2, #19
 8005e22:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e24:	1d3b      	adds	r3, r7, #4
 8005e26:	0018      	movs	r0, r3
 8005e28:	f7fc fbc4 	bl	80025b4 <HAL_RCCEx_PeriphCLKConfig>
 8005e2c:	1e03      	subs	r3, r0, #0
 8005e2e:	d001      	beq.n	8005e34 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8005e30:	f000 f8a0 	bl	8005f74 <Error_Handler>
  }
}
 8005e34:	46c0      	nop			; (mov r8, r8)
 8005e36:	46bd      	mov	sp, r7
 8005e38:	b01f      	add	sp, #124	; 0x7c
 8005e3a:	bd90      	pop	{r4, r7, pc}
 8005e3c:	40007000 	.word	0x40007000
 8005e40:	ffffe7ff 	.word	0xffffe7ff

08005e44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005e48:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <MX_I2C1_Init+0x74>)
 8005e4a:	4a1c      	ldr	r2, [pc, #112]	; (8005ebc <MX_I2C1_Init+0x78>)
 8005e4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8005e4e:	4b1a      	ldr	r3, [pc, #104]	; (8005eb8 <MX_I2C1_Init+0x74>)
 8005e50:	4a1b      	ldr	r2, [pc, #108]	; (8005ec0 <MX_I2C1_Init+0x7c>)
 8005e52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005e54:	4b18      	ldr	r3, [pc, #96]	; (8005eb8 <MX_I2C1_Init+0x74>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005e5a:	4b17      	ldr	r3, [pc, #92]	; (8005eb8 <MX_I2C1_Init+0x74>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005e60:	4b15      	ldr	r3, [pc, #84]	; (8005eb8 <MX_I2C1_Init+0x74>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <MX_I2C1_Init+0x74>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005e6c:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <MX_I2C1_Init+0x74>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005e72:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <MX_I2C1_Init+0x74>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005e78:	4b0f      	ldr	r3, [pc, #60]	; (8005eb8 <MX_I2C1_Init+0x74>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005e7e:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <MX_I2C1_Init+0x74>)
 8005e80:	0018      	movs	r0, r3
 8005e82:	f7fa fca3 	bl	80007cc <HAL_I2C_Init>
 8005e86:	1e03      	subs	r3, r0, #0
 8005e88:	d001      	beq.n	8005e8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005e8a:	f000 f873 	bl	8005f74 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005e8e:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <MX_I2C1_Init+0x74>)
 8005e90:	2100      	movs	r1, #0
 8005e92:	0018      	movs	r0, r3
 8005e94:	f7fa fd30 	bl	80008f8 <HAL_I2CEx_ConfigAnalogFilter>
 8005e98:	1e03      	subs	r3, r0, #0
 8005e9a:	d001      	beq.n	8005ea0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005e9c:	f000 f86a 	bl	8005f74 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005ea0:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <MX_I2C1_Init+0x74>)
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f7fa fd73 	bl	8000990 <HAL_I2CEx_ConfigDigitalFilter>
 8005eaa:	1e03      	subs	r3, r0, #0
 8005eac:	d001      	beq.n	8005eb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005eae:	f000 f861 	bl	8005f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	200007dc 	.word	0x200007dc
 8005ebc:	40005400 	.word	0x40005400
 8005ec0:	00303d5b 	.word	0x00303d5b

08005ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ec4:	b590      	push	{r4, r7, lr}
 8005ec6:	b089      	sub	sp, #36	; 0x24
 8005ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eca:	240c      	movs	r4, #12
 8005ecc:	193b      	adds	r3, r7, r4
 8005ece:	0018      	movs	r0, r3
 8005ed0:	2314      	movs	r3, #20
 8005ed2:	001a      	movs	r2, r3
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	f001 f9e2 	bl	800729e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eda:	4b23      	ldr	r3, [pc, #140]	; (8005f68 <MX_GPIO_Init+0xa4>)
 8005edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ede:	4b22      	ldr	r3, [pc, #136]	; (8005f68 <MX_GPIO_Init+0xa4>)
 8005ee0:	2104      	movs	r1, #4
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ee6:	4b20      	ldr	r3, [pc, #128]	; (8005f68 <MX_GPIO_Init+0xa4>)
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	2204      	movs	r2, #4
 8005eec:	4013      	ands	r3, r2
 8005eee:	60bb      	str	r3, [r7, #8]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ef2:	4b1d      	ldr	r3, [pc, #116]	; (8005f68 <MX_GPIO_Init+0xa4>)
 8005ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef6:	4b1c      	ldr	r3, [pc, #112]	; (8005f68 <MX_GPIO_Init+0xa4>)
 8005ef8:	2101      	movs	r1, #1
 8005efa:	430a      	orrs	r2, r1
 8005efc:	62da      	str	r2, [r3, #44]	; 0x2c
 8005efe:	4b1a      	ldr	r3, [pc, #104]	; (8005f68 <MX_GPIO_Init+0xa4>)
 8005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f02:	2201      	movs	r2, #1
 8005f04:	4013      	ands	r3, r2
 8005f06:	607b      	str	r3, [r7, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8005f0a:	23a0      	movs	r3, #160	; 0xa0
 8005f0c:	05db      	lsls	r3, r3, #23
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2120      	movs	r1, #32
 8005f12:	0018      	movs	r0, r3
 8005f14:	f7fa fc3c 	bl	8000790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005f18:	193b      	adds	r3, r7, r4
 8005f1a:	2280      	movs	r2, #128	; 0x80
 8005f1c:	0192      	lsls	r2, r2, #6
 8005f1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005f20:	193b      	adds	r3, r7, r4
 8005f22:	4a12      	ldr	r2, [pc, #72]	; (8005f6c <MX_GPIO_Init+0xa8>)
 8005f24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f26:	193b      	adds	r3, r7, r4
 8005f28:	2200      	movs	r2, #0
 8005f2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005f2c:	193b      	adds	r3, r7, r4
 8005f2e:	4a10      	ldr	r2, [pc, #64]	; (8005f70 <MX_GPIO_Init+0xac>)
 8005f30:	0019      	movs	r1, r3
 8005f32:	0010      	movs	r0, r2
 8005f34:	f7fa faae 	bl	8000494 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8005f38:	0021      	movs	r1, r4
 8005f3a:	187b      	adds	r3, r7, r1
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f40:	187b      	adds	r3, r7, r1
 8005f42:	2201      	movs	r2, #1
 8005f44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f46:	187b      	adds	r3, r7, r1
 8005f48:	2200      	movs	r2, #0
 8005f4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f4c:	187b      	adds	r3, r7, r1
 8005f4e:	2200      	movs	r2, #0
 8005f50:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005f52:	187a      	adds	r2, r7, r1
 8005f54:	23a0      	movs	r3, #160	; 0xa0
 8005f56:	05db      	lsls	r3, r3, #23
 8005f58:	0011      	movs	r1, r2
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f7fa fa9a 	bl	8000494 <HAL_GPIO_Init>

}
 8005f60:	46c0      	nop			; (mov r8, r8)
 8005f62:	46bd      	mov	sp, r7
 8005f64:	b009      	add	sp, #36	; 0x24
 8005f66:	bd90      	pop	{r4, r7, pc}
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	10210000 	.word	0x10210000
 8005f70:	50000800 	.word	0x50000800

08005f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005f78:	46c0      	nop			; (mov r8, r8)
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <InitObjs>:
struct obj obj_testobject;
//Array of all the game objects
struct obj* game_objs[OBJECT_COUNT];


void InitObjs(){
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
	obj_testobject.token = LTKN_OBJ_TEST;
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <InitObjs+0x30>)
 8005f86:	2220      	movs	r2, #32
 8005f88:	701a      	strb	r2, [r3, #0]
	obj_testobject.state = OBJ_UNTOUCHED;
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <InitObjs+0x30>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	705a      	strb	r2, [r3, #1]
	obj_testobject.name = obj_testobject_name;
 8005f90:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <InitObjs+0x30>)
 8005f92:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <InitObjs+0x34>)
 8005f94:	605a      	str	r2, [r3, #4]
	obj_testobject.seen_text = obj_testobj_seen;
 8005f96:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <InitObjs+0x30>)
 8005f98:	4a07      	ldr	r2, [pc, #28]	; (8005fb8 <InitObjs+0x38>)
 8005f9a:	609a      	str	r2, [r3, #8]
	obj_testobject.examine_text = obj_testobj_examine;
 8005f9c:	4b04      	ldr	r3, [pc, #16]	; (8005fb0 <InitObjs+0x30>)
 8005f9e:	4a07      	ldr	r2, [pc, #28]	; (8005fbc <InitObjs+0x3c>)
 8005fa0:	60da      	str	r2, [r3, #12]
	game_objs[0] = &obj_testobject;
 8005fa2:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <InitObjs+0x40>)
 8005fa4:	4a02      	ldr	r2, [pc, #8]	; (8005fb0 <InitObjs+0x30>)
 8005fa6:	601a      	str	r2, [r3, #0]
}
 8005fa8:	46c0      	nop			; (mov r8, r8)
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	20000828 	.word	0x20000828
 8005fb4:	08007554 	.word	0x08007554
 8005fb8:	08007560 	.word	0x08007560
 8005fbc:	080075a4 	.word	0x080075a4
 8005fc0:	20000838 	.word	0x20000838

08005fc4 <GetObjByToken>:

struct obj* GetObjByToken(uint8_t token){
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	0002      	movs	r2, r0
 8005fcc:	1dfb      	adds	r3, r7, #7
 8005fce:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < OBJECT_COUNT; i++){
 8005fd0:	230f      	movs	r3, #15
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	e017      	b.n	800600a <GetObjByToken+0x46>
		if(game_objs[i]->token == token){
 8005fda:	230f      	movs	r3, #15
 8005fdc:	18fb      	adds	r3, r7, r3
 8005fde:	781a      	ldrb	r2, [r3, #0]
 8005fe0:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <GetObjByToken+0x5c>)
 8005fe2:	0092      	lsls	r2, r2, #2
 8005fe4:	58d3      	ldr	r3, [r2, r3]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	1dfa      	adds	r2, r7, #7
 8005fea:	7812      	ldrb	r2, [r2, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d106      	bne.n	8005ffe <GetObjByToken+0x3a>
			return game_objs[i];
 8005ff0:	230f      	movs	r3, #15
 8005ff2:	18fb      	adds	r3, r7, r3
 8005ff4:	781a      	ldrb	r2, [r3, #0]
 8005ff6:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <GetObjByToken+0x5c>)
 8005ff8:	0092      	lsls	r2, r2, #2
 8005ffa:	58d3      	ldr	r3, [r2, r3]
 8005ffc:	e00b      	b.n	8006016 <GetObjByToken+0x52>
	for(uint8_t i = 0; i < OBJECT_COUNT; i++){
 8005ffe:	210f      	movs	r1, #15
 8006000:	187b      	adds	r3, r7, r1
 8006002:	781a      	ldrb	r2, [r3, #0]
 8006004:	187b      	adds	r3, r7, r1
 8006006:	3201      	adds	r2, #1
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	230f      	movs	r3, #15
 800600c:	18fb      	adds	r3, r7, r3
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0e2      	beq.n	8005fda <GetObjByToken+0x16>
		}
	}
	return NULL;
 8006014:	2300      	movs	r3, #0
}
 8006016:	0018      	movs	r0, r3
 8006018:	46bd      	mov	sp, r7
 800601a:	b004      	add	sp, #16
 800601c:	bd80      	pop	{r7, pc}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	20000838 	.word	0x20000838

08006024 <InitRooms>:
//Room item lists
struct itm* rm_testeast_itms[1];
//Room object lists
struct obj* rm_testdown_objs[1];

void InitRooms(){
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
	//Initialize the list of all the game rooms
	game_rooms[0] = &rm_teststart;
 8006028:	4ba4      	ldr	r3, [pc, #656]	; (80062bc <InitRooms+0x298>)
 800602a:	4aa5      	ldr	r2, [pc, #660]	; (80062c0 <InitRooms+0x29c>)
 800602c:	601a      	str	r2, [r3, #0]
	game_rooms[1] = &rm_testnorth;
 800602e:	4ba3      	ldr	r3, [pc, #652]	; (80062bc <InitRooms+0x298>)
 8006030:	4aa4      	ldr	r2, [pc, #656]	; (80062c4 <InitRooms+0x2a0>)
 8006032:	605a      	str	r2, [r3, #4]
	game_rooms[2] = &rm_testeast;
 8006034:	4ba1      	ldr	r3, [pc, #644]	; (80062bc <InitRooms+0x298>)
 8006036:	4aa4      	ldr	r2, [pc, #656]	; (80062c8 <InitRooms+0x2a4>)
 8006038:	609a      	str	r2, [r3, #8]
	game_rooms[3] = &rm_testsouth;
 800603a:	4ba0      	ldr	r3, [pc, #640]	; (80062bc <InitRooms+0x298>)
 800603c:	4aa3      	ldr	r2, [pc, #652]	; (80062cc <InitRooms+0x2a8>)
 800603e:	60da      	str	r2, [r3, #12]
	game_rooms[4] = &rm_testwest;
 8006040:	4b9e      	ldr	r3, [pc, #632]	; (80062bc <InitRooms+0x298>)
 8006042:	4aa3      	ldr	r2, [pc, #652]	; (80062d0 <InitRooms+0x2ac>)
 8006044:	611a      	str	r2, [r3, #16]
	game_rooms[5] = &rm_testdown;
 8006046:	4b9d      	ldr	r3, [pc, #628]	; (80062bc <InitRooms+0x298>)
 8006048:	4aa2      	ldr	r2, [pc, #648]	; (80062d4 <InitRooms+0x2b0>)
 800604a:	615a      	str	r2, [r3, #20]
	game_rooms[6] = &rm_testup;
 800604c:	4b9b      	ldr	r3, [pc, #620]	; (80062bc <InitRooms+0x298>)
 800604e:	4aa2      	ldr	r2, [pc, #648]	; (80062d8 <InitRooms+0x2b4>)
 8006050:	619a      	str	r2, [r3, #24]
	//Init the start room
	rm_teststart.north_room = &rm_testnorth;
 8006052:	4b9b      	ldr	r3, [pc, #620]	; (80062c0 <InitRooms+0x29c>)
 8006054:	4a9b      	ldr	r2, [pc, #620]	; (80062c4 <InitRooms+0x2a0>)
 8006056:	601a      	str	r2, [r3, #0]
	rm_teststart.east_room = &rm_testeast;
 8006058:	4b99      	ldr	r3, [pc, #612]	; (80062c0 <InitRooms+0x29c>)
 800605a:	4a9b      	ldr	r2, [pc, #620]	; (80062c8 <InitRooms+0x2a4>)
 800605c:	605a      	str	r2, [r3, #4]
	rm_teststart.south_room = &rm_testsouth;
 800605e:	4b98      	ldr	r3, [pc, #608]	; (80062c0 <InitRooms+0x29c>)
 8006060:	4a9a      	ldr	r2, [pc, #616]	; (80062cc <InitRooms+0x2a8>)
 8006062:	609a      	str	r2, [r3, #8]
	rm_teststart.west_room = &rm_testwest;
 8006064:	4b96      	ldr	r3, [pc, #600]	; (80062c0 <InitRooms+0x29c>)
 8006066:	4a9a      	ldr	r2, [pc, #616]	; (80062d0 <InitRooms+0x2ac>)
 8006068:	60da      	str	r2, [r3, #12]
	rm_teststart.up_room = NULL; //Up room needs to be unlocked
 800606a:	4b95      	ldr	r3, [pc, #596]	; (80062c0 <InitRooms+0x29c>)
 800606c:	2200      	movs	r2, #0
 800606e:	611a      	str	r2, [r3, #16]
	rm_teststart.down_room = &rm_testdown;
 8006070:	4b93      	ldr	r3, [pc, #588]	; (80062c0 <InitRooms+0x29c>)
 8006072:	4a98      	ldr	r2, [pc, #608]	; (80062d4 <InitRooms+0x2b0>)
 8006074:	615a      	str	r2, [r3, #20]
	rm_teststart.name = rm_name_teststart;
 8006076:	4b92      	ldr	r3, [pc, #584]	; (80062c0 <InitRooms+0x29c>)
 8006078:	4a98      	ldr	r2, [pc, #608]	; (80062dc <InitRooms+0x2b8>)
 800607a:	619a      	str	r2, [r3, #24]
	rm_teststart.flavortext = rm_flvr_teststart;
 800607c:	4b90      	ldr	r3, [pc, #576]	; (80062c0 <InitRooms+0x29c>)
 800607e:	4a98      	ldr	r2, [pc, #608]	; (80062e0 <InitRooms+0x2bc>)
 8006080:	61da      	str	r2, [r3, #28]
	rm_teststart.items = NULL;
 8006082:	4b8f      	ldr	r3, [pc, #572]	; (80062c0 <InitRooms+0x29c>)
 8006084:	2200      	movs	r2, #0
 8006086:	621a      	str	r2, [r3, #32]
	rm_teststart.objects = NULL;
 8006088:	4b8d      	ldr	r3, [pc, #564]	; (80062c0 <InitRooms+0x29c>)
 800608a:	2200      	movs	r2, #0
 800608c:	625a      	str	r2, [r3, #36]	; 0x24
	rm_teststart.item_count = 0;
 800608e:	4b8c      	ldr	r3, [pc, #560]	; (80062c0 <InitRooms+0x29c>)
 8006090:	2228      	movs	r2, #40	; 0x28
 8006092:	2100      	movs	r1, #0
 8006094:	5499      	strb	r1, [r3, r2]
	rm_teststart.object_count = 0;
 8006096:	4b8a      	ldr	r3, [pc, #552]	; (80062c0 <InitRooms+0x29c>)
 8006098:	2229      	movs	r2, #41	; 0x29
 800609a:	2100      	movs	r1, #0
 800609c:	5499      	strb	r1, [r3, r2]
	rm_teststart.token = RTKN_TESTSTART;
 800609e:	4b88      	ldr	r3, [pc, #544]	; (80062c0 <InitRooms+0x29c>)
 80060a0:	222a      	movs	r2, #42	; 0x2a
 80060a2:	2101      	movs	r1, #1
 80060a4:	5499      	strb	r1, [r3, r2]
	//Init the north room
	rm_testnorth.north_room = NULL;
 80060a6:	4b87      	ldr	r3, [pc, #540]	; (80062c4 <InitRooms+0x2a0>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
	rm_testnorth.east_room = NULL;
 80060ac:	4b85      	ldr	r3, [pc, #532]	; (80062c4 <InitRooms+0x2a0>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	605a      	str	r2, [r3, #4]
	rm_testnorth.south_room = &rm_teststart;
 80060b2:	4b84      	ldr	r3, [pc, #528]	; (80062c4 <InitRooms+0x2a0>)
 80060b4:	4a82      	ldr	r2, [pc, #520]	; (80062c0 <InitRooms+0x29c>)
 80060b6:	609a      	str	r2, [r3, #8]
	rm_testnorth.west_room = NULL;
 80060b8:	4b82      	ldr	r3, [pc, #520]	; (80062c4 <InitRooms+0x2a0>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	60da      	str	r2, [r3, #12]
	rm_testnorth.up_room = NULL;
 80060be:	4b81      	ldr	r3, [pc, #516]	; (80062c4 <InitRooms+0x2a0>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	611a      	str	r2, [r3, #16]
	rm_testnorth.down_room = NULL;
 80060c4:	4b7f      	ldr	r3, [pc, #508]	; (80062c4 <InitRooms+0x2a0>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	615a      	str	r2, [r3, #20]
	rm_testnorth.name = rm_name_testnorth;
 80060ca:	4b7e      	ldr	r3, [pc, #504]	; (80062c4 <InitRooms+0x2a0>)
 80060cc:	4a85      	ldr	r2, [pc, #532]	; (80062e4 <InitRooms+0x2c0>)
 80060ce:	619a      	str	r2, [r3, #24]
	rm_testnorth.flavortext = rm_flvr_testnorth;
 80060d0:	4b7c      	ldr	r3, [pc, #496]	; (80062c4 <InitRooms+0x2a0>)
 80060d2:	4a85      	ldr	r2, [pc, #532]	; (80062e8 <InitRooms+0x2c4>)
 80060d4:	61da      	str	r2, [r3, #28]
	rm_testnorth.items = NULL;
 80060d6:	4b7b      	ldr	r3, [pc, #492]	; (80062c4 <InitRooms+0x2a0>)
 80060d8:	2200      	movs	r2, #0
 80060da:	621a      	str	r2, [r3, #32]
	rm_testnorth.objects = NULL;
 80060dc:	4b79      	ldr	r3, [pc, #484]	; (80062c4 <InitRooms+0x2a0>)
 80060de:	2200      	movs	r2, #0
 80060e0:	625a      	str	r2, [r3, #36]	; 0x24
	rm_testnorth.item_count = 0;
 80060e2:	4b78      	ldr	r3, [pc, #480]	; (80062c4 <InitRooms+0x2a0>)
 80060e4:	2228      	movs	r2, #40	; 0x28
 80060e6:	2100      	movs	r1, #0
 80060e8:	5499      	strb	r1, [r3, r2]
	rm_testnorth.object_count = 0;
 80060ea:	4b76      	ldr	r3, [pc, #472]	; (80062c4 <InitRooms+0x2a0>)
 80060ec:	2229      	movs	r2, #41	; 0x29
 80060ee:	2100      	movs	r1, #0
 80060f0:	5499      	strb	r1, [r3, r2]
	rm_testnorth.token = RTKN_TESTNORTH;
 80060f2:	4b74      	ldr	r3, [pc, #464]	; (80062c4 <InitRooms+0x2a0>)
 80060f4:	222a      	movs	r2, #42	; 0x2a
 80060f6:	2102      	movs	r1, #2
 80060f8:	5499      	strb	r1, [r3, r2]
	//Init the east room
	rm_testeast.north_room = NULL;
 80060fa:	4b73      	ldr	r3, [pc, #460]	; (80062c8 <InitRooms+0x2a4>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
	rm_testeast.east_room = NULL;
 8006100:	4b71      	ldr	r3, [pc, #452]	; (80062c8 <InitRooms+0x2a4>)
 8006102:	2200      	movs	r2, #0
 8006104:	605a      	str	r2, [r3, #4]
	rm_testeast.south_room = NULL;
 8006106:	4b70      	ldr	r3, [pc, #448]	; (80062c8 <InitRooms+0x2a4>)
 8006108:	2200      	movs	r2, #0
 800610a:	609a      	str	r2, [r3, #8]
	rm_testeast.west_room = &rm_teststart;
 800610c:	4b6e      	ldr	r3, [pc, #440]	; (80062c8 <InitRooms+0x2a4>)
 800610e:	4a6c      	ldr	r2, [pc, #432]	; (80062c0 <InitRooms+0x29c>)
 8006110:	60da      	str	r2, [r3, #12]
	rm_testeast.up_room = NULL;
 8006112:	4b6d      	ldr	r3, [pc, #436]	; (80062c8 <InitRooms+0x2a4>)
 8006114:	2200      	movs	r2, #0
 8006116:	611a      	str	r2, [r3, #16]
	rm_testeast.down_room = NULL;
 8006118:	4b6b      	ldr	r3, [pc, #428]	; (80062c8 <InitRooms+0x2a4>)
 800611a:	2200      	movs	r2, #0
 800611c:	615a      	str	r2, [r3, #20]
	rm_testeast.name = rm_name_testeast;
 800611e:	4b6a      	ldr	r3, [pc, #424]	; (80062c8 <InitRooms+0x2a4>)
 8006120:	4a72      	ldr	r2, [pc, #456]	; (80062ec <InitRooms+0x2c8>)
 8006122:	619a      	str	r2, [r3, #24]
	rm_testeast.flavortext = rm_flvr_testeast;
 8006124:	4b68      	ldr	r3, [pc, #416]	; (80062c8 <InitRooms+0x2a4>)
 8006126:	4a72      	ldr	r2, [pc, #456]	; (80062f0 <InitRooms+0x2cc>)
 8006128:	61da      	str	r2, [r3, #28]
	rm_testeast.items = rm_testeast_itms;
 800612a:	4b67      	ldr	r3, [pc, #412]	; (80062c8 <InitRooms+0x2a4>)
 800612c:	4a71      	ldr	r2, [pc, #452]	; (80062f4 <InitRooms+0x2d0>)
 800612e:	621a      	str	r2, [r3, #32]
	rm_testeast.objects = NULL;
 8006130:	4b65      	ldr	r3, [pc, #404]	; (80062c8 <InitRooms+0x2a4>)
 8006132:	2200      	movs	r2, #0
 8006134:	625a      	str	r2, [r3, #36]	; 0x24
	rm_testeast.item_count = 1;
 8006136:	4b64      	ldr	r3, [pc, #400]	; (80062c8 <InitRooms+0x2a4>)
 8006138:	2228      	movs	r2, #40	; 0x28
 800613a:	2101      	movs	r1, #1
 800613c:	5499      	strb	r1, [r3, r2]
	rm_testeast.object_count = 0;
 800613e:	4b62      	ldr	r3, [pc, #392]	; (80062c8 <InitRooms+0x2a4>)
 8006140:	2229      	movs	r2, #41	; 0x29
 8006142:	2100      	movs	r1, #0
 8006144:	5499      	strb	r1, [r3, r2]
	rm_testeast.token = RTKN_TESTEAST;
 8006146:	4b60      	ldr	r3, [pc, #384]	; (80062c8 <InitRooms+0x2a4>)
 8006148:	222a      	movs	r2, #42	; 0x2a
 800614a:	2103      	movs	r1, #3
 800614c:	5499      	strb	r1, [r3, r2]
	rm_testeast_itms[0] = GetItmByToken(LTKN_ITM_TEST);
 800614e:	2050      	movs	r0, #80	; 0x50
 8006150:	f7ff fb24 	bl	800579c <GetItmByToken>
 8006154:	0002      	movs	r2, r0
 8006156:	4b67      	ldr	r3, [pc, #412]	; (80062f4 <InitRooms+0x2d0>)
 8006158:	601a      	str	r2, [r3, #0]
	//Init the south room
	rm_testsouth.north_room = &rm_teststart;
 800615a:	4b5c      	ldr	r3, [pc, #368]	; (80062cc <InitRooms+0x2a8>)
 800615c:	4a58      	ldr	r2, [pc, #352]	; (80062c0 <InitRooms+0x29c>)
 800615e:	601a      	str	r2, [r3, #0]
	rm_testsouth.east_room = NULL;
 8006160:	4b5a      	ldr	r3, [pc, #360]	; (80062cc <InitRooms+0x2a8>)
 8006162:	2200      	movs	r2, #0
 8006164:	605a      	str	r2, [r3, #4]
	rm_testsouth.south_room = NULL;
 8006166:	4b59      	ldr	r3, [pc, #356]	; (80062cc <InitRooms+0x2a8>)
 8006168:	2200      	movs	r2, #0
 800616a:	609a      	str	r2, [r3, #8]
	rm_testsouth.west_room = NULL;
 800616c:	4b57      	ldr	r3, [pc, #348]	; (80062cc <InitRooms+0x2a8>)
 800616e:	2200      	movs	r2, #0
 8006170:	60da      	str	r2, [r3, #12]
	rm_testsouth.up_room = NULL;
 8006172:	4b56      	ldr	r3, [pc, #344]	; (80062cc <InitRooms+0x2a8>)
 8006174:	2200      	movs	r2, #0
 8006176:	611a      	str	r2, [r3, #16]
	rm_testsouth.down_room = NULL;
 8006178:	4b54      	ldr	r3, [pc, #336]	; (80062cc <InitRooms+0x2a8>)
 800617a:	2200      	movs	r2, #0
 800617c:	615a      	str	r2, [r3, #20]
	rm_testsouth.name = rm_name_testsouth;
 800617e:	4b53      	ldr	r3, [pc, #332]	; (80062cc <InitRooms+0x2a8>)
 8006180:	4a5d      	ldr	r2, [pc, #372]	; (80062f8 <InitRooms+0x2d4>)
 8006182:	619a      	str	r2, [r3, #24]
	rm_testsouth.flavortext = rm_flvr_testsouth;
 8006184:	4b51      	ldr	r3, [pc, #324]	; (80062cc <InitRooms+0x2a8>)
 8006186:	4a5d      	ldr	r2, [pc, #372]	; (80062fc <InitRooms+0x2d8>)
 8006188:	61da      	str	r2, [r3, #28]
	rm_testsouth.items = NULL;
 800618a:	4b50      	ldr	r3, [pc, #320]	; (80062cc <InitRooms+0x2a8>)
 800618c:	2200      	movs	r2, #0
 800618e:	621a      	str	r2, [r3, #32]
	rm_testsouth.objects = NULL;
 8006190:	4b4e      	ldr	r3, [pc, #312]	; (80062cc <InitRooms+0x2a8>)
 8006192:	2200      	movs	r2, #0
 8006194:	625a      	str	r2, [r3, #36]	; 0x24
	rm_testsouth.item_count = 0;
 8006196:	4b4d      	ldr	r3, [pc, #308]	; (80062cc <InitRooms+0x2a8>)
 8006198:	2228      	movs	r2, #40	; 0x28
 800619a:	2100      	movs	r1, #0
 800619c:	5499      	strb	r1, [r3, r2]
	rm_testsouth.object_count = 0;
 800619e:	4b4b      	ldr	r3, [pc, #300]	; (80062cc <InitRooms+0x2a8>)
 80061a0:	2229      	movs	r2, #41	; 0x29
 80061a2:	2100      	movs	r1, #0
 80061a4:	5499      	strb	r1, [r3, r2]
	rm_testsouth.token = RTKN_TESTSOUTH;
 80061a6:	4b49      	ldr	r3, [pc, #292]	; (80062cc <InitRooms+0x2a8>)
 80061a8:	222a      	movs	r2, #42	; 0x2a
 80061aa:	2104      	movs	r1, #4
 80061ac:	5499      	strb	r1, [r3, r2]
	//Init the west room
	rm_testwest.north_room = NULL;
 80061ae:	4b48      	ldr	r3, [pc, #288]	; (80062d0 <InitRooms+0x2ac>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
	rm_testwest.east_room = &rm_teststart;
 80061b4:	4b46      	ldr	r3, [pc, #280]	; (80062d0 <InitRooms+0x2ac>)
 80061b6:	4a42      	ldr	r2, [pc, #264]	; (80062c0 <InitRooms+0x29c>)
 80061b8:	605a      	str	r2, [r3, #4]
	rm_testwest.south_room = NULL;
 80061ba:	4b45      	ldr	r3, [pc, #276]	; (80062d0 <InitRooms+0x2ac>)
 80061bc:	2200      	movs	r2, #0
 80061be:	609a      	str	r2, [r3, #8]
	rm_testwest.west_room = NULL;
 80061c0:	4b43      	ldr	r3, [pc, #268]	; (80062d0 <InitRooms+0x2ac>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	60da      	str	r2, [r3, #12]
	rm_testwest.up_room = NULL;
 80061c6:	4b42      	ldr	r3, [pc, #264]	; (80062d0 <InitRooms+0x2ac>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	611a      	str	r2, [r3, #16]
	rm_testwest.down_room = NULL;
 80061cc:	4b40      	ldr	r3, [pc, #256]	; (80062d0 <InitRooms+0x2ac>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	615a      	str	r2, [r3, #20]
	rm_testwest.name = rm_name_testwest;
 80061d2:	4b3f      	ldr	r3, [pc, #252]	; (80062d0 <InitRooms+0x2ac>)
 80061d4:	4a4a      	ldr	r2, [pc, #296]	; (8006300 <InitRooms+0x2dc>)
 80061d6:	619a      	str	r2, [r3, #24]
	rm_testwest.flavortext = rm_flvr_testwest;
 80061d8:	4b3d      	ldr	r3, [pc, #244]	; (80062d0 <InitRooms+0x2ac>)
 80061da:	4a4a      	ldr	r2, [pc, #296]	; (8006304 <InitRooms+0x2e0>)
 80061dc:	61da      	str	r2, [r3, #28]
	rm_testwest.items = NULL;
 80061de:	4b3c      	ldr	r3, [pc, #240]	; (80062d0 <InitRooms+0x2ac>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	621a      	str	r2, [r3, #32]
	rm_testwest.objects = NULL;
 80061e4:	4b3a      	ldr	r3, [pc, #232]	; (80062d0 <InitRooms+0x2ac>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	625a      	str	r2, [r3, #36]	; 0x24
	rm_testwest.item_count = 0;
 80061ea:	4b39      	ldr	r3, [pc, #228]	; (80062d0 <InitRooms+0x2ac>)
 80061ec:	2228      	movs	r2, #40	; 0x28
 80061ee:	2100      	movs	r1, #0
 80061f0:	5499      	strb	r1, [r3, r2]
	rm_testwest.object_count = 0;
 80061f2:	4b37      	ldr	r3, [pc, #220]	; (80062d0 <InitRooms+0x2ac>)
 80061f4:	2229      	movs	r2, #41	; 0x29
 80061f6:	2100      	movs	r1, #0
 80061f8:	5499      	strb	r1, [r3, r2]
	rm_testwest.token = RTKN_TESTWEST;
 80061fa:	4b35      	ldr	r3, [pc, #212]	; (80062d0 <InitRooms+0x2ac>)
 80061fc:	222a      	movs	r2, #42	; 0x2a
 80061fe:	2105      	movs	r1, #5
 8006200:	5499      	strb	r1, [r3, r2]
	//Init the down room
	rm_testdown.north_room = NULL;
 8006202:	4b34      	ldr	r3, [pc, #208]	; (80062d4 <InitRooms+0x2b0>)
 8006204:	2200      	movs	r2, #0
 8006206:	601a      	str	r2, [r3, #0]
	rm_testdown.east_room = NULL;
 8006208:	4b32      	ldr	r3, [pc, #200]	; (80062d4 <InitRooms+0x2b0>)
 800620a:	2200      	movs	r2, #0
 800620c:	605a      	str	r2, [r3, #4]
	rm_testdown.south_room = NULL;
 800620e:	4b31      	ldr	r3, [pc, #196]	; (80062d4 <InitRooms+0x2b0>)
 8006210:	2200      	movs	r2, #0
 8006212:	609a      	str	r2, [r3, #8]
	rm_testdown.west_room = NULL;
 8006214:	4b2f      	ldr	r3, [pc, #188]	; (80062d4 <InitRooms+0x2b0>)
 8006216:	2200      	movs	r2, #0
 8006218:	60da      	str	r2, [r3, #12]
	rm_testdown.up_room = &rm_teststart;
 800621a:	4b2e      	ldr	r3, [pc, #184]	; (80062d4 <InitRooms+0x2b0>)
 800621c:	4a28      	ldr	r2, [pc, #160]	; (80062c0 <InitRooms+0x29c>)
 800621e:	611a      	str	r2, [r3, #16]
	rm_testdown.down_room = NULL;
 8006220:	4b2c      	ldr	r3, [pc, #176]	; (80062d4 <InitRooms+0x2b0>)
 8006222:	2200      	movs	r2, #0
 8006224:	615a      	str	r2, [r3, #20]
	rm_testdown.name = rm_name_testdown;
 8006226:	4b2b      	ldr	r3, [pc, #172]	; (80062d4 <InitRooms+0x2b0>)
 8006228:	4a37      	ldr	r2, [pc, #220]	; (8006308 <InitRooms+0x2e4>)
 800622a:	619a      	str	r2, [r3, #24]
	rm_testdown.flavortext = rm_flvr_testdown;
 800622c:	4b29      	ldr	r3, [pc, #164]	; (80062d4 <InitRooms+0x2b0>)
 800622e:	4a37      	ldr	r2, [pc, #220]	; (800630c <InitRooms+0x2e8>)
 8006230:	61da      	str	r2, [r3, #28]
	rm_testdown.items = NULL;
 8006232:	4b28      	ldr	r3, [pc, #160]	; (80062d4 <InitRooms+0x2b0>)
 8006234:	2200      	movs	r2, #0
 8006236:	621a      	str	r2, [r3, #32]
	rm_testdown.objects = rm_testdown_objs;
 8006238:	4b26      	ldr	r3, [pc, #152]	; (80062d4 <InitRooms+0x2b0>)
 800623a:	4a35      	ldr	r2, [pc, #212]	; (8006310 <InitRooms+0x2ec>)
 800623c:	625a      	str	r2, [r3, #36]	; 0x24
	rm_testdown.item_count = 0;
 800623e:	4b25      	ldr	r3, [pc, #148]	; (80062d4 <InitRooms+0x2b0>)
 8006240:	2228      	movs	r2, #40	; 0x28
 8006242:	2100      	movs	r1, #0
 8006244:	5499      	strb	r1, [r3, r2]
	rm_testdown.object_count = 1;
 8006246:	4b23      	ldr	r3, [pc, #140]	; (80062d4 <InitRooms+0x2b0>)
 8006248:	2229      	movs	r2, #41	; 0x29
 800624a:	2101      	movs	r1, #1
 800624c:	5499      	strb	r1, [r3, r2]
	rm_testdown.token = RTKN_TESTDOWN;
 800624e:	4b21      	ldr	r3, [pc, #132]	; (80062d4 <InitRooms+0x2b0>)
 8006250:	222a      	movs	r2, #42	; 0x2a
 8006252:	2106      	movs	r1, #6
 8006254:	5499      	strb	r1, [r3, r2]
	rm_testdown_objs[0] = GetObjByToken(LTKN_OBJ_TEST);
 8006256:	2020      	movs	r0, #32
 8006258:	f7ff feb4 	bl	8005fc4 <GetObjByToken>
 800625c:	0002      	movs	r2, r0
 800625e:	4b2c      	ldr	r3, [pc, #176]	; (8006310 <InitRooms+0x2ec>)
 8006260:	601a      	str	r2, [r3, #0]
	//Init the up room
	rm_testup.north_room = NULL;
 8006262:	4b1d      	ldr	r3, [pc, #116]	; (80062d8 <InitRooms+0x2b4>)
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]
	rm_testup.east_room = NULL;
 8006268:	4b1b      	ldr	r3, [pc, #108]	; (80062d8 <InitRooms+0x2b4>)
 800626a:	2200      	movs	r2, #0
 800626c:	605a      	str	r2, [r3, #4]
	rm_testup.south_room = NULL;
 800626e:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <InitRooms+0x2b4>)
 8006270:	2200      	movs	r2, #0
 8006272:	609a      	str	r2, [r3, #8]
	rm_testup.west_room = NULL;
 8006274:	4b18      	ldr	r3, [pc, #96]	; (80062d8 <InitRooms+0x2b4>)
 8006276:	2200      	movs	r2, #0
 8006278:	60da      	str	r2, [r3, #12]
	rm_testup.up_room = NULL;
 800627a:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <InitRooms+0x2b4>)
 800627c:	2200      	movs	r2, #0
 800627e:	611a      	str	r2, [r3, #16]
	rm_testup.down_room = &rm_teststart;
 8006280:	4b15      	ldr	r3, [pc, #84]	; (80062d8 <InitRooms+0x2b4>)
 8006282:	4a0f      	ldr	r2, [pc, #60]	; (80062c0 <InitRooms+0x29c>)
 8006284:	615a      	str	r2, [r3, #20]
	rm_testup.name = rm_name_testup;
 8006286:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <InitRooms+0x2b4>)
 8006288:	4a22      	ldr	r2, [pc, #136]	; (8006314 <InitRooms+0x2f0>)
 800628a:	619a      	str	r2, [r3, #24]
	rm_testup.flavortext = rm_flvr_testup;
 800628c:	4b12      	ldr	r3, [pc, #72]	; (80062d8 <InitRooms+0x2b4>)
 800628e:	4a22      	ldr	r2, [pc, #136]	; (8006318 <InitRooms+0x2f4>)
 8006290:	61da      	str	r2, [r3, #28]
	rm_testup.items = NULL;
 8006292:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <InitRooms+0x2b4>)
 8006294:	2200      	movs	r2, #0
 8006296:	621a      	str	r2, [r3, #32]
	rm_testup.objects = NULL;
 8006298:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <InitRooms+0x2b4>)
 800629a:	2200      	movs	r2, #0
 800629c:	625a      	str	r2, [r3, #36]	; 0x24
	rm_testup.item_count = 0;
 800629e:	4b0e      	ldr	r3, [pc, #56]	; (80062d8 <InitRooms+0x2b4>)
 80062a0:	2228      	movs	r2, #40	; 0x28
 80062a2:	2100      	movs	r1, #0
 80062a4:	5499      	strb	r1, [r3, r2]
	rm_testup.object_count = 0;
 80062a6:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <InitRooms+0x2b4>)
 80062a8:	2229      	movs	r2, #41	; 0x29
 80062aa:	2100      	movs	r1, #0
 80062ac:	5499      	strb	r1, [r3, r2]
	rm_testup.token = RTKN_TESTUP;
 80062ae:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <InitRooms+0x2b4>)
 80062b0:	222a      	movs	r2, #42	; 0x2a
 80062b2:	2107      	movs	r1, #7
 80062b4:	5499      	strb	r1, [r3, r2]
}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	2000083c 	.word	0x2000083c
 80062c0:	20000884 	.word	0x20000884
 80062c4:	2000090c 	.word	0x2000090c
 80062c8:	20000858 	.word	0x20000858
 80062cc:	200008dc 	.word	0x200008dc
 80062d0:	20000938 	.word	0x20000938
 80062d4:	20000964 	.word	0x20000964
 80062d8:	200008b0 	.word	0x200008b0
 80062dc:	080075d8 	.word	0x080075d8
 80062e0:	08007648 	.word	0x08007648
 80062e4:	080075e8 	.word	0x080075e8
 80062e8:	08007668 	.word	0x08007668
 80062ec:	080075f8 	.word	0x080075f8
 80062f0:	080076a4 	.word	0x080076a4
 80062f4:	20000908 	.word	0x20000908
 80062f8:	08007608 	.word	0x08007608
 80062fc:	080076cc 	.word	0x080076cc
 8006300:	08007618 	.word	0x08007618
 8006304:	080076f4 	.word	0x080076f4
 8006308:	08007628 	.word	0x08007628
 800630c:	08007728 	.word	0x08007728
 8006310:	20000990 	.word	0x20000990
 8006314:	08007638 	.word	0x08007638
 8006318:	0800775c 	.word	0x0800775c

0800631c <GetRoomByToken>:

struct room* GetRoomByToken(uint8_t token){
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	0002      	movs	r2, r0
 8006324:	1dfb      	adds	r3, r7, #7
 8006326:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < ROOM_COUNT; i++){
 8006328:	230f      	movs	r3, #15
 800632a:	18fb      	adds	r3, r7, r3
 800632c:	2200      	movs	r2, #0
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	e018      	b.n	8006364 <GetRoomByToken+0x48>
		if(game_rooms[i]->token == token){
 8006332:	230f      	movs	r3, #15
 8006334:	18fb      	adds	r3, r7, r3
 8006336:	781a      	ldrb	r2, [r3, #0]
 8006338:	4b0f      	ldr	r3, [pc, #60]	; (8006378 <GetRoomByToken+0x5c>)
 800633a:	0092      	lsls	r2, r2, #2
 800633c:	58d3      	ldr	r3, [r2, r3]
 800633e:	222a      	movs	r2, #42	; 0x2a
 8006340:	5c9b      	ldrb	r3, [r3, r2]
 8006342:	1dfa      	adds	r2, r7, #7
 8006344:	7812      	ldrb	r2, [r2, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d106      	bne.n	8006358 <GetRoomByToken+0x3c>
			return game_rooms[i];
 800634a:	230f      	movs	r3, #15
 800634c:	18fb      	adds	r3, r7, r3
 800634e:	781a      	ldrb	r2, [r3, #0]
 8006350:	4b09      	ldr	r3, [pc, #36]	; (8006378 <GetRoomByToken+0x5c>)
 8006352:	0092      	lsls	r2, r2, #2
 8006354:	58d3      	ldr	r3, [r2, r3]
 8006356:	e00b      	b.n	8006370 <GetRoomByToken+0x54>
	for(uint8_t i = 0; i < ROOM_COUNT; i++){
 8006358:	210f      	movs	r1, #15
 800635a:	187b      	adds	r3, r7, r1
 800635c:	781a      	ldrb	r2, [r3, #0]
 800635e:	187b      	adds	r3, r7, r1
 8006360:	3201      	adds	r2, #1
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	230f      	movs	r3, #15
 8006366:	18fb      	adds	r3, r7, r3
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b06      	cmp	r3, #6
 800636c:	d9e1      	bls.n	8006332 <GetRoomByToken+0x16>
		}
	}
	return NULL;
 800636e:	2300      	movs	r3, #0
}
 8006370:	0018      	movs	r0, r3
 8006372:	46bd      	mov	sp, r7
 8006374:	b004      	add	sp, #16
 8006376:	bd80      	pop	{r7, pc}
 8006378:	2000083c 	.word	0x2000083c

0800637c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006380:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <HAL_MspInit+0x24>)
 8006382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006384:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <HAL_MspInit+0x24>)
 8006386:	2101      	movs	r1, #1
 8006388:	430a      	orrs	r2, r1
 800638a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800638c:	4b04      	ldr	r3, [pc, #16]	; (80063a0 <HAL_MspInit+0x24>)
 800638e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006390:	4b03      	ldr	r3, [pc, #12]	; (80063a0 <HAL_MspInit+0x24>)
 8006392:	2180      	movs	r1, #128	; 0x80
 8006394:	0549      	lsls	r1, r1, #21
 8006396:	430a      	orrs	r2, r1
 8006398:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	40021000 	.word	0x40021000

080063a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b088      	sub	sp, #32
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063ac:	230c      	movs	r3, #12
 80063ae:	18fb      	adds	r3, r7, r3
 80063b0:	0018      	movs	r0, r3
 80063b2:	2314      	movs	r3, #20
 80063b4:	001a      	movs	r2, r3
 80063b6:	2100      	movs	r1, #0
 80063b8:	f000 ff71 	bl	800729e <memset>
  if(hi2c->Instance==I2C1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a18      	ldr	r2, [pc, #96]	; (8006424 <HAL_I2C_MspInit+0x80>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d12a      	bne.n	800641c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063c6:	4b18      	ldr	r3, [pc, #96]	; (8006428 <HAL_I2C_MspInit+0x84>)
 80063c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ca:	4b17      	ldr	r3, [pc, #92]	; (8006428 <HAL_I2C_MspInit+0x84>)
 80063cc:	2101      	movs	r1, #1
 80063ce:	430a      	orrs	r2, r1
 80063d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80063d2:	4b15      	ldr	r3, [pc, #84]	; (8006428 <HAL_I2C_MspInit+0x84>)
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	2201      	movs	r2, #1
 80063d8:	4013      	ands	r3, r2
 80063da:	60bb      	str	r3, [r7, #8]
 80063dc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80063de:	210c      	movs	r1, #12
 80063e0:	187b      	adds	r3, r7, r1
 80063e2:	22c0      	movs	r2, #192	; 0xc0
 80063e4:	00d2      	lsls	r2, r2, #3
 80063e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063e8:	187b      	adds	r3, r7, r1
 80063ea:	2212      	movs	r2, #18
 80063ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063ee:	187b      	adds	r3, r7, r1
 80063f0:	2201      	movs	r2, #1
 80063f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063f4:	187b      	adds	r3, r7, r1
 80063f6:	2203      	movs	r2, #3
 80063f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80063fa:	187b      	adds	r3, r7, r1
 80063fc:	2206      	movs	r2, #6
 80063fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006400:	187a      	adds	r2, r7, r1
 8006402:	23a0      	movs	r3, #160	; 0xa0
 8006404:	05db      	lsls	r3, r3, #23
 8006406:	0011      	movs	r1, r2
 8006408:	0018      	movs	r0, r3
 800640a:	f7fa f843 	bl	8000494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800640e:	4b06      	ldr	r3, [pc, #24]	; (8006428 <HAL_I2C_MspInit+0x84>)
 8006410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <HAL_I2C_MspInit+0x84>)
 8006414:	2180      	movs	r1, #128	; 0x80
 8006416:	0389      	lsls	r1, r1, #14
 8006418:	430a      	orrs	r2, r1
 800641a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800641c:	46c0      	nop			; (mov r8, r8)
 800641e:	46bd      	mov	sp, r7
 8006420:	b008      	add	sp, #32
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40005400 	.word	0x40005400
 8006428:	40021000 	.word	0x40021000

0800642c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006430:	46c0      	nop			; (mov r8, r8)
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800643a:	e7fe      	b.n	800643a <HardFault_Handler+0x4>

0800643c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006440:	46c0      	nop			; (mov r8, r8)
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006454:	f7f9 ff2e 	bl	80002b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006458:	46c0      	nop			; (mov r8, r8)
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006464:	4b03      	ldr	r3, [pc, #12]	; (8006474 <USB_IRQHandler+0x14>)
 8006466:	0018      	movs	r0, r3
 8006468:	f7fa fbf8 	bl	8000c5c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800646c:	46c0      	nop			; (mov r8, r8)
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	20000d34 	.word	0x20000d34

08006478 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800647c:	4b17      	ldr	r3, [pc, #92]	; (80064dc <SystemInit+0x64>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	4b16      	ldr	r3, [pc, #88]	; (80064dc <SystemInit+0x64>)
 8006482:	2180      	movs	r1, #128	; 0x80
 8006484:	0049      	lsls	r1, r1, #1
 8006486:	430a      	orrs	r2, r1
 8006488:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800648a:	4b14      	ldr	r3, [pc, #80]	; (80064dc <SystemInit+0x64>)
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	4b13      	ldr	r3, [pc, #76]	; (80064dc <SystemInit+0x64>)
 8006490:	4913      	ldr	r1, [pc, #76]	; (80064e0 <SystemInit+0x68>)
 8006492:	400a      	ands	r2, r1
 8006494:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8006496:	4b11      	ldr	r3, [pc, #68]	; (80064dc <SystemInit+0x64>)
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	4b10      	ldr	r3, [pc, #64]	; (80064dc <SystemInit+0x64>)
 800649c:	4911      	ldr	r1, [pc, #68]	; (80064e4 <SystemInit+0x6c>)
 800649e:	400a      	ands	r2, r1
 80064a0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80064a2:	4b0e      	ldr	r3, [pc, #56]	; (80064dc <SystemInit+0x64>)
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <SystemInit+0x64>)
 80064a8:	2101      	movs	r1, #1
 80064aa:	438a      	bics	r2, r1
 80064ac:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80064ae:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <SystemInit+0x64>)
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <SystemInit+0x64>)
 80064b4:	490c      	ldr	r1, [pc, #48]	; (80064e8 <SystemInit+0x70>)
 80064b6:	400a      	ands	r2, r1
 80064b8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80064ba:	4b08      	ldr	r3, [pc, #32]	; (80064dc <SystemInit+0x64>)
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	4b07      	ldr	r3, [pc, #28]	; (80064dc <SystemInit+0x64>)
 80064c0:	490a      	ldr	r1, [pc, #40]	; (80064ec <SystemInit+0x74>)
 80064c2:	400a      	ands	r2, r1
 80064c4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80064c6:	4b05      	ldr	r3, [pc, #20]	; (80064dc <SystemInit+0x64>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80064cc:	4b08      	ldr	r3, [pc, #32]	; (80064f0 <SystemInit+0x78>)
 80064ce:	2280      	movs	r2, #128	; 0x80
 80064d0:	0512      	lsls	r2, r2, #20
 80064d2:	609a      	str	r2, [r3, #8]
#endif
}
 80064d4:	46c0      	nop			; (mov r8, r8)
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	40021000 	.word	0x40021000
 80064e0:	88ff400c 	.word	0x88ff400c
 80064e4:	fef6fff6 	.word	0xfef6fff6
 80064e8:	fffbffff 	.word	0xfffbffff
 80064ec:	ff02ffff 	.word	0xff02ffff
 80064f0:	e000ed00 	.word	0xe000ed00

080064f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80064f8:	4914      	ldr	r1, [pc, #80]	; (800654c <MX_USB_DEVICE_Init+0x58>)
 80064fa:	4b15      	ldr	r3, [pc, #84]	; (8006550 <MX_USB_DEVICE_Init+0x5c>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	0018      	movs	r0, r3
 8006500:	f7fd fe2b 	bl	800415a <USBD_Init>
 8006504:	1e03      	subs	r3, r0, #0
 8006506:	d001      	beq.n	800650c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006508:	f7ff fd34 	bl	8005f74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800650c:	4a11      	ldr	r2, [pc, #68]	; (8006554 <MX_USB_DEVICE_Init+0x60>)
 800650e:	4b10      	ldr	r3, [pc, #64]	; (8006550 <MX_USB_DEVICE_Init+0x5c>)
 8006510:	0011      	movs	r1, r2
 8006512:	0018      	movs	r0, r3
 8006514:	f7fd fe52 	bl	80041bc <USBD_RegisterClass>
 8006518:	1e03      	subs	r3, r0, #0
 800651a:	d001      	beq.n	8006520 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800651c:	f7ff fd2a 	bl	8005f74 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006520:	4a0d      	ldr	r2, [pc, #52]	; (8006558 <MX_USB_DEVICE_Init+0x64>)
 8006522:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <MX_USB_DEVICE_Init+0x5c>)
 8006524:	0011      	movs	r1, r2
 8006526:	0018      	movs	r0, r3
 8006528:	f7fd fd66 	bl	8003ff8 <USBD_CDC_RegisterInterface>
 800652c:	1e03      	subs	r3, r0, #0
 800652e:	d001      	beq.n	8006534 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8006530:	f7ff fd20 	bl	8005f74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006534:	4b06      	ldr	r3, [pc, #24]	; (8006550 <MX_USB_DEVICE_Init+0x5c>)
 8006536:	0018      	movs	r0, r3
 8006538:	f7fd fe61 	bl	80041fe <USBD_Start>
 800653c:	1e03      	subs	r3, r0, #0
 800653e:	d001      	beq.n	8006544 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8006540:	f7ff fd18 	bl	8005f74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006544:	46c0      	nop			; (mov r8, r8)
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	46c0      	nop			; (mov r8, r8)
 800654c:	20000128 	.word	0x20000128
 8006550:	20000994 	.word	0x20000994
 8006554:	2000000c 	.word	0x2000000c
 8006558:	20000118 	.word	0x20000118

0800655c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006560:	490b      	ldr	r1, [pc, #44]	; (8006590 <CDC_Init_FS+0x34>)
 8006562:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <CDC_Init_FS+0x38>)
 8006564:	2200      	movs	r2, #0
 8006566:	0018      	movs	r0, r3
 8006568:	f7fd fd62 	bl	8004030 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800656c:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <CDC_Init_FS+0x3c>)
 800656e:	4b09      	ldr	r3, [pc, #36]	; (8006594 <CDC_Init_FS+0x38>)
 8006570:	0011      	movs	r1, r2
 8006572:	0018      	movs	r0, r3
 8006574:	f7fd fd78 	bl	8004068 <USBD_CDC_SetRxBuffer>
  memset(UserData, '\0', USER_DATA_SIZE);
 8006578:	2380      	movs	r3, #128	; 0x80
 800657a:	005a      	lsls	r2, r3, #1
 800657c:	4b07      	ldr	r3, [pc, #28]	; (800659c <CDC_Init_FS+0x40>)
 800657e:	2100      	movs	r1, #0
 8006580:	0018      	movs	r0, r3
 8006582:	f000 fe8c 	bl	800729e <memset>
  return (USBD_OK);
 8006586:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006588:	0018      	movs	r0, r3
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	200005c8 	.word	0x200005c8
 8006594:	20000994 	.word	0x20000994
 8006598:	20000c30 	.word	0x20000c30
 800659c:	20000c34 	.word	0x20000c34

080065a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80065a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80065a6:	0018      	movs	r0, r3
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6039      	str	r1, [r7, #0]
 80065b4:	0011      	movs	r1, r2
 80065b6:	1dfb      	adds	r3, r7, #7
 80065b8:	1c02      	adds	r2, r0, #0
 80065ba:	701a      	strb	r2, [r3, #0]
 80065bc:	1d3b      	adds	r3, r7, #4
 80065be:	1c0a      	adds	r2, r1, #0
 80065c0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80065c2:	1dfb      	adds	r3, r7, #7
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b23      	cmp	r3, #35	; 0x23
 80065c8:	d804      	bhi.n	80065d4 <CDC_Control_FS+0x28>
 80065ca:	009a      	lsls	r2, r3, #2
 80065cc:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <CDC_Control_FS+0x34>)
 80065ce:	18d3      	adds	r3, r2, r3
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80065d4:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 80065d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80065d8:	0018      	movs	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	b002      	add	sp, #8
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	080077c0 	.word	0x080077c0

080065e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	4b3d      	ldr	r3, [pc, #244]	; (80066e8 <CDC_Receive_FS+0x104>)
 80065f2:	0011      	movs	r1, r2
 80065f4:	0018      	movs	r0, r3
 80065f6:	f7fd fd37 	bl	8004068 <USBD_CDC_SetRxBuffer>
  if(UserRxBufferFS[0] == '\r'){
 80065fa:	4b3c      	ldr	r3, [pc, #240]	; (80066ec <CDC_Receive_FS+0x108>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b0d      	cmp	r3, #13
 8006600:	d114      	bne.n	800662c <CDC_Receive_FS+0x48>
	  if(LocalEcho){
 8006602:	4b3b      	ldr	r3, [pc, #236]	; (80066f0 <CDC_Receive_FS+0x10c>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00b      	beq.n	8006624 <CDC_Receive_FS+0x40>
		  uint8_t tmp[] = "\r\n";
 800660c:	200c      	movs	r0, #12
 800660e:	183b      	adds	r3, r7, r0
 8006610:	4a38      	ldr	r2, [pc, #224]	; (80066f4 <CDC_Receive_FS+0x110>)
 8006612:	8811      	ldrh	r1, [r2, #0]
 8006614:	8019      	strh	r1, [r3, #0]
 8006616:	7892      	ldrb	r2, [r2, #2]
 8006618:	709a      	strb	r2, [r3, #2]
		  CDC_Transmit_FS(tmp, 2);
 800661a:	183b      	adds	r3, r7, r0
 800661c:	2102      	movs	r1, #2
 800661e:	0018      	movs	r0, r3
 8006620:	f000 f872 	bl	8006708 <CDC_Transmit_FS>
	  }
	  UserDataReady = 1;
 8006624:	4b34      	ldr	r3, [pc, #208]	; (80066f8 <CDC_Receive_FS+0x114>)
 8006626:	2201      	movs	r2, #1
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	e053      	b.n	80066d4 <CDC_Receive_FS+0xf0>
  }
  else if(UserRxBufferFS[0] == 0x7F){
 800662c:	4b2f      	ldr	r3, [pc, #188]	; (80066ec <CDC_Receive_FS+0x108>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b7f      	cmp	r3, #127	; 0x7f
 8006632:	d121      	bne.n	8006678 <CDC_Receive_FS+0x94>
	  if(LocalEcho){
 8006634:	4b2e      	ldr	r3, [pc, #184]	; (80066f0 <CDC_Receive_FS+0x10c>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00b      	beq.n	8006656 <CDC_Receive_FS+0x72>
		  uint8_t tmp[] = {0x08, 0x20, 0x08};
 800663e:	2008      	movs	r0, #8
 8006640:	183b      	adds	r3, r7, r0
 8006642:	4a2e      	ldr	r2, [pc, #184]	; (80066fc <CDC_Receive_FS+0x118>)
 8006644:	8811      	ldrh	r1, [r2, #0]
 8006646:	8019      	strh	r1, [r3, #0]
 8006648:	7892      	ldrb	r2, [r2, #2]
 800664a:	709a      	strb	r2, [r3, #2]
		  CDC_Transmit_FS(tmp, 3);
 800664c:	183b      	adds	r3, r7, r0
 800664e:	2103      	movs	r1, #3
 8006650:	0018      	movs	r0, r3
 8006652:	f000 f859 	bl	8006708 <CDC_Transmit_FS>
	  }
	  if(UserDataIndex > 0){
 8006656:	4b2a      	ldr	r3, [pc, #168]	; (8006700 <CDC_Receive_FS+0x11c>)
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d03a      	beq.n	80066d4 <CDC_Receive_FS+0xf0>
		  UserDataIndex--;
 800665e:	4b28      	ldr	r3, [pc, #160]	; (8006700 <CDC_Receive_FS+0x11c>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	3b01      	subs	r3, #1
 8006664:	b2da      	uxtb	r2, r3
 8006666:	4b26      	ldr	r3, [pc, #152]	; (8006700 <CDC_Receive_FS+0x11c>)
 8006668:	701a      	strb	r2, [r3, #0]
		  UserData[UserDataIndex] = '\0';
 800666a:	4b25      	ldr	r3, [pc, #148]	; (8006700 <CDC_Receive_FS+0x11c>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	001a      	movs	r2, r3
 8006670:	4b24      	ldr	r3, [pc, #144]	; (8006704 <CDC_Receive_FS+0x120>)
 8006672:	2100      	movs	r1, #0
 8006674:	5499      	strb	r1, [r3, r2]
 8006676:	e02d      	b.n	80066d4 <CDC_Receive_FS+0xf0>
	  }
  }
  else if(UserRxBufferFS[0] >= 0x20 && UserRxBufferFS[0] <= 0x7E){
 8006678:	4b1c      	ldr	r3, [pc, #112]	; (80066ec <CDC_Receive_FS+0x108>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b1f      	cmp	r3, #31
 800667e:	d929      	bls.n	80066d4 <CDC_Receive_FS+0xf0>
 8006680:	4b1a      	ldr	r3, [pc, #104]	; (80066ec <CDC_Receive_FS+0x108>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b7e      	cmp	r3, #126	; 0x7e
 8006686:	d825      	bhi.n	80066d4 <CDC_Receive_FS+0xf0>
	  if(LocalEcho){
 8006688:	4b19      	ldr	r3, [pc, #100]	; (80066f0 <CDC_Receive_FS+0x10c>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d004      	beq.n	800669c <CDC_Receive_FS+0xb8>
		  CDC_Transmit_FS(&UserRxBufferFS[0], 1);
 8006692:	4b16      	ldr	r3, [pc, #88]	; (80066ec <CDC_Receive_FS+0x108>)
 8006694:	2101      	movs	r1, #1
 8006696:	0018      	movs	r0, r3
 8006698:	f000 f836 	bl	8006708 <CDC_Transmit_FS>
	  }
	  UserData[UserDataIndex] = UserRxBufferFS[0];
 800669c:	4b18      	ldr	r3, [pc, #96]	; (8006700 <CDC_Receive_FS+0x11c>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	001a      	movs	r2, r3
 80066a2:	4b12      	ldr	r3, [pc, #72]	; (80066ec <CDC_Receive_FS+0x108>)
 80066a4:	7819      	ldrb	r1, [r3, #0]
 80066a6:	4b17      	ldr	r3, [pc, #92]	; (8006704 <CDC_Receive_FS+0x120>)
 80066a8:	5499      	strb	r1, [r3, r2]
	  if(UserDataIndex < 255){
 80066aa:	4b15      	ldr	r3, [pc, #84]	; (8006700 <CDC_Receive_FS+0x11c>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	2bff      	cmp	r3, #255	; 0xff
 80066b0:	d006      	beq.n	80066c0 <CDC_Receive_FS+0xdc>
		  UserDataIndex++;
 80066b2:	4b13      	ldr	r3, [pc, #76]	; (8006700 <CDC_Receive_FS+0x11c>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	3301      	adds	r3, #1
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	4b11      	ldr	r3, [pc, #68]	; (8006700 <CDC_Receive_FS+0x11c>)
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	e009      	b.n	80066d4 <CDC_Receive_FS+0xf0>
	  }
	  else{
		  memset(UserData, '\0', USER_DATA_SIZE);
 80066c0:	2380      	movs	r3, #128	; 0x80
 80066c2:	005a      	lsls	r2, r3, #1
 80066c4:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <CDC_Receive_FS+0x120>)
 80066c6:	2100      	movs	r1, #0
 80066c8:	0018      	movs	r0, r3
 80066ca:	f000 fde8 	bl	800729e <memset>
		  UserDataIndex = 0;
 80066ce:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <CDC_Receive_FS+0x11c>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	701a      	strb	r2, [r3, #0]
	  }
  }
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80066d4:	4b04      	ldr	r3, [pc, #16]	; (80066e8 <CDC_Receive_FS+0x104>)
 80066d6:	0018      	movs	r0, r3
 80066d8:	f7fd fd11 	bl	80040fe <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80066dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80066de:	0018      	movs	r0, r3
 80066e0:	46bd      	mov	sp, r7
 80066e2:	b004      	add	sp, #16
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	20000994 	.word	0x20000994
 80066ec:	20000c30 	.word	0x20000c30
 80066f0:	20000114 	.word	0x20000114
 80066f4:	0800745c 	.word	0x0800745c
 80066f8:	20000195 	.word	0x20000195
 80066fc:	08007460 	.word	0x08007460
 8006700:	20000196 	.word	0x20000196
 8006704:	20000c34 	.word	0x20000c34

08006708 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006708:	b5b0      	push	{r4, r5, r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	000a      	movs	r2, r1
 8006712:	1cbb      	adds	r3, r7, #2
 8006714:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8006716:	230f      	movs	r3, #15
 8006718:	18fb      	adds	r3, r7, r3
 800671a:	2200      	movs	r2, #0
 800671c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800671e:	4a11      	ldr	r2, [pc, #68]	; (8006764 <CDC_Transmit_FS+0x5c>)
 8006720:	23a4      	movs	r3, #164	; 0xa4
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	58d3      	ldr	r3, [r2, r3]
 8006726:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	2385      	movs	r3, #133	; 0x85
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	58d3      	ldr	r3, [r2, r3]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8006734:	2301      	movs	r3, #1
 8006736:	e010      	b.n	800675a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006738:	1cbb      	adds	r3, r7, #2
 800673a:	881a      	ldrh	r2, [r3, #0]
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4b09      	ldr	r3, [pc, #36]	; (8006764 <CDC_Transmit_FS+0x5c>)
 8006740:	0018      	movs	r0, r3
 8006742:	f7fd fc75 	bl	8004030 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006746:	250f      	movs	r5, #15
 8006748:	197c      	adds	r4, r7, r5
 800674a:	4b06      	ldr	r3, [pc, #24]	; (8006764 <CDC_Transmit_FS+0x5c>)
 800674c:	0018      	movs	r0, r3
 800674e:	f7fd fc9f 	bl	8004090 <USBD_CDC_TransmitPacket>
 8006752:	0003      	movs	r3, r0
 8006754:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8006756:	197b      	adds	r3, r7, r5
 8006758:	781b      	ldrb	r3, [r3, #0]
}
 800675a:	0018      	movs	r0, r3
 800675c:	46bd      	mov	sp, r7
 800675e:	b004      	add	sp, #16
 8006760:	bdb0      	pop	{r4, r5, r7, pc}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	20000994 	.word	0x20000994

08006768 <GetUserDataBuf>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
char* GetUserDataBuf(){
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
	return UserData;
 800676c:	4b01      	ldr	r3, [pc, #4]	; (8006774 <GetUserDataBuf+0xc>)
}
 800676e:	0018      	movs	r0, r3
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20000c34 	.word	0x20000c34

08006778 <ClearUserDataBuf>:

void ClearUserDataBuf(){
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
	memset(UserData, '\0', USER_DATA_SIZE);
 800677c:	2380      	movs	r3, #128	; 0x80
 800677e:	005a      	lsls	r2, r3, #1
 8006780:	4b06      	ldr	r3, [pc, #24]	; (800679c <ClearUserDataBuf+0x24>)
 8006782:	2100      	movs	r1, #0
 8006784:	0018      	movs	r0, r3
 8006786:	f000 fd8a 	bl	800729e <memset>
	UserDataIndex = 0;
 800678a:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <ClearUserDataBuf+0x28>)
 800678c:	2200      	movs	r2, #0
 800678e:	701a      	strb	r2, [r3, #0]
	UserDataReady = 0;
 8006790:	4b04      	ldr	r3, [pc, #16]	; (80067a4 <ClearUserDataBuf+0x2c>)
 8006792:	2200      	movs	r2, #0
 8006794:	701a      	strb	r2, [r3, #0]
}
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000c34 	.word	0x20000c34
 80067a0:	20000196 	.word	0x20000196
 80067a4:	20000195 	.word	0x20000195

080067a8 <ClearTxBuffer>:

void ClearTxBuffer(){
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
	memset(UserTxBufferFS, '\0', APP_TX_DATA_SIZE);
 80067ac:	2380      	movs	r3, #128	; 0x80
 80067ae:	009a      	lsls	r2, r3, #2
 80067b0:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <ClearTxBuffer+0x18>)
 80067b2:	2100      	movs	r1, #0
 80067b4:	0018      	movs	r0, r3
 80067b6:	f000 fd72 	bl	800729e <memset>
}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	200005c8 	.word	0x200005c8

080067c4 <PrintToConsole>:

void PrintToConsole(const char* c, uint16_t size){
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	000a      	movs	r2, r1
 80067ce:	1cbb      	adds	r3, r7, #2
 80067d0:	801a      	strh	r2, [r3, #0]
	ClearTxBuffer();
 80067d2:	f7ff ffe9 	bl	80067a8 <ClearTxBuffer>
	uint16_t i = 0;
 80067d6:	230e      	movs	r3, #14
 80067d8:	18fb      	adds	r3, r7, r3
 80067da:	2200      	movs	r2, #0
 80067dc:	801a      	strh	r2, [r3, #0]
	while(i < size && i < APP_TX_DATA_SIZE - 3){
 80067de:	e00e      	b.n	80067fe <PrintToConsole+0x3a>
		UserTxBufferFS[i] = c[i];
 80067e0:	200e      	movs	r0, #14
 80067e2:	183b      	adds	r3, r7, r0
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	18d2      	adds	r2, r2, r3
 80067ea:	183b      	adds	r3, r7, r0
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	7811      	ldrb	r1, [r2, #0]
 80067f0:	4a17      	ldr	r2, [pc, #92]	; (8006850 <PrintToConsole+0x8c>)
 80067f2:	54d1      	strb	r1, [r2, r3]
		i++;
 80067f4:	183b      	adds	r3, r7, r0
 80067f6:	881a      	ldrh	r2, [r3, #0]
 80067f8:	183b      	adds	r3, r7, r0
 80067fa:	3201      	adds	r2, #1
 80067fc:	801a      	strh	r2, [r3, #0]
	while(i < size && i < APP_TX_DATA_SIZE - 3){
 80067fe:	230e      	movs	r3, #14
 8006800:	18fa      	adds	r2, r7, r3
 8006802:	1cbb      	adds	r3, r7, #2
 8006804:	8812      	ldrh	r2, [r2, #0]
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d206      	bcs.n	800681a <PrintToConsole+0x56>
 800680c:	230e      	movs	r3, #14
 800680e:	18fb      	adds	r3, r7, r3
 8006810:	881a      	ldrh	r2, [r3, #0]
 8006812:	23fe      	movs	r3, #254	; 0xfe
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	429a      	cmp	r2, r3
 8006818:	d9e2      	bls.n	80067e0 <PrintToConsole+0x1c>
	}
	UserTxBufferFS[i + 1] = '\r';
 800681a:	200e      	movs	r0, #14
 800681c:	183b      	adds	r3, r7, r0
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	3301      	adds	r3, #1
 8006822:	4a0b      	ldr	r2, [pc, #44]	; (8006850 <PrintToConsole+0x8c>)
 8006824:	210d      	movs	r1, #13
 8006826:	54d1      	strb	r1, [r2, r3]
	UserTxBufferFS[i + 2] = '\n';
 8006828:	183b      	adds	r3, r7, r0
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	3302      	adds	r3, #2
 800682e:	4a08      	ldr	r2, [pc, #32]	; (8006850 <PrintToConsole+0x8c>)
 8006830:	210a      	movs	r1, #10
 8006832:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS(UserTxBufferFS, i + 3);
 8006834:	183b      	adds	r3, r7, r0
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	3303      	adds	r3, #3
 800683a:	b29a      	uxth	r2, r3
 800683c:	4b04      	ldr	r3, [pc, #16]	; (8006850 <PrintToConsole+0x8c>)
 800683e:	0011      	movs	r1, r2
 8006840:	0018      	movs	r0, r3
 8006842:	f7ff ff61 	bl	8006708 <CDC_Transmit_FS>
}
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	46bd      	mov	sp, r7
 800684a:	b004      	add	sp, #16
 800684c:	bd80      	pop	{r7, pc}
 800684e:	46c0      	nop			; (mov r8, r8)
 8006850:	200005c8 	.word	0x200005c8

08006854 <CheckUserDataReady>:

uint8_t CheckUserDataReady(){
 8006854:	b580      	push	{r7, lr}
 8006856:	af00      	add	r7, sp, #0
	return UserDataReady;
 8006858:	4b02      	ldr	r3, [pc, #8]	; (8006864 <CheckUserDataReady+0x10>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	b2db      	uxtb	r3, r3
}
 800685e:	0018      	movs	r0, r3
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20000195 	.word	0x20000195

08006868 <GetUserDataSize>:
}
void EnableLocalEcho(){
	LocalEcho = 1;
}

uint8_t GetUserDataSize(){
 8006868:	b580      	push	{r7, lr}
 800686a:	af00      	add	r7, sp, #0
	return UserDataIndex;
 800686c:	4b02      	ldr	r3, [pc, #8]	; (8006878 <GetUserDataSize+0x10>)
 800686e:	781b      	ldrb	r3, [r3, #0]
}
 8006870:	0018      	movs	r0, r3
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	46c0      	nop			; (mov r8, r8)
 8006878:	20000196 	.word	0x20000196

0800687c <PrintStrToConsole>:

void PrintStrToConsole(char* c){
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
	ClearTxBuffer();
 8006884:	f7ff ff90 	bl	80067a8 <ClearTxBuffer>
	uint8_t i = 0;
 8006888:	230f      	movs	r3, #15
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	2200      	movs	r2, #0
 800688e:	701a      	strb	r2, [r3, #0]
	while(i < APP_TX_DATA_SIZE-3 && c[i] != '\0'){
 8006890:	e00e      	b.n	80068b0 <PrintStrToConsole+0x34>
		UserTxBufferFS[i] = c[i];
 8006892:	200f      	movs	r0, #15
 8006894:	183b      	adds	r3, r7, r0
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	18d2      	adds	r2, r2, r3
 800689c:	183b      	adds	r3, r7, r0
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	7811      	ldrb	r1, [r2, #0]
 80068a2:	4a15      	ldr	r2, [pc, #84]	; (80068f8 <PrintStrToConsole+0x7c>)
 80068a4:	54d1      	strb	r1, [r2, r3]
		i++;
 80068a6:	183b      	adds	r3, r7, r0
 80068a8:	781a      	ldrb	r2, [r3, #0]
 80068aa:	183b      	adds	r3, r7, r0
 80068ac:	3201      	adds	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
	while(i < APP_TX_DATA_SIZE-3 && c[i] != '\0'){
 80068b0:	230f      	movs	r3, #15
 80068b2:	18fb      	adds	r3, r7, r3
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	18d3      	adds	r3, r2, r3
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e8      	bne.n	8006892 <PrintStrToConsole+0x16>
	}
	UserTxBufferFS[i + 1] = '\r';
 80068c0:	200f      	movs	r0, #15
 80068c2:	183b      	adds	r3, r7, r0
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	3301      	adds	r3, #1
 80068c8:	4a0b      	ldr	r2, [pc, #44]	; (80068f8 <PrintStrToConsole+0x7c>)
 80068ca:	210d      	movs	r1, #13
 80068cc:	54d1      	strb	r1, [r2, r3]
	UserTxBufferFS[i + 2] = '\n';
 80068ce:	183b      	adds	r3, r7, r0
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	3302      	adds	r3, #2
 80068d4:	4a08      	ldr	r2, [pc, #32]	; (80068f8 <PrintStrToConsole+0x7c>)
 80068d6:	210a      	movs	r1, #10
 80068d8:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS(UserTxBufferFS, i + 3);
 80068da:	183b      	adds	r3, r7, r0
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	3303      	adds	r3, #3
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <PrintStrToConsole+0x7c>)
 80068e6:	0011      	movs	r1, r2
 80068e8:	0018      	movs	r0, r3
 80068ea:	f7ff ff0d 	bl	8006708 <CDC_Transmit_FS>
}
 80068ee:	46c0      	nop			; (mov r8, r8)
 80068f0:	46bd      	mov	sp, r7
 80068f2:	b004      	add	sp, #16
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	46c0      	nop			; (mov r8, r8)
 80068f8:	200005c8 	.word	0x200005c8

080068fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a0a      	ldr	r2, [pc, #40]	; (8006934 <HAL_PCD_MspInit+0x38>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d10e      	bne.n	800692c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800690e:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <HAL_PCD_MspInit+0x3c>)
 8006910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006912:	4b09      	ldr	r3, [pc, #36]	; (8006938 <HAL_PCD_MspInit+0x3c>)
 8006914:	2180      	movs	r1, #128	; 0x80
 8006916:	0409      	lsls	r1, r1, #16
 8006918:	430a      	orrs	r2, r1
 800691a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800691c:	2200      	movs	r2, #0
 800691e:	2100      	movs	r1, #0
 8006920:	201f      	movs	r0, #31
 8006922:	f7f9 fd85 	bl	8000430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8006926:	201f      	movs	r0, #31
 8006928:	f7f9 fd97 	bl	800045a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800692c:	46c0      	nop			; (mov r8, r8)
 800692e:	46bd      	mov	sp, r7
 8006930:	b002      	add	sp, #8
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40005c00 	.word	0x40005c00
 8006938:	40021000 	.word	0x40021000

0800693c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	239c      	movs	r3, #156	; 0x9c
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	58d2      	ldr	r2, [r2, r3]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	218c      	movs	r1, #140	; 0x8c
 8006950:	0089      	lsls	r1, r1, #2
 8006952:	468c      	mov	ip, r1
 8006954:	4463      	add	r3, ip
 8006956:	0019      	movs	r1, r3
 8006958:	0010      	movs	r0, r2
 800695a:	f7fd fca5 	bl	80042a8 <USBD_LL_SetupStage>
}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	46bd      	mov	sp, r7
 8006962:	b002      	add	sp, #8
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	000a      	movs	r2, r1
 8006970:	1cfb      	adds	r3, r7, #3
 8006972:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	239c      	movs	r3, #156	; 0x9c
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	58d0      	ldr	r0, [r2, r3]
 800697c:	1cfb      	adds	r3, r7, #3
 800697e:	781a      	ldrb	r2, [r3, #0]
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	239e      	movs	r3, #158	; 0x9e
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	0152      	lsls	r2, r2, #5
 8006988:	188a      	adds	r2, r1, r2
 800698a:	18d3      	adds	r3, r2, r3
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	1cfb      	adds	r3, r7, #3
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	0019      	movs	r1, r3
 8006994:	f7fd fce4 	bl	8004360 <USBD_LL_DataOutStage>
}
 8006998:	46c0      	nop			; (mov r8, r8)
 800699a:	46bd      	mov	sp, r7
 800699c:	b002      	add	sp, #8
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	000a      	movs	r2, r1
 80069aa:	1cfb      	adds	r3, r7, #3
 80069ac:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	239c      	movs	r3, #156	; 0x9c
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	58d0      	ldr	r0, [r2, r3]
 80069b6:	1cfb      	adds	r3, r7, #3
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	015b      	lsls	r3, r3, #5
 80069be:	18d3      	adds	r3, r2, r3
 80069c0:	333c      	adds	r3, #60	; 0x3c
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	1cfb      	adds	r3, r7, #3
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	0019      	movs	r1, r3
 80069ca:	f7fd fd4b 	bl	8004464 <USBD_LL_DataInStage>
}
 80069ce:	46c0      	nop			; (mov r8, r8)
 80069d0:	46bd      	mov	sp, r7
 80069d2:	b002      	add	sp, #8
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	239c      	movs	r3, #156	; 0x9c
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	58d3      	ldr	r3, [r2, r3]
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7fd fe7c 	bl	80046e4 <USBD_LL_SOF>
}
 80069ec:	46c0      	nop			; (mov r8, r8)
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b002      	add	sp, #8
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80069fc:	230f      	movs	r3, #15
 80069fe:	18fb      	adds	r3, r7, r3
 8006a00:	2201      	movs	r2, #1
 8006a02:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d001      	beq.n	8006a10 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8006a0c:	f7ff fab2 	bl	8005f74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	239c      	movs	r3, #156	; 0x9c
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	58d2      	ldr	r2, [r2, r3]
 8006a18:	230f      	movs	r3, #15
 8006a1a:	18fb      	adds	r3, r7, r3
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	0019      	movs	r1, r3
 8006a20:	0010      	movs	r0, r2
 8006a22:	f7fd fe24 	bl	800466e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	239c      	movs	r3, #156	; 0x9c
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	58d3      	ldr	r3, [r2, r3]
 8006a2e:	0018      	movs	r0, r3
 8006a30:	f7fd fdd5 	bl	80045de <USBD_LL_Reset>
}
 8006a34:	46c0      	nop			; (mov r8, r8)
 8006a36:	46bd      	mov	sp, r7
 8006a38:	b004      	add	sp, #16
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	239c      	movs	r3, #156	; 0x9c
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	58d3      	ldr	r3, [r2, r3]
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f7fd fe1f 	bl	8004690 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d005      	beq.n	8006a66 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a5a:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <HAL_PCD_SuspendCallback+0x34>)
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <HAL_PCD_SuspendCallback+0x34>)
 8006a60:	2106      	movs	r1, #6
 8006a62:	430a      	orrs	r2, r1
 8006a64:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8006a66:	46c0      	nop			; (mov r8, r8)
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	b002      	add	sp, #8
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	e000ed00 	.word	0xe000ed00

08006a74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d007      	beq.n	8006a94 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a84:	4b09      	ldr	r3, [pc, #36]	; (8006aac <HAL_PCD_ResumeCallback+0x38>)
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	4b08      	ldr	r3, [pc, #32]	; (8006aac <HAL_PCD_ResumeCallback+0x38>)
 8006a8a:	2106      	movs	r1, #6
 8006a8c:	438a      	bics	r2, r1
 8006a8e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8006a90:	f000 fa44 	bl	8006f1c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	239c      	movs	r3, #156	; 0x9c
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	58d3      	ldr	r3, [r2, r3]
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f7fd fe0f 	bl	80046c0 <USBD_LL_Resume>
}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	b002      	add	sp, #8
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	46c0      	nop			; (mov r8, r8)
 8006aac:	e000ed00 	.word	0xe000ed00

08006ab0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006ab8:	4a2d      	ldr	r2, [pc, #180]	; (8006b70 <USBD_LL_Init+0xc0>)
 8006aba:	239c      	movs	r3, #156	; 0x9c
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	23a6      	movs	r3, #166	; 0xa6
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4929      	ldr	r1, [pc, #164]	; (8006b70 <USBD_LL_Init+0xc0>)
 8006aca:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8006acc:	4b28      	ldr	r3, [pc, #160]	; (8006b70 <USBD_LL_Init+0xc0>)
 8006ace:	4a29      	ldr	r2, [pc, #164]	; (8006b74 <USBD_LL_Init+0xc4>)
 8006ad0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006ad2:	4b27      	ldr	r3, [pc, #156]	; (8006b70 <USBD_LL_Init+0xc0>)
 8006ad4:	2208      	movs	r2, #8
 8006ad6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006ad8:	4b25      	ldr	r3, [pc, #148]	; (8006b70 <USBD_LL_Init+0xc0>)
 8006ada:	2202      	movs	r2, #2
 8006adc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006ade:	4b24      	ldr	r3, [pc, #144]	; (8006b70 <USBD_LL_Init+0xc0>)
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006ae4:	4b22      	ldr	r3, [pc, #136]	; (8006b70 <USBD_LL_Init+0xc0>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006aea:	4b21      	ldr	r3, [pc, #132]	; (8006b70 <USBD_LL_Init+0xc0>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006af0:	4b1f      	ldr	r3, [pc, #124]	; (8006b70 <USBD_LL_Init+0xc0>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006af6:	4b1e      	ldr	r3, [pc, #120]	; (8006b70 <USBD_LL_Init+0xc0>)
 8006af8:	0018      	movs	r0, r3
 8006afa:	f7f9 ff95 	bl	8000a28 <HAL_PCD_Init>
 8006afe:	1e03      	subs	r3, r0, #0
 8006b00:	d001      	beq.n	8006b06 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8006b02:	f7ff fa37 	bl	8005f74 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	23a6      	movs	r3, #166	; 0xa6
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	58d0      	ldr	r0, [r2, r3]
 8006b0e:	2318      	movs	r3, #24
 8006b10:	2200      	movs	r2, #0
 8006b12:	2100      	movs	r1, #0
 8006b14:	f7fa ff2e 	bl	8001974 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	23a6      	movs	r3, #166	; 0xa6
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	58d0      	ldr	r0, [r2, r3]
 8006b20:	2358      	movs	r3, #88	; 0x58
 8006b22:	2200      	movs	r2, #0
 8006b24:	2180      	movs	r1, #128	; 0x80
 8006b26:	f7fa ff25 	bl	8001974 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	23a6      	movs	r3, #166	; 0xa6
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	58d0      	ldr	r0, [r2, r3]
 8006b32:	23c0      	movs	r3, #192	; 0xc0
 8006b34:	2200      	movs	r2, #0
 8006b36:	2181      	movs	r1, #129	; 0x81
 8006b38:	f7fa ff1c 	bl	8001974 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	23a6      	movs	r3, #166	; 0xa6
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	58d0      	ldr	r0, [r2, r3]
 8006b44:	2388      	movs	r3, #136	; 0x88
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	f7fa ff12 	bl	8001974 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	23a6      	movs	r3, #166	; 0xa6
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	58d0      	ldr	r0, [r2, r3]
 8006b58:	2380      	movs	r3, #128	; 0x80
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2182      	movs	r1, #130	; 0x82
 8006b60:	f7fa ff08 	bl	8001974 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	0018      	movs	r0, r3
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	b002      	add	sp, #8
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	46c0      	nop			; (mov r8, r8)
 8006b70:	20000d34 	.word	0x20000d34
 8006b74:	40005c00 	.word	0x40005c00

08006b78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b80:	210f      	movs	r1, #15
 8006b82:	187b      	adds	r3, r7, r1
 8006b84:	2200      	movs	r2, #0
 8006b86:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b88:	260e      	movs	r6, #14
 8006b8a:	19bb      	adds	r3, r7, r6
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	23a6      	movs	r3, #166	; 0xa6
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	58d3      	ldr	r3, [r2, r3]
 8006b98:	000d      	movs	r5, r1
 8006b9a:	187c      	adds	r4, r7, r1
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f7fa f837 	bl	8000c10 <HAL_PCD_Start>
 8006ba2:	0003      	movs	r3, r0
 8006ba4:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ba6:	19bc      	adds	r4, r7, r6
 8006ba8:	0029      	movs	r1, r5
 8006baa:	187b      	adds	r3, r7, r1
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f000 f9bb 	bl	8006f2a <USBD_Get_USB_Status>
 8006bb4:	0003      	movs	r3, r0
 8006bb6:	7023      	strb	r3, [r4, #0]
  
  return usb_status;
 8006bb8:	19bb      	adds	r3, r7, r6
 8006bba:	781b      	ldrb	r3, [r3, #0]
}
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	b005      	add	sp, #20
 8006bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006bc4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	000c      	movs	r4, r1
 8006bce:	0010      	movs	r0, r2
 8006bd0:	0019      	movs	r1, r3
 8006bd2:	1cfb      	adds	r3, r7, #3
 8006bd4:	1c22      	adds	r2, r4, #0
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	1cbb      	adds	r3, r7, #2
 8006bda:	1c02      	adds	r2, r0, #0
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	003b      	movs	r3, r7
 8006be0:	1c0a      	adds	r2, r1, #0
 8006be2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006be4:	260f      	movs	r6, #15
 8006be6:	19bb      	adds	r3, r7, r6
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bec:	250e      	movs	r5, #14
 8006bee:	197b      	adds	r3, r7, r5
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	23a6      	movs	r3, #166	; 0xa6
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	58d0      	ldr	r0, [r2, r3]
 8006bfc:	19bc      	adds	r4, r7, r6
 8006bfe:	1cbb      	adds	r3, r7, #2
 8006c00:	781d      	ldrb	r5, [r3, #0]
 8006c02:	003b      	movs	r3, r7
 8006c04:	881a      	ldrh	r2, [r3, #0]
 8006c06:	1cfb      	adds	r3, r7, #3
 8006c08:	7819      	ldrb	r1, [r3, #0]
 8006c0a:	002b      	movs	r3, r5
 8006c0c:	f7fa f9d9 	bl	8000fc2 <HAL_PCD_EP_Open>
 8006c10:	0003      	movs	r3, r0
 8006c12:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c14:	250e      	movs	r5, #14
 8006c16:	197c      	adds	r4, r7, r5
 8006c18:	19bb      	adds	r3, r7, r6
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	f000 f984 	bl	8006f2a <USBD_Get_USB_Status>
 8006c22:	0003      	movs	r3, r0
 8006c24:	7023      	strb	r3, [r4, #0]
 
  return usb_status;
 8006c26:	197b      	adds	r3, r7, r5
 8006c28:	781b      	ldrb	r3, [r3, #0]
}
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b005      	add	sp, #20
 8006c30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c34:	b085      	sub	sp, #20
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	000a      	movs	r2, r1
 8006c3c:	1cfb      	adds	r3, r7, #3
 8006c3e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c40:	210f      	movs	r1, #15
 8006c42:	187b      	adds	r3, r7, r1
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c48:	260e      	movs	r6, #14
 8006c4a:	19bb      	adds	r3, r7, r6
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	23a6      	movs	r3, #166	; 0xa6
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	58d2      	ldr	r2, [r2, r3]
 8006c58:	000d      	movs	r5, r1
 8006c5a:	187c      	adds	r4, r7, r1
 8006c5c:	1cfb      	adds	r3, r7, #3
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	0019      	movs	r1, r3
 8006c62:	0010      	movs	r0, r2
 8006c64:	f7fa fa1f 	bl	80010a6 <HAL_PCD_EP_Close>
 8006c68:	0003      	movs	r3, r0
 8006c6a:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c6c:	19bc      	adds	r4, r7, r6
 8006c6e:	0029      	movs	r1, r5
 8006c70:	187b      	adds	r3, r7, r1
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	0018      	movs	r0, r3
 8006c76:	f000 f958 	bl	8006f2a <USBD_Get_USB_Status>
 8006c7a:	0003      	movs	r3, r0
 8006c7c:	7023      	strb	r3, [r4, #0]

  return usb_status;  
 8006c7e:	19bb      	adds	r3, r7, r6
 8006c80:	781b      	ldrb	r3, [r3, #0]
}
 8006c82:	0018      	movs	r0, r3
 8006c84:	46bd      	mov	sp, r7
 8006c86:	b005      	add	sp, #20
 8006c88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c8a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c8c:	b085      	sub	sp, #20
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	000a      	movs	r2, r1
 8006c94:	1cfb      	adds	r3, r7, #3
 8006c96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c98:	210f      	movs	r1, #15
 8006c9a:	187b      	adds	r3, r7, r1
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ca0:	260e      	movs	r6, #14
 8006ca2:	19bb      	adds	r3, r7, r6
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	23a6      	movs	r3, #166	; 0xa6
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	58d2      	ldr	r2, [r2, r3]
 8006cb0:	000d      	movs	r5, r1
 8006cb2:	187c      	adds	r4, r7, r1
 8006cb4:	1cfb      	adds	r3, r7, #3
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	0019      	movs	r1, r3
 8006cba:	0010      	movs	r0, r2
 8006cbc:	f7fa fad4 	bl	8001268 <HAL_PCD_EP_SetStall>
 8006cc0:	0003      	movs	r3, r0
 8006cc2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cc4:	19bc      	adds	r4, r7, r6
 8006cc6:	0029      	movs	r1, r5
 8006cc8:	187b      	adds	r3, r7, r1
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	0018      	movs	r0, r3
 8006cce:	f000 f92c 	bl	8006f2a <USBD_Get_USB_Status>
 8006cd2:	0003      	movs	r3, r0
 8006cd4:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8006cd6:	19bb      	adds	r3, r7, r6
 8006cd8:	781b      	ldrb	r3, [r3, #0]
}
 8006cda:	0018      	movs	r0, r3
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	b005      	add	sp, #20
 8006ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ce2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ce4:	b085      	sub	sp, #20
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	000a      	movs	r2, r1
 8006cec:	1cfb      	adds	r3, r7, #3
 8006cee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cf0:	210f      	movs	r1, #15
 8006cf2:	187b      	adds	r3, r7, r1
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cf8:	260e      	movs	r6, #14
 8006cfa:	19bb      	adds	r3, r7, r6
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	23a6      	movs	r3, #166	; 0xa6
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	58d2      	ldr	r2, [r2, r3]
 8006d08:	000d      	movs	r5, r1
 8006d0a:	187c      	adds	r4, r7, r1
 8006d0c:	1cfb      	adds	r3, r7, #3
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	0019      	movs	r1, r3
 8006d12:	0010      	movs	r0, r2
 8006d14:	f7fa fb0e 	bl	8001334 <HAL_PCD_EP_ClrStall>
 8006d18:	0003      	movs	r3, r0
 8006d1a:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d1c:	19bc      	adds	r4, r7, r6
 8006d1e:	0029      	movs	r1, r5
 8006d20:	187b      	adds	r3, r7, r1
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	0018      	movs	r0, r3
 8006d26:	f000 f900 	bl	8006f2a <USBD_Get_USB_Status>
 8006d2a:	0003      	movs	r3, r0
 8006d2c:	7023      	strb	r3, [r4, #0]

  return usb_status; 
 8006d2e:	19bb      	adds	r3, r7, r6
 8006d30:	781b      	ldrb	r3, [r3, #0]
}
 8006d32:	0018      	movs	r0, r3
 8006d34:	46bd      	mov	sp, r7
 8006d36:	b005      	add	sp, #20
 8006d38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d3a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	000a      	movs	r2, r1
 8006d44:	1cfb      	adds	r3, r7, #3
 8006d46:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	23a6      	movs	r3, #166	; 0xa6
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	58d3      	ldr	r3, [r2, r3]
 8006d50:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006d52:	1cfb      	adds	r3, r7, #3
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	b25b      	sxtb	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da0a      	bge.n	8006d72 <USBD_LL_IsStallEP+0x38>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006d5c:	1cfb      	adds	r3, r7, #3
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	227f      	movs	r2, #127	; 0x7f
 8006d62:	4013      	ands	r3, r2
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	212a      	movs	r1, #42	; 0x2a
 8006d68:	015b      	lsls	r3, r3, #5
 8006d6a:	18d3      	adds	r3, r2, r3
 8006d6c:	185b      	adds	r3, r3, r1
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	e00a      	b.n	8006d88 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006d72:	1cfb      	adds	r3, r7, #3
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	227f      	movs	r2, #127	; 0x7f
 8006d78:	401a      	ands	r2, r3
 8006d7a:	68f9      	ldr	r1, [r7, #12]
 8006d7c:	2395      	movs	r3, #149	; 0x95
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	0152      	lsls	r2, r2, #5
 8006d82:	188a      	adds	r2, r1, r2
 8006d84:	18d3      	adds	r3, r2, r3
 8006d86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006d88:	0018      	movs	r0, r3
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	b004      	add	sp, #16
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	000a      	movs	r2, r1
 8006d9a:	1cfb      	adds	r3, r7, #3
 8006d9c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d9e:	210f      	movs	r1, #15
 8006da0:	187b      	adds	r3, r7, r1
 8006da2:	2200      	movs	r2, #0
 8006da4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006da6:	260e      	movs	r6, #14
 8006da8:	19bb      	adds	r3, r7, r6
 8006daa:	2200      	movs	r2, #0
 8006dac:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	23a6      	movs	r3, #166	; 0xa6
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	58d2      	ldr	r2, [r2, r3]
 8006db6:	000d      	movs	r5, r1
 8006db8:	187c      	adds	r4, r7, r1
 8006dba:	1cfb      	adds	r3, r7, #3
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	0019      	movs	r1, r3
 8006dc0:	0010      	movs	r0, r2
 8006dc2:	f7fa f8d3 	bl	8000f6c <HAL_PCD_SetAddress>
 8006dc6:	0003      	movs	r3, r0
 8006dc8:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dca:	19bc      	adds	r4, r7, r6
 8006dcc:	0029      	movs	r1, r5
 8006dce:	187b      	adds	r3, r7, r1
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	f000 f8a9 	bl	8006f2a <USBD_Get_USB_Status>
 8006dd8:	0003      	movs	r3, r0
 8006dda:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8006ddc:	19bb      	adds	r3, r7, r6
 8006dde:	781b      	ldrb	r3, [r3, #0]
}
 8006de0:	0018      	movs	r0, r3
 8006de2:	46bd      	mov	sp, r7
 8006de4:	b005      	add	sp, #20
 8006de6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006de8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	0008      	movs	r0, r1
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	0019      	movs	r1, r3
 8006df6:	230b      	movs	r3, #11
 8006df8:	18fb      	adds	r3, r7, r3
 8006dfa:	1c02      	adds	r2, r0, #0
 8006dfc:	701a      	strb	r2, [r3, #0]
 8006dfe:	2408      	movs	r4, #8
 8006e00:	193b      	adds	r3, r7, r4
 8006e02:	1c0a      	adds	r2, r1, #0
 8006e04:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e06:	2117      	movs	r1, #23
 8006e08:	187b      	adds	r3, r7, r1
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e0e:	2516      	movs	r5, #22
 8006e10:	197b      	adds	r3, r7, r5
 8006e12:	2200      	movs	r2, #0
 8006e14:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	23a6      	movs	r3, #166	; 0xa6
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	58d0      	ldr	r0, [r2, r3]
 8006e1e:	193b      	adds	r3, r7, r4
 8006e20:	881d      	ldrh	r5, [r3, #0]
 8006e22:	000e      	movs	r6, r1
 8006e24:	187c      	adds	r4, r7, r1
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	230b      	movs	r3, #11
 8006e2a:	18fb      	adds	r3, r7, r3
 8006e2c:	7819      	ldrb	r1, [r3, #0]
 8006e2e:	002b      	movs	r3, r5
 8006e30:	f7fa f9da 	bl	80011e8 <HAL_PCD_EP_Transmit>
 8006e34:	0003      	movs	r3, r0
 8006e36:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e38:	2516      	movs	r5, #22
 8006e3a:	197c      	adds	r4, r7, r5
 8006e3c:	0031      	movs	r1, r6
 8006e3e:	187b      	adds	r3, r7, r1
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	0018      	movs	r0, r3
 8006e44:	f000 f871 	bl	8006f2a <USBD_Get_USB_Status>
 8006e48:	0003      	movs	r3, r0
 8006e4a:	7023      	strb	r3, [r4, #0]
  
  return usb_status;    
 8006e4c:	197b      	adds	r3, r7, r5
 8006e4e:	781b      	ldrb	r3, [r3, #0]
}
 8006e50:	0018      	movs	r0, r3
 8006e52:	46bd      	mov	sp, r7
 8006e54:	b007      	add	sp, #28
 8006e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	0008      	movs	r0, r1
 8006e62:	607a      	str	r2, [r7, #4]
 8006e64:	0019      	movs	r1, r3
 8006e66:	230b      	movs	r3, #11
 8006e68:	18fb      	adds	r3, r7, r3
 8006e6a:	1c02      	adds	r2, r0, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	2408      	movs	r4, #8
 8006e70:	193b      	adds	r3, r7, r4
 8006e72:	1c0a      	adds	r2, r1, #0
 8006e74:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e76:	2117      	movs	r1, #23
 8006e78:	187b      	adds	r3, r7, r1
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e7e:	2516      	movs	r5, #22
 8006e80:	197b      	adds	r3, r7, r5
 8006e82:	2200      	movs	r2, #0
 8006e84:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	23a6      	movs	r3, #166	; 0xa6
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	58d0      	ldr	r0, [r2, r3]
 8006e8e:	193b      	adds	r3, r7, r4
 8006e90:	881d      	ldrh	r5, [r3, #0]
 8006e92:	000e      	movs	r6, r1
 8006e94:	187c      	adds	r4, r7, r1
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	230b      	movs	r3, #11
 8006e9a:	18fb      	adds	r3, r7, r3
 8006e9c:	7819      	ldrb	r1, [r3, #0]
 8006e9e:	002b      	movs	r3, r5
 8006ea0:	f7fa f94c 	bl	800113c <HAL_PCD_EP_Receive>
 8006ea4:	0003      	movs	r3, r0
 8006ea6:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ea8:	2516      	movs	r5, #22
 8006eaa:	197c      	adds	r4, r7, r5
 8006eac:	0031      	movs	r1, r6
 8006eae:	187b      	adds	r3, r7, r1
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f000 f839 	bl	8006f2a <USBD_Get_USB_Status>
 8006eb8:	0003      	movs	r3, r0
 8006eba:	7023      	strb	r3, [r4, #0]
  	
  return usb_status; 
 8006ebc:	197b      	adds	r3, r7, r5
 8006ebe:	781b      	ldrb	r3, [r3, #0]
}
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	b007      	add	sp, #28
 8006ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ec8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	000a      	movs	r2, r1
 8006ed2:	1cfb      	adds	r3, r7, #3
 8006ed4:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	23a6      	movs	r3, #166	; 0xa6
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	58d2      	ldr	r2, [r2, r3]
 8006ede:	1cfb      	adds	r3, r7, #3
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	0019      	movs	r1, r3
 8006ee4:	0010      	movs	r0, r2
 8006ee6:	f7fa f96a 	bl	80011be <HAL_PCD_EP_GetRxCount>
 8006eea:	0003      	movs	r3, r0
}
 8006eec:	0018      	movs	r0, r3
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	b002      	add	sp, #8
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006efc:	4b02      	ldr	r3, [pc, #8]	; (8006f08 <USBD_static_malloc+0x14>)
}
 8006efe:	0018      	movs	r0, r3
 8006f00:	46bd      	mov	sp, r7
 8006f02:	b002      	add	sp, #8
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	20000198 	.word	0x20000198

08006f0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]

}
 8006f14:	46c0      	nop			; (mov r8, r8)
 8006f16:	46bd      	mov	sp, r7
 8006f18:	b002      	add	sp, #8
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8006f20:	f7fe ff22 	bl	8005d68 <SystemClock_Config>
}
 8006f24:	46c0      	nop			; (mov r8, r8)
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	0002      	movs	r2, r0
 8006f32:	1dfb      	adds	r3, r7, #7
 8006f34:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f36:	230f      	movs	r3, #15
 8006f38:	18fb      	adds	r3, r7, r3
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8006f3e:	1dfb      	adds	r3, r7, #7
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d00d      	beq.n	8006f62 <USBD_Get_USB_Status+0x38>
 8006f46:	dc02      	bgt.n	8006f4e <USBD_Get_USB_Status+0x24>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <USBD_Get_USB_Status+0x2e>
 8006f4c:	e018      	b.n	8006f80 <USBD_Get_USB_Status+0x56>
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d00c      	beq.n	8006f6c <USBD_Get_USB_Status+0x42>
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d00f      	beq.n	8006f76 <USBD_Get_USB_Status+0x4c>
 8006f56:	e013      	b.n	8006f80 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006f58:	230f      	movs	r3, #15
 8006f5a:	18fb      	adds	r3, r7, r3
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	701a      	strb	r2, [r3, #0]
    break;
 8006f60:	e013      	b.n	8006f8a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f62:	230f      	movs	r3, #15
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	2202      	movs	r2, #2
 8006f68:	701a      	strb	r2, [r3, #0]
    break;
 8006f6a:	e00e      	b.n	8006f8a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f6c:	230f      	movs	r3, #15
 8006f6e:	18fb      	adds	r3, r7, r3
 8006f70:	2201      	movs	r2, #1
 8006f72:	701a      	strb	r2, [r3, #0]
    break;
 8006f74:	e009      	b.n	8006f8a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f76:	230f      	movs	r3, #15
 8006f78:	18fb      	adds	r3, r7, r3
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	701a      	strb	r2, [r3, #0]
    break;
 8006f7e:	e004      	b.n	8006f8a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8006f80:	230f      	movs	r3, #15
 8006f82:	18fb      	adds	r3, r7, r3
 8006f84:	2202      	movs	r2, #2
 8006f86:	701a      	strb	r2, [r3, #0]
    break;
 8006f88:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8006f8a:	230f      	movs	r3, #15
 8006f8c:	18fb      	adds	r3, r7, r3
 8006f8e:	781b      	ldrb	r3, [r3, #0]
}
 8006f90:	0018      	movs	r0, r3
 8006f92:	46bd      	mov	sp, r7
 8006f94:	b004      	add	sp, #16
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	0002      	movs	r2, r0
 8006fa0:	6039      	str	r1, [r7, #0]
 8006fa2:	1dfb      	adds	r3, r7, #7
 8006fa4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2212      	movs	r2, #18
 8006faa:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006fac:	4b02      	ldr	r3, [pc, #8]	; (8006fb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006fae:	0018      	movs	r0, r3
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	b002      	add	sp, #8
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	46c0      	nop			; (mov r8, r8)
 8006fb8:	20000144 	.word	0x20000144

08006fbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	0002      	movs	r2, r0
 8006fc4:	6039      	str	r1, [r7, #0]
 8006fc6:	1dfb      	adds	r3, r7, #7
 8006fc8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2204      	movs	r2, #4
 8006fce:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006fd0:	4b02      	ldr	r3, [pc, #8]	; (8006fdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	b002      	add	sp, #8
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	46c0      	nop			; (mov r8, r8)
 8006fdc:	20000158 	.word	0x20000158

08006fe0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	0002      	movs	r2, r0
 8006fe8:	6039      	str	r1, [r7, #0]
 8006fea:	1dfb      	adds	r3, r7, #7
 8006fec:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006fee:	1dfb      	adds	r3, r7, #7
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	4908      	ldr	r1, [pc, #32]	; (800701c <USBD_FS_ProductStrDescriptor+0x3c>)
 8006ffa:	4b09      	ldr	r3, [pc, #36]	; (8007020 <USBD_FS_ProductStrDescriptor+0x40>)
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f7fe f91d 	bl	800523c <USBD_GetString>
 8007002:	e005      	b.n	8007010 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	4905      	ldr	r1, [pc, #20]	; (800701c <USBD_FS_ProductStrDescriptor+0x3c>)
 8007008:	4b05      	ldr	r3, [pc, #20]	; (8007020 <USBD_FS_ProductStrDescriptor+0x40>)
 800700a:	0018      	movs	r0, r3
 800700c:	f7fe f916 	bl	800523c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007010:	4b02      	ldr	r3, [pc, #8]	; (800701c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007012:	0018      	movs	r0, r3
 8007014:	46bd      	mov	sp, r7
 8007016:	b002      	add	sp, #8
 8007018:	bd80      	pop	{r7, pc}
 800701a:	46c0      	nop			; (mov r8, r8)
 800701c:	20000fa8 	.word	0x20000fa8
 8007020:	08007464 	.word	0x08007464

08007024 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	0002      	movs	r2, r0
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	1dfb      	adds	r3, r7, #7
 8007030:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	4904      	ldr	r1, [pc, #16]	; (8007048 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007036:	4b05      	ldr	r3, [pc, #20]	; (800704c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007038:	0018      	movs	r0, r3
 800703a:	f7fe f8ff 	bl	800523c <USBD_GetString>
  return USBD_StrDesc;
 800703e:	4b02      	ldr	r3, [pc, #8]	; (8007048 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007040:	0018      	movs	r0, r3
 8007042:	46bd      	mov	sp, r7
 8007044:	b002      	add	sp, #8
 8007046:	bd80      	pop	{r7, pc}
 8007048:	20000fa8 	.word	0x20000fa8
 800704c:	0800746c 	.word	0x0800746c

08007050 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	0002      	movs	r2, r0
 8007058:	6039      	str	r1, [r7, #0]
 800705a:	1dfb      	adds	r3, r7, #7
 800705c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	221a      	movs	r2, #26
 8007062:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007064:	f000 f84c 	bl	8007100 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8007068:	4b02      	ldr	r3, [pc, #8]	; (8007074 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800706a:	0018      	movs	r0, r3
 800706c:	46bd      	mov	sp, r7
 800706e:	b002      	add	sp, #8
 8007070:	bd80      	pop	{r7, pc}
 8007072:	46c0      	nop			; (mov r8, r8)
 8007074:	2000015c 	.word	0x2000015c

08007078 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	0002      	movs	r2, r0
 8007080:	6039      	str	r1, [r7, #0]
 8007082:	1dfb      	adds	r3, r7, #7
 8007084:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8007086:	1dfb      	adds	r3, r7, #7
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d106      	bne.n	800709c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	4908      	ldr	r1, [pc, #32]	; (80070b4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007092:	4b09      	ldr	r3, [pc, #36]	; (80070b8 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007094:	0018      	movs	r0, r3
 8007096:	f7fe f8d1 	bl	800523c <USBD_GetString>
 800709a:	e005      	b.n	80070a8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	4905      	ldr	r1, [pc, #20]	; (80070b4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <USBD_FS_ConfigStrDescriptor+0x40>)
 80070a2:	0018      	movs	r0, r3
 80070a4:	f7fe f8ca 	bl	800523c <USBD_GetString>
  }
  return USBD_StrDesc;
 80070a8:	4b02      	ldr	r3, [pc, #8]	; (80070b4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80070aa:	0018      	movs	r0, r3
 80070ac:	46bd      	mov	sp, r7
 80070ae:	b002      	add	sp, #8
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	46c0      	nop			; (mov r8, r8)
 80070b4:	20000fa8 	.word	0x20000fa8
 80070b8:	08007474 	.word	0x08007474

080070bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	0002      	movs	r2, r0
 80070c4:	6039      	str	r1, [r7, #0]
 80070c6:	1dfb      	adds	r3, r7, #7
 80070c8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80070ca:	1dfb      	adds	r3, r7, #7
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	4908      	ldr	r1, [pc, #32]	; (80070f8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80070d6:	4b09      	ldr	r3, [pc, #36]	; (80070fc <USBD_FS_InterfaceStrDescriptor+0x40>)
 80070d8:	0018      	movs	r0, r3
 80070da:	f7fe f8af 	bl	800523c <USBD_GetString>
 80070de:	e005      	b.n	80070ec <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	4905      	ldr	r1, [pc, #20]	; (80070f8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80070e4:	4b05      	ldr	r3, [pc, #20]	; (80070fc <USBD_FS_InterfaceStrDescriptor+0x40>)
 80070e6:	0018      	movs	r0, r3
 80070e8:	f7fe f8a8 	bl	800523c <USBD_GetString>
  }
  return USBD_StrDesc;
 80070ec:	4b02      	ldr	r3, [pc, #8]	; (80070f8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80070ee:	0018      	movs	r0, r3
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b002      	add	sp, #8
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	20000fa8 	.word	0x20000fa8
 80070fc:	08007480 	.word	0x08007480

08007100 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007106:	4b10      	ldr	r3, [pc, #64]	; (8007148 <Get_SerialNum+0x48>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800710c:	4b0f      	ldr	r3, [pc, #60]	; (800714c <Get_SerialNum+0x4c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007112:	4b0f      	ldr	r3, [pc, #60]	; (8007150 <Get_SerialNum+0x50>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	18d3      	adds	r3, r2, r3
 800711e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007126:	490b      	ldr	r1, [pc, #44]	; (8007154 <Get_SerialNum+0x54>)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2208      	movs	r2, #8
 800712c:	0018      	movs	r0, r3
 800712e:	f000 f815 	bl	800715c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007132:	4909      	ldr	r1, [pc, #36]	; (8007158 <Get_SerialNum+0x58>)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2204      	movs	r2, #4
 8007138:	0018      	movs	r0, r3
 800713a:	f000 f80f 	bl	800715c <IntToUnicode>
  }
}
 800713e:	46c0      	nop			; (mov r8, r8)
 8007140:	46bd      	mov	sp, r7
 8007142:	b004      	add	sp, #16
 8007144:	bd80      	pop	{r7, pc}
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	1ff80050 	.word	0x1ff80050
 800714c:	1ff80054 	.word	0x1ff80054
 8007150:	1ff80058 	.word	0x1ff80058
 8007154:	2000015e 	.word	0x2000015e
 8007158:	2000016e 	.word	0x2000016e

0800715c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	1dfb      	adds	r3, r7, #7
 8007168:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800716a:	2117      	movs	r1, #23
 800716c:	187b      	adds	r3, r7, r1
 800716e:	2200      	movs	r2, #0
 8007170:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007172:	187b      	adds	r3, r7, r1
 8007174:	2200      	movs	r2, #0
 8007176:	701a      	strb	r2, [r3, #0]
 8007178:	e02f      	b.n	80071da <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	0f1b      	lsrs	r3, r3, #28
 800717e:	2b09      	cmp	r3, #9
 8007180:	d80d      	bhi.n	800719e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	0f1b      	lsrs	r3, r3, #28
 8007186:	b2da      	uxtb	r2, r3
 8007188:	2317      	movs	r3, #23
 800718a:	18fb      	adds	r3, r7, r3
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	0019      	movs	r1, r3
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	185b      	adds	r3, r3, r1
 8007196:	3230      	adds	r2, #48	; 0x30
 8007198:	b2d2      	uxtb	r2, r2
 800719a:	701a      	strb	r2, [r3, #0]
 800719c:	e00c      	b.n	80071b8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	0f1b      	lsrs	r3, r3, #28
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	2317      	movs	r3, #23
 80071a6:	18fb      	adds	r3, r7, r3
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	0019      	movs	r1, r3
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	185b      	adds	r3, r3, r1
 80071b2:	3237      	adds	r2, #55	; 0x37
 80071b4:	b2d2      	uxtb	r2, r2
 80071b6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071be:	2117      	movs	r1, #23
 80071c0:	187b      	adds	r3, r7, r1
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	3301      	adds	r3, #1
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	18d3      	adds	r3, r2, r3
 80071cc:	2200      	movs	r2, #0
 80071ce:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071d0:	187b      	adds	r3, r7, r1
 80071d2:	781a      	ldrb	r2, [r3, #0]
 80071d4:	187b      	adds	r3, r7, r1
 80071d6:	3201      	adds	r2, #1
 80071d8:	701a      	strb	r2, [r3, #0]
 80071da:	2317      	movs	r3, #23
 80071dc:	18fa      	adds	r2, r7, r3
 80071de:	1dfb      	adds	r3, r7, #7
 80071e0:	7812      	ldrb	r2, [r2, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d3c8      	bcc.n	800717a <IntToUnicode+0x1e>
  }
}
 80071e8:	46c0      	nop			; (mov r8, r8)
 80071ea:	46bd      	mov	sp, r7
 80071ec:	b006      	add	sp, #24
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80071f0:	480d      	ldr	r0, [pc, #52]	; (8007228 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80071f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80071f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80071f6:	e003      	b.n	8007200 <LoopCopyDataInit>

080071f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80071f8:	4b0c      	ldr	r3, [pc, #48]	; (800722c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80071fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80071fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80071fe:	3104      	adds	r1, #4

08007200 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8007200:	480b      	ldr	r0, [pc, #44]	; (8007230 <LoopForever+0xa>)
  ldr  r3, =_edata
 8007202:	4b0c      	ldr	r3, [pc, #48]	; (8007234 <LoopForever+0xe>)
  adds  r2, r0, r1
 8007204:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007206:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007208:	d3f6      	bcc.n	80071f8 <CopyDataInit>
  ldr  r2, =_sbss
 800720a:	4a0b      	ldr	r2, [pc, #44]	; (8007238 <LoopForever+0x12>)
  b  LoopFillZerobss
 800720c:	e002      	b.n	8007214 <LoopFillZerobss>

0800720e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800720e:	2300      	movs	r3, #0
  str  r3, [r2]
 8007210:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007212:	3204      	adds	r2, #4

08007214 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8007214:	4b09      	ldr	r3, [pc, #36]	; (800723c <LoopForever+0x16>)
  cmp  r2, r3
 8007216:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007218:	d3f9      	bcc.n	800720e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800721a:	f7ff f92d 	bl	8006478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800721e:	f000 f811 	bl	8007244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007222:	f7fe fd8f 	bl	8005d44 <main>

08007226 <LoopForever>:

LoopForever:
    b LoopForever
 8007226:	e7fe      	b.n	8007226 <LoopForever>
   ldr   r0, =_estack
 8007228:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800722c:	08007858 	.word	0x08007858
  ldr  r0, =_sdata
 8007230:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007234:	20000178 	.word	0x20000178
  ldr  r2, =_sbss
 8007238:	20000178 	.word	0x20000178
  ldr  r3, = _ebss
 800723c:	200011a8 	.word	0x200011a8

08007240 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007240:	e7fe      	b.n	8007240 <ADC1_COMP_IRQHandler>
	...

08007244 <__libc_init_array>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	2600      	movs	r6, #0
 8007248:	4d0c      	ldr	r5, [pc, #48]	; (800727c <__libc_init_array+0x38>)
 800724a:	4c0d      	ldr	r4, [pc, #52]	; (8007280 <__libc_init_array+0x3c>)
 800724c:	1b64      	subs	r4, r4, r5
 800724e:	10a4      	asrs	r4, r4, #2
 8007250:	42a6      	cmp	r6, r4
 8007252:	d109      	bne.n	8007268 <__libc_init_array+0x24>
 8007254:	2600      	movs	r6, #0
 8007256:	f000 f83b 	bl	80072d0 <_init>
 800725a:	4d0a      	ldr	r5, [pc, #40]	; (8007284 <__libc_init_array+0x40>)
 800725c:	4c0a      	ldr	r4, [pc, #40]	; (8007288 <__libc_init_array+0x44>)
 800725e:	1b64      	subs	r4, r4, r5
 8007260:	10a4      	asrs	r4, r4, #2
 8007262:	42a6      	cmp	r6, r4
 8007264:	d105      	bne.n	8007272 <__libc_init_array+0x2e>
 8007266:	bd70      	pop	{r4, r5, r6, pc}
 8007268:	00b3      	lsls	r3, r6, #2
 800726a:	58eb      	ldr	r3, [r5, r3]
 800726c:	4798      	blx	r3
 800726e:	3601      	adds	r6, #1
 8007270:	e7ee      	b.n	8007250 <__libc_init_array+0xc>
 8007272:	00b3      	lsls	r3, r6, #2
 8007274:	58eb      	ldr	r3, [r5, r3]
 8007276:	4798      	blx	r3
 8007278:	3601      	adds	r6, #1
 800727a:	e7f2      	b.n	8007262 <__libc_init_array+0x1e>
 800727c:	08007850 	.word	0x08007850
 8007280:	08007850 	.word	0x08007850
 8007284:	08007850 	.word	0x08007850
 8007288:	08007854 	.word	0x08007854

0800728c <memcpy>:
 800728c:	2300      	movs	r3, #0
 800728e:	b510      	push	{r4, lr}
 8007290:	429a      	cmp	r2, r3
 8007292:	d100      	bne.n	8007296 <memcpy+0xa>
 8007294:	bd10      	pop	{r4, pc}
 8007296:	5ccc      	ldrb	r4, [r1, r3]
 8007298:	54c4      	strb	r4, [r0, r3]
 800729a:	3301      	adds	r3, #1
 800729c:	e7f8      	b.n	8007290 <memcpy+0x4>

0800729e <memset>:
 800729e:	0003      	movs	r3, r0
 80072a0:	1812      	adds	r2, r2, r0
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d100      	bne.n	80072a8 <memset+0xa>
 80072a6:	4770      	bx	lr
 80072a8:	7019      	strb	r1, [r3, #0]
 80072aa:	3301      	adds	r3, #1
 80072ac:	e7f9      	b.n	80072a2 <memset+0x4>

080072ae <strncmp>:
 80072ae:	2300      	movs	r3, #0
 80072b0:	b530      	push	{r4, r5, lr}
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d00a      	beq.n	80072cc <strncmp+0x1e>
 80072b6:	3a01      	subs	r2, #1
 80072b8:	5cc4      	ldrb	r4, [r0, r3]
 80072ba:	5ccd      	ldrb	r5, [r1, r3]
 80072bc:	42ac      	cmp	r4, r5
 80072be:	d104      	bne.n	80072ca <strncmp+0x1c>
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d002      	beq.n	80072ca <strncmp+0x1c>
 80072c4:	3301      	adds	r3, #1
 80072c6:	2c00      	cmp	r4, #0
 80072c8:	d1f6      	bne.n	80072b8 <strncmp+0xa>
 80072ca:	1b63      	subs	r3, r4, r5
 80072cc:	0018      	movs	r0, r3
 80072ce:	bd30      	pop	{r4, r5, pc}

080072d0 <_init>:
 80072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d2:	46c0      	nop			; (mov r8, r8)
 80072d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d6:	bc08      	pop	{r3}
 80072d8:	469e      	mov	lr, r3
 80072da:	4770      	bx	lr

080072dc <_fini>:
 80072dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072de:	46c0      	nop			; (mov r8, r8)
 80072e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e2:	bc08      	pop	{r3}
 80072e4:	469e      	mov	lr, r3
 80072e6:	4770      	bx	lr
