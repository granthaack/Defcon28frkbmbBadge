
cancelled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08006868  08006868  00016868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b50  08006b50  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08006b50  08006b50  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b50  08006b50  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08006b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001d8  08006d30  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08006d30  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db53  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022b0  00000000  00000000  0002dd53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf0  00000000  00000000  00030008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  00030cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000159db  00000000  00000000  000318b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b373  00000000  00000000  0004728b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075ba5  00000000  00000000  000525fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c81a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003584  00000000  00000000  000c8220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006850 	.word	0x08006850

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	08006850 	.word	0x08006850

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fef1 	bl	8001210 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fe49 	bl	80010d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fee3 	bl	8001210 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fed9 	bl	8001210 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fe6b 	bl	8001148 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe61 	bl	8001148 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dadd>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	464f      	mov	r7, r9
 8000498:	4646      	mov	r6, r8
 800049a:	46d6      	mov	lr, sl
 800049c:	000c      	movs	r4, r1
 800049e:	0309      	lsls	r1, r1, #12
 80004a0:	b5c0      	push	{r6, r7, lr}
 80004a2:	0a49      	lsrs	r1, r1, #9
 80004a4:	0f47      	lsrs	r7, r0, #29
 80004a6:	005e      	lsls	r6, r3, #1
 80004a8:	4339      	orrs	r1, r7
 80004aa:	031f      	lsls	r7, r3, #12
 80004ac:	0fdb      	lsrs	r3, r3, #31
 80004ae:	469c      	mov	ip, r3
 80004b0:	0065      	lsls	r5, r4, #1
 80004b2:	0a7b      	lsrs	r3, r7, #9
 80004b4:	0f57      	lsrs	r7, r2, #29
 80004b6:	431f      	orrs	r7, r3
 80004b8:	0d6d      	lsrs	r5, r5, #21
 80004ba:	0fe4      	lsrs	r4, r4, #31
 80004bc:	0d76      	lsrs	r6, r6, #21
 80004be:	46a1      	mov	r9, r4
 80004c0:	00c0      	lsls	r0, r0, #3
 80004c2:	46b8      	mov	r8, r7
 80004c4:	00d2      	lsls	r2, r2, #3
 80004c6:	1bab      	subs	r3, r5, r6
 80004c8:	4564      	cmp	r4, ip
 80004ca:	d07b      	beq.n	80005c4 <__aeabi_dadd+0x130>
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dd5f      	ble.n	8000590 <__aeabi_dadd+0xfc>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_dadd+0x42>
 80004d4:	e0a4      	b.n	8000620 <__aeabi_dadd+0x18c>
 80004d6:	003e      	movs	r6, r7
 80004d8:	4316      	orrs	r6, r2
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x4a>
 80004dc:	e112      	b.n	8000704 <__aeabi_dadd+0x270>
 80004de:	1e5e      	subs	r6, r3, #1
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_dadd+0x52>
 80004e4:	e19e      	b.n	8000824 <__aeabi_dadd+0x390>
 80004e6:	1a87      	subs	r7, r0, r2
 80004e8:	4643      	mov	r3, r8
 80004ea:	42b8      	cmp	r0, r7
 80004ec:	4180      	sbcs	r0, r0
 80004ee:	2501      	movs	r5, #1
 80004f0:	1ac9      	subs	r1, r1, r3
 80004f2:	4240      	negs	r0, r0
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	020b      	lsls	r3, r1, #8
 80004f8:	d400      	bmi.n	80004fc <__aeabi_dadd+0x68>
 80004fa:	e131      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80004fc:	0249      	lsls	r1, r1, #9
 80004fe:	0a4e      	lsrs	r6, r1, #9
 8000500:	2e00      	cmp	r6, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x72>
 8000504:	e16e      	b.n	80007e4 <__aeabi_dadd+0x350>
 8000506:	0030      	movs	r0, r6
 8000508:	f001 fd62 	bl	8001fd0 <__clzsi2>
 800050c:	0003      	movs	r3, r0
 800050e:	3b08      	subs	r3, #8
 8000510:	2b1f      	cmp	r3, #31
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x82>
 8000514:	e161      	b.n	80007da <__aeabi_dadd+0x346>
 8000516:	2220      	movs	r2, #32
 8000518:	0039      	movs	r1, r7
 800051a:	1ad2      	subs	r2, r2, r3
 800051c:	409e      	lsls	r6, r3
 800051e:	40d1      	lsrs	r1, r2
 8000520:	409f      	lsls	r7, r3
 8000522:	430e      	orrs	r6, r1
 8000524:	429d      	cmp	r5, r3
 8000526:	dd00      	ble.n	800052a <__aeabi_dadd+0x96>
 8000528:	e151      	b.n	80007ce <__aeabi_dadd+0x33a>
 800052a:	1b5d      	subs	r5, r3, r5
 800052c:	1c6b      	adds	r3, r5, #1
 800052e:	2b1f      	cmp	r3, #31
 8000530:	dd00      	ble.n	8000534 <__aeabi_dadd+0xa0>
 8000532:	e17c      	b.n	800082e <__aeabi_dadd+0x39a>
 8000534:	2120      	movs	r1, #32
 8000536:	1ac9      	subs	r1, r1, r3
 8000538:	003d      	movs	r5, r7
 800053a:	0030      	movs	r0, r6
 800053c:	408f      	lsls	r7, r1
 800053e:	4088      	lsls	r0, r1
 8000540:	40dd      	lsrs	r5, r3
 8000542:	1e79      	subs	r1, r7, #1
 8000544:	418f      	sbcs	r7, r1
 8000546:	0031      	movs	r1, r6
 8000548:	2207      	movs	r2, #7
 800054a:	4328      	orrs	r0, r5
 800054c:	40d9      	lsrs	r1, r3
 800054e:	2500      	movs	r5, #0
 8000550:	4307      	orrs	r7, r0
 8000552:	403a      	ands	r2, r7
 8000554:	2a00      	cmp	r2, #0
 8000556:	d009      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000558:	230f      	movs	r3, #15
 800055a:	403b      	ands	r3, r7
 800055c:	2b04      	cmp	r3, #4
 800055e:	d005      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	42bb      	cmp	r3, r7
 8000564:	41bf      	sbcs	r7, r7
 8000566:	427f      	negs	r7, r7
 8000568:	19c9      	adds	r1, r1, r7
 800056a:	001f      	movs	r7, r3
 800056c:	020b      	lsls	r3, r1, #8
 800056e:	d400      	bmi.n	8000572 <__aeabi_dadd+0xde>
 8000570:	e226      	b.n	80009c0 <__aeabi_dadd+0x52c>
 8000572:	1c6a      	adds	r2, r5, #1
 8000574:	4bc6      	ldr	r3, [pc, #792]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000576:	0555      	lsls	r5, r2, #21
 8000578:	0d6d      	lsrs	r5, r5, #21
 800057a:	429a      	cmp	r2, r3
 800057c:	d100      	bne.n	8000580 <__aeabi_dadd+0xec>
 800057e:	e106      	b.n	800078e <__aeabi_dadd+0x2fa>
 8000580:	4ac4      	ldr	r2, [pc, #784]	; (8000894 <__aeabi_dadd+0x400>)
 8000582:	08ff      	lsrs	r7, r7, #3
 8000584:	400a      	ands	r2, r1
 8000586:	0753      	lsls	r3, r2, #29
 8000588:	0252      	lsls	r2, r2, #9
 800058a:	433b      	orrs	r3, r7
 800058c:	0b12      	lsrs	r2, r2, #12
 800058e:	e08e      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d000      	beq.n	8000596 <__aeabi_dadd+0x102>
 8000594:	e0b8      	b.n	8000708 <__aeabi_dadd+0x274>
 8000596:	1c6b      	adds	r3, r5, #1
 8000598:	055b      	lsls	r3, r3, #21
 800059a:	0d5b      	lsrs	r3, r3, #21
 800059c:	2b01      	cmp	r3, #1
 800059e:	dc00      	bgt.n	80005a2 <__aeabi_dadd+0x10e>
 80005a0:	e130      	b.n	8000804 <__aeabi_dadd+0x370>
 80005a2:	1a87      	subs	r7, r0, r2
 80005a4:	4643      	mov	r3, r8
 80005a6:	42b8      	cmp	r0, r7
 80005a8:	41b6      	sbcs	r6, r6
 80005aa:	1acb      	subs	r3, r1, r3
 80005ac:	4276      	negs	r6, r6
 80005ae:	1b9e      	subs	r6, r3, r6
 80005b0:	0233      	lsls	r3, r6, #8
 80005b2:	d500      	bpl.n	80005b6 <__aeabi_dadd+0x122>
 80005b4:	e14c      	b.n	8000850 <__aeabi_dadd+0x3bc>
 80005b6:	003b      	movs	r3, r7
 80005b8:	4333      	orrs	r3, r6
 80005ba:	d1a1      	bne.n	8000500 <__aeabi_dadd+0x6c>
 80005bc:	2200      	movs	r2, #0
 80005be:	2400      	movs	r4, #0
 80005c0:	2500      	movs	r5, #0
 80005c2:	e070      	b.n	80006a6 <__aeabi_dadd+0x212>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_dadd+0x136>
 80005c8:	e0e5      	b.n	8000796 <__aeabi_dadd+0x302>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0x13c>
 80005ce:	e083      	b.n	80006d8 <__aeabi_dadd+0x244>
 80005d0:	4eaf      	ldr	r6, [pc, #700]	; (8000890 <__aeabi_dadd+0x3fc>)
 80005d2:	42b5      	cmp	r5, r6
 80005d4:	d060      	beq.n	8000698 <__aeabi_dadd+0x204>
 80005d6:	2680      	movs	r6, #128	; 0x80
 80005d8:	0436      	lsls	r6, r6, #16
 80005da:	4337      	orrs	r7, r6
 80005dc:	46b8      	mov	r8, r7
 80005de:	2b38      	cmp	r3, #56	; 0x38
 80005e0:	dc00      	bgt.n	80005e4 <__aeabi_dadd+0x150>
 80005e2:	e13e      	b.n	8000862 <__aeabi_dadd+0x3ce>
 80005e4:	4643      	mov	r3, r8
 80005e6:	4313      	orrs	r3, r2
 80005e8:	001f      	movs	r7, r3
 80005ea:	1e7a      	subs	r2, r7, #1
 80005ec:	4197      	sbcs	r7, r2
 80005ee:	183f      	adds	r7, r7, r0
 80005f0:	4287      	cmp	r7, r0
 80005f2:	4180      	sbcs	r0, r0
 80005f4:	4240      	negs	r0, r0
 80005f6:	1809      	adds	r1, r1, r0
 80005f8:	020b      	lsls	r3, r1, #8
 80005fa:	d400      	bmi.n	80005fe <__aeabi_dadd+0x16a>
 80005fc:	e0b0      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80005fe:	4ba4      	ldr	r3, [pc, #656]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000600:	3501      	adds	r5, #1
 8000602:	429d      	cmp	r5, r3
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x174>
 8000606:	e0c3      	b.n	8000790 <__aeabi_dadd+0x2fc>
 8000608:	4aa2      	ldr	r2, [pc, #648]	; (8000894 <__aeabi_dadd+0x400>)
 800060a:	087b      	lsrs	r3, r7, #1
 800060c:	400a      	ands	r2, r1
 800060e:	2101      	movs	r1, #1
 8000610:	400f      	ands	r7, r1
 8000612:	431f      	orrs	r7, r3
 8000614:	0851      	lsrs	r1, r2, #1
 8000616:	07d3      	lsls	r3, r2, #31
 8000618:	2207      	movs	r2, #7
 800061a:	431f      	orrs	r7, r3
 800061c:	403a      	ands	r2, r7
 800061e:	e799      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000620:	4e9b      	ldr	r6, [pc, #620]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000622:	42b5      	cmp	r5, r6
 8000624:	d038      	beq.n	8000698 <__aeabi_dadd+0x204>
 8000626:	2680      	movs	r6, #128	; 0x80
 8000628:	0436      	lsls	r6, r6, #16
 800062a:	4337      	orrs	r7, r6
 800062c:	46b8      	mov	r8, r7
 800062e:	2b38      	cmp	r3, #56	; 0x38
 8000630:	dd00      	ble.n	8000634 <__aeabi_dadd+0x1a0>
 8000632:	e0dc      	b.n	80007ee <__aeabi_dadd+0x35a>
 8000634:	2b1f      	cmp	r3, #31
 8000636:	dc00      	bgt.n	800063a <__aeabi_dadd+0x1a6>
 8000638:	e130      	b.n	800089c <__aeabi_dadd+0x408>
 800063a:	001e      	movs	r6, r3
 800063c:	4647      	mov	r7, r8
 800063e:	3e20      	subs	r6, #32
 8000640:	40f7      	lsrs	r7, r6
 8000642:	46bc      	mov	ip, r7
 8000644:	2b20      	cmp	r3, #32
 8000646:	d004      	beq.n	8000652 <__aeabi_dadd+0x1be>
 8000648:	2640      	movs	r6, #64	; 0x40
 800064a:	1af3      	subs	r3, r6, r3
 800064c:	4646      	mov	r6, r8
 800064e:	409e      	lsls	r6, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	0017      	movs	r7, r2
 8000654:	4663      	mov	r3, ip
 8000656:	1e7a      	subs	r2, r7, #1
 8000658:	4197      	sbcs	r7, r2
 800065a:	431f      	orrs	r7, r3
 800065c:	e0cc      	b.n	80007f8 <__aeabi_dadd+0x364>
 800065e:	2b00      	cmp	r3, #0
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x1d0>
 8000662:	e204      	b.n	8000a6e <__aeabi_dadd+0x5da>
 8000664:	4643      	mov	r3, r8
 8000666:	4313      	orrs	r3, r2
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x1d8>
 800066a:	e159      	b.n	8000920 <__aeabi_dadd+0x48c>
 800066c:	074b      	lsls	r3, r1, #29
 800066e:	08c0      	lsrs	r0, r0, #3
 8000670:	4318      	orrs	r0, r3
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	08c9      	lsrs	r1, r1, #3
 8000676:	031b      	lsls	r3, r3, #12
 8000678:	4219      	tst	r1, r3
 800067a:	d008      	beq.n	800068e <__aeabi_dadd+0x1fa>
 800067c:	4645      	mov	r5, r8
 800067e:	08ed      	lsrs	r5, r5, #3
 8000680:	421d      	tst	r5, r3
 8000682:	d104      	bne.n	800068e <__aeabi_dadd+0x1fa>
 8000684:	4643      	mov	r3, r8
 8000686:	08d0      	lsrs	r0, r2, #3
 8000688:	0759      	lsls	r1, r3, #29
 800068a:	4308      	orrs	r0, r1
 800068c:	0029      	movs	r1, r5
 800068e:	0f42      	lsrs	r2, r0, #29
 8000690:	00c9      	lsls	r1, r1, #3
 8000692:	4d7f      	ldr	r5, [pc, #508]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000694:	4311      	orrs	r1, r2
 8000696:	00c0      	lsls	r0, r0, #3
 8000698:	074b      	lsls	r3, r1, #29
 800069a:	08ca      	lsrs	r2, r1, #3
 800069c:	497c      	ldr	r1, [pc, #496]	; (8000890 <__aeabi_dadd+0x3fc>)
 800069e:	08c0      	lsrs	r0, r0, #3
 80006a0:	4303      	orrs	r3, r0
 80006a2:	428d      	cmp	r5, r1
 80006a4:	d068      	beq.n	8000778 <__aeabi_dadd+0x2e4>
 80006a6:	0312      	lsls	r2, r2, #12
 80006a8:	056d      	lsls	r5, r5, #21
 80006aa:	0b12      	lsrs	r2, r2, #12
 80006ac:	0d6d      	lsrs	r5, r5, #21
 80006ae:	2100      	movs	r1, #0
 80006b0:	0312      	lsls	r2, r2, #12
 80006b2:	0018      	movs	r0, r3
 80006b4:	0b13      	lsrs	r3, r2, #12
 80006b6:	0d0a      	lsrs	r2, r1, #20
 80006b8:	0512      	lsls	r2, r2, #20
 80006ba:	431a      	orrs	r2, r3
 80006bc:	4b76      	ldr	r3, [pc, #472]	; (8000898 <__aeabi_dadd+0x404>)
 80006be:	052d      	lsls	r5, r5, #20
 80006c0:	4013      	ands	r3, r2
 80006c2:	432b      	orrs	r3, r5
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	07e4      	lsls	r4, r4, #31
 80006c8:	085b      	lsrs	r3, r3, #1
 80006ca:	4323      	orrs	r3, r4
 80006cc:	0019      	movs	r1, r3
 80006ce:	bc1c      	pop	{r2, r3, r4}
 80006d0:	4690      	mov	r8, r2
 80006d2:	4699      	mov	r9, r3
 80006d4:	46a2      	mov	sl, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	003e      	movs	r6, r7
 80006da:	4316      	orrs	r6, r2
 80006dc:	d012      	beq.n	8000704 <__aeabi_dadd+0x270>
 80006de:	1e5e      	subs	r6, r3, #1
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x252>
 80006e4:	e100      	b.n	80008e8 <__aeabi_dadd+0x454>
 80006e6:	1887      	adds	r7, r0, r2
 80006e8:	4287      	cmp	r7, r0
 80006ea:	4180      	sbcs	r0, r0
 80006ec:	4441      	add	r1, r8
 80006ee:	4240      	negs	r0, r0
 80006f0:	1809      	adds	r1, r1, r0
 80006f2:	2501      	movs	r5, #1
 80006f4:	020b      	lsls	r3, r1, #8
 80006f6:	d533      	bpl.n	8000760 <__aeabi_dadd+0x2cc>
 80006f8:	2502      	movs	r5, #2
 80006fa:	e785      	b.n	8000608 <__aeabi_dadd+0x174>
 80006fc:	4664      	mov	r4, ip
 80006fe:	0033      	movs	r3, r6
 8000700:	4641      	mov	r1, r8
 8000702:	0010      	movs	r0, r2
 8000704:	001d      	movs	r5, r3
 8000706:	e7c7      	b.n	8000698 <__aeabi_dadd+0x204>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d000      	beq.n	800070e <__aeabi_dadd+0x27a>
 800070c:	e0da      	b.n	80008c4 <__aeabi_dadd+0x430>
 800070e:	000c      	movs	r4, r1
 8000710:	4304      	orrs	r4, r0
 8000712:	d0f3      	beq.n	80006fc <__aeabi_dadd+0x268>
 8000714:	1c5c      	adds	r4, r3, #1
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x286>
 8000718:	e19f      	b.n	8000a5a <__aeabi_dadd+0x5c6>
 800071a:	4c5d      	ldr	r4, [pc, #372]	; (8000890 <__aeabi_dadd+0x3fc>)
 800071c:	42a6      	cmp	r6, r4
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x28e>
 8000720:	e12f      	b.n	8000982 <__aeabi_dadd+0x4ee>
 8000722:	43db      	mvns	r3, r3
 8000724:	2b38      	cmp	r3, #56	; 0x38
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x296>
 8000728:	e166      	b.n	80009f8 <__aeabi_dadd+0x564>
 800072a:	2b1f      	cmp	r3, #31
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x29c>
 800072e:	e183      	b.n	8000a38 <__aeabi_dadd+0x5a4>
 8000730:	2420      	movs	r4, #32
 8000732:	0005      	movs	r5, r0
 8000734:	1ae4      	subs	r4, r4, r3
 8000736:	000f      	movs	r7, r1
 8000738:	40dd      	lsrs	r5, r3
 800073a:	40d9      	lsrs	r1, r3
 800073c:	40a0      	lsls	r0, r4
 800073e:	4643      	mov	r3, r8
 8000740:	40a7      	lsls	r7, r4
 8000742:	1a5b      	subs	r3, r3, r1
 8000744:	1e44      	subs	r4, r0, #1
 8000746:	41a0      	sbcs	r0, r4
 8000748:	4698      	mov	r8, r3
 800074a:	432f      	orrs	r7, r5
 800074c:	4338      	orrs	r0, r7
 800074e:	1a17      	subs	r7, r2, r0
 8000750:	42ba      	cmp	r2, r7
 8000752:	4192      	sbcs	r2, r2
 8000754:	4643      	mov	r3, r8
 8000756:	4252      	negs	r2, r2
 8000758:	1a99      	subs	r1, r3, r2
 800075a:	4664      	mov	r4, ip
 800075c:	0035      	movs	r5, r6
 800075e:	e6ca      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000760:	2207      	movs	r2, #7
 8000762:	403a      	ands	r2, r7
 8000764:	2a00      	cmp	r2, #0
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x2d6>
 8000768:	e6f6      	b.n	8000558 <__aeabi_dadd+0xc4>
 800076a:	074b      	lsls	r3, r1, #29
 800076c:	08ca      	lsrs	r2, r1, #3
 800076e:	4948      	ldr	r1, [pc, #288]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000770:	08ff      	lsrs	r7, r7, #3
 8000772:	433b      	orrs	r3, r7
 8000774:	428d      	cmp	r5, r1
 8000776:	d196      	bne.n	80006a6 <__aeabi_dadd+0x212>
 8000778:	0019      	movs	r1, r3
 800077a:	4311      	orrs	r1, r2
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x2ec>
 800077e:	e19e      	b.n	8000abe <__aeabi_dadd+0x62a>
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0309      	lsls	r1, r1, #12
 8000784:	430a      	orrs	r2, r1
 8000786:	0312      	lsls	r2, r2, #12
 8000788:	0b12      	lsrs	r2, r2, #12
 800078a:	4d41      	ldr	r5, [pc, #260]	; (8000890 <__aeabi_dadd+0x3fc>)
 800078c:	e78f      	b.n	80006ae <__aeabi_dadd+0x21a>
 800078e:	0015      	movs	r5, r2
 8000790:	2200      	movs	r2, #0
 8000792:	2300      	movs	r3, #0
 8000794:	e78b      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d000      	beq.n	800079c <__aeabi_dadd+0x308>
 800079a:	e0c7      	b.n	800092c <__aeabi_dadd+0x498>
 800079c:	1c6b      	adds	r3, r5, #1
 800079e:	055f      	lsls	r7, r3, #21
 80007a0:	0d7f      	lsrs	r7, r7, #21
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_dadd+0x314>
 80007a6:	e0f1      	b.n	800098c <__aeabi_dadd+0x4f8>
 80007a8:	4d39      	ldr	r5, [pc, #228]	; (8000890 <__aeabi_dadd+0x3fc>)
 80007aa:	42ab      	cmp	r3, r5
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x31c>
 80007ae:	e0b9      	b.n	8000924 <__aeabi_dadd+0x490>
 80007b0:	1885      	adds	r5, r0, r2
 80007b2:	000a      	movs	r2, r1
 80007b4:	4285      	cmp	r5, r0
 80007b6:	4189      	sbcs	r1, r1
 80007b8:	4442      	add	r2, r8
 80007ba:	4249      	negs	r1, r1
 80007bc:	1851      	adds	r1, r2, r1
 80007be:	2207      	movs	r2, #7
 80007c0:	07cf      	lsls	r7, r1, #31
 80007c2:	086d      	lsrs	r5, r5, #1
 80007c4:	432f      	orrs	r7, r5
 80007c6:	0849      	lsrs	r1, r1, #1
 80007c8:	403a      	ands	r2, r7
 80007ca:	001d      	movs	r5, r3
 80007cc:	e6c2      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007ce:	2207      	movs	r2, #7
 80007d0:	4930      	ldr	r1, [pc, #192]	; (8000894 <__aeabi_dadd+0x400>)
 80007d2:	1aed      	subs	r5, r5, r3
 80007d4:	4031      	ands	r1, r6
 80007d6:	403a      	ands	r2, r7
 80007d8:	e6bc      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007da:	003e      	movs	r6, r7
 80007dc:	3828      	subs	r0, #40	; 0x28
 80007de:	4086      	lsls	r6, r0
 80007e0:	2700      	movs	r7, #0
 80007e2:	e69f      	b.n	8000524 <__aeabi_dadd+0x90>
 80007e4:	0038      	movs	r0, r7
 80007e6:	f001 fbf3 	bl	8001fd0 <__clzsi2>
 80007ea:	3020      	adds	r0, #32
 80007ec:	e68e      	b.n	800050c <__aeabi_dadd+0x78>
 80007ee:	4643      	mov	r3, r8
 80007f0:	4313      	orrs	r3, r2
 80007f2:	001f      	movs	r7, r3
 80007f4:	1e7a      	subs	r2, r7, #1
 80007f6:	4197      	sbcs	r7, r2
 80007f8:	1bc7      	subs	r7, r0, r7
 80007fa:	42b8      	cmp	r0, r7
 80007fc:	4180      	sbcs	r0, r0
 80007fe:	4240      	negs	r0, r0
 8000800:	1a09      	subs	r1, r1, r0
 8000802:	e678      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000804:	000e      	movs	r6, r1
 8000806:	003b      	movs	r3, r7
 8000808:	4306      	orrs	r6, r0
 800080a:	4313      	orrs	r3, r2
 800080c:	2d00      	cmp	r5, #0
 800080e:	d161      	bne.n	80008d4 <__aeabi_dadd+0x440>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x382>
 8000814:	e0f4      	b.n	8000a00 <__aeabi_dadd+0x56c>
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x388>
 800081a:	e11b      	b.n	8000a54 <__aeabi_dadd+0x5c0>
 800081c:	4664      	mov	r4, ip
 800081e:	0039      	movs	r1, r7
 8000820:	0010      	movs	r0, r2
 8000822:	e739      	b.n	8000698 <__aeabi_dadd+0x204>
 8000824:	4f1a      	ldr	r7, [pc, #104]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000826:	42bb      	cmp	r3, r7
 8000828:	d07a      	beq.n	8000920 <__aeabi_dadd+0x48c>
 800082a:	0033      	movs	r3, r6
 800082c:	e6ff      	b.n	800062e <__aeabi_dadd+0x19a>
 800082e:	0030      	movs	r0, r6
 8000830:	3d1f      	subs	r5, #31
 8000832:	40e8      	lsrs	r0, r5
 8000834:	2b20      	cmp	r3, #32
 8000836:	d003      	beq.n	8000840 <__aeabi_dadd+0x3ac>
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	409e      	lsls	r6, r3
 800083e:	4337      	orrs	r7, r6
 8000840:	1e7b      	subs	r3, r7, #1
 8000842:	419f      	sbcs	r7, r3
 8000844:	2207      	movs	r2, #7
 8000846:	4307      	orrs	r7, r0
 8000848:	403a      	ands	r2, r7
 800084a:	2100      	movs	r1, #0
 800084c:	2500      	movs	r5, #0
 800084e:	e789      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000850:	1a17      	subs	r7, r2, r0
 8000852:	4643      	mov	r3, r8
 8000854:	42ba      	cmp	r2, r7
 8000856:	41b6      	sbcs	r6, r6
 8000858:	1a59      	subs	r1, r3, r1
 800085a:	4276      	negs	r6, r6
 800085c:	1b8e      	subs	r6, r1, r6
 800085e:	4664      	mov	r4, ip
 8000860:	e64e      	b.n	8000500 <__aeabi_dadd+0x6c>
 8000862:	2b1f      	cmp	r3, #31
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0x3d4>
 8000866:	e0ad      	b.n	80009c4 <__aeabi_dadd+0x530>
 8000868:	2620      	movs	r6, #32
 800086a:	4647      	mov	r7, r8
 800086c:	1af6      	subs	r6, r6, r3
 800086e:	40b7      	lsls	r7, r6
 8000870:	46b9      	mov	r9, r7
 8000872:	0017      	movs	r7, r2
 8000874:	46b2      	mov	sl, r6
 8000876:	40df      	lsrs	r7, r3
 8000878:	464e      	mov	r6, r9
 800087a:	433e      	orrs	r6, r7
 800087c:	0037      	movs	r7, r6
 800087e:	4656      	mov	r6, sl
 8000880:	40b2      	lsls	r2, r6
 8000882:	1e56      	subs	r6, r2, #1
 8000884:	41b2      	sbcs	r2, r6
 8000886:	4317      	orrs	r7, r2
 8000888:	4642      	mov	r2, r8
 800088a:	40da      	lsrs	r2, r3
 800088c:	1889      	adds	r1, r1, r2
 800088e:	e6ae      	b.n	80005ee <__aeabi_dadd+0x15a>
 8000890:	000007ff 	.word	0x000007ff
 8000894:	ff7fffff 	.word	0xff7fffff
 8000898:	800fffff 	.word	0x800fffff
 800089c:	2620      	movs	r6, #32
 800089e:	4647      	mov	r7, r8
 80008a0:	1af6      	subs	r6, r6, r3
 80008a2:	40b7      	lsls	r7, r6
 80008a4:	46b9      	mov	r9, r7
 80008a6:	0017      	movs	r7, r2
 80008a8:	46b2      	mov	sl, r6
 80008aa:	40df      	lsrs	r7, r3
 80008ac:	464e      	mov	r6, r9
 80008ae:	433e      	orrs	r6, r7
 80008b0:	0037      	movs	r7, r6
 80008b2:	4656      	mov	r6, sl
 80008b4:	40b2      	lsls	r2, r6
 80008b6:	1e56      	subs	r6, r2, #1
 80008b8:	41b2      	sbcs	r2, r6
 80008ba:	4317      	orrs	r7, r2
 80008bc:	4642      	mov	r2, r8
 80008be:	40da      	lsrs	r2, r3
 80008c0:	1a89      	subs	r1, r1, r2
 80008c2:	e799      	b.n	80007f8 <__aeabi_dadd+0x364>
 80008c4:	4c7f      	ldr	r4, [pc, #508]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008c6:	42a6      	cmp	r6, r4
 80008c8:	d05b      	beq.n	8000982 <__aeabi_dadd+0x4ee>
 80008ca:	2480      	movs	r4, #128	; 0x80
 80008cc:	0424      	lsls	r4, r4, #16
 80008ce:	425b      	negs	r3, r3
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e727      	b.n	8000724 <__aeabi_dadd+0x290>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d10c      	bne.n	80008f2 <__aeabi_dadd+0x45e>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x44a>
 80008dc:	e0cb      	b.n	8000a76 <__aeabi_dadd+0x5e2>
 80008de:	4664      	mov	r4, ip
 80008e0:	0039      	movs	r1, r7
 80008e2:	0010      	movs	r0, r2
 80008e4:	4d77      	ldr	r5, [pc, #476]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008e6:	e6d7      	b.n	8000698 <__aeabi_dadd+0x204>
 80008e8:	4f76      	ldr	r7, [pc, #472]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008ea:	42bb      	cmp	r3, r7
 80008ec:	d018      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008ee:	0033      	movs	r3, r6
 80008f0:	e675      	b.n	80005de <__aeabi_dadd+0x14a>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d014      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008f6:	074b      	lsls	r3, r1, #29
 80008f8:	08c0      	lsrs	r0, r0, #3
 80008fa:	4318      	orrs	r0, r3
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	08c9      	lsrs	r1, r1, #3
 8000900:	031b      	lsls	r3, r3, #12
 8000902:	4219      	tst	r1, r3
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x482>
 8000906:	08fc      	lsrs	r4, r7, #3
 8000908:	421c      	tst	r4, r3
 800090a:	d104      	bne.n	8000916 <__aeabi_dadd+0x482>
 800090c:	0779      	lsls	r1, r7, #29
 800090e:	08d0      	lsrs	r0, r2, #3
 8000910:	4308      	orrs	r0, r1
 8000912:	46e1      	mov	r9, ip
 8000914:	0021      	movs	r1, r4
 8000916:	464c      	mov	r4, r9
 8000918:	0f42      	lsrs	r2, r0, #29
 800091a:	00c9      	lsls	r1, r1, #3
 800091c:	4311      	orrs	r1, r2
 800091e:	00c0      	lsls	r0, r0, #3
 8000920:	4d68      	ldr	r5, [pc, #416]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000922:	e6b9      	b.n	8000698 <__aeabi_dadd+0x204>
 8000924:	001d      	movs	r5, r3
 8000926:	2200      	movs	r2, #0
 8000928:	2300      	movs	r3, #0
 800092a:	e6c0      	b.n	80006ae <__aeabi_dadd+0x21a>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d15b      	bne.n	80009e8 <__aeabi_dadd+0x554>
 8000930:	000d      	movs	r5, r1
 8000932:	4305      	orrs	r5, r0
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x4a4>
 8000936:	e6e2      	b.n	80006fe <__aeabi_dadd+0x26a>
 8000938:	1c5d      	adds	r5, r3, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x4aa>
 800093c:	e0b0      	b.n	8000aa0 <__aeabi_dadd+0x60c>
 800093e:	4d61      	ldr	r5, [pc, #388]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000940:	42ae      	cmp	r6, r5
 8000942:	d01f      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 8000944:	43db      	mvns	r3, r3
 8000946:	2b38      	cmp	r3, #56	; 0x38
 8000948:	dc71      	bgt.n	8000a2e <__aeabi_dadd+0x59a>
 800094a:	2b1f      	cmp	r3, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dadd+0x4bc>
 800094e:	e096      	b.n	8000a7e <__aeabi_dadd+0x5ea>
 8000950:	2520      	movs	r5, #32
 8000952:	000f      	movs	r7, r1
 8000954:	1aed      	subs	r5, r5, r3
 8000956:	40af      	lsls	r7, r5
 8000958:	46b9      	mov	r9, r7
 800095a:	0007      	movs	r7, r0
 800095c:	46aa      	mov	sl, r5
 800095e:	40df      	lsrs	r7, r3
 8000960:	464d      	mov	r5, r9
 8000962:	433d      	orrs	r5, r7
 8000964:	002f      	movs	r7, r5
 8000966:	4655      	mov	r5, sl
 8000968:	40a8      	lsls	r0, r5
 800096a:	40d9      	lsrs	r1, r3
 800096c:	1e45      	subs	r5, r0, #1
 800096e:	41a8      	sbcs	r0, r5
 8000970:	4488      	add	r8, r1
 8000972:	4307      	orrs	r7, r0
 8000974:	18bf      	adds	r7, r7, r2
 8000976:	4297      	cmp	r7, r2
 8000978:	4192      	sbcs	r2, r2
 800097a:	4251      	negs	r1, r2
 800097c:	4441      	add	r1, r8
 800097e:	0035      	movs	r5, r6
 8000980:	e63a      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000982:	4664      	mov	r4, ip
 8000984:	0035      	movs	r5, r6
 8000986:	4641      	mov	r1, r8
 8000988:	0010      	movs	r0, r2
 800098a:	e685      	b.n	8000698 <__aeabi_dadd+0x204>
 800098c:	000b      	movs	r3, r1
 800098e:	4303      	orrs	r3, r0
 8000990:	2d00      	cmp	r5, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x502>
 8000994:	e663      	b.n	800065e <__aeabi_dadd+0x1ca>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f5      	beq.n	8000986 <__aeabi_dadd+0x4f2>
 800099a:	4643      	mov	r3, r8
 800099c:	4313      	orrs	r3, r2
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x50e>
 80009a0:	e67a      	b.n	8000698 <__aeabi_dadd+0x204>
 80009a2:	1887      	adds	r7, r0, r2
 80009a4:	4287      	cmp	r7, r0
 80009a6:	4180      	sbcs	r0, r0
 80009a8:	2207      	movs	r2, #7
 80009aa:	4441      	add	r1, r8
 80009ac:	4240      	negs	r0, r0
 80009ae:	1809      	adds	r1, r1, r0
 80009b0:	403a      	ands	r2, r7
 80009b2:	020b      	lsls	r3, r1, #8
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_dadd+0x524>
 80009b6:	e6d5      	b.n	8000764 <__aeabi_dadd+0x2d0>
 80009b8:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x634>)
 80009ba:	3501      	adds	r5, #1
 80009bc:	4019      	ands	r1, r3
 80009be:	e5c9      	b.n	8000554 <__aeabi_dadd+0xc0>
 80009c0:	0038      	movs	r0, r7
 80009c2:	e669      	b.n	8000698 <__aeabi_dadd+0x204>
 80009c4:	001e      	movs	r6, r3
 80009c6:	4647      	mov	r7, r8
 80009c8:	3e20      	subs	r6, #32
 80009ca:	40f7      	lsrs	r7, r6
 80009cc:	46bc      	mov	ip, r7
 80009ce:	2b20      	cmp	r3, #32
 80009d0:	d004      	beq.n	80009dc <__aeabi_dadd+0x548>
 80009d2:	2640      	movs	r6, #64	; 0x40
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	4646      	mov	r6, r8
 80009d8:	409e      	lsls	r6, r3
 80009da:	4332      	orrs	r2, r6
 80009dc:	0017      	movs	r7, r2
 80009de:	4663      	mov	r3, ip
 80009e0:	1e7a      	subs	r2, r7, #1
 80009e2:	4197      	sbcs	r7, r2
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e602      	b.n	80005ee <__aeabi_dadd+0x15a>
 80009e8:	4d36      	ldr	r5, [pc, #216]	; (8000ac4 <__aeabi_dadd+0x630>)
 80009ea:	42ae      	cmp	r6, r5
 80009ec:	d0ca      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 80009ee:	2580      	movs	r5, #128	; 0x80
 80009f0:	042d      	lsls	r5, r5, #16
 80009f2:	425b      	negs	r3, r3
 80009f4:	4329      	orrs	r1, r5
 80009f6:	e7a6      	b.n	8000946 <__aeabi_dadd+0x4b2>
 80009f8:	4308      	orrs	r0, r1
 80009fa:	1e41      	subs	r1, r0, #1
 80009fc:	4188      	sbcs	r0, r1
 80009fe:	e6a6      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x572>
 8000a04:	e648      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a06:	1a87      	subs	r7, r0, r2
 8000a08:	4643      	mov	r3, r8
 8000a0a:	42b8      	cmp	r0, r7
 8000a0c:	41b6      	sbcs	r6, r6
 8000a0e:	1acb      	subs	r3, r1, r3
 8000a10:	4276      	negs	r6, r6
 8000a12:	1b9e      	subs	r6, r3, r6
 8000a14:	0233      	lsls	r3, r6, #8
 8000a16:	d54b      	bpl.n	8000ab0 <__aeabi_dadd+0x61c>
 8000a18:	1a17      	subs	r7, r2, r0
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	42ba      	cmp	r2, r7
 8000a1e:	4192      	sbcs	r2, r2
 8000a20:	1a59      	subs	r1, r3, r1
 8000a22:	4252      	negs	r2, r2
 8000a24:	1a89      	subs	r1, r1, r2
 8000a26:	2207      	movs	r2, #7
 8000a28:	4664      	mov	r4, ip
 8000a2a:	403a      	ands	r2, r7
 8000a2c:	e592      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	000f      	movs	r7, r1
 8000a32:	1e79      	subs	r1, r7, #1
 8000a34:	418f      	sbcs	r7, r1
 8000a36:	e79d      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000a38:	001c      	movs	r4, r3
 8000a3a:	000f      	movs	r7, r1
 8000a3c:	3c20      	subs	r4, #32
 8000a3e:	40e7      	lsrs	r7, r4
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	d003      	beq.n	8000a4c <__aeabi_dadd+0x5b8>
 8000a44:	2440      	movs	r4, #64	; 0x40
 8000a46:	1ae3      	subs	r3, r4, r3
 8000a48:	4099      	lsls	r1, r3
 8000a4a:	4308      	orrs	r0, r1
 8000a4c:	1e41      	subs	r1, r0, #1
 8000a4e:	4188      	sbcs	r0, r1
 8000a50:	4338      	orrs	r0, r7
 8000a52:	e67c      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a54:	2200      	movs	r2, #0
 8000a56:	2400      	movs	r4, #0
 8000a58:	e625      	b.n	80006a6 <__aeabi_dadd+0x212>
 8000a5a:	1a17      	subs	r7, r2, r0
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	42ba      	cmp	r2, r7
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	1a59      	subs	r1, r3, r1
 8000a64:	4252      	negs	r2, r2
 8000a66:	1a89      	subs	r1, r1, r2
 8000a68:	4664      	mov	r4, ip
 8000a6a:	0035      	movs	r5, r6
 8000a6c:	e543      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000a6e:	4641      	mov	r1, r8
 8000a70:	0010      	movs	r0, r2
 8000a72:	4d14      	ldr	r5, [pc, #80]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000a74:	e610      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	2400      	movs	r4, #0
 8000a7a:	0312      	lsls	r2, r2, #12
 8000a7c:	e680      	b.n	8000780 <__aeabi_dadd+0x2ec>
 8000a7e:	001d      	movs	r5, r3
 8000a80:	000f      	movs	r7, r1
 8000a82:	3d20      	subs	r5, #32
 8000a84:	40ef      	lsrs	r7, r5
 8000a86:	46bc      	mov	ip, r7
 8000a88:	2b20      	cmp	r3, #32
 8000a8a:	d003      	beq.n	8000a94 <__aeabi_dadd+0x600>
 8000a8c:	2540      	movs	r5, #64	; 0x40
 8000a8e:	1aeb      	subs	r3, r5, r3
 8000a90:	4099      	lsls	r1, r3
 8000a92:	4308      	orrs	r0, r1
 8000a94:	0007      	movs	r7, r0
 8000a96:	4663      	mov	r3, ip
 8000a98:	1e78      	subs	r0, r7, #1
 8000a9a:	4187      	sbcs	r7, r0
 8000a9c:	431f      	orrs	r7, r3
 8000a9e:	e769      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000aa0:	1887      	adds	r7, r0, r2
 8000aa2:	4297      	cmp	r7, r2
 8000aa4:	419b      	sbcs	r3, r3
 8000aa6:	4441      	add	r1, r8
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	18c9      	adds	r1, r1, r3
 8000aac:	0035      	movs	r5, r6
 8000aae:	e5a3      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	4333      	orrs	r3, r6
 8000ab4:	d0ce      	beq.n	8000a54 <__aeabi_dadd+0x5c0>
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	0031      	movs	r1, r6
 8000aba:	403a      	ands	r2, r7
 8000abc:	e652      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	e5f4      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff

08000acc <__aeabi_ddiv>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	4657      	mov	r7, sl
 8000ad0:	46de      	mov	lr, fp
 8000ad2:	464e      	mov	r6, r9
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	b5e0      	push	{r5, r6, r7, lr}
 8000ad8:	4683      	mov	fp, r0
 8000ada:	0007      	movs	r7, r0
 8000adc:	030e      	lsls	r6, r1, #12
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	4692      	mov	sl, r2
 8000ae4:	001c      	movs	r4, r3
 8000ae6:	0b36      	lsrs	r6, r6, #12
 8000ae8:	0d40      	lsrs	r0, r0, #21
 8000aea:	0fcd      	lsrs	r5, r1, #31
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_ddiv+0x26>
 8000af0:	e09d      	b.n	8000c2e <__aeabi_ddiv+0x162>
 8000af2:	4b95      	ldr	r3, [pc, #596]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d039      	beq.n	8000b6c <__aeabi_ddiv+0xa0>
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	00f6      	lsls	r6, r6, #3
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	431e      	orrs	r6, r3
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b02:	0f7b      	lsrs	r3, r7, #29
 8000b04:	4333      	orrs	r3, r6
 8000b06:	4699      	mov	r9, r3
 8000b08:	4694      	mov	ip, r2
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	4463      	add	r3, ip
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2600      	movs	r6, #0
 8000b14:	00ff      	lsls	r7, r7, #3
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	0323      	lsls	r3, r4, #12
 8000b1a:	0b1b      	lsrs	r3, r3, #12
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	0063      	lsls	r3, r4, #1
 8000b20:	0fe4      	lsrs	r4, r4, #31
 8000b22:	4652      	mov	r2, sl
 8000b24:	0d5b      	lsrs	r3, r3, #21
 8000b26:	9401      	str	r4, [sp, #4]
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x60>
 8000b2a:	e0b3      	b.n	8000c94 <__aeabi_ddiv+0x1c8>
 8000b2c:	4986      	ldr	r1, [pc, #536]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_ddiv+0x68>
 8000b32:	e09e      	b.n	8000c72 <__aeabi_ddiv+0x1a6>
 8000b34:	4642      	mov	r2, r8
 8000b36:	00d1      	lsls	r1, r2, #3
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	0412      	lsls	r2, r2, #16
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	4651      	mov	r1, sl
 8000b40:	0f49      	lsrs	r1, r1, #29
 8000b42:	4311      	orrs	r1, r2
 8000b44:	468b      	mov	fp, r1
 8000b46:	4981      	ldr	r1, [pc, #516]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b48:	4652      	mov	r2, sl
 8000b4a:	468c      	mov	ip, r1
 8000b4c:	9900      	ldr	r1, [sp, #0]
 8000b4e:	4463      	add	r3, ip
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	002b      	movs	r3, r5
 8000b5a:	4063      	eors	r3, r4
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	2e0f      	cmp	r6, #15
 8000b60:	d900      	bls.n	8000b64 <__aeabi_ddiv+0x98>
 8000b62:	e105      	b.n	8000d70 <__aeabi_ddiv+0x2a4>
 8000b64:	4b7a      	ldr	r3, [pc, #488]	; (8000d50 <__aeabi_ddiv+0x284>)
 8000b66:	00b6      	lsls	r6, r6, #2
 8000b68:	599b      	ldr	r3, [r3, r6]
 8000b6a:	469f      	mov	pc, r3
 8000b6c:	465b      	mov	r3, fp
 8000b6e:	4333      	orrs	r3, r6
 8000b70:	4699      	mov	r9, r3
 8000b72:	d000      	beq.n	8000b76 <__aeabi_ddiv+0xaa>
 8000b74:	e0b8      	b.n	8000ce8 <__aeabi_ddiv+0x21c>
 8000b76:	2302      	movs	r3, #2
 8000b78:	2608      	movs	r6, #8
 8000b7a:	2700      	movs	r7, #0
 8000b7c:	9000      	str	r0, [sp, #0]
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	e7ca      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000b82:	46cb      	mov	fp, r9
 8000b84:	003a      	movs	r2, r7
 8000b86:	9902      	ldr	r1, [sp, #8]
 8000b88:	9501      	str	r5, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	2902      	cmp	r1, #2
 8000b90:	d027      	beq.n	8000be2 <__aeabi_ddiv+0x116>
 8000b92:	2903      	cmp	r1, #3
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0xcc>
 8000b96:	e280      	b.n	800109a <__aeabi_ddiv+0x5ce>
 8000b98:	2901      	cmp	r1, #1
 8000b9a:	d044      	beq.n	8000c26 <__aeabi_ddiv+0x15a>
 8000b9c:	496d      	ldr	r1, [pc, #436]	; (8000d54 <__aeabi_ddiv+0x288>)
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	4463      	add	r3, ip
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	dd38      	ble.n	8000c1c <__aeabi_ddiv+0x150>
 8000baa:	0753      	lsls	r3, r2, #29
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000bae:	e213      	b.n	8000fd8 <__aeabi_ddiv+0x50c>
 8000bb0:	08d2      	lsrs	r2, r2, #3
 8000bb2:	465b      	mov	r3, fp
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	d509      	bpl.n	8000bcc <__aeabi_ddiv+0x100>
 8000bb8:	4659      	mov	r1, fp
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <__aeabi_ddiv+0x28c>)
 8000bbc:	4019      	ands	r1, r3
 8000bbe:	468b      	mov	fp, r1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	00c9      	lsls	r1, r1, #3
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	9b00      	ldr	r3, [sp, #0]
 8000bc8:	4463      	add	r3, ip
 8000bca:	001c      	movs	r4, r3
 8000bcc:	4b63      	ldr	r3, [pc, #396]	; (8000d5c <__aeabi_ddiv+0x290>)
 8000bce:	429c      	cmp	r4, r3
 8000bd0:	dc07      	bgt.n	8000be2 <__aeabi_ddiv+0x116>
 8000bd2:	465b      	mov	r3, fp
 8000bd4:	0564      	lsls	r4, r4, #21
 8000bd6:	075f      	lsls	r7, r3, #29
 8000bd8:	025b      	lsls	r3, r3, #9
 8000bda:	4317      	orrs	r7, r2
 8000bdc:	0b1b      	lsrs	r3, r3, #12
 8000bde:	0d62      	lsrs	r2, r4, #21
 8000be0:	e002      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000be2:	2300      	movs	r3, #0
 8000be4:	2700      	movs	r7, #0
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	031b      	lsls	r3, r3, #12
 8000bec:	0b1c      	lsrs	r4, r3, #12
 8000bee:	0d0b      	lsrs	r3, r1, #20
 8000bf0:	051b      	lsls	r3, r3, #20
 8000bf2:	4323      	orrs	r3, r4
 8000bf4:	0514      	lsls	r4, r2, #20
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <__aeabi_ddiv+0x294>)
 8000bf8:	0038      	movs	r0, r7
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	4653      	mov	r3, sl
 8000c00:	0064      	lsls	r4, r4, #1
 8000c02:	07db      	lsls	r3, r3, #31
 8000c04:	0864      	lsrs	r4, r4, #1
 8000c06:	431c      	orrs	r4, r3
 8000c08:	0021      	movs	r1, r4
 8000c0a:	b005      	add	sp, #20
 8000c0c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c0e:	4690      	mov	r8, r2
 8000c10:	4699      	mov	r9, r3
 8000c12:	46a2      	mov	sl, r4
 8000c14:	46ab      	mov	fp, r5
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	1b1b      	subs	r3, r3, r4
 8000c20:	2b38      	cmp	r3, #56	; 0x38
 8000c22:	dc00      	bgt.n	8000c26 <__aeabi_ddiv+0x15a>
 8000c24:	e1ad      	b.n	8000f82 <__aeabi_ddiv+0x4b6>
 8000c26:	2200      	movs	r2, #0
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2700      	movs	r7, #0
 8000c2c:	e7dc      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000c2e:	465b      	mov	r3, fp
 8000c30:	4333      	orrs	r3, r6
 8000c32:	4699      	mov	r9, r3
 8000c34:	d05e      	beq.n	8000cf4 <__aeabi_ddiv+0x228>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_ddiv+0x170>
 8000c3a:	e18a      	b.n	8000f52 <__aeabi_ddiv+0x486>
 8000c3c:	0030      	movs	r0, r6
 8000c3e:	f001 f9c7 	bl	8001fd0 <__clzsi2>
 8000c42:	0003      	movs	r3, r0
 8000c44:	3b0b      	subs	r3, #11
 8000c46:	2b1c      	cmp	r3, #28
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_ddiv+0x180>
 8000c4a:	e17b      	b.n	8000f44 <__aeabi_ddiv+0x478>
 8000c4c:	221d      	movs	r2, #29
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	465a      	mov	r2, fp
 8000c52:	0001      	movs	r1, r0
 8000c54:	40da      	lsrs	r2, r3
 8000c56:	3908      	subs	r1, #8
 8000c58:	408e      	lsls	r6, r1
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	465f      	mov	r7, fp
 8000c5e:	4333      	orrs	r3, r6
 8000c60:	4699      	mov	r9, r3
 8000c62:	408f      	lsls	r7, r1
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <__aeabi_ddiv+0x298>)
 8000c66:	2600      	movs	r6, #0
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	e752      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000c72:	4641      	mov	r1, r8
 8000c74:	4653      	mov	r3, sl
 8000c76:	430b      	orrs	r3, r1
 8000c78:	493b      	ldr	r1, [pc, #236]	; (8000d68 <__aeabi_ddiv+0x29c>)
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	4463      	add	r3, ip
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	465b      	mov	r3, fp
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d13b      	bne.n	8000d02 <__aeabi_ddiv+0x236>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	431e      	orrs	r6, r3
 8000c90:	2102      	movs	r1, #2
 8000c92:	e761      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000c94:	4643      	mov	r3, r8
 8000c96:	4313      	orrs	r3, r2
 8000c98:	469b      	mov	fp, r3
 8000c9a:	d037      	beq.n	8000d0c <__aeabi_ddiv+0x240>
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x1d8>
 8000ca2:	e162      	b.n	8000f6a <__aeabi_ddiv+0x49e>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	f001 f993 	bl	8001fd0 <__clzsi2>
 8000caa:	0003      	movs	r3, r0
 8000cac:	3b0b      	subs	r3, #11
 8000cae:	2b1c      	cmp	r3, #28
 8000cb0:	dd00      	ble.n	8000cb4 <__aeabi_ddiv+0x1e8>
 8000cb2:	e153      	b.n	8000f5c <__aeabi_ddiv+0x490>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	3a08      	subs	r2, #8
 8000cba:	4091      	lsls	r1, r2
 8000cbc:	4688      	mov	r8, r1
 8000cbe:	211d      	movs	r1, #29
 8000cc0:	1acb      	subs	r3, r1, r3
 8000cc2:	4651      	mov	r1, sl
 8000cc4:	40d9      	lsrs	r1, r3
 8000cc6:	000b      	movs	r3, r1
 8000cc8:	4641      	mov	r1, r8
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	469b      	mov	fp, r3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	9b00      	ldr	r3, [sp, #0]
 8000cd6:	4925      	ldr	r1, [pc, #148]	; (8000d6c <__aeabi_ddiv+0x2a0>)
 8000cd8:	469c      	mov	ip, r3
 8000cda:	4460      	add	r0, ip
 8000cdc:	0003      	movs	r3, r0
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4463      	add	r3, ip
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e737      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	46b1      	mov	r9, r6
 8000cec:	9000      	str	r0, [sp, #0]
 8000cee:	260c      	movs	r6, #12
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	e711      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	2604      	movs	r6, #4
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	e70a      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000d02:	2303      	movs	r3, #3
 8000d04:	46c3      	mov	fp, r8
 8000d06:	431e      	orrs	r6, r3
 8000d08:	2103      	movs	r1, #3
 8000d0a:	e725      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	2101      	movs	r1, #1
 8000d14:	e720      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d16:	2300      	movs	r3, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	031b      	lsls	r3, r3, #12
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d22:	e761      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	4649      	mov	r1, r9
 8000d28:	031b      	lsls	r3, r3, #12
 8000d2a:	4219      	tst	r1, r3
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x264>
 8000d2e:	e0e2      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d30:	4659      	mov	r1, fp
 8000d32:	4219      	tst	r1, r3
 8000d34:	d000      	beq.n	8000d38 <__aeabi_ddiv+0x26c>
 8000d36:	e0de      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	031b      	lsls	r3, r3, #12
 8000d3c:	0017      	movs	r7, r2
 8000d3e:	0b1b      	lsrs	r3, r3, #12
 8000d40:	46a2      	mov	sl, r4
 8000d42:	4a01      	ldr	r2, [pc, #4]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d44:	e750      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	000007ff 	.word	0x000007ff
 8000d4c:	fffffc01 	.word	0xfffffc01
 8000d50:	08006890 	.word	0x08006890
 8000d54:	000003ff 	.word	0x000003ff
 8000d58:	feffffff 	.word	0xfeffffff
 8000d5c:	000007fe 	.word	0x000007fe
 8000d60:	800fffff 	.word	0x800fffff
 8000d64:	fffffc0d 	.word	0xfffffc0d
 8000d68:	fffff801 	.word	0xfffff801
 8000d6c:	000003f3 	.word	0x000003f3
 8000d70:	45d9      	cmp	r9, fp
 8000d72:	d900      	bls.n	8000d76 <__aeabi_ddiv+0x2aa>
 8000d74:	e0cb      	b.n	8000f0e <__aeabi_ddiv+0x442>
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000d78:	e0c6      	b.n	8000f08 <__aeabi_ddiv+0x43c>
 8000d7a:	003c      	movs	r4, r7
 8000d7c:	4648      	mov	r0, r9
 8000d7e:	2700      	movs	r7, #0
 8000d80:	9b00      	ldr	r3, [sp, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	465b      	mov	r3, fp
 8000d88:	0e16      	lsrs	r6, r2, #24
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	0213      	lsls	r3, r2, #8
 8000d90:	4698      	mov	r8, r3
 8000d92:	0433      	lsls	r3, r6, #16
 8000d94:	0c1b      	lsrs	r3, r3, #16
 8000d96:	4699      	mov	r9, r3
 8000d98:	0c31      	lsrs	r1, r6, #16
 8000d9a:	9101      	str	r1, [sp, #4]
 8000d9c:	f7ff fa4c 	bl	8000238 <__aeabi_uidivmod>
 8000da0:	464a      	mov	r2, r9
 8000da2:	4342      	muls	r2, r0
 8000da4:	040b      	lsls	r3, r1, #16
 8000da6:	0c21      	lsrs	r1, r4, #16
 8000da8:	0005      	movs	r5, r0
 8000daa:	4319      	orrs	r1, r3
 8000dac:	428a      	cmp	r2, r1
 8000dae:	d907      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db0:	1989      	adds	r1, r1, r6
 8000db2:	3d01      	subs	r5, #1
 8000db4:	428e      	cmp	r6, r1
 8000db6:	d803      	bhi.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db8:	428a      	cmp	r2, r1
 8000dba:	d901      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000dbc:	1e85      	subs	r5, r0, #2
 8000dbe:	1989      	adds	r1, r1, r6
 8000dc0:	1a88      	subs	r0, r1, r2
 8000dc2:	9901      	ldr	r1, [sp, #4]
 8000dc4:	f7ff fa38 	bl	8000238 <__aeabi_uidivmod>
 8000dc8:	0409      	lsls	r1, r1, #16
 8000dca:	468c      	mov	ip, r1
 8000dcc:	464a      	mov	r2, r9
 8000dce:	0421      	lsls	r1, r4, #16
 8000dd0:	4664      	mov	r4, ip
 8000dd2:	4342      	muls	r2, r0
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	4321      	orrs	r1, r4
 8000dda:	428a      	cmp	r2, r1
 8000ddc:	d904      	bls.n	8000de8 <__aeabi_ddiv+0x31c>
 8000dde:	1989      	adds	r1, r1, r6
 8000de0:	3b01      	subs	r3, #1
 8000de2:	428e      	cmp	r6, r1
 8000de4:	d800      	bhi.n	8000de8 <__aeabi_ddiv+0x31c>
 8000de6:	e0f1      	b.n	8000fcc <__aeabi_ddiv+0x500>
 8000de8:	042d      	lsls	r5, r5, #16
 8000dea:	431d      	orrs	r5, r3
 8000dec:	46ab      	mov	fp, r5
 8000dee:	4643      	mov	r3, r8
 8000df0:	1a89      	subs	r1, r1, r2
 8000df2:	4642      	mov	r2, r8
 8000df4:	0c28      	lsrs	r0, r5, #16
 8000df6:	0412      	lsls	r2, r2, #16
 8000df8:	0c1d      	lsrs	r5, r3, #16
 8000dfa:	465b      	mov	r3, fp
 8000dfc:	0c14      	lsrs	r4, r2, #16
 8000dfe:	0022      	movs	r2, r4
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	435a      	muls	r2, r3
 8000e06:	9403      	str	r4, [sp, #12]
 8000e08:	436b      	muls	r3, r5
 8000e0a:	4344      	muls	r4, r0
 8000e0c:	9502      	str	r5, [sp, #8]
 8000e0e:	4368      	muls	r0, r5
 8000e10:	191b      	adds	r3, r3, r4
 8000e12:	0c15      	lsrs	r5, r2, #16
 8000e14:	18eb      	adds	r3, r5, r3
 8000e16:	429c      	cmp	r4, r3
 8000e18:	d903      	bls.n	8000e22 <__aeabi_ddiv+0x356>
 8000e1a:	2480      	movs	r4, #128	; 0x80
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	46a4      	mov	ip, r4
 8000e20:	4460      	add	r0, ip
 8000e22:	0c1c      	lsrs	r4, r3, #16
 8000e24:	0415      	lsls	r5, r2, #16
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	0c2d      	lsrs	r5, r5, #16
 8000e2a:	1820      	adds	r0, r4, r0
 8000e2c:	195d      	adds	r5, r3, r5
 8000e2e:	4281      	cmp	r1, r0
 8000e30:	d377      	bcc.n	8000f22 <__aeabi_ddiv+0x456>
 8000e32:	d073      	beq.n	8000f1c <__aeabi_ddiv+0x450>
 8000e34:	1a0c      	subs	r4, r1, r0
 8000e36:	4aa2      	ldr	r2, [pc, #648]	; (80010c0 <__aeabi_ddiv+0x5f4>)
 8000e38:	1b7d      	subs	r5, r7, r5
 8000e3a:	42af      	cmp	r7, r5
 8000e3c:	41bf      	sbcs	r7, r7
 8000e3e:	4694      	mov	ip, r2
 8000e40:	9b00      	ldr	r3, [sp, #0]
 8000e42:	427f      	negs	r7, r7
 8000e44:	4463      	add	r3, ip
 8000e46:	1be0      	subs	r0, r4, r7
 8000e48:	001c      	movs	r4, r3
 8000e4a:	4286      	cmp	r6, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0x384>
 8000e4e:	e0db      	b.n	8001008 <__aeabi_ddiv+0x53c>
 8000e50:	9901      	ldr	r1, [sp, #4]
 8000e52:	f7ff f9f1 	bl	8000238 <__aeabi_uidivmod>
 8000e56:	464a      	mov	r2, r9
 8000e58:	4342      	muls	r2, r0
 8000e5a:	040b      	lsls	r3, r1, #16
 8000e5c:	0c29      	lsrs	r1, r5, #16
 8000e5e:	0007      	movs	r7, r0
 8000e60:	4319      	orrs	r1, r3
 8000e62:	428a      	cmp	r2, r1
 8000e64:	d907      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e66:	1989      	adds	r1, r1, r6
 8000e68:	3f01      	subs	r7, #1
 8000e6a:	428e      	cmp	r6, r1
 8000e6c:	d803      	bhi.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d901      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e72:	1e87      	subs	r7, r0, #2
 8000e74:	1989      	adds	r1, r1, r6
 8000e76:	1a88      	subs	r0, r1, r2
 8000e78:	9901      	ldr	r1, [sp, #4]
 8000e7a:	f7ff f9dd 	bl	8000238 <__aeabi_uidivmod>
 8000e7e:	0409      	lsls	r1, r1, #16
 8000e80:	464a      	mov	r2, r9
 8000e82:	4689      	mov	r9, r1
 8000e84:	0429      	lsls	r1, r5, #16
 8000e86:	464d      	mov	r5, r9
 8000e88:	4342      	muls	r2, r0
 8000e8a:	0c09      	lsrs	r1, r1, #16
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	4329      	orrs	r1, r5
 8000e90:	428a      	cmp	r2, r1
 8000e92:	d907      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e94:	1989      	adds	r1, r1, r6
 8000e96:	3b01      	subs	r3, #1
 8000e98:	428e      	cmp	r6, r1
 8000e9a:	d803      	bhi.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d901      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000ea0:	1e83      	subs	r3, r0, #2
 8000ea2:	1989      	adds	r1, r1, r6
 8000ea4:	043f      	lsls	r7, r7, #16
 8000ea6:	1a89      	subs	r1, r1, r2
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	9f03      	ldr	r7, [sp, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	0038      	movs	r0, r7
 8000eb0:	0413      	lsls	r3, r2, #16
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	4358      	muls	r0, r3
 8000eb6:	4681      	mov	r9, r0
 8000eb8:	9802      	ldr	r0, [sp, #8]
 8000eba:	0c15      	lsrs	r5, r2, #16
 8000ebc:	436f      	muls	r7, r5
 8000ebe:	4343      	muls	r3, r0
 8000ec0:	4345      	muls	r5, r0
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	0c00      	lsrs	r0, r0, #16
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	19db      	adds	r3, r3, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	429f      	cmp	r7, r3
 8000ece:	d903      	bls.n	8000ed8 <__aeabi_ddiv+0x40c>
 8000ed0:	2080      	movs	r0, #128	; 0x80
 8000ed2:	0240      	lsls	r0, r0, #9
 8000ed4:	4684      	mov	ip, r0
 8000ed6:	4465      	add	r5, ip
 8000ed8:	4648      	mov	r0, r9
 8000eda:	0c1f      	lsrs	r7, r3, #16
 8000edc:	0400      	lsls	r0, r0, #16
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	0c00      	lsrs	r0, r0, #16
 8000ee2:	197d      	adds	r5, r7, r5
 8000ee4:	1818      	adds	r0, r3, r0
 8000ee6:	42a9      	cmp	r1, r5
 8000ee8:	d200      	bcs.n	8000eec <__aeabi_ddiv+0x420>
 8000eea:	e084      	b.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_ddiv+0x424>
 8000eee:	e07f      	b.n	8000ff0 <__aeabi_ddiv+0x524>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	e657      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	464a      	mov	r2, r9
 8000efa:	031b      	lsls	r3, r3, #12
 8000efc:	4313      	orrs	r3, r2
 8000efe:	031b      	lsls	r3, r3, #12
 8000f00:	0b1b      	lsrs	r3, r3, #12
 8000f02:	46aa      	mov	sl, r5
 8000f04:	4a6f      	ldr	r2, [pc, #444]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 8000f06:	e66f      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000f08:	42ba      	cmp	r2, r7
 8000f0a:	d900      	bls.n	8000f0e <__aeabi_ddiv+0x442>
 8000f0c:	e735      	b.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000f0e:	464b      	mov	r3, r9
 8000f10:	07dc      	lsls	r4, r3, #31
 8000f12:	0858      	lsrs	r0, r3, #1
 8000f14:	087b      	lsrs	r3, r7, #1
 8000f16:	431c      	orrs	r4, r3
 8000f18:	07ff      	lsls	r7, r7, #31
 8000f1a:	e734      	b.n	8000d86 <__aeabi_ddiv+0x2ba>
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	42af      	cmp	r7, r5
 8000f20:	d289      	bcs.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f22:	4447      	add	r7, r8
 8000f24:	4547      	cmp	r7, r8
 8000f26:	41a4      	sbcs	r4, r4
 8000f28:	465b      	mov	r3, fp
 8000f2a:	4264      	negs	r4, r4
 8000f2c:	19a4      	adds	r4, r4, r6
 8000f2e:	1864      	adds	r4, r4, r1
 8000f30:	3b01      	subs	r3, #1
 8000f32:	42a6      	cmp	r6, r4
 8000f34:	d21e      	bcs.n	8000f74 <__aeabi_ddiv+0x4a8>
 8000f36:	42a0      	cmp	r0, r4
 8000f38:	d86d      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f3c:	e0b6      	b.n	80010ac <__aeabi_ddiv+0x5e0>
 8000f3e:	1a24      	subs	r4, r4, r0
 8000f40:	469b      	mov	fp, r3
 8000f42:	e778      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f44:	0003      	movs	r3, r0
 8000f46:	465a      	mov	r2, fp
 8000f48:	3b28      	subs	r3, #40	; 0x28
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	2700      	movs	r7, #0
 8000f4e:	4691      	mov	r9, r2
 8000f50:	e688      	b.n	8000c64 <__aeabi_ddiv+0x198>
 8000f52:	4658      	mov	r0, fp
 8000f54:	f001 f83c 	bl	8001fd0 <__clzsi2>
 8000f58:	3020      	adds	r0, #32
 8000f5a:	e672      	b.n	8000c42 <__aeabi_ddiv+0x176>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	4652      	mov	r2, sl
 8000f60:	3b28      	subs	r3, #40	; 0x28
 8000f62:	409a      	lsls	r2, r3
 8000f64:	4693      	mov	fp, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	e6b4      	b.n	8000cd4 <__aeabi_ddiv+0x208>
 8000f6a:	4650      	mov	r0, sl
 8000f6c:	f001 f830 	bl	8001fd0 <__clzsi2>
 8000f70:	3020      	adds	r0, #32
 8000f72:	e69a      	b.n	8000caa <__aeabi_ddiv+0x1de>
 8000f74:	42a6      	cmp	r6, r4
 8000f76:	d1e2      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f78:	45b8      	cmp	r8, r7
 8000f7a:	d9dc      	bls.n	8000f36 <__aeabi_ddiv+0x46a>
 8000f7c:	1a34      	subs	r4, r6, r0
 8000f7e:	469b      	mov	fp, r3
 8000f80:	e759      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dc65      	bgt.n	8001052 <__aeabi_ddiv+0x586>
 8000f86:	4c50      	ldr	r4, [pc, #320]	; (80010c8 <__aeabi_ddiv+0x5fc>)
 8000f88:	9900      	ldr	r1, [sp, #0]
 8000f8a:	46a4      	mov	ip, r4
 8000f8c:	465c      	mov	r4, fp
 8000f8e:	4461      	add	r1, ip
 8000f90:	0008      	movs	r0, r1
 8000f92:	408c      	lsls	r4, r1
 8000f94:	0011      	movs	r1, r2
 8000f96:	4082      	lsls	r2, r0
 8000f98:	40d9      	lsrs	r1, r3
 8000f9a:	1e50      	subs	r0, r2, #1
 8000f9c:	4182      	sbcs	r2, r0
 8000f9e:	430c      	orrs	r4, r1
 8000fa0:	4314      	orrs	r4, r2
 8000fa2:	465a      	mov	r2, fp
 8000fa4:	40da      	lsrs	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	0762      	lsls	r2, r4, #29
 8000faa:	d009      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fac:	220f      	movs	r2, #15
 8000fae:	4022      	ands	r2, r4
 8000fb0:	2a04      	cmp	r2, #4
 8000fb2:	d005      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fb4:	0022      	movs	r2, r4
 8000fb6:	1d14      	adds	r4, r2, #4
 8000fb8:	4294      	cmp	r4, r2
 8000fba:	4189      	sbcs	r1, r1
 8000fbc:	4249      	negs	r1, r1
 8000fbe:	185b      	adds	r3, r3, r1
 8000fc0:	021a      	lsls	r2, r3, #8
 8000fc2:	d562      	bpl.n	800108a <__aeabi_ddiv+0x5be>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2700      	movs	r7, #0
 8000fca:	e60d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000fcc:	428a      	cmp	r2, r1
 8000fce:	d800      	bhi.n	8000fd2 <__aeabi_ddiv+0x506>
 8000fd0:	e70a      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd2:	1e83      	subs	r3, r0, #2
 8000fd4:	1989      	adds	r1, r1, r6
 8000fd6:	e707      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd8:	230f      	movs	r3, #15
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0x516>
 8000fe0:	e5e6      	b.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000fe2:	1d17      	adds	r7, r2, #4
 8000fe4:	4297      	cmp	r7, r2
 8000fe6:	4192      	sbcs	r2, r2
 8000fe8:	4253      	negs	r3, r2
 8000fea:	449b      	add	fp, r3
 8000fec:	08fa      	lsrs	r2, r7, #3
 8000fee:	e5e0      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000ff4:	e5d7      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ff6:	1871      	adds	r1, r6, r1
 8000ff8:	1e53      	subs	r3, r2, #1
 8000ffa:	42b1      	cmp	r1, r6
 8000ffc:	d327      	bcc.n	800104e <__aeabi_ddiv+0x582>
 8000ffe:	42a9      	cmp	r1, r5
 8001000:	d315      	bcc.n	800102e <__aeabi_ddiv+0x562>
 8001002:	d058      	beq.n	80010b6 <__aeabi_ddiv+0x5ea>
 8001004:	001a      	movs	r2, r3
 8001006:	e773      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001008:	2b00      	cmp	r3, #0
 800100a:	dc00      	bgt.n	800100e <__aeabi_ddiv+0x542>
 800100c:	e604      	b.n	8000c18 <__aeabi_ddiv+0x14c>
 800100e:	2301      	movs	r3, #1
 8001010:	2200      	movs	r2, #0
 8001012:	449b      	add	fp, r3
 8001014:	e5cd      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8001016:	2302      	movs	r3, #2
 8001018:	4447      	add	r7, r8
 800101a:	4547      	cmp	r7, r8
 800101c:	4189      	sbcs	r1, r1
 800101e:	425b      	negs	r3, r3
 8001020:	469c      	mov	ip, r3
 8001022:	4249      	negs	r1, r1
 8001024:	1989      	adds	r1, r1, r6
 8001026:	190c      	adds	r4, r1, r4
 8001028:	44e3      	add	fp, ip
 800102a:	1a24      	subs	r4, r4, r0
 800102c:	e703      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 800102e:	4643      	mov	r3, r8
 8001030:	005f      	lsls	r7, r3, #1
 8001032:	4547      	cmp	r7, r8
 8001034:	419b      	sbcs	r3, r3
 8001036:	46b8      	mov	r8, r7
 8001038:	425b      	negs	r3, r3
 800103a:	199e      	adds	r6, r3, r6
 800103c:	3a02      	subs	r2, #2
 800103e:	1989      	adds	r1, r1, r6
 8001040:	42a9      	cmp	r1, r5
 8001042:	d000      	beq.n	8001046 <__aeabi_ddiv+0x57a>
 8001044:	e754      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001046:	4540      	cmp	r0, r8
 8001048:	d000      	beq.n	800104c <__aeabi_ddiv+0x580>
 800104a:	e751      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 800104c:	e5ab      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 800104e:	001a      	movs	r2, r3
 8001050:	e7f6      	b.n	8001040 <__aeabi_ddiv+0x574>
 8001052:	211f      	movs	r1, #31
 8001054:	465f      	mov	r7, fp
 8001056:	4249      	negs	r1, r1
 8001058:	1b0c      	subs	r4, r1, r4
 800105a:	40e7      	lsrs	r7, r4
 800105c:	2b20      	cmp	r3, #32
 800105e:	d007      	beq.n	8001070 <__aeabi_ddiv+0x5a4>
 8001060:	491a      	ldr	r1, [pc, #104]	; (80010cc <__aeabi_ddiv+0x600>)
 8001062:	9b00      	ldr	r3, [sp, #0]
 8001064:	468c      	mov	ip, r1
 8001066:	4463      	add	r3, ip
 8001068:	0018      	movs	r0, r3
 800106a:	465b      	mov	r3, fp
 800106c:	4083      	lsls	r3, r0
 800106e:	431a      	orrs	r2, r3
 8001070:	1e50      	subs	r0, r2, #1
 8001072:	4182      	sbcs	r2, r0
 8001074:	433a      	orrs	r2, r7
 8001076:	2707      	movs	r7, #7
 8001078:	2300      	movs	r3, #0
 800107a:	4017      	ands	r7, r2
 800107c:	d009      	beq.n	8001092 <__aeabi_ddiv+0x5c6>
 800107e:	210f      	movs	r1, #15
 8001080:	2300      	movs	r3, #0
 8001082:	4011      	ands	r1, r2
 8001084:	0014      	movs	r4, r2
 8001086:	2904      	cmp	r1, #4
 8001088:	d195      	bne.n	8000fb6 <__aeabi_ddiv+0x4ea>
 800108a:	0022      	movs	r2, r4
 800108c:	075f      	lsls	r7, r3, #29
 800108e:	025b      	lsls	r3, r3, #9
 8001090:	0b1b      	lsrs	r3, r3, #12
 8001092:	08d2      	lsrs	r2, r2, #3
 8001094:	4317      	orrs	r7, r2
 8001096:	2200      	movs	r2, #0
 8001098:	e5a6      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	4659      	mov	r1, fp
 800109e:	031b      	lsls	r3, r3, #12
 80010a0:	430b      	orrs	r3, r1
 80010a2:	031b      	lsls	r3, r3, #12
 80010a4:	0017      	movs	r7, r2
 80010a6:	0b1b      	lsrs	r3, r3, #12
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 80010aa:	e59d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 80010ac:	42bd      	cmp	r5, r7
 80010ae:	d8b2      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 80010b0:	469b      	mov	fp, r3
 80010b2:	2400      	movs	r4, #0
 80010b4:	e6bf      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 80010b6:	4580      	cmp	r8, r0
 80010b8:	d3b9      	bcc.n	800102e <__aeabi_ddiv+0x562>
 80010ba:	001a      	movs	r2, r3
 80010bc:	e7c3      	b.n	8001046 <__aeabi_ddiv+0x57a>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	000003ff 	.word	0x000003ff
 80010c4:	000007ff 	.word	0x000007ff
 80010c8:	0000041e 	.word	0x0000041e
 80010cc:	0000043e 	.word	0x0000043e

080010d0 <__eqdf2>:
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	464f      	mov	r7, r9
 80010d4:	4646      	mov	r6, r8
 80010d6:	46d6      	mov	lr, sl
 80010d8:	4684      	mov	ip, r0
 80010da:	b5c0      	push	{r6, r7, lr}
 80010dc:	4680      	mov	r8, r0
 80010de:	4e19      	ldr	r6, [pc, #100]	; (8001144 <__eqdf2+0x74>)
 80010e0:	0318      	lsls	r0, r3, #12
 80010e2:	030f      	lsls	r7, r1, #12
 80010e4:	004d      	lsls	r5, r1, #1
 80010e6:	0b00      	lsrs	r0, r0, #12
 80010e8:	005c      	lsls	r4, r3, #1
 80010ea:	4682      	mov	sl, r0
 80010ec:	0b3f      	lsrs	r7, r7, #12
 80010ee:	0d6d      	lsrs	r5, r5, #21
 80010f0:	0fc9      	lsrs	r1, r1, #31
 80010f2:	4691      	mov	r9, r2
 80010f4:	0d64      	lsrs	r4, r4, #21
 80010f6:	0fdb      	lsrs	r3, r3, #31
 80010f8:	2001      	movs	r0, #1
 80010fa:	42b5      	cmp	r5, r6
 80010fc:	d00a      	beq.n	8001114 <__eqdf2+0x44>
 80010fe:	42b4      	cmp	r4, r6
 8001100:	d003      	beq.n	800110a <__eqdf2+0x3a>
 8001102:	42a5      	cmp	r5, r4
 8001104:	d101      	bne.n	800110a <__eqdf2+0x3a>
 8001106:	4557      	cmp	r7, sl
 8001108:	d00c      	beq.n	8001124 <__eqdf2+0x54>
 800110a:	bc1c      	pop	{r2, r3, r4}
 800110c:	4690      	mov	r8, r2
 800110e:	4699      	mov	r9, r3
 8001110:	46a2      	mov	sl, r4
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001114:	4666      	mov	r6, ip
 8001116:	433e      	orrs	r6, r7
 8001118:	d1f7      	bne.n	800110a <__eqdf2+0x3a>
 800111a:	42ac      	cmp	r4, r5
 800111c:	d1f5      	bne.n	800110a <__eqdf2+0x3a>
 800111e:	4654      	mov	r4, sl
 8001120:	4314      	orrs	r4, r2
 8001122:	d1f2      	bne.n	800110a <__eqdf2+0x3a>
 8001124:	2001      	movs	r0, #1
 8001126:	45c8      	cmp	r8, r9
 8001128:	d1ef      	bne.n	800110a <__eqdf2+0x3a>
 800112a:	4299      	cmp	r1, r3
 800112c:	d007      	beq.n	800113e <__eqdf2+0x6e>
 800112e:	2d00      	cmp	r5, #0
 8001130:	d1eb      	bne.n	800110a <__eqdf2+0x3a>
 8001132:	4663      	mov	r3, ip
 8001134:	431f      	orrs	r7, r3
 8001136:	0038      	movs	r0, r7
 8001138:	1e47      	subs	r7, r0, #1
 800113a:	41b8      	sbcs	r0, r7
 800113c:	e7e5      	b.n	800110a <__eqdf2+0x3a>
 800113e:	2000      	movs	r0, #0
 8001140:	e7e3      	b.n	800110a <__eqdf2+0x3a>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	000007ff 	.word	0x000007ff

08001148 <__gedf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464f      	mov	r7, r9
 800114c:	4646      	mov	r6, r8
 800114e:	46d6      	mov	lr, sl
 8001150:	004d      	lsls	r5, r1, #1
 8001152:	b5c0      	push	{r6, r7, lr}
 8001154:	030e      	lsls	r6, r1, #12
 8001156:	0fc9      	lsrs	r1, r1, #31
 8001158:	468a      	mov	sl, r1
 800115a:	492c      	ldr	r1, [pc, #176]	; (800120c <__gedf2+0xc4>)
 800115c:	031f      	lsls	r7, r3, #12
 800115e:	005c      	lsls	r4, r3, #1
 8001160:	4680      	mov	r8, r0
 8001162:	0b36      	lsrs	r6, r6, #12
 8001164:	0d6d      	lsrs	r5, r5, #21
 8001166:	4691      	mov	r9, r2
 8001168:	0b3f      	lsrs	r7, r7, #12
 800116a:	0d64      	lsrs	r4, r4, #21
 800116c:	0fdb      	lsrs	r3, r3, #31
 800116e:	428d      	cmp	r5, r1
 8001170:	d01e      	beq.n	80011b0 <__gedf2+0x68>
 8001172:	428c      	cmp	r4, r1
 8001174:	d016      	beq.n	80011a4 <__gedf2+0x5c>
 8001176:	2d00      	cmp	r5, #0
 8001178:	d11e      	bne.n	80011b8 <__gedf2+0x70>
 800117a:	4330      	orrs	r0, r6
 800117c:	4684      	mov	ip, r0
 800117e:	2c00      	cmp	r4, #0
 8001180:	d101      	bne.n	8001186 <__gedf2+0x3e>
 8001182:	433a      	orrs	r2, r7
 8001184:	d023      	beq.n	80011ce <__gedf2+0x86>
 8001186:	4662      	mov	r2, ip
 8001188:	2a00      	cmp	r2, #0
 800118a:	d01a      	beq.n	80011c2 <__gedf2+0x7a>
 800118c:	459a      	cmp	sl, r3
 800118e:	d029      	beq.n	80011e4 <__gedf2+0x9c>
 8001190:	4651      	mov	r1, sl
 8001192:	2002      	movs	r0, #2
 8001194:	3901      	subs	r1, #1
 8001196:	4008      	ands	r0, r1
 8001198:	3801      	subs	r0, #1
 800119a:	bc1c      	pop	{r2, r3, r4}
 800119c:	4690      	mov	r8, r2
 800119e:	4699      	mov	r9, r3
 80011a0:	46a2      	mov	sl, r4
 80011a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a4:	0039      	movs	r1, r7
 80011a6:	4311      	orrs	r1, r2
 80011a8:	d0e5      	beq.n	8001176 <__gedf2+0x2e>
 80011aa:	2002      	movs	r0, #2
 80011ac:	4240      	negs	r0, r0
 80011ae:	e7f4      	b.n	800119a <__gedf2+0x52>
 80011b0:	4330      	orrs	r0, r6
 80011b2:	d1fa      	bne.n	80011aa <__gedf2+0x62>
 80011b4:	42ac      	cmp	r4, r5
 80011b6:	d00f      	beq.n	80011d8 <__gedf2+0x90>
 80011b8:	2c00      	cmp	r4, #0
 80011ba:	d10f      	bne.n	80011dc <__gedf2+0x94>
 80011bc:	433a      	orrs	r2, r7
 80011be:	d0e7      	beq.n	8001190 <__gedf2+0x48>
 80011c0:	e00c      	b.n	80011dc <__gedf2+0x94>
 80011c2:	2201      	movs	r2, #1
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4393      	bics	r3, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	3001      	adds	r0, #1
 80011cc:	e7e5      	b.n	800119a <__gedf2+0x52>
 80011ce:	4663      	mov	r3, ip
 80011d0:	2000      	movs	r0, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0e1      	beq.n	800119a <__gedf2+0x52>
 80011d6:	e7db      	b.n	8001190 <__gedf2+0x48>
 80011d8:	433a      	orrs	r2, r7
 80011da:	d1e6      	bne.n	80011aa <__gedf2+0x62>
 80011dc:	459a      	cmp	sl, r3
 80011de:	d1d7      	bne.n	8001190 <__gedf2+0x48>
 80011e0:	42a5      	cmp	r5, r4
 80011e2:	dcd5      	bgt.n	8001190 <__gedf2+0x48>
 80011e4:	42a5      	cmp	r5, r4
 80011e6:	db05      	blt.n	80011f4 <__gedf2+0xac>
 80011e8:	42be      	cmp	r6, r7
 80011ea:	d8d1      	bhi.n	8001190 <__gedf2+0x48>
 80011ec:	d008      	beq.n	8001200 <__gedf2+0xb8>
 80011ee:	2000      	movs	r0, #0
 80011f0:	42be      	cmp	r6, r7
 80011f2:	d2d2      	bcs.n	800119a <__gedf2+0x52>
 80011f4:	4650      	mov	r0, sl
 80011f6:	2301      	movs	r3, #1
 80011f8:	3801      	subs	r0, #1
 80011fa:	4398      	bics	r0, r3
 80011fc:	3001      	adds	r0, #1
 80011fe:	e7cc      	b.n	800119a <__gedf2+0x52>
 8001200:	45c8      	cmp	r8, r9
 8001202:	d8c5      	bhi.n	8001190 <__gedf2+0x48>
 8001204:	2000      	movs	r0, #0
 8001206:	45c8      	cmp	r8, r9
 8001208:	d3f4      	bcc.n	80011f4 <__gedf2+0xac>
 800120a:	e7c6      	b.n	800119a <__gedf2+0x52>
 800120c:	000007ff 	.word	0x000007ff

08001210 <__ledf2>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	464f      	mov	r7, r9
 8001214:	4646      	mov	r6, r8
 8001216:	46d6      	mov	lr, sl
 8001218:	004d      	lsls	r5, r1, #1
 800121a:	b5c0      	push	{r6, r7, lr}
 800121c:	030e      	lsls	r6, r1, #12
 800121e:	0fc9      	lsrs	r1, r1, #31
 8001220:	468a      	mov	sl, r1
 8001222:	492e      	ldr	r1, [pc, #184]	; (80012dc <__ledf2+0xcc>)
 8001224:	031f      	lsls	r7, r3, #12
 8001226:	005c      	lsls	r4, r3, #1
 8001228:	4680      	mov	r8, r0
 800122a:	0b36      	lsrs	r6, r6, #12
 800122c:	0d6d      	lsrs	r5, r5, #21
 800122e:	4691      	mov	r9, r2
 8001230:	0b3f      	lsrs	r7, r7, #12
 8001232:	0d64      	lsrs	r4, r4, #21
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	428d      	cmp	r5, r1
 8001238:	d018      	beq.n	800126c <__ledf2+0x5c>
 800123a:	428c      	cmp	r4, r1
 800123c:	d011      	beq.n	8001262 <__ledf2+0x52>
 800123e:	2d00      	cmp	r5, #0
 8001240:	d118      	bne.n	8001274 <__ledf2+0x64>
 8001242:	4330      	orrs	r0, r6
 8001244:	4684      	mov	ip, r0
 8001246:	2c00      	cmp	r4, #0
 8001248:	d11e      	bne.n	8001288 <__ledf2+0x78>
 800124a:	433a      	orrs	r2, r7
 800124c:	d11c      	bne.n	8001288 <__ledf2+0x78>
 800124e:	4663      	mov	r3, ip
 8001250:	2000      	movs	r0, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d030      	beq.n	80012b8 <__ledf2+0xa8>
 8001256:	4651      	mov	r1, sl
 8001258:	2002      	movs	r0, #2
 800125a:	3901      	subs	r1, #1
 800125c:	4008      	ands	r0, r1
 800125e:	3801      	subs	r0, #1
 8001260:	e02a      	b.n	80012b8 <__ledf2+0xa8>
 8001262:	0039      	movs	r1, r7
 8001264:	4311      	orrs	r1, r2
 8001266:	d0ea      	beq.n	800123e <__ledf2+0x2e>
 8001268:	2002      	movs	r0, #2
 800126a:	e025      	b.n	80012b8 <__ledf2+0xa8>
 800126c:	4330      	orrs	r0, r6
 800126e:	d1fb      	bne.n	8001268 <__ledf2+0x58>
 8001270:	42ac      	cmp	r4, r5
 8001272:	d026      	beq.n	80012c2 <__ledf2+0xb2>
 8001274:	2c00      	cmp	r4, #0
 8001276:	d126      	bne.n	80012c6 <__ledf2+0xb6>
 8001278:	433a      	orrs	r2, r7
 800127a:	d124      	bne.n	80012c6 <__ledf2+0xb6>
 800127c:	4651      	mov	r1, sl
 800127e:	2002      	movs	r0, #2
 8001280:	3901      	subs	r1, #1
 8001282:	4008      	ands	r0, r1
 8001284:	3801      	subs	r0, #1
 8001286:	e017      	b.n	80012b8 <__ledf2+0xa8>
 8001288:	4662      	mov	r2, ip
 800128a:	2a00      	cmp	r2, #0
 800128c:	d00f      	beq.n	80012ae <__ledf2+0x9e>
 800128e:	459a      	cmp	sl, r3
 8001290:	d1e1      	bne.n	8001256 <__ledf2+0x46>
 8001292:	42a5      	cmp	r5, r4
 8001294:	db05      	blt.n	80012a2 <__ledf2+0x92>
 8001296:	42be      	cmp	r6, r7
 8001298:	d8dd      	bhi.n	8001256 <__ledf2+0x46>
 800129a:	d019      	beq.n	80012d0 <__ledf2+0xc0>
 800129c:	2000      	movs	r0, #0
 800129e:	42be      	cmp	r6, r7
 80012a0:	d20a      	bcs.n	80012b8 <__ledf2+0xa8>
 80012a2:	4650      	mov	r0, sl
 80012a4:	2301      	movs	r3, #1
 80012a6:	3801      	subs	r0, #1
 80012a8:	4398      	bics	r0, r3
 80012aa:	3001      	adds	r0, #1
 80012ac:	e004      	b.n	80012b8 <__ledf2+0xa8>
 80012ae:	2201      	movs	r2, #1
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4393      	bics	r3, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	3001      	adds	r0, #1
 80012b8:	bc1c      	pop	{r2, r3, r4}
 80012ba:	4690      	mov	r8, r2
 80012bc:	4699      	mov	r9, r3
 80012be:	46a2      	mov	sl, r4
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c2:	433a      	orrs	r2, r7
 80012c4:	d1d0      	bne.n	8001268 <__ledf2+0x58>
 80012c6:	459a      	cmp	sl, r3
 80012c8:	d1c5      	bne.n	8001256 <__ledf2+0x46>
 80012ca:	42a5      	cmp	r5, r4
 80012cc:	dcc3      	bgt.n	8001256 <__ledf2+0x46>
 80012ce:	e7e0      	b.n	8001292 <__ledf2+0x82>
 80012d0:	45c8      	cmp	r8, r9
 80012d2:	d8c0      	bhi.n	8001256 <__ledf2+0x46>
 80012d4:	2000      	movs	r0, #0
 80012d6:	45c8      	cmp	r8, r9
 80012d8:	d3e3      	bcc.n	80012a2 <__ledf2+0x92>
 80012da:	e7ed      	b.n	80012b8 <__ledf2+0xa8>
 80012dc:	000007ff 	.word	0x000007ff

080012e0 <__aeabi_dmul>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	4657      	mov	r7, sl
 80012e4:	46de      	mov	lr, fp
 80012e6:	464e      	mov	r6, r9
 80012e8:	4645      	mov	r5, r8
 80012ea:	b5e0      	push	{r5, r6, r7, lr}
 80012ec:	4683      	mov	fp, r0
 80012ee:	0006      	movs	r6, r0
 80012f0:	030f      	lsls	r7, r1, #12
 80012f2:	0048      	lsls	r0, r1, #1
 80012f4:	b087      	sub	sp, #28
 80012f6:	4692      	mov	sl, r2
 80012f8:	001d      	movs	r5, r3
 80012fa:	0b3f      	lsrs	r7, r7, #12
 80012fc:	0d40      	lsrs	r0, r0, #21
 80012fe:	0fcc      	lsrs	r4, r1, #31
 8001300:	2800      	cmp	r0, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dmul+0x26>
 8001304:	e06f      	b.n	80013e6 <__aeabi_dmul+0x106>
 8001306:	4bde      	ldr	r3, [pc, #888]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001308:	4298      	cmp	r0, r3
 800130a:	d038      	beq.n	800137e <__aeabi_dmul+0x9e>
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	00ff      	lsls	r7, r7, #3
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	431f      	orrs	r7, r3
 8001314:	0f73      	lsrs	r3, r6, #29
 8001316:	433b      	orrs	r3, r7
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	4bda      	ldr	r3, [pc, #872]	; (8001684 <__aeabi_dmul+0x3a4>)
 800131c:	2700      	movs	r7, #0
 800131e:	4699      	mov	r9, r3
 8001320:	2300      	movs	r3, #0
 8001322:	469b      	mov	fp, r3
 8001324:	00f6      	lsls	r6, r6, #3
 8001326:	4481      	add	r9, r0
 8001328:	032b      	lsls	r3, r5, #12
 800132a:	0069      	lsls	r1, r5, #1
 800132c:	0b1b      	lsrs	r3, r3, #12
 800132e:	4652      	mov	r2, sl
 8001330:	4698      	mov	r8, r3
 8001332:	0d49      	lsrs	r1, r1, #21
 8001334:	0fed      	lsrs	r5, r5, #31
 8001336:	2900      	cmp	r1, #0
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x5c>
 800133a:	e085      	b.n	8001448 <__aeabi_dmul+0x168>
 800133c:	4bd0      	ldr	r3, [pc, #832]	; (8001680 <__aeabi_dmul+0x3a0>)
 800133e:	4299      	cmp	r1, r3
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x64>
 8001342:	e073      	b.n	800142c <__aeabi_dmul+0x14c>
 8001344:	4643      	mov	r3, r8
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	4313      	orrs	r3, r2
 800134e:	4652      	mov	r2, sl
 8001350:	48cc      	ldr	r0, [pc, #816]	; (8001684 <__aeabi_dmul+0x3a4>)
 8001352:	0f52      	lsrs	r2, r2, #29
 8001354:	4684      	mov	ip, r0
 8001356:	4313      	orrs	r3, r2
 8001358:	4652      	mov	r2, sl
 800135a:	2000      	movs	r0, #0
 800135c:	4461      	add	r1, ip
 800135e:	00d2      	lsls	r2, r2, #3
 8001360:	4489      	add	r9, r1
 8001362:	0021      	movs	r1, r4
 8001364:	4069      	eors	r1, r5
 8001366:	9100      	str	r1, [sp, #0]
 8001368:	468c      	mov	ip, r1
 800136a:	2101      	movs	r1, #1
 800136c:	4449      	add	r1, r9
 800136e:	468a      	mov	sl, r1
 8001370:	2f0f      	cmp	r7, #15
 8001372:	d900      	bls.n	8001376 <__aeabi_dmul+0x96>
 8001374:	e090      	b.n	8001498 <__aeabi_dmul+0x1b8>
 8001376:	49c4      	ldr	r1, [pc, #784]	; (8001688 <__aeabi_dmul+0x3a8>)
 8001378:	00bf      	lsls	r7, r7, #2
 800137a:	59cf      	ldr	r7, [r1, r7]
 800137c:	46bf      	mov	pc, r7
 800137e:	465b      	mov	r3, fp
 8001380:	433b      	orrs	r3, r7
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	d000      	beq.n	8001388 <__aeabi_dmul+0xa8>
 8001386:	e16a      	b.n	800165e <__aeabi_dmul+0x37e>
 8001388:	2302      	movs	r3, #2
 800138a:	2708      	movs	r7, #8
 800138c:	2600      	movs	r6, #0
 800138e:	4681      	mov	r9, r0
 8001390:	469b      	mov	fp, r3
 8001392:	e7c9      	b.n	8001328 <__aeabi_dmul+0x48>
 8001394:	0032      	movs	r2, r6
 8001396:	4658      	mov	r0, fp
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	4661      	mov	r1, ip
 800139c:	9100      	str	r1, [sp, #0]
 800139e:	2802      	cmp	r0, #2
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dmul+0xc4>
 80013a2:	e075      	b.n	8001490 <__aeabi_dmul+0x1b0>
 80013a4:	2803      	cmp	r0, #3
 80013a6:	d100      	bne.n	80013aa <__aeabi_dmul+0xca>
 80013a8:	e1fe      	b.n	80017a8 <__aeabi_dmul+0x4c8>
 80013aa:	2801      	cmp	r0, #1
 80013ac:	d000      	beq.n	80013b0 <__aeabi_dmul+0xd0>
 80013ae:	e12c      	b.n	800160a <__aeabi_dmul+0x32a>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2700      	movs	r7, #0
 80013b4:	2600      	movs	r6, #0
 80013b6:	2500      	movs	r5, #0
 80013b8:	033f      	lsls	r7, r7, #12
 80013ba:	0d2a      	lsrs	r2, r5, #20
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	48b3      	ldr	r0, [pc, #716]	; (800168c <__aeabi_dmul+0x3ac>)
 80013c0:	0512      	lsls	r2, r2, #20
 80013c2:	433a      	orrs	r2, r7
 80013c4:	4002      	ands	r2, r0
 80013c6:	051b      	lsls	r3, r3, #20
 80013c8:	4313      	orrs	r3, r2
 80013ca:	9a00      	ldr	r2, [sp, #0]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	07d1      	lsls	r1, r2, #31
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	430b      	orrs	r3, r1
 80013d4:	0030      	movs	r0, r6
 80013d6:	0019      	movs	r1, r3
 80013d8:	b007      	add	sp, #28
 80013da:	bc3c      	pop	{r2, r3, r4, r5}
 80013dc:	4690      	mov	r8, r2
 80013de:	4699      	mov	r9, r3
 80013e0:	46a2      	mov	sl, r4
 80013e2:	46ab      	mov	fp, r5
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e6:	465b      	mov	r3, fp
 80013e8:	433b      	orrs	r3, r7
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dmul+0x110>
 80013ee:	e12f      	b.n	8001650 <__aeabi_dmul+0x370>
 80013f0:	2f00      	cmp	r7, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dmul+0x116>
 80013f4:	e1a5      	b.n	8001742 <__aeabi_dmul+0x462>
 80013f6:	0038      	movs	r0, r7
 80013f8:	f000 fdea 	bl	8001fd0 <__clzsi2>
 80013fc:	0003      	movs	r3, r0
 80013fe:	3b0b      	subs	r3, #11
 8001400:	2b1c      	cmp	r3, #28
 8001402:	dd00      	ble.n	8001406 <__aeabi_dmul+0x126>
 8001404:	e196      	b.n	8001734 <__aeabi_dmul+0x454>
 8001406:	221d      	movs	r2, #29
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	465a      	mov	r2, fp
 800140c:	0001      	movs	r1, r0
 800140e:	40da      	lsrs	r2, r3
 8001410:	465e      	mov	r6, fp
 8001412:	3908      	subs	r1, #8
 8001414:	408f      	lsls	r7, r1
 8001416:	0013      	movs	r3, r2
 8001418:	408e      	lsls	r6, r1
 800141a:	433b      	orrs	r3, r7
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	4b9c      	ldr	r3, [pc, #624]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001420:	2700      	movs	r7, #0
 8001422:	1a1b      	subs	r3, r3, r0
 8001424:	4699      	mov	r9, r3
 8001426:	2300      	movs	r3, #0
 8001428:	469b      	mov	fp, r3
 800142a:	e77d      	b.n	8001328 <__aeabi_dmul+0x48>
 800142c:	4641      	mov	r1, r8
 800142e:	4653      	mov	r3, sl
 8001430:	430b      	orrs	r3, r1
 8001432:	4993      	ldr	r1, [pc, #588]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001434:	468c      	mov	ip, r1
 8001436:	44e1      	add	r9, ip
 8001438:	2b00      	cmp	r3, #0
 800143a:	d000      	beq.n	800143e <__aeabi_dmul+0x15e>
 800143c:	e11a      	b.n	8001674 <__aeabi_dmul+0x394>
 800143e:	2202      	movs	r2, #2
 8001440:	2002      	movs	r0, #2
 8001442:	4317      	orrs	r7, r2
 8001444:	2200      	movs	r2, #0
 8001446:	e78c      	b.n	8001362 <__aeabi_dmul+0x82>
 8001448:	4313      	orrs	r3, r2
 800144a:	d100      	bne.n	800144e <__aeabi_dmul+0x16e>
 800144c:	e10d      	b.n	800166a <__aeabi_dmul+0x38a>
 800144e:	4643      	mov	r3, r8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x176>
 8001454:	e181      	b.n	800175a <__aeabi_dmul+0x47a>
 8001456:	4640      	mov	r0, r8
 8001458:	f000 fdba 	bl	8001fd0 <__clzsi2>
 800145c:	0002      	movs	r2, r0
 800145e:	3a0b      	subs	r2, #11
 8001460:	2a1c      	cmp	r2, #28
 8001462:	dd00      	ble.n	8001466 <__aeabi_dmul+0x186>
 8001464:	e172      	b.n	800174c <__aeabi_dmul+0x46c>
 8001466:	0001      	movs	r1, r0
 8001468:	4643      	mov	r3, r8
 800146a:	3908      	subs	r1, #8
 800146c:	408b      	lsls	r3, r1
 800146e:	4698      	mov	r8, r3
 8001470:	231d      	movs	r3, #29
 8001472:	1a9a      	subs	r2, r3, r2
 8001474:	4653      	mov	r3, sl
 8001476:	40d3      	lsrs	r3, r2
 8001478:	001a      	movs	r2, r3
 800147a:	4643      	mov	r3, r8
 800147c:	4313      	orrs	r3, r2
 800147e:	4652      	mov	r2, sl
 8001480:	408a      	lsls	r2, r1
 8001482:	4649      	mov	r1, r9
 8001484:	1a08      	subs	r0, r1, r0
 8001486:	4982      	ldr	r1, [pc, #520]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001488:	4689      	mov	r9, r1
 800148a:	4481      	add	r9, r0
 800148c:	2000      	movs	r0, #0
 800148e:	e768      	b.n	8001362 <__aeabi_dmul+0x82>
 8001490:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001492:	2700      	movs	r7, #0
 8001494:	2600      	movs	r6, #0
 8001496:	e78e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001498:	0c14      	lsrs	r4, r2, #16
 800149a:	0412      	lsls	r2, r2, #16
 800149c:	0c12      	lsrs	r2, r2, #16
 800149e:	0011      	movs	r1, r2
 80014a0:	0c37      	lsrs	r7, r6, #16
 80014a2:	0436      	lsls	r6, r6, #16
 80014a4:	0c35      	lsrs	r5, r6, #16
 80014a6:	4379      	muls	r1, r7
 80014a8:	0028      	movs	r0, r5
 80014aa:	468c      	mov	ip, r1
 80014ac:	002e      	movs	r6, r5
 80014ae:	4360      	muls	r0, r4
 80014b0:	4460      	add	r0, ip
 80014b2:	4683      	mov	fp, r0
 80014b4:	4356      	muls	r6, r2
 80014b6:	0021      	movs	r1, r4
 80014b8:	0c30      	lsrs	r0, r6, #16
 80014ba:	4680      	mov	r8, r0
 80014bc:	4658      	mov	r0, fp
 80014be:	4379      	muls	r1, r7
 80014c0:	4440      	add	r0, r8
 80014c2:	9102      	str	r1, [sp, #8]
 80014c4:	4584      	cmp	ip, r0
 80014c6:	d906      	bls.n	80014d6 <__aeabi_dmul+0x1f6>
 80014c8:	4688      	mov	r8, r1
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0249      	lsls	r1, r1, #9
 80014ce:	468c      	mov	ip, r1
 80014d0:	44e0      	add	r8, ip
 80014d2:	4641      	mov	r1, r8
 80014d4:	9102      	str	r1, [sp, #8]
 80014d6:	0436      	lsls	r6, r6, #16
 80014d8:	0c01      	lsrs	r1, r0, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0400      	lsls	r0, r0, #16
 80014de:	468b      	mov	fp, r1
 80014e0:	1981      	adds	r1, r0, r6
 80014e2:	0c1e      	lsrs	r6, r3, #16
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	9103      	str	r1, [sp, #12]
 80014ea:	0019      	movs	r1, r3
 80014ec:	4379      	muls	r1, r7
 80014ee:	468c      	mov	ip, r1
 80014f0:	0028      	movs	r0, r5
 80014f2:	4375      	muls	r5, r6
 80014f4:	4465      	add	r5, ip
 80014f6:	46a8      	mov	r8, r5
 80014f8:	4358      	muls	r0, r3
 80014fa:	0c05      	lsrs	r5, r0, #16
 80014fc:	4445      	add	r5, r8
 80014fe:	4377      	muls	r7, r6
 8001500:	42a9      	cmp	r1, r5
 8001502:	d903      	bls.n	800150c <__aeabi_dmul+0x22c>
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	468c      	mov	ip, r1
 800150a:	4467      	add	r7, ip
 800150c:	0c29      	lsrs	r1, r5, #16
 800150e:	468c      	mov	ip, r1
 8001510:	0039      	movs	r1, r7
 8001512:	0400      	lsls	r0, r0, #16
 8001514:	0c00      	lsrs	r0, r0, #16
 8001516:	042d      	lsls	r5, r5, #16
 8001518:	182d      	adds	r5, r5, r0
 800151a:	4461      	add	r1, ip
 800151c:	44ab      	add	fp, r5
 800151e:	9105      	str	r1, [sp, #20]
 8001520:	4659      	mov	r1, fp
 8001522:	9104      	str	r1, [sp, #16]
 8001524:	9901      	ldr	r1, [sp, #4]
 8001526:	040f      	lsls	r7, r1, #16
 8001528:	0c3f      	lsrs	r7, r7, #16
 800152a:	0c08      	lsrs	r0, r1, #16
 800152c:	0039      	movs	r1, r7
 800152e:	4351      	muls	r1, r2
 8001530:	4342      	muls	r2, r0
 8001532:	4690      	mov	r8, r2
 8001534:	0002      	movs	r2, r0
 8001536:	468c      	mov	ip, r1
 8001538:	0c09      	lsrs	r1, r1, #16
 800153a:	468b      	mov	fp, r1
 800153c:	4362      	muls	r2, r4
 800153e:	437c      	muls	r4, r7
 8001540:	4444      	add	r4, r8
 8001542:	445c      	add	r4, fp
 8001544:	45a0      	cmp	r8, r4
 8001546:	d903      	bls.n	8001550 <__aeabi_dmul+0x270>
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0249      	lsls	r1, r1, #9
 800154c:	4688      	mov	r8, r1
 800154e:	4442      	add	r2, r8
 8001550:	0c21      	lsrs	r1, r4, #16
 8001552:	4688      	mov	r8, r1
 8001554:	4661      	mov	r1, ip
 8001556:	0409      	lsls	r1, r1, #16
 8001558:	0c09      	lsrs	r1, r1, #16
 800155a:	468c      	mov	ip, r1
 800155c:	0039      	movs	r1, r7
 800155e:	4359      	muls	r1, r3
 8001560:	4343      	muls	r3, r0
 8001562:	4370      	muls	r0, r6
 8001564:	437e      	muls	r6, r7
 8001566:	0c0f      	lsrs	r7, r1, #16
 8001568:	18f6      	adds	r6, r6, r3
 800156a:	0424      	lsls	r4, r4, #16
 800156c:	19be      	adds	r6, r7, r6
 800156e:	4464      	add	r4, ip
 8001570:	4442      	add	r2, r8
 8001572:	468c      	mov	ip, r1
 8001574:	42b3      	cmp	r3, r6
 8001576:	d903      	bls.n	8001580 <__aeabi_dmul+0x2a0>
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	4698      	mov	r8, r3
 800157e:	4440      	add	r0, r8
 8001580:	9b02      	ldr	r3, [sp, #8]
 8001582:	4661      	mov	r1, ip
 8001584:	4698      	mov	r8, r3
 8001586:	9b04      	ldr	r3, [sp, #16]
 8001588:	0437      	lsls	r7, r6, #16
 800158a:	4443      	add	r3, r8
 800158c:	469b      	mov	fp, r3
 800158e:	45ab      	cmp	fp, r5
 8001590:	41ad      	sbcs	r5, r5
 8001592:	426b      	negs	r3, r5
 8001594:	040d      	lsls	r5, r1, #16
 8001596:	9905      	ldr	r1, [sp, #20]
 8001598:	0c2d      	lsrs	r5, r5, #16
 800159a:	468c      	mov	ip, r1
 800159c:	197f      	adds	r7, r7, r5
 800159e:	4467      	add	r7, ip
 80015a0:	18fd      	adds	r5, r7, r3
 80015a2:	46a8      	mov	r8, r5
 80015a4:	465d      	mov	r5, fp
 80015a6:	192d      	adds	r5, r5, r4
 80015a8:	42a5      	cmp	r5, r4
 80015aa:	41a4      	sbcs	r4, r4
 80015ac:	4693      	mov	fp, r2
 80015ae:	4264      	negs	r4, r4
 80015b0:	46a4      	mov	ip, r4
 80015b2:	44c3      	add	fp, r8
 80015b4:	44dc      	add	ip, fp
 80015b6:	428f      	cmp	r7, r1
 80015b8:	41bf      	sbcs	r7, r7
 80015ba:	4598      	cmp	r8, r3
 80015bc:	419b      	sbcs	r3, r3
 80015be:	4593      	cmp	fp, r2
 80015c0:	4192      	sbcs	r2, r2
 80015c2:	45a4      	cmp	ip, r4
 80015c4:	41a4      	sbcs	r4, r4
 80015c6:	425b      	negs	r3, r3
 80015c8:	427f      	negs	r7, r7
 80015ca:	431f      	orrs	r7, r3
 80015cc:	0c36      	lsrs	r6, r6, #16
 80015ce:	4252      	negs	r2, r2
 80015d0:	4264      	negs	r4, r4
 80015d2:	19bf      	adds	r7, r7, r6
 80015d4:	4322      	orrs	r2, r4
 80015d6:	18bf      	adds	r7, r7, r2
 80015d8:	4662      	mov	r2, ip
 80015da:	1838      	adds	r0, r7, r0
 80015dc:	0243      	lsls	r3, r0, #9
 80015de:	0dd2      	lsrs	r2, r2, #23
 80015e0:	9903      	ldr	r1, [sp, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	026a      	lsls	r2, r5, #9
 80015e6:	430a      	orrs	r2, r1
 80015e8:	1e50      	subs	r0, r2, #1
 80015ea:	4182      	sbcs	r2, r0
 80015ec:	4661      	mov	r1, ip
 80015ee:	0ded      	lsrs	r5, r5, #23
 80015f0:	432a      	orrs	r2, r5
 80015f2:	024e      	lsls	r6, r1, #9
 80015f4:	4332      	orrs	r2, r6
 80015f6:	01d9      	lsls	r1, r3, #7
 80015f8:	d400      	bmi.n	80015fc <__aeabi_dmul+0x31c>
 80015fa:	e0b3      	b.n	8001764 <__aeabi_dmul+0x484>
 80015fc:	2601      	movs	r6, #1
 80015fe:	0850      	lsrs	r0, r2, #1
 8001600:	4032      	ands	r2, r6
 8001602:	4302      	orrs	r2, r0
 8001604:	07de      	lsls	r6, r3, #31
 8001606:	4332      	orrs	r2, r6
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	4c22      	ldr	r4, [pc, #136]	; (8001694 <__aeabi_dmul+0x3b4>)
 800160c:	4454      	add	r4, sl
 800160e:	2c00      	cmp	r4, #0
 8001610:	dd62      	ble.n	80016d8 <__aeabi_dmul+0x3f8>
 8001612:	0751      	lsls	r1, r2, #29
 8001614:	d009      	beq.n	800162a <__aeabi_dmul+0x34a>
 8001616:	200f      	movs	r0, #15
 8001618:	4010      	ands	r0, r2
 800161a:	2804      	cmp	r0, #4
 800161c:	d005      	beq.n	800162a <__aeabi_dmul+0x34a>
 800161e:	1d10      	adds	r0, r2, #4
 8001620:	4290      	cmp	r0, r2
 8001622:	4192      	sbcs	r2, r2
 8001624:	4252      	negs	r2, r2
 8001626:	189b      	adds	r3, r3, r2
 8001628:	0002      	movs	r2, r0
 800162a:	01d9      	lsls	r1, r3, #7
 800162c:	d504      	bpl.n	8001638 <__aeabi_dmul+0x358>
 800162e:	2480      	movs	r4, #128	; 0x80
 8001630:	4819      	ldr	r0, [pc, #100]	; (8001698 <__aeabi_dmul+0x3b8>)
 8001632:	00e4      	lsls	r4, r4, #3
 8001634:	4003      	ands	r3, r0
 8001636:	4454      	add	r4, sl
 8001638:	4818      	ldr	r0, [pc, #96]	; (800169c <__aeabi_dmul+0x3bc>)
 800163a:	4284      	cmp	r4, r0
 800163c:	dd00      	ble.n	8001640 <__aeabi_dmul+0x360>
 800163e:	e727      	b.n	8001490 <__aeabi_dmul+0x1b0>
 8001640:	075e      	lsls	r6, r3, #29
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	08d2      	lsrs	r2, r2, #3
 8001646:	0b1f      	lsrs	r7, r3, #12
 8001648:	0563      	lsls	r3, r4, #21
 800164a:	4316      	orrs	r6, r2
 800164c:	0d5b      	lsrs	r3, r3, #21
 800164e:	e6b2      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001650:	2300      	movs	r3, #0
 8001652:	4699      	mov	r9, r3
 8001654:	3301      	adds	r3, #1
 8001656:	2704      	movs	r7, #4
 8001658:	2600      	movs	r6, #0
 800165a:	469b      	mov	fp, r3
 800165c:	e664      	b.n	8001328 <__aeabi_dmul+0x48>
 800165e:	2303      	movs	r3, #3
 8001660:	9701      	str	r7, [sp, #4]
 8001662:	4681      	mov	r9, r0
 8001664:	270c      	movs	r7, #12
 8001666:	469b      	mov	fp, r3
 8001668:	e65e      	b.n	8001328 <__aeabi_dmul+0x48>
 800166a:	2201      	movs	r2, #1
 800166c:	2001      	movs	r0, #1
 800166e:	4317      	orrs	r7, r2
 8001670:	2200      	movs	r2, #0
 8001672:	e676      	b.n	8001362 <__aeabi_dmul+0x82>
 8001674:	2303      	movs	r3, #3
 8001676:	2003      	movs	r0, #3
 8001678:	431f      	orrs	r7, r3
 800167a:	4643      	mov	r3, r8
 800167c:	e671      	b.n	8001362 <__aeabi_dmul+0x82>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	000007ff 	.word	0x000007ff
 8001684:	fffffc01 	.word	0xfffffc01
 8001688:	080068d0 	.word	0x080068d0
 800168c:	800fffff 	.word	0x800fffff
 8001690:	fffffc0d 	.word	0xfffffc0d
 8001694:	000003ff 	.word	0x000003ff
 8001698:	feffffff 	.word	0xfeffffff
 800169c:	000007fe 	.word	0x000007fe
 80016a0:	2300      	movs	r3, #0
 80016a2:	2780      	movs	r7, #128	; 0x80
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	033f      	lsls	r7, r7, #12
 80016a8:	2600      	movs	r6, #0
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016ac:	e683      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	0032      	movs	r2, r6
 80016b2:	46a4      	mov	ip, r4
 80016b4:	4658      	mov	r0, fp
 80016b6:	e670      	b.n	800139a <__aeabi_dmul+0xba>
 80016b8:	46ac      	mov	ip, r5
 80016ba:	e66e      	b.n	800139a <__aeabi_dmul+0xba>
 80016bc:	2780      	movs	r7, #128	; 0x80
 80016be:	9901      	ldr	r1, [sp, #4]
 80016c0:	033f      	lsls	r7, r7, #12
 80016c2:	4239      	tst	r1, r7
 80016c4:	d02d      	beq.n	8001722 <__aeabi_dmul+0x442>
 80016c6:	423b      	tst	r3, r7
 80016c8:	d12b      	bne.n	8001722 <__aeabi_dmul+0x442>
 80016ca:	431f      	orrs	r7, r3
 80016cc:	033f      	lsls	r7, r7, #12
 80016ce:	0b3f      	lsrs	r7, r7, #12
 80016d0:	9500      	str	r5, [sp, #0]
 80016d2:	0016      	movs	r6, r2
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016d6:	e66e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016d8:	2501      	movs	r5, #1
 80016da:	1b2d      	subs	r5, r5, r4
 80016dc:	2d38      	cmp	r5, #56	; 0x38
 80016de:	dd00      	ble.n	80016e2 <__aeabi_dmul+0x402>
 80016e0:	e666      	b.n	80013b0 <__aeabi_dmul+0xd0>
 80016e2:	2d1f      	cmp	r5, #31
 80016e4:	dc40      	bgt.n	8001768 <__aeabi_dmul+0x488>
 80016e6:	4835      	ldr	r0, [pc, #212]	; (80017bc <__aeabi_dmul+0x4dc>)
 80016e8:	001c      	movs	r4, r3
 80016ea:	4450      	add	r0, sl
 80016ec:	0016      	movs	r6, r2
 80016ee:	4082      	lsls	r2, r0
 80016f0:	4084      	lsls	r4, r0
 80016f2:	40ee      	lsrs	r6, r5
 80016f4:	1e50      	subs	r0, r2, #1
 80016f6:	4182      	sbcs	r2, r0
 80016f8:	4334      	orrs	r4, r6
 80016fa:	4314      	orrs	r4, r2
 80016fc:	40eb      	lsrs	r3, r5
 80016fe:	0762      	lsls	r2, r4, #29
 8001700:	d009      	beq.n	8001716 <__aeabi_dmul+0x436>
 8001702:	220f      	movs	r2, #15
 8001704:	4022      	ands	r2, r4
 8001706:	2a04      	cmp	r2, #4
 8001708:	d005      	beq.n	8001716 <__aeabi_dmul+0x436>
 800170a:	0022      	movs	r2, r4
 800170c:	1d14      	adds	r4, r2, #4
 800170e:	4294      	cmp	r4, r2
 8001710:	4180      	sbcs	r0, r0
 8001712:	4240      	negs	r0, r0
 8001714:	181b      	adds	r3, r3, r0
 8001716:	021a      	lsls	r2, r3, #8
 8001718:	d53e      	bpl.n	8001798 <__aeabi_dmul+0x4b8>
 800171a:	2301      	movs	r3, #1
 800171c:	2700      	movs	r7, #0
 800171e:	2600      	movs	r6, #0
 8001720:	e649      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001722:	2780      	movs	r7, #128	; 0x80
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	033f      	lsls	r7, r7, #12
 8001728:	431f      	orrs	r7, r3
 800172a:	033f      	lsls	r7, r7, #12
 800172c:	0b3f      	lsrs	r7, r7, #12
 800172e:	9400      	str	r4, [sp, #0]
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <__aeabi_dmul+0x4d8>)
 8001732:	e640      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001734:	0003      	movs	r3, r0
 8001736:	465a      	mov	r2, fp
 8001738:	3b28      	subs	r3, #40	; 0x28
 800173a:	409a      	lsls	r2, r3
 800173c:	2600      	movs	r6, #0
 800173e:	9201      	str	r2, [sp, #4]
 8001740:	e66d      	b.n	800141e <__aeabi_dmul+0x13e>
 8001742:	4658      	mov	r0, fp
 8001744:	f000 fc44 	bl	8001fd0 <__clzsi2>
 8001748:	3020      	adds	r0, #32
 800174a:	e657      	b.n	80013fc <__aeabi_dmul+0x11c>
 800174c:	0003      	movs	r3, r0
 800174e:	4652      	mov	r2, sl
 8001750:	3b28      	subs	r3, #40	; 0x28
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	e693      	b.n	8001482 <__aeabi_dmul+0x1a2>
 800175a:	4650      	mov	r0, sl
 800175c:	f000 fc38 	bl	8001fd0 <__clzsi2>
 8001760:	3020      	adds	r0, #32
 8001762:	e67b      	b.n	800145c <__aeabi_dmul+0x17c>
 8001764:	46ca      	mov	sl, r9
 8001766:	e750      	b.n	800160a <__aeabi_dmul+0x32a>
 8001768:	201f      	movs	r0, #31
 800176a:	001e      	movs	r6, r3
 800176c:	4240      	negs	r0, r0
 800176e:	1b04      	subs	r4, r0, r4
 8001770:	40e6      	lsrs	r6, r4
 8001772:	2d20      	cmp	r5, #32
 8001774:	d003      	beq.n	800177e <__aeabi_dmul+0x49e>
 8001776:	4c12      	ldr	r4, [pc, #72]	; (80017c0 <__aeabi_dmul+0x4e0>)
 8001778:	4454      	add	r4, sl
 800177a:	40a3      	lsls	r3, r4
 800177c:	431a      	orrs	r2, r3
 800177e:	1e50      	subs	r0, r2, #1
 8001780:	4182      	sbcs	r2, r0
 8001782:	4332      	orrs	r2, r6
 8001784:	2607      	movs	r6, #7
 8001786:	2700      	movs	r7, #0
 8001788:	4016      	ands	r6, r2
 800178a:	d009      	beq.n	80017a0 <__aeabi_dmul+0x4c0>
 800178c:	200f      	movs	r0, #15
 800178e:	2300      	movs	r3, #0
 8001790:	4010      	ands	r0, r2
 8001792:	0014      	movs	r4, r2
 8001794:	2804      	cmp	r0, #4
 8001796:	d1b9      	bne.n	800170c <__aeabi_dmul+0x42c>
 8001798:	0022      	movs	r2, r4
 800179a:	075e      	lsls	r6, r3, #29
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	0b1f      	lsrs	r7, r3, #12
 80017a0:	08d2      	lsrs	r2, r2, #3
 80017a2:	4316      	orrs	r6, r2
 80017a4:	2300      	movs	r3, #0
 80017a6:	e606      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017a8:	2780      	movs	r7, #128	; 0x80
 80017aa:	033f      	lsls	r7, r7, #12
 80017ac:	431f      	orrs	r7, r3
 80017ae:	033f      	lsls	r7, r7, #12
 80017b0:	0b3f      	lsrs	r7, r7, #12
 80017b2:	0016      	movs	r6, r2
 80017b4:	4b00      	ldr	r3, [pc, #0]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80017b6:	e5fe      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017b8:	000007ff 	.word	0x000007ff
 80017bc:	0000041e 	.word	0x0000041e
 80017c0:	0000043e 	.word	0x0000043e

080017c4 <__aeabi_dsub>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	000c      	movs	r4, r1
 80017d0:	0309      	lsls	r1, r1, #12
 80017d2:	b5e0      	push	{r5, r6, r7, lr}
 80017d4:	0a49      	lsrs	r1, r1, #9
 80017d6:	0f46      	lsrs	r6, r0, #29
 80017d8:	005f      	lsls	r7, r3, #1
 80017da:	4331      	orrs	r1, r6
 80017dc:	031e      	lsls	r6, r3, #12
 80017de:	0fdb      	lsrs	r3, r3, #31
 80017e0:	0a76      	lsrs	r6, r6, #9
 80017e2:	469b      	mov	fp, r3
 80017e4:	0f53      	lsrs	r3, r2, #29
 80017e6:	4333      	orrs	r3, r6
 80017e8:	4ec8      	ldr	r6, [pc, #800]	; (8001b0c <__aeabi_dsub+0x348>)
 80017ea:	0065      	lsls	r5, r4, #1
 80017ec:	00c0      	lsls	r0, r0, #3
 80017ee:	0fe4      	lsrs	r4, r4, #31
 80017f0:	00d2      	lsls	r2, r2, #3
 80017f2:	0d6d      	lsrs	r5, r5, #21
 80017f4:	46a2      	mov	sl, r4
 80017f6:	4681      	mov	r9, r0
 80017f8:	0d7f      	lsrs	r7, r7, #21
 80017fa:	469c      	mov	ip, r3
 80017fc:	4690      	mov	r8, r2
 80017fe:	42b7      	cmp	r7, r6
 8001800:	d100      	bne.n	8001804 <__aeabi_dsub+0x40>
 8001802:	e0b9      	b.n	8001978 <__aeabi_dsub+0x1b4>
 8001804:	465b      	mov	r3, fp
 8001806:	2601      	movs	r6, #1
 8001808:	4073      	eors	r3, r6
 800180a:	469b      	mov	fp, r3
 800180c:	1bee      	subs	r6, r5, r7
 800180e:	45a3      	cmp	fp, r4
 8001810:	d100      	bne.n	8001814 <__aeabi_dsub+0x50>
 8001812:	e083      	b.n	800191c <__aeabi_dsub+0x158>
 8001814:	2e00      	cmp	r6, #0
 8001816:	dd63      	ble.n	80018e0 <__aeabi_dsub+0x11c>
 8001818:	2f00      	cmp	r7, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dsub+0x5a>
 800181c:	e0b1      	b.n	8001982 <__aeabi_dsub+0x1be>
 800181e:	4663      	mov	r3, ip
 8001820:	4313      	orrs	r3, r2
 8001822:	d100      	bne.n	8001826 <__aeabi_dsub+0x62>
 8001824:	e123      	b.n	8001a6e <__aeabi_dsub+0x2aa>
 8001826:	1e73      	subs	r3, r6, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <__aeabi_dsub+0x6a>
 800182c:	e1ba      	b.n	8001ba4 <__aeabi_dsub+0x3e0>
 800182e:	1a86      	subs	r6, r0, r2
 8001830:	4663      	mov	r3, ip
 8001832:	42b0      	cmp	r0, r6
 8001834:	4180      	sbcs	r0, r0
 8001836:	2501      	movs	r5, #1
 8001838:	1ac9      	subs	r1, r1, r3
 800183a:	4240      	negs	r0, r0
 800183c:	1a09      	subs	r1, r1, r0
 800183e:	020b      	lsls	r3, r1, #8
 8001840:	d400      	bmi.n	8001844 <__aeabi_dsub+0x80>
 8001842:	e147      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001844:	0249      	lsls	r1, r1, #9
 8001846:	0a4b      	lsrs	r3, r1, #9
 8001848:	4698      	mov	r8, r3
 800184a:	4643      	mov	r3, r8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d100      	bne.n	8001852 <__aeabi_dsub+0x8e>
 8001850:	e189      	b.n	8001b66 <__aeabi_dsub+0x3a2>
 8001852:	4640      	mov	r0, r8
 8001854:	f000 fbbc 	bl	8001fd0 <__clzsi2>
 8001858:	0003      	movs	r3, r0
 800185a:	3b08      	subs	r3, #8
 800185c:	2b1f      	cmp	r3, #31
 800185e:	dd00      	ble.n	8001862 <__aeabi_dsub+0x9e>
 8001860:	e17c      	b.n	8001b5c <__aeabi_dsub+0x398>
 8001862:	2220      	movs	r2, #32
 8001864:	0030      	movs	r0, r6
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	4641      	mov	r1, r8
 800186a:	40d0      	lsrs	r0, r2
 800186c:	4099      	lsls	r1, r3
 800186e:	0002      	movs	r2, r0
 8001870:	409e      	lsls	r6, r3
 8001872:	430a      	orrs	r2, r1
 8001874:	429d      	cmp	r5, r3
 8001876:	dd00      	ble.n	800187a <__aeabi_dsub+0xb6>
 8001878:	e16a      	b.n	8001b50 <__aeabi_dsub+0x38c>
 800187a:	1b5d      	subs	r5, r3, r5
 800187c:	1c6b      	adds	r3, r5, #1
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dd00      	ble.n	8001884 <__aeabi_dsub+0xc0>
 8001882:	e194      	b.n	8001bae <__aeabi_dsub+0x3ea>
 8001884:	2120      	movs	r1, #32
 8001886:	0010      	movs	r0, r2
 8001888:	0035      	movs	r5, r6
 800188a:	1ac9      	subs	r1, r1, r3
 800188c:	408e      	lsls	r6, r1
 800188e:	40da      	lsrs	r2, r3
 8001890:	4088      	lsls	r0, r1
 8001892:	40dd      	lsrs	r5, r3
 8001894:	1e71      	subs	r1, r6, #1
 8001896:	418e      	sbcs	r6, r1
 8001898:	0011      	movs	r1, r2
 800189a:	2207      	movs	r2, #7
 800189c:	4328      	orrs	r0, r5
 800189e:	2500      	movs	r5, #0
 80018a0:	4306      	orrs	r6, r0
 80018a2:	4032      	ands	r2, r6
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d009      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018a8:	230f      	movs	r3, #15
 80018aa:	4033      	ands	r3, r6
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d005      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018b0:	1d33      	adds	r3, r6, #4
 80018b2:	42b3      	cmp	r3, r6
 80018b4:	41b6      	sbcs	r6, r6
 80018b6:	4276      	negs	r6, r6
 80018b8:	1989      	adds	r1, r1, r6
 80018ba:	001e      	movs	r6, r3
 80018bc:	020b      	lsls	r3, r1, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dsub+0xfe>
 80018c0:	e23d      	b.n	8001d3e <__aeabi_dsub+0x57a>
 80018c2:	1c6a      	adds	r2, r5, #1
 80018c4:	4b91      	ldr	r3, [pc, #580]	; (8001b0c <__aeabi_dsub+0x348>)
 80018c6:	0555      	lsls	r5, r2, #21
 80018c8:	0d6d      	lsrs	r5, r5, #21
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x10c>
 80018ce:	e119      	b.n	8001b04 <__aeabi_dsub+0x340>
 80018d0:	4a8f      	ldr	r2, [pc, #572]	; (8001b10 <__aeabi_dsub+0x34c>)
 80018d2:	08f6      	lsrs	r6, r6, #3
 80018d4:	400a      	ands	r2, r1
 80018d6:	0757      	lsls	r7, r2, #29
 80018d8:	0252      	lsls	r2, r2, #9
 80018da:	4337      	orrs	r7, r6
 80018dc:	0b12      	lsrs	r2, r2, #12
 80018de:	e09b      	b.n	8001a18 <__aeabi_dsub+0x254>
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dsub+0x122>
 80018e4:	e0c5      	b.n	8001a72 <__aeabi_dsub+0x2ae>
 80018e6:	1c6e      	adds	r6, r5, #1
 80018e8:	0576      	lsls	r6, r6, #21
 80018ea:	0d76      	lsrs	r6, r6, #21
 80018ec:	2e01      	cmp	r6, #1
 80018ee:	dc00      	bgt.n	80018f2 <__aeabi_dsub+0x12e>
 80018f0:	e148      	b.n	8001b84 <__aeabi_dsub+0x3c0>
 80018f2:	4667      	mov	r7, ip
 80018f4:	1a86      	subs	r6, r0, r2
 80018f6:	1bcb      	subs	r3, r1, r7
 80018f8:	42b0      	cmp	r0, r6
 80018fa:	41bf      	sbcs	r7, r7
 80018fc:	427f      	negs	r7, r7
 80018fe:	46b8      	mov	r8, r7
 8001900:	001f      	movs	r7, r3
 8001902:	4643      	mov	r3, r8
 8001904:	1aff      	subs	r7, r7, r3
 8001906:	003b      	movs	r3, r7
 8001908:	46b8      	mov	r8, r7
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	d500      	bpl.n	8001910 <__aeabi_dsub+0x14c>
 800190e:	e15f      	b.n	8001bd0 <__aeabi_dsub+0x40c>
 8001910:	4337      	orrs	r7, r6
 8001912:	d19a      	bne.n	800184a <__aeabi_dsub+0x86>
 8001914:	2200      	movs	r2, #0
 8001916:	2400      	movs	r4, #0
 8001918:	2500      	movs	r5, #0
 800191a:	e079      	b.n	8001a10 <__aeabi_dsub+0x24c>
 800191c:	2e00      	cmp	r6, #0
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dsub+0x15e>
 8001920:	e0fa      	b.n	8001b18 <__aeabi_dsub+0x354>
 8001922:	2f00      	cmp	r7, #0
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x164>
 8001926:	e08d      	b.n	8001a44 <__aeabi_dsub+0x280>
 8001928:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <__aeabi_dsub+0x348>)
 800192a:	429d      	cmp	r5, r3
 800192c:	d067      	beq.n	80019fe <__aeabi_dsub+0x23a>
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	4667      	mov	r7, ip
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	431f      	orrs	r7, r3
 8001936:	46bc      	mov	ip, r7
 8001938:	2e38      	cmp	r6, #56	; 0x38
 800193a:	dc00      	bgt.n	800193e <__aeabi_dsub+0x17a>
 800193c:	e152      	b.n	8001be4 <__aeabi_dsub+0x420>
 800193e:	4663      	mov	r3, ip
 8001940:	4313      	orrs	r3, r2
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	4193      	sbcs	r3, r2
 8001946:	181e      	adds	r6, r3, r0
 8001948:	4286      	cmp	r6, r0
 800194a:	4180      	sbcs	r0, r0
 800194c:	4240      	negs	r0, r0
 800194e:	1809      	adds	r1, r1, r0
 8001950:	020b      	lsls	r3, r1, #8
 8001952:	d400      	bmi.n	8001956 <__aeabi_dsub+0x192>
 8001954:	e0be      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <__aeabi_dsub+0x348>)
 8001958:	3501      	adds	r5, #1
 800195a:	429d      	cmp	r5, r3
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x19c>
 800195e:	e0d2      	b.n	8001b06 <__aeabi_dsub+0x342>
 8001960:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <__aeabi_dsub+0x34c>)
 8001962:	0873      	lsrs	r3, r6, #1
 8001964:	400a      	ands	r2, r1
 8001966:	2101      	movs	r1, #1
 8001968:	400e      	ands	r6, r1
 800196a:	431e      	orrs	r6, r3
 800196c:	0851      	lsrs	r1, r2, #1
 800196e:	07d3      	lsls	r3, r2, #31
 8001970:	2207      	movs	r2, #7
 8001972:	431e      	orrs	r6, r3
 8001974:	4032      	ands	r2, r6
 8001976:	e795      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001978:	001e      	movs	r6, r3
 800197a:	4316      	orrs	r6, r2
 800197c:	d000      	beq.n	8001980 <__aeabi_dsub+0x1bc>
 800197e:	e745      	b.n	800180c <__aeabi_dsub+0x48>
 8001980:	e740      	b.n	8001804 <__aeabi_dsub+0x40>
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <__aeabi_dsub+0x348>)
 8001984:	429d      	cmp	r5, r3
 8001986:	d03a      	beq.n	80019fe <__aeabi_dsub+0x23a>
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	4667      	mov	r7, ip
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431f      	orrs	r7, r3
 8001990:	46bc      	mov	ip, r7
 8001992:	2e38      	cmp	r6, #56	; 0x38
 8001994:	dd00      	ble.n	8001998 <__aeabi_dsub+0x1d4>
 8001996:	e0eb      	b.n	8001b70 <__aeabi_dsub+0x3ac>
 8001998:	2e1f      	cmp	r6, #31
 800199a:	dc00      	bgt.n	800199e <__aeabi_dsub+0x1da>
 800199c:	e13a      	b.n	8001c14 <__aeabi_dsub+0x450>
 800199e:	0033      	movs	r3, r6
 80019a0:	4667      	mov	r7, ip
 80019a2:	3b20      	subs	r3, #32
 80019a4:	40df      	lsrs	r7, r3
 80019a6:	003b      	movs	r3, r7
 80019a8:	2e20      	cmp	r6, #32
 80019aa:	d005      	beq.n	80019b8 <__aeabi_dsub+0x1f4>
 80019ac:	2740      	movs	r7, #64	; 0x40
 80019ae:	1bbf      	subs	r7, r7, r6
 80019b0:	4666      	mov	r6, ip
 80019b2:	40be      	lsls	r6, r7
 80019b4:	4332      	orrs	r2, r6
 80019b6:	4690      	mov	r8, r2
 80019b8:	4646      	mov	r6, r8
 80019ba:	1e72      	subs	r2, r6, #1
 80019bc:	4196      	sbcs	r6, r2
 80019be:	4333      	orrs	r3, r6
 80019c0:	e0da      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x204>
 80019c6:	e214      	b.n	8001df2 <__aeabi_dsub+0x62e>
 80019c8:	4663      	mov	r3, ip
 80019ca:	4313      	orrs	r3, r2
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x20c>
 80019ce:	e168      	b.n	8001ca2 <__aeabi_dsub+0x4de>
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	074e      	lsls	r6, r1, #29
 80019d4:	08c0      	lsrs	r0, r0, #3
 80019d6:	08c9      	lsrs	r1, r1, #3
 80019d8:	031b      	lsls	r3, r3, #12
 80019da:	4306      	orrs	r6, r0
 80019dc:	4219      	tst	r1, r3
 80019de:	d008      	beq.n	80019f2 <__aeabi_dsub+0x22e>
 80019e0:	4660      	mov	r0, ip
 80019e2:	08c0      	lsrs	r0, r0, #3
 80019e4:	4218      	tst	r0, r3
 80019e6:	d104      	bne.n	80019f2 <__aeabi_dsub+0x22e>
 80019e8:	4663      	mov	r3, ip
 80019ea:	0001      	movs	r1, r0
 80019ec:	08d2      	lsrs	r2, r2, #3
 80019ee:	075e      	lsls	r6, r3, #29
 80019f0:	4316      	orrs	r6, r2
 80019f2:	00f3      	lsls	r3, r6, #3
 80019f4:	4699      	mov	r9, r3
 80019f6:	00c9      	lsls	r1, r1, #3
 80019f8:	0f72      	lsrs	r2, r6, #29
 80019fa:	4d44      	ldr	r5, [pc, #272]	; (8001b0c <__aeabi_dsub+0x348>)
 80019fc:	4311      	orrs	r1, r2
 80019fe:	464b      	mov	r3, r9
 8001a00:	08de      	lsrs	r6, r3, #3
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a04:	074f      	lsls	r7, r1, #29
 8001a06:	4337      	orrs	r7, r6
 8001a08:	08ca      	lsrs	r2, r1, #3
 8001a0a:	429d      	cmp	r5, r3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x24c>
 8001a0e:	e06e      	b.n	8001aee <__aeabi_dsub+0x32a>
 8001a10:	0312      	lsls	r2, r2, #12
 8001a12:	056d      	lsls	r5, r5, #21
 8001a14:	0b12      	lsrs	r2, r2, #12
 8001a16:	0d6d      	lsrs	r5, r5, #21
 8001a18:	2100      	movs	r1, #0
 8001a1a:	0312      	lsls	r2, r2, #12
 8001a1c:	0b13      	lsrs	r3, r2, #12
 8001a1e:	0d0a      	lsrs	r2, r1, #20
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	431a      	orrs	r2, r3
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <__aeabi_dsub+0x350>)
 8001a26:	052d      	lsls	r5, r5, #20
 8001a28:	4013      	ands	r3, r2
 8001a2a:	432b      	orrs	r3, r5
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0038      	movs	r0, r7
 8001a36:	0019      	movs	r1, r3
 8001a38:	bc3c      	pop	{r2, r3, r4, r5}
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	46a2      	mov	sl, r4
 8001a40:	46ab      	mov	fp, r5
 8001a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a44:	4663      	mov	r3, ip
 8001a46:	4313      	orrs	r3, r2
 8001a48:	d011      	beq.n	8001a6e <__aeabi_dsub+0x2aa>
 8001a4a:	1e73      	subs	r3, r6, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d000      	beq.n	8001a52 <__aeabi_dsub+0x28e>
 8001a50:	e107      	b.n	8001c62 <__aeabi_dsub+0x49e>
 8001a52:	1886      	adds	r6, r0, r2
 8001a54:	4286      	cmp	r6, r0
 8001a56:	4180      	sbcs	r0, r0
 8001a58:	4461      	add	r1, ip
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	1809      	adds	r1, r1, r0
 8001a5e:	2501      	movs	r5, #1
 8001a60:	020b      	lsls	r3, r1, #8
 8001a62:	d537      	bpl.n	8001ad4 <__aeabi_dsub+0x310>
 8001a64:	2502      	movs	r5, #2
 8001a66:	e77b      	b.n	8001960 <__aeabi_dsub+0x19c>
 8001a68:	003e      	movs	r6, r7
 8001a6a:	4661      	mov	r1, ip
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	0035      	movs	r5, r6
 8001a70:	e7c5      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001a72:	465c      	mov	r4, fp
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	d000      	beq.n	8001a7a <__aeabi_dsub+0x2b6>
 8001a78:	e0e1      	b.n	8001c3e <__aeabi_dsub+0x47a>
 8001a7a:	000b      	movs	r3, r1
 8001a7c:	4303      	orrs	r3, r0
 8001a7e:	d0f3      	beq.n	8001a68 <__aeabi_dsub+0x2a4>
 8001a80:	1c73      	adds	r3, r6, #1
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x2c2>
 8001a84:	e1ac      	b.n	8001de0 <__aeabi_dsub+0x61c>
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a88:	429f      	cmp	r7, r3
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0x2ca>
 8001a8c:	e13a      	b.n	8001d04 <__aeabi_dsub+0x540>
 8001a8e:	43f3      	mvns	r3, r6
 8001a90:	2b38      	cmp	r3, #56	; 0x38
 8001a92:	dd00      	ble.n	8001a96 <__aeabi_dsub+0x2d2>
 8001a94:	e16f      	b.n	8001d76 <__aeabi_dsub+0x5b2>
 8001a96:	2b1f      	cmp	r3, #31
 8001a98:	dd00      	ble.n	8001a9c <__aeabi_dsub+0x2d8>
 8001a9a:	e18c      	b.n	8001db6 <__aeabi_dsub+0x5f2>
 8001a9c:	2520      	movs	r5, #32
 8001a9e:	000e      	movs	r6, r1
 8001aa0:	1aed      	subs	r5, r5, r3
 8001aa2:	40ae      	lsls	r6, r5
 8001aa4:	46b0      	mov	r8, r6
 8001aa6:	0006      	movs	r6, r0
 8001aa8:	46aa      	mov	sl, r5
 8001aaa:	40de      	lsrs	r6, r3
 8001aac:	4645      	mov	r5, r8
 8001aae:	4335      	orrs	r5, r6
 8001ab0:	002e      	movs	r6, r5
 8001ab2:	4655      	mov	r5, sl
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	40a8      	lsls	r0, r5
 8001ab8:	4663      	mov	r3, ip
 8001aba:	1e45      	subs	r5, r0, #1
 8001abc:	41a8      	sbcs	r0, r5
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	4330      	orrs	r0, r6
 8001ac4:	1a16      	subs	r6, r2, r0
 8001ac6:	42b2      	cmp	r2, r6
 8001ac8:	4192      	sbcs	r2, r2
 8001aca:	4663      	mov	r3, ip
 8001acc:	4252      	negs	r2, r2
 8001ace:	1a99      	subs	r1, r3, r2
 8001ad0:	003d      	movs	r5, r7
 8001ad2:	e6b4      	b.n	800183e <__aeabi_dsub+0x7a>
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	4032      	ands	r2, r6
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x31a>
 8001adc:	e6e4      	b.n	80018a8 <__aeabi_dsub+0xe4>
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <__aeabi_dsub+0x348>)
 8001ae0:	08f6      	lsrs	r6, r6, #3
 8001ae2:	074f      	lsls	r7, r1, #29
 8001ae4:	4337      	orrs	r7, r6
 8001ae6:	08ca      	lsrs	r2, r1, #3
 8001ae8:	429d      	cmp	r5, r3
 8001aea:	d000      	beq.n	8001aee <__aeabi_dsub+0x32a>
 8001aec:	e790      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001aee:	003b      	movs	r3, r7
 8001af0:	4313      	orrs	r3, r2
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x332>
 8001af4:	e1a6      	b.n	8001e44 <__aeabi_dsub+0x680>
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	031b      	lsls	r3, r3, #12
 8001afa:	431a      	orrs	r2, r3
 8001afc:	0312      	lsls	r2, r2, #12
 8001afe:	0b12      	lsrs	r2, r2, #12
 8001b00:	4d02      	ldr	r5, [pc, #8]	; (8001b0c <__aeabi_dsub+0x348>)
 8001b02:	e789      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b04:	0015      	movs	r5, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	2700      	movs	r7, #0
 8001b0a:	e785      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	ff7fffff 	.word	0xff7fffff
 8001b14:	800fffff 	.word	0x800fffff
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x35a>
 8001b1c:	e0c7      	b.n	8001cae <__aeabi_dsub+0x4ea>
 8001b1e:	1c6b      	adds	r3, r5, #1
 8001b20:	055e      	lsls	r6, r3, #21
 8001b22:	0d76      	lsrs	r6, r6, #21
 8001b24:	2e01      	cmp	r6, #1
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dsub+0x366>
 8001b28:	e0f0      	b.n	8001d0c <__aeabi_dsub+0x548>
 8001b2a:	4dc8      	ldr	r5, [pc, #800]	; (8001e4c <__aeabi_dsub+0x688>)
 8001b2c:	42ab      	cmp	r3, r5
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x36e>
 8001b30:	e0b9      	b.n	8001ca6 <__aeabi_dsub+0x4e2>
 8001b32:	1885      	adds	r5, r0, r2
 8001b34:	000a      	movs	r2, r1
 8001b36:	4285      	cmp	r5, r0
 8001b38:	4189      	sbcs	r1, r1
 8001b3a:	4462      	add	r2, ip
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	1851      	adds	r1, r2, r1
 8001b40:	2207      	movs	r2, #7
 8001b42:	07ce      	lsls	r6, r1, #31
 8001b44:	086d      	lsrs	r5, r5, #1
 8001b46:	432e      	orrs	r6, r5
 8001b48:	0849      	lsrs	r1, r1, #1
 8001b4a:	4032      	ands	r2, r6
 8001b4c:	001d      	movs	r5, r3
 8001b4e:	e6a9      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b50:	49bf      	ldr	r1, [pc, #764]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001b52:	1aed      	subs	r5, r5, r3
 8001b54:	4011      	ands	r1, r2
 8001b56:	2207      	movs	r2, #7
 8001b58:	4032      	ands	r2, r6
 8001b5a:	e6a3      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b5c:	0032      	movs	r2, r6
 8001b5e:	3828      	subs	r0, #40	; 0x28
 8001b60:	4082      	lsls	r2, r0
 8001b62:	2600      	movs	r6, #0
 8001b64:	e686      	b.n	8001874 <__aeabi_dsub+0xb0>
 8001b66:	0030      	movs	r0, r6
 8001b68:	f000 fa32 	bl	8001fd0 <__clzsi2>
 8001b6c:	3020      	adds	r0, #32
 8001b6e:	e673      	b.n	8001858 <__aeabi_dsub+0x94>
 8001b70:	4663      	mov	r3, ip
 8001b72:	4313      	orrs	r3, r2
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	4193      	sbcs	r3, r2
 8001b78:	1ac6      	subs	r6, r0, r3
 8001b7a:	42b0      	cmp	r0, r6
 8001b7c:	4180      	sbcs	r0, r0
 8001b7e:	4240      	negs	r0, r0
 8001b80:	1a09      	subs	r1, r1, r0
 8001b82:	e65c      	b.n	800183e <__aeabi_dsub+0x7a>
 8001b84:	000e      	movs	r6, r1
 8001b86:	4667      	mov	r7, ip
 8001b88:	4306      	orrs	r6, r0
 8001b8a:	4317      	orrs	r7, r2
 8001b8c:	2d00      	cmp	r5, #0
 8001b8e:	d15e      	bne.n	8001c4e <__aeabi_dsub+0x48a>
 8001b90:	2e00      	cmp	r6, #0
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x3d2>
 8001b94:	e0f3      	b.n	8001d7e <__aeabi_dsub+0x5ba>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x3d8>
 8001b9a:	e11e      	b.n	8001dda <__aeabi_dsub+0x616>
 8001b9c:	465c      	mov	r4, fp
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	4691      	mov	r9, r2
 8001ba2:	e72c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ba4:	4fa9      	ldr	r7, [pc, #676]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ba6:	42be      	cmp	r6, r7
 8001ba8:	d07b      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001baa:	001e      	movs	r6, r3
 8001bac:	e6f1      	b.n	8001992 <__aeabi_dsub+0x1ce>
 8001bae:	0010      	movs	r0, r2
 8001bb0:	3d1f      	subs	r5, #31
 8001bb2:	40e8      	lsrs	r0, r5
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d003      	beq.n	8001bc0 <__aeabi_dsub+0x3fc>
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	1acb      	subs	r3, r1, r3
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	4316      	orrs	r6, r2
 8001bc0:	1e73      	subs	r3, r6, #1
 8001bc2:	419e      	sbcs	r6, r3
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	4306      	orrs	r6, r0
 8001bc8:	4032      	ands	r2, r6
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2500      	movs	r5, #0
 8001bce:	e783      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001bd0:	1a16      	subs	r6, r2, r0
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	42b2      	cmp	r2, r6
 8001bd6:	4180      	sbcs	r0, r0
 8001bd8:	1a59      	subs	r1, r3, r1
 8001bda:	4240      	negs	r0, r0
 8001bdc:	1a0b      	subs	r3, r1, r0
 8001bde:	4698      	mov	r8, r3
 8001be0:	465c      	mov	r4, fp
 8001be2:	e632      	b.n	800184a <__aeabi_dsub+0x86>
 8001be4:	2e1f      	cmp	r6, #31
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dsub+0x426>
 8001be8:	e0ab      	b.n	8001d42 <__aeabi_dsub+0x57e>
 8001bea:	2720      	movs	r7, #32
 8001bec:	1bbb      	subs	r3, r7, r6
 8001bee:	469a      	mov	sl, r3
 8001bf0:	4663      	mov	r3, ip
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	40bb      	lsls	r3, r7
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	464f      	mov	r7, r9
 8001bfc:	40f3      	lsrs	r3, r6
 8001bfe:	431f      	orrs	r7, r3
 8001c00:	003b      	movs	r3, r7
 8001c02:	4657      	mov	r7, sl
 8001c04:	40ba      	lsls	r2, r7
 8001c06:	1e57      	subs	r7, r2, #1
 8001c08:	41ba      	sbcs	r2, r7
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4662      	mov	r2, ip
 8001c0e:	40f2      	lsrs	r2, r6
 8001c10:	1889      	adds	r1, r1, r2
 8001c12:	e698      	b.n	8001946 <__aeabi_dsub+0x182>
 8001c14:	2720      	movs	r7, #32
 8001c16:	1bbb      	subs	r3, r7, r6
 8001c18:	469a      	mov	sl, r3
 8001c1a:	4663      	mov	r3, ip
 8001c1c:	4657      	mov	r7, sl
 8001c1e:	40bb      	lsls	r3, r7
 8001c20:	4699      	mov	r9, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	464f      	mov	r7, r9
 8001c26:	40f3      	lsrs	r3, r6
 8001c28:	431f      	orrs	r7, r3
 8001c2a:	003b      	movs	r3, r7
 8001c2c:	4657      	mov	r7, sl
 8001c2e:	40ba      	lsls	r2, r7
 8001c30:	1e57      	subs	r7, r2, #1
 8001c32:	41ba      	sbcs	r2, r7
 8001c34:	4313      	orrs	r3, r2
 8001c36:	4662      	mov	r2, ip
 8001c38:	40f2      	lsrs	r2, r6
 8001c3a:	1a89      	subs	r1, r1, r2
 8001c3c:	e79c      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 8001c3e:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c40:	429f      	cmp	r7, r3
 8001c42:	d05f      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001c44:	2580      	movs	r5, #128	; 0x80
 8001c46:	042d      	lsls	r5, r5, #16
 8001c48:	4273      	negs	r3, r6
 8001c4a:	4329      	orrs	r1, r5
 8001c4c:	e720      	b.n	8001a90 <__aeabi_dsub+0x2cc>
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d10c      	bne.n	8001c6c <__aeabi_dsub+0x4a8>
 8001c52:	2f00      	cmp	r7, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x494>
 8001c56:	e0d0      	b.n	8001dfa <__aeabi_dsub+0x636>
 8001c58:	465c      	mov	r4, fp
 8001c5a:	4661      	mov	r1, ip
 8001c5c:	4691      	mov	r9, r2
 8001c5e:	4d7b      	ldr	r5, [pc, #492]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c60:	e6cd      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001c62:	4f7a      	ldr	r7, [pc, #488]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c64:	42be      	cmp	r6, r7
 8001c66:	d01c      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c68:	001e      	movs	r6, r3
 8001c6a:	e665      	b.n	8001938 <__aeabi_dsub+0x174>
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d018      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c70:	08c0      	lsrs	r0, r0, #3
 8001c72:	074e      	lsls	r6, r1, #29
 8001c74:	4306      	orrs	r6, r0
 8001c76:	2080      	movs	r0, #128	; 0x80
 8001c78:	08c9      	lsrs	r1, r1, #3
 8001c7a:	0300      	lsls	r0, r0, #12
 8001c7c:	4201      	tst	r1, r0
 8001c7e:	d008      	beq.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c80:	4663      	mov	r3, ip
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	4204      	tst	r4, r0
 8001c86:	d104      	bne.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c88:	0021      	movs	r1, r4
 8001c8a:	46da      	mov	sl, fp
 8001c8c:	08d2      	lsrs	r2, r2, #3
 8001c8e:	075e      	lsls	r6, r3, #29
 8001c90:	4316      	orrs	r6, r2
 8001c92:	00f3      	lsls	r3, r6, #3
 8001c94:	4699      	mov	r9, r3
 8001c96:	2401      	movs	r4, #1
 8001c98:	4653      	mov	r3, sl
 8001c9a:	00c9      	lsls	r1, r1, #3
 8001c9c:	0f72      	lsrs	r2, r6, #29
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	401c      	ands	r4, r3
 8001ca2:	4d6a      	ldr	r5, [pc, #424]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ca4:	e6ab      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ca6:	001d      	movs	r5, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2700      	movs	r7, #0
 8001cac:	e6b4      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	d159      	bne.n	8001d66 <__aeabi_dsub+0x5a2>
 8001cb2:	000b      	movs	r3, r1
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x4f6>
 8001cb8:	e6d6      	b.n	8001a68 <__aeabi_dsub+0x2a4>
 8001cba:	1c73      	adds	r3, r6, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x4fc>
 8001cbe:	e0b2      	b.n	8001e26 <__aeabi_dsub+0x662>
 8001cc0:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <__aeabi_dsub+0x688>)
 8001cc2:	429f      	cmp	r7, r3
 8001cc4:	d01e      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001cc6:	43f3      	mvns	r3, r6
 8001cc8:	2b38      	cmp	r3, #56	; 0x38
 8001cca:	dc6f      	bgt.n	8001dac <__aeabi_dsub+0x5e8>
 8001ccc:	2b1f      	cmp	r3, #31
 8001cce:	dd00      	ble.n	8001cd2 <__aeabi_dsub+0x50e>
 8001cd0:	e097      	b.n	8001e02 <__aeabi_dsub+0x63e>
 8001cd2:	2520      	movs	r5, #32
 8001cd4:	000e      	movs	r6, r1
 8001cd6:	1aed      	subs	r5, r5, r3
 8001cd8:	40ae      	lsls	r6, r5
 8001cda:	46b0      	mov	r8, r6
 8001cdc:	0006      	movs	r6, r0
 8001cde:	46aa      	mov	sl, r5
 8001ce0:	40de      	lsrs	r6, r3
 8001ce2:	4645      	mov	r5, r8
 8001ce4:	4335      	orrs	r5, r6
 8001ce6:	002e      	movs	r6, r5
 8001ce8:	4655      	mov	r5, sl
 8001cea:	40a8      	lsls	r0, r5
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	1e45      	subs	r5, r0, #1
 8001cf0:	41a8      	sbcs	r0, r5
 8001cf2:	448c      	add	ip, r1
 8001cf4:	4306      	orrs	r6, r0
 8001cf6:	18b6      	adds	r6, r6, r2
 8001cf8:	4296      	cmp	r6, r2
 8001cfa:	4192      	sbcs	r2, r2
 8001cfc:	4251      	negs	r1, r2
 8001cfe:	4461      	add	r1, ip
 8001d00:	003d      	movs	r5, r7
 8001d02:	e625      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001d04:	003d      	movs	r5, r7
 8001d06:	4661      	mov	r1, ip
 8001d08:	4691      	mov	r9, r2
 8001d0a:	e678      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	4303      	orrs	r3, r0
 8001d10:	2d00      	cmp	r5, #0
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x552>
 8001d14:	e655      	b.n	80019c2 <__aeabi_dsub+0x1fe>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f5      	beq.n	8001d06 <__aeabi_dsub+0x542>
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x55e>
 8001d20:	e66d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d22:	1886      	adds	r6, r0, r2
 8001d24:	4286      	cmp	r6, r0
 8001d26:	4180      	sbcs	r0, r0
 8001d28:	4461      	add	r1, ip
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	1809      	adds	r1, r1, r0
 8001d2e:	2200      	movs	r2, #0
 8001d30:	020b      	lsls	r3, r1, #8
 8001d32:	d400      	bmi.n	8001d36 <__aeabi_dsub+0x572>
 8001d34:	e6d0      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001d38:	3501      	adds	r5, #1
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	e5b2      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001d3e:	46b1      	mov	r9, r6
 8001d40:	e65d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d42:	0033      	movs	r3, r6
 8001d44:	4667      	mov	r7, ip
 8001d46:	3b20      	subs	r3, #32
 8001d48:	40df      	lsrs	r7, r3
 8001d4a:	003b      	movs	r3, r7
 8001d4c:	2e20      	cmp	r6, #32
 8001d4e:	d005      	beq.n	8001d5c <__aeabi_dsub+0x598>
 8001d50:	2740      	movs	r7, #64	; 0x40
 8001d52:	1bbf      	subs	r7, r7, r6
 8001d54:	4666      	mov	r6, ip
 8001d56:	40be      	lsls	r6, r7
 8001d58:	4332      	orrs	r2, r6
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	4646      	mov	r6, r8
 8001d5e:	1e72      	subs	r2, r6, #1
 8001d60:	4196      	sbcs	r6, r2
 8001d62:	4333      	orrs	r3, r6
 8001d64:	e5ef      	b.n	8001946 <__aeabi_dsub+0x182>
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <__aeabi_dsub+0x688>)
 8001d68:	429f      	cmp	r7, r3
 8001d6a:	d0cb      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001d6c:	2580      	movs	r5, #128	; 0x80
 8001d6e:	042d      	lsls	r5, r5, #16
 8001d70:	4273      	negs	r3, r6
 8001d72:	4329      	orrs	r1, r5
 8001d74:	e7a8      	b.n	8001cc8 <__aeabi_dsub+0x504>
 8001d76:	4308      	orrs	r0, r1
 8001d78:	1e41      	subs	r1, r0, #1
 8001d7a:	4188      	sbcs	r0, r1
 8001d7c:	e6a2      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x5c0>
 8001d82:	e63c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d84:	4663      	mov	r3, ip
 8001d86:	1a86      	subs	r6, r0, r2
 8001d88:	1acf      	subs	r7, r1, r3
 8001d8a:	42b0      	cmp	r0, r6
 8001d8c:	419b      	sbcs	r3, r3
 8001d8e:	425b      	negs	r3, r3
 8001d90:	1afb      	subs	r3, r7, r3
 8001d92:	4698      	mov	r8, r3
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	d54e      	bpl.n	8001e36 <__aeabi_dsub+0x672>
 8001d98:	1a16      	subs	r6, r2, r0
 8001d9a:	4663      	mov	r3, ip
 8001d9c:	42b2      	cmp	r2, r6
 8001d9e:	4192      	sbcs	r2, r2
 8001da0:	1a59      	subs	r1, r3, r1
 8001da2:	4252      	negs	r2, r2
 8001da4:	1a89      	subs	r1, r1, r2
 8001da6:	465c      	mov	r4, fp
 8001da8:	2200      	movs	r2, #0
 8001daa:	e57b      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001dac:	4301      	orrs	r1, r0
 8001dae:	000e      	movs	r6, r1
 8001db0:	1e71      	subs	r1, r6, #1
 8001db2:	418e      	sbcs	r6, r1
 8001db4:	e79f      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001db6:	001d      	movs	r5, r3
 8001db8:	000e      	movs	r6, r1
 8001dba:	3d20      	subs	r5, #32
 8001dbc:	40ee      	lsrs	r6, r5
 8001dbe:	46b0      	mov	r8, r6
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d004      	beq.n	8001dce <__aeabi_dsub+0x60a>
 8001dc4:	2540      	movs	r5, #64	; 0x40
 8001dc6:	1aeb      	subs	r3, r5, r3
 8001dc8:	4099      	lsls	r1, r3
 8001dca:	4308      	orrs	r0, r1
 8001dcc:	4681      	mov	r9, r0
 8001dce:	4648      	mov	r0, r9
 8001dd0:	4643      	mov	r3, r8
 8001dd2:	1e41      	subs	r1, r0, #1
 8001dd4:	4188      	sbcs	r0, r1
 8001dd6:	4318      	orrs	r0, r3
 8001dd8:	e674      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2400      	movs	r4, #0
 8001dde:	e617      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001de0:	1a16      	subs	r6, r2, r0
 8001de2:	4663      	mov	r3, ip
 8001de4:	42b2      	cmp	r2, r6
 8001de6:	4192      	sbcs	r2, r2
 8001de8:	1a59      	subs	r1, r3, r1
 8001dea:	4252      	negs	r2, r2
 8001dec:	1a89      	subs	r1, r1, r2
 8001dee:	003d      	movs	r5, r7
 8001df0:	e525      	b.n	800183e <__aeabi_dsub+0x7a>
 8001df2:	4661      	mov	r1, ip
 8001df4:	4691      	mov	r9, r2
 8001df6:	4d15      	ldr	r5, [pc, #84]	; (8001e4c <__aeabi_dsub+0x688>)
 8001df8:	e601      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	0312      	lsls	r2, r2, #12
 8001e00:	e679      	b.n	8001af6 <__aeabi_dsub+0x332>
 8001e02:	001d      	movs	r5, r3
 8001e04:	000e      	movs	r6, r1
 8001e06:	3d20      	subs	r5, #32
 8001e08:	40ee      	lsrs	r6, r5
 8001e0a:	46b0      	mov	r8, r6
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d004      	beq.n	8001e1a <__aeabi_dsub+0x656>
 8001e10:	2540      	movs	r5, #64	; 0x40
 8001e12:	1aeb      	subs	r3, r5, r3
 8001e14:	4099      	lsls	r1, r3
 8001e16:	4308      	orrs	r0, r1
 8001e18:	4681      	mov	r9, r0
 8001e1a:	464e      	mov	r6, r9
 8001e1c:	4643      	mov	r3, r8
 8001e1e:	1e71      	subs	r1, r6, #1
 8001e20:	418e      	sbcs	r6, r1
 8001e22:	431e      	orrs	r6, r3
 8001e24:	e767      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001e26:	1886      	adds	r6, r0, r2
 8001e28:	4296      	cmp	r6, r2
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	4461      	add	r1, ip
 8001e2e:	425b      	negs	r3, r3
 8001e30:	18c9      	adds	r1, r1, r3
 8001e32:	003d      	movs	r5, r7
 8001e34:	e58c      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001e36:	4647      	mov	r7, r8
 8001e38:	4337      	orrs	r7, r6
 8001e3a:	d0ce      	beq.n	8001dda <__aeabi_dsub+0x616>
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4641      	mov	r1, r8
 8001e40:	4032      	ands	r2, r6
 8001e42:	e649      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001e44:	2700      	movs	r7, #0
 8001e46:	003a      	movs	r2, r7
 8001e48:	e5e6      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	ff7fffff 	.word	0xff7fffff

08001e54 <__aeabi_dcmpun>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4e0c      	ldr	r6, [pc, #48]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e58:	030d      	lsls	r5, r1, #12
 8001e5a:	031c      	lsls	r4, r3, #12
 8001e5c:	0049      	lsls	r1, r1, #1
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	0b2d      	lsrs	r5, r5, #12
 8001e62:	0d49      	lsrs	r1, r1, #21
 8001e64:	0b24      	lsrs	r4, r4, #12
 8001e66:	0d5b      	lsrs	r3, r3, #21
 8001e68:	42b1      	cmp	r1, r6
 8001e6a:	d008      	beq.n	8001e7e <__aeabi_dcmpun+0x2a>
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d103      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e74:	4314      	orrs	r4, r2
 8001e76:	0020      	movs	r0, r4
 8001e78:	1e44      	subs	r4, r0, #1
 8001e7a:	41a0      	sbcs	r0, r4
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
 8001e7e:	4305      	orrs	r5, r0
 8001e80:	2001      	movs	r0, #1
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d1fa      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e86:	e7f1      	b.n	8001e6c <__aeabi_dcmpun+0x18>
 8001e88:	000007ff 	.word	0x000007ff

08001e8c <__aeabi_d2iz>:
 8001e8c:	b530      	push	{r4, r5, lr}
 8001e8e:	4d14      	ldr	r5, [pc, #80]	; (8001ee0 <__aeabi_d2iz+0x54>)
 8001e90:	030a      	lsls	r2, r1, #12
 8001e92:	004b      	lsls	r3, r1, #1
 8001e94:	0b12      	lsrs	r2, r2, #12
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	0fc9      	lsrs	r1, r1, #31
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	dd11      	ble.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ea0:	4c10      	ldr	r4, [pc, #64]	; (8001ee4 <__aeabi_d2iz+0x58>)
 8001ea2:	42a3      	cmp	r3, r4
 8001ea4:	dc10      	bgt.n	8001ec8 <__aeabi_d2iz+0x3c>
 8001ea6:	2480      	movs	r4, #128	; 0x80
 8001ea8:	0364      	lsls	r4, r4, #13
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	4c0e      	ldr	r4, [pc, #56]	; (8001ee8 <__aeabi_d2iz+0x5c>)
 8001eae:	1ae4      	subs	r4, r4, r3
 8001eb0:	2c1f      	cmp	r4, #31
 8001eb2:	dd0c      	ble.n	8001ece <__aeabi_d2iz+0x42>
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <__aeabi_d2iz+0x60>)
 8001eb6:	1ac3      	subs	r3, r0, r3
 8001eb8:	40da      	lsrs	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	425c      	negs	r4, r3
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ec2:	001c      	movs	r4, r3
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	bd30      	pop	{r4, r5, pc}
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <__aeabi_d2iz+0x64>)
 8001eca:	18cc      	adds	r4, r1, r3
 8001ecc:	e7fa      	b.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ece:	4d09      	ldr	r5, [pc, #36]	; (8001ef4 <__aeabi_d2iz+0x68>)
 8001ed0:	40e0      	lsrs	r0, r4
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	4463      	add	r3, ip
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	4303      	orrs	r3, r0
 8001edc:	e7ee      	b.n	8001ebc <__aeabi_d2iz+0x30>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000003fe 	.word	0x000003fe
 8001ee4:	0000041d 	.word	0x0000041d
 8001ee8:	00000433 	.word	0x00000433
 8001eec:	00000413 	.word	0x00000413
 8001ef0:	7fffffff 	.word	0x7fffffff
 8001ef4:	fffffbed 	.word	0xfffffbed

08001ef8 <__aeabi_i2d>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d02d      	beq.n	8001f5a <__aeabi_i2d+0x62>
 8001efe:	17c3      	asrs	r3, r0, #31
 8001f00:	18c5      	adds	r5, r0, r3
 8001f02:	405d      	eors	r5, r3
 8001f04:	0fc4      	lsrs	r4, r0, #31
 8001f06:	0028      	movs	r0, r5
 8001f08:	f000 f862 	bl	8001fd0 <__clzsi2>
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <__aeabi_i2d+0x6c>)
 8001f0e:	1a1b      	subs	r3, r3, r0
 8001f10:	055b      	lsls	r3, r3, #21
 8001f12:	0d5b      	lsrs	r3, r3, #21
 8001f14:	280a      	cmp	r0, #10
 8001f16:	dd15      	ble.n	8001f44 <__aeabi_i2d+0x4c>
 8001f18:	380b      	subs	r0, #11
 8001f1a:	4085      	lsls	r5, r0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	032d      	lsls	r5, r5, #12
 8001f20:	0b2d      	lsrs	r5, r5, #12
 8001f22:	2100      	movs	r1, #0
 8001f24:	0010      	movs	r0, r2
 8001f26:	032d      	lsls	r5, r5, #12
 8001f28:	0d0a      	lsrs	r2, r1, #20
 8001f2a:	0b2d      	lsrs	r5, r5, #12
 8001f2c:	0512      	lsls	r2, r2, #20
 8001f2e:	432a      	orrs	r2, r5
 8001f30:	4d0d      	ldr	r5, [pc, #52]	; (8001f68 <__aeabi_i2d+0x70>)
 8001f32:	051b      	lsls	r3, r3, #20
 8001f34:	402a      	ands	r2, r5
 8001f36:	4313      	orrs	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	07e4      	lsls	r4, r4, #31
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	0019      	movs	r1, r3
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	0002      	movs	r2, r0
 8001f46:	0029      	movs	r1, r5
 8001f48:	3215      	adds	r2, #21
 8001f4a:	4091      	lsls	r1, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	210b      	movs	r1, #11
 8001f50:	1a08      	subs	r0, r1, r0
 8001f52:	40c5      	lsrs	r5, r0
 8001f54:	032d      	lsls	r5, r5, #12
 8001f56:	0b2d      	lsrs	r5, r5, #12
 8001f58:	e7e3      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f5a:	2400      	movs	r4, #0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2500      	movs	r5, #0
 8001f60:	2200      	movs	r2, #0
 8001f62:	e7de      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f64:	0000041e 	.word	0x0000041e
 8001f68:	800fffff 	.word	0x800fffff

08001f6c <__aeabi_ui2d>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	1e04      	subs	r4, r0, #0
 8001f70:	d025      	beq.n	8001fbe <__aeabi_ui2d+0x52>
 8001f72:	f000 f82d 	bl	8001fd0 <__clzsi2>
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <__aeabi_ui2d+0x5c>)
 8001f78:	1a1b      	subs	r3, r3, r0
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	280a      	cmp	r0, #10
 8001f80:	dd12      	ble.n	8001fa8 <__aeabi_ui2d+0x3c>
 8001f82:	380b      	subs	r0, #11
 8001f84:	4084      	lsls	r4, r0
 8001f86:	2200      	movs	r2, #0
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	0010      	movs	r0, r2
 8001f90:	0324      	lsls	r4, r4, #12
 8001f92:	0d0a      	lsrs	r2, r1, #20
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	0512      	lsls	r2, r2, #20
 8001f98:	4322      	orrs	r2, r4
 8001f9a:	4c0c      	ldr	r4, [pc, #48]	; (8001fcc <__aeabi_ui2d+0x60>)
 8001f9c:	051b      	lsls	r3, r3, #20
 8001f9e:	4022      	ands	r2, r4
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	0859      	lsrs	r1, r3, #1
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	0002      	movs	r2, r0
 8001faa:	0021      	movs	r1, r4
 8001fac:	3215      	adds	r2, #21
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	210b      	movs	r1, #11
 8001fb4:	1a08      	subs	r0, r1, r0
 8001fb6:	40c4      	lsrs	r4, r0
 8001fb8:	0324      	lsls	r4, r4, #12
 8001fba:	0b24      	lsrs	r4, r4, #12
 8001fbc:	e7e6      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	e7e2      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	0000041e 	.word	0x0000041e
 8001fcc:	800fffff 	.word	0x800fffff

08001fd0 <__clzsi2>:
 8001fd0:	211c      	movs	r1, #28
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	4298      	cmp	r0, r3
 8001fd8:	d301      	bcc.n	8001fde <__clzsi2+0xe>
 8001fda:	0c00      	lsrs	r0, r0, #16
 8001fdc:	3910      	subs	r1, #16
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	4298      	cmp	r0, r3
 8001fe2:	d301      	bcc.n	8001fe8 <__clzsi2+0x18>
 8001fe4:	0a00      	lsrs	r0, r0, #8
 8001fe6:	3908      	subs	r1, #8
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	4298      	cmp	r0, r3
 8001fec:	d301      	bcc.n	8001ff2 <__clzsi2+0x22>
 8001fee:	0900      	lsrs	r0, r0, #4
 8001ff0:	3904      	subs	r1, #4
 8001ff2:	a202      	add	r2, pc, #8	; (adr r2, 8001ffc <__clzsi2+0x2c>)
 8001ff4:	5c10      	ldrb	r0, [r2, r0]
 8001ff6:	1840      	adds	r0, r0, r1
 8001ff8:	4770      	bx	lr
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	02020304 	.word	0x02020304
 8002000:	01010101 	.word	0x01010101
	...

0800200c <init_accel>:
#include "accel.h"

int init_accel(I2C_HandleTypeDef* i2c){
 800200c:	b5b0      	push	{r4, r5, r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af02      	add	r7, sp, #8
 8002012:	6078      	str	r0, [r7, #4]
	// Set output data rate to 50hz by writing to CTRL1 register
	// and turn on BDU
	uint8_t dat[2] = {0x20, 0x2F};
 8002014:	210c      	movs	r1, #12
 8002016:	187b      	adds	r3, r7, r1
 8002018:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <init_accel+0x88>)
 800201a:	8812      	ldrh	r2, [r2, #0]
 800201c:	801a      	strh	r2, [r3, #0]
	uint8_t buf = 0;
 800201e:	250b      	movs	r5, #11
 8002020:	197b      	adds	r3, r7, r5
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(i2c, ACC_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 8002026:	000c      	movs	r4, r1
 8002028:	187a      	adds	r2, r7, r1
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	2301      	movs	r3, #1
 800202e:	425b      	negs	r3, r3
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2302      	movs	r3, #2
 8002034:	213a      	movs	r1, #58	; 0x3a
 8002036:	f001 f9c5 	bl	80033c4 <HAL_I2C_Master_Transmit>
	// Set the full scale selection to +-4G, turn on auto increment reads
	dat[0] = 0x23;
 800203a:	0021      	movs	r1, r4
 800203c:	187b      	adds	r3, r7, r1
 800203e:	2223      	movs	r2, #35	; 0x23
 8002040:	701a      	strb	r2, [r3, #0]
	dat[1] = 0x24;
 8002042:	187b      	adds	r3, r7, r1
 8002044:	2224      	movs	r2, #36	; 0x24
 8002046:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(i2c, ACC_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 8002048:	000c      	movs	r4, r1
 800204a:	187a      	adds	r2, r7, r1
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	2301      	movs	r3, #1
 8002050:	425b      	negs	r3, r3
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2302      	movs	r3, #2
 8002056:	213a      	movs	r1, #58	; 0x3a
 8002058:	f001 f9b4 	bl	80033c4 <HAL_I2C_Master_Transmit>

	// Read back the whoami register
	dat[0] = 0xF;
 800205c:	0021      	movs	r1, r4
 800205e:	187b      	adds	r3, r7, r1
 8002060:	220f      	movs	r2, #15
 8002062:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(i2c, ACC_ADDR_WR, &dat, 1, HAL_MAX_DELAY);
 8002064:	187a      	adds	r2, r7, r1
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	2301      	movs	r3, #1
 800206a:	425b      	negs	r3, r3
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	2301      	movs	r3, #1
 8002070:	213a      	movs	r1, #58	; 0x3a
 8002072:	f001 f9a7 	bl	80033c4 <HAL_I2C_Master_Transmit>
	// Read the data back
	HAL_I2C_Master_Receive(i2c, ACC_ADDR_RD, &buf, 1, HAL_MAX_DELAY);
 8002076:	197a      	adds	r2, r7, r5
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	2301      	movs	r3, #1
 800207c:	425b      	negs	r3, r3
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2301      	movs	r3, #1
 8002082:	213b      	movs	r1, #59	; 0x3b
 8002084:	f001 faa6 	bl	80035d4 <HAL_I2C_Master_Receive>
	return buf;
 8002088:	197b      	adds	r3, r7, r5
 800208a:	781b      	ldrb	r3, [r3, #0]
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	b004      	add	sp, #16
 8002092:	bdb0      	pop	{r4, r5, r7, pc}
 8002094:	08006868 	.word	0x08006868

08002098 <_get_16bit_reg>:

int16_t _get_16bit_reg(uint8_t start_addr, I2C_HandleTypeDef* i2c){
 8002098:	b5b0      	push	{r4, r5, r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af02      	add	r7, sp, #8
 800209e:	0002      	movs	r2, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	701a      	strb	r2, [r3, #0]
	uint8_t buf_l;
	uint8_t buf_h;
	// Get the lower bits from the register pair, write the address to the bus
	HAL_I2C_Master_Transmit(i2c, ACC_ADDR_WR, &start_addr, 1, HAL_MAX_DELAY);
 80020a6:	1dfa      	adds	r2, r7, #7
 80020a8:	6838      	ldr	r0, [r7, #0]
 80020aa:	2301      	movs	r3, #1
 80020ac:	425b      	negs	r3, r3
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2301      	movs	r3, #1
 80020b2:	213a      	movs	r1, #58	; 0x3a
 80020b4:	f001 f986 	bl	80033c4 <HAL_I2C_Master_Transmit>
	// Read the data back
	HAL_I2C_Master_Receive(i2c, ACC_ADDR_RD, &buf_l, 1, HAL_MAX_DELAY);
 80020b8:	240f      	movs	r4, #15
 80020ba:	193a      	adds	r2, r7, r4
 80020bc:	6838      	ldr	r0, [r7, #0]
 80020be:	2301      	movs	r3, #1
 80020c0:	425b      	negs	r3, r3
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2301      	movs	r3, #1
 80020c6:	213b      	movs	r1, #59	; 0x3b
 80020c8:	f001 fa84 	bl	80035d4 <HAL_I2C_Master_Receive>
	// Get the higher bits from the register pair, write the address to the bus
	start_addr = start_addr + 1;
 80020cc:	1dfb      	adds	r3, r7, #7
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	1dfb      	adds	r3, r7, #7
 80020d6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(i2c, ACC_ADDR_WR, &start_addr, 1, HAL_MAX_DELAY);
 80020d8:	1dfa      	adds	r2, r7, #7
 80020da:	6838      	ldr	r0, [r7, #0]
 80020dc:	2301      	movs	r3, #1
 80020de:	425b      	negs	r3, r3
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2301      	movs	r3, #1
 80020e4:	213a      	movs	r1, #58	; 0x3a
 80020e6:	f001 f96d 	bl	80033c4 <HAL_I2C_Master_Transmit>
	// Read the data back
	HAL_I2C_Master_Receive(i2c, ACC_ADDR_RD, &buf_h, 1, HAL_MAX_DELAY);
 80020ea:	250e      	movs	r5, #14
 80020ec:	197a      	adds	r2, r7, r5
 80020ee:	6838      	ldr	r0, [r7, #0]
 80020f0:	2301      	movs	r3, #1
 80020f2:	425b      	negs	r3, r3
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2301      	movs	r3, #1
 80020f8:	213b      	movs	r1, #59	; 0x3b
 80020fa:	f001 fa6b 	bl	80035d4 <HAL_I2C_Master_Receive>
	// Return the formatted data
	return (buf_h << 8) | buf_l;
 80020fe:	197b      	adds	r3, r7, r5
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	b21a      	sxth	r2, r3
 8002106:	193b      	adds	r3, r7, r4
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b21b      	sxth	r3, r3
 800210c:	4313      	orrs	r3, r2
 800210e:	b21b      	sxth	r3, r3
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	b004      	add	sp, #16
 8002116:	bdb0      	pop	{r4, r5, r7, pc}

08002118 <get_x>:

int16_t get_x(I2C_HandleTypeDef* i2c){
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	return _get_16bit_reg(X_DATA_REG, i2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	0019      	movs	r1, r3
 8002124:	2028      	movs	r0, #40	; 0x28
 8002126:	f7ff ffb7 	bl	8002098 <_get_16bit_reg>
 800212a:	0003      	movs	r3, r0
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	b002      	add	sp, #8
 8002132:	bd80      	pop	{r7, pc}

08002134 <get_y>:

int16_t get_y(I2C_HandleTypeDef* i2c){
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	return _get_16bit_reg(Y_DATA_REG, i2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	0019      	movs	r1, r3
 8002140:	202a      	movs	r0, #42	; 0x2a
 8002142:	f7ff ffa9 	bl	8002098 <_get_16bit_reg>
 8002146:	0003      	movs	r3, r0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}

08002150 <get_z>:
int16_t get_z(I2C_HandleTypeDef* i2c){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	return _get_16bit_reg(Z_DATA_REG, i2c);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	0019      	movs	r1, r3
 800215c:	202c      	movs	r0, #44	; 0x2c
 800215e:	f7ff ff9b 	bl	8002098 <_get_16bit_reg>
 8002162:	0003      	movs	r3, r0
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}

0800216c <life>:
#include "conway.h"

int life(uint8_t x, uint8_t y){
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	0002      	movs	r2, r0
 8002174:	1dfb      	adds	r3, r7, #7
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	1dbb      	adds	r3, r7, #6
 800217a:	1c0a      	adds	r2, r1, #0
 800217c:	701a      	strb	r2, [r3, #0]
	uint8_t x_end;
	uint8_t y_end;

	uint8_t x_start;
	uint8_t y_start;
	uint8_t neighbors = 0;
 800217e:	230b      	movs	r3, #11
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
	// Set the bounds for looking for neighbors
	if(x == 0){
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10b      	bne.n	80021a6 <life+0x3a>
		x_start = x;
 800218e:	230d      	movs	r3, #13
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	1dfa      	adds	r2, r7, #7
 8002194:	7812      	ldrb	r2, [r2, #0]
 8002196:	701a      	strb	r2, [r3, #0]
		x_end = x + 1;
 8002198:	230f      	movs	r3, #15
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	1dfa      	adds	r2, r7, #7
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	3201      	adds	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e019      	b.n	80021da <life+0x6e>
	}
	else if(x == X_BND){
 80021a6:	1dfb      	adds	r3, r7, #7
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b07      	cmp	r3, #7
 80021ac:	d109      	bne.n	80021c2 <life+0x56>
		x_start = X_BND - 1;
 80021ae:	230d      	movs	r3, #13
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2206      	movs	r2, #6
 80021b4:	701a      	strb	r2, [r3, #0]
		x_end = x;
 80021b6:	230f      	movs	r3, #15
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	1dfa      	adds	r2, r7, #7
 80021bc:	7812      	ldrb	r2, [r2, #0]
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	e00b      	b.n	80021da <life+0x6e>
	}
	else{
		x_start = x - 1;
 80021c2:	230d      	movs	r3, #13
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	1dfa      	adds	r2, r7, #7
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	3a01      	subs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
		x_end = x + 1;
 80021ce:	230f      	movs	r3, #15
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	1dfa      	adds	r2, r7, #7
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	3201      	adds	r2, #1
 80021d8:	701a      	strb	r2, [r3, #0]
	}
	if(y == 0){
 80021da:	1dbb      	adds	r3, r7, #6
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10b      	bne.n	80021fa <life+0x8e>
		y_start = y;
 80021e2:	230c      	movs	r3, #12
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	1dba      	adds	r2, r7, #6
 80021e8:	7812      	ldrb	r2, [r2, #0]
 80021ea:	701a      	strb	r2, [r3, #0]
		y_end = y + 1;
 80021ec:	230e      	movs	r3, #14
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	1dba      	adds	r2, r7, #6
 80021f2:	7812      	ldrb	r2, [r2, #0]
 80021f4:	3201      	adds	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	e019      	b.n	800222e <life+0xc2>
	}
	else if(y == Y_BND){
 80021fa:	1dbb      	adds	r3, r7, #6
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b11      	cmp	r3, #17
 8002200:	d109      	bne.n	8002216 <life+0xaa>
		y_start = Y_BND - 1;
 8002202:	230c      	movs	r3, #12
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	2210      	movs	r2, #16
 8002208:	701a      	strb	r2, [r3, #0]
		y_end = y;
 800220a:	230e      	movs	r3, #14
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	1dba      	adds	r2, r7, #6
 8002210:	7812      	ldrb	r2, [r2, #0]
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	e00b      	b.n	800222e <life+0xc2>
	}
	else{
		y_start = y - 1;
 8002216:	230c      	movs	r3, #12
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	1dba      	adds	r2, r7, #6
 800221c:	7812      	ldrb	r2, [r2, #0]
 800221e:	3a01      	subs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
		y_end = y + 1;
 8002222:	230e      	movs	r3, #14
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	1dba      	adds	r2, r7, #6
 8002228:	7812      	ldrb	r2, [r2, #0]
 800222a:	3201      	adds	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
	}
	for(uint8_t y_index = y_start; y_index <= y_end; y_index++){
 800222e:	230a      	movs	r3, #10
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	220c      	movs	r2, #12
 8002234:	18ba      	adds	r2, r7, r2
 8002236:	7812      	ldrb	r2, [r2, #0]
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e03c      	b.n	80022b6 <life+0x14a>
		for(uint8_t x_index = x_start; x_index <= x_end; x_index++){
 800223c:	2309      	movs	r3, #9
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	220d      	movs	r2, #13
 8002242:	18ba      	adds	r2, r7, r2
 8002244:	7812      	ldrb	r2, [r2, #0]
 8002246:	701a      	strb	r2, [r3, #0]
 8002248:	e027      	b.n	800229a <life+0x12e>
			if((active_fbuf[y_index * MTX_WIDTH + x_index] != 0) &&
 800224a:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <life+0x208>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	220a      	movs	r2, #10
 8002250:	18ba      	adds	r2, r7, r2
 8002252:	7812      	ldrb	r2, [r2, #0]
 8002254:	00d1      	lsls	r1, r2, #3
 8002256:	2209      	movs	r2, #9
 8002258:	18ba      	adds	r2, r7, r2
 800225a:	7812      	ldrb	r2, [r2, #0]
 800225c:	188a      	adds	r2, r1, r2
 800225e:	189b      	adds	r3, r3, r2
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d013      	beq.n	800228e <life+0x122>
 8002266:	1dfa      	adds	r2, r7, #7
 8002268:	2309      	movs	r3, #9
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d106      	bne.n	8002282 <life+0x116>
					!((x == x_index) && (y == y_index))){
 8002274:	1dba      	adds	r2, r7, #6
 8002276:	230a      	movs	r3, #10
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	7812      	ldrb	r2, [r2, #0]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d005      	beq.n	800228e <life+0x122>
				neighbors++;
 8002282:	210b      	movs	r1, #11
 8002284:	187b      	adds	r3, r7, r1
 8002286:	781a      	ldrb	r2, [r3, #0]
 8002288:	187b      	adds	r3, r7, r1
 800228a:	3201      	adds	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
		for(uint8_t x_index = x_start; x_index <= x_end; x_index++){
 800228e:	2109      	movs	r1, #9
 8002290:	187b      	adds	r3, r7, r1
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	187b      	adds	r3, r7, r1
 8002296:	3201      	adds	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	2309      	movs	r3, #9
 800229c:	18fa      	adds	r2, r7, r3
 800229e:	230f      	movs	r3, #15
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	7812      	ldrb	r2, [r2, #0]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d9cf      	bls.n	800224a <life+0xde>
	for(uint8_t y_index = y_start; y_index <= y_end; y_index++){
 80022aa:	210a      	movs	r1, #10
 80022ac:	187b      	adds	r3, r7, r1
 80022ae:	781a      	ldrb	r2, [r3, #0]
 80022b0:	187b      	adds	r3, r7, r1
 80022b2:	3201      	adds	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	230a      	movs	r3, #10
 80022b8:	18fa      	adds	r2, r7, r3
 80022ba:	230e      	movs	r3, #14
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	7812      	ldrb	r2, [r2, #0]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d9ba      	bls.n	800223c <life+0xd0>
			}
		}
	}
	// Any cell with less than 2 neighbors dies of loneliness
	if(active_fbuf[y * MTX_WIDTH + x] != 0 && neighbors < 2){
 80022c6:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <life+0x208>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	1dba      	adds	r2, r7, #6
 80022cc:	7812      	ldrb	r2, [r2, #0]
 80022ce:	00d1      	lsls	r1, r2, #3
 80022d0:	1dfa      	adds	r2, r7, #7
 80022d2:	7812      	ldrb	r2, [r2, #0]
 80022d4:	188a      	adds	r2, r1, r2
 80022d6:	189b      	adds	r3, r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <life+0x180>
 80022de:	230b      	movs	r3, #11
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d801      	bhi.n	80022ec <life+0x180>
		return 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	e03e      	b.n	800236a <life+0x1fe>
	}
	// Any living cell with 2 or 3 neighbors lives on to the next generation
	else if((active_fbuf[y * MTX_WIDTH + x] != 0) && (neighbors == 2 || neighbors == 3)){
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <life+0x208>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	1dba      	adds	r2, r7, #6
 80022f2:	7812      	ldrb	r2, [r2, #0]
 80022f4:	00d1      	lsls	r1, r2, #3
 80022f6:	1dfa      	adds	r2, r7, #7
 80022f8:	7812      	ldrb	r2, [r2, #0]
 80022fa:	188a      	adds	r2, r1, r2
 80022fc:	189b      	adds	r3, r3, r2
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00b      	beq.n	800231c <life+0x1b0>
 8002304:	230b      	movs	r3, #11
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d004      	beq.n	8002318 <life+0x1ac>
 800230e:	230b      	movs	r3, #11
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d101      	bne.n	800231c <life+0x1b0>
		return 1;
 8002318:	2301      	movs	r3, #1
 800231a:	e026      	b.n	800236a <life+0x1fe>
	}
	// Any cell with more than 3 neighbors dies of overpopulation
	else if(active_fbuf[y * MTX_WIDTH + x] != 0 && neighbors > 3){
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <life+0x208>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	1dba      	adds	r2, r7, #6
 8002322:	7812      	ldrb	r2, [r2, #0]
 8002324:	00d1      	lsls	r1, r2, #3
 8002326:	1dfa      	adds	r2, r7, #7
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	188a      	adds	r2, r1, r2
 800232c:	189b      	adds	r3, r3, r2
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <life+0x1d6>
 8002334:	230b      	movs	r3, #11
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b03      	cmp	r3, #3
 800233c:	d901      	bls.n	8002342 <life+0x1d6>
		return 0;
 800233e:	2300      	movs	r3, #0
 8002340:	e013      	b.n	800236a <life+0x1fe>
	}
	// Any dead cell with exactly three neighbors is born
	else if(active_fbuf[y * MTX_WIDTH + x] == 0 && neighbors == 3){
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <life+0x208>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1dba      	adds	r2, r7, #6
 8002348:	7812      	ldrb	r2, [r2, #0]
 800234a:	00d1      	lsls	r1, r2, #3
 800234c:	1dfa      	adds	r2, r7, #7
 800234e:	7812      	ldrb	r2, [r2, #0]
 8002350:	188a      	adds	r2, r1, r2
 8002352:	189b      	adds	r3, r3, r2
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <life+0x1fc>
 800235a:	230b      	movs	r3, #11
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d101      	bne.n	8002368 <life+0x1fc>
		return 1;
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <life+0x1fe>
	}
	// MISRA
	else{
		return 0;
 8002368:	2300      	movs	r3, #0
	}

}
 800236a:	0018      	movs	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	b004      	add	sp, #16
 8002370:	bd80      	pop	{r7, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	20000324 	.word	0x20000324

08002378 <conway_demo>:

void conway_demo(I2C_HandleTypeDef* hi2c){
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	stop_conway = 0;
 8002380:	4b34      	ldr	r3, [pc, #208]	; (8002454 <conway_demo+0xdc>)
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
	// Seed Conway's game of life with a glider
	next_fbuf[0 * MTX_WIDTH + 1] = 0xFF;
 8002386:	4b34      	ldr	r3, [pc, #208]	; (8002458 <conway_demo+0xe0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3301      	adds	r3, #1
 800238c:	22ff      	movs	r2, #255	; 0xff
 800238e:	701a      	strb	r2, [r3, #0]
	next_fbuf[1 * MTX_WIDTH + 2] = 0xFF;
 8002390:	4b31      	ldr	r3, [pc, #196]	; (8002458 <conway_demo+0xe0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	330a      	adds	r3, #10
 8002396:	22ff      	movs	r2, #255	; 0xff
 8002398:	701a      	strb	r2, [r3, #0]
	next_fbuf[2 * MTX_WIDTH + 0] = 0xFF;
 800239a:	4b2f      	ldr	r3, [pc, #188]	; (8002458 <conway_demo+0xe0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3310      	adds	r3, #16
 80023a0:	22ff      	movs	r2, #255	; 0xff
 80023a2:	701a      	strb	r2, [r3, #0]
	next_fbuf[2 * MTX_WIDTH + 1] = 0xFF;
 80023a4:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <conway_demo+0xe0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3311      	adds	r3, #17
 80023aa:	22ff      	movs	r2, #255	; 0xff
 80023ac:	701a      	strb	r2, [r3, #0]
	next_fbuf[2 * MTX_WIDTH + 2] = 0xFF;
 80023ae:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <conway_demo+0xe0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3312      	adds	r3, #18
 80023b4:	22ff      	movs	r2, #255	; 0xff
 80023b6:	701a      	strb	r2, [r3, #0]
	update_fbuf(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	0018      	movs	r0, r3
 80023bc:	f000 fa54 	bl	8002868 <update_fbuf>
	while (!stop_conway){
 80023c0:	e03f      	b.n	8002442 <conway_demo+0xca>
		for(uint8_t y = 0; y < 18; y++){
 80023c2:	230f      	movs	r3, #15
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	e02e      	b.n	800242a <conway_demo+0xb2>
			for(uint8_t x = 0; x < 8; x++){
 80023cc:	230e      	movs	r3, #14
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e01e      	b.n	8002414 <conway_demo+0x9c>
				if(life(x, y)){
 80023d6:	230f      	movs	r3, #15
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	230e      	movs	r3, #14
 80023de:	18fb      	adds	r3, r7, r3
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	0011      	movs	r1, r2
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7ff fec1 	bl	800216c <life>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d00c      	beq.n	8002408 <conway_demo+0x90>
					next_fbuf[y * MTX_WIDTH + x] = 0xFF;
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <conway_demo+0xe0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	220f      	movs	r2, #15
 80023f4:	18ba      	adds	r2, r7, r2
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	00d1      	lsls	r1, r2, #3
 80023fa:	220e      	movs	r2, #14
 80023fc:	18ba      	adds	r2, r7, r2
 80023fe:	7812      	ldrb	r2, [r2, #0]
 8002400:	188a      	adds	r2, r1, r2
 8002402:	189b      	adds	r3, r3, r2
 8002404:	22ff      	movs	r2, #255	; 0xff
 8002406:	701a      	strb	r2, [r3, #0]
			for(uint8_t x = 0; x < 8; x++){
 8002408:	210e      	movs	r1, #14
 800240a:	187b      	adds	r3, r7, r1
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	187b      	adds	r3, r7, r1
 8002410:	3201      	adds	r2, #1
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	230e      	movs	r3, #14
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b07      	cmp	r3, #7
 800241c:	d9db      	bls.n	80023d6 <conway_demo+0x5e>
		for(uint8_t y = 0; y < 18; y++){
 800241e:	210f      	movs	r1, #15
 8002420:	187b      	adds	r3, r7, r1
 8002422:	781a      	ldrb	r2, [r3, #0]
 8002424:	187b      	adds	r3, r7, r1
 8002426:	3201      	adds	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	230f      	movs	r3, #15
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b11      	cmp	r3, #17
 8002432:	d9cb      	bls.n	80023cc <conway_demo+0x54>
				}
			}
		}
		HAL_Delay(100);
 8002434:	2064      	movs	r0, #100	; 0x64
 8002436:	f000 fcd9 	bl	8002dec <HAL_Delay>
		update_fbuf(hi2c);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f000 fa13 	bl	8002868 <update_fbuf>
	while (!stop_conway){
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <conway_demo+0xdc>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ba      	beq.n	80023c2 <conway_demo+0x4a>
	}
}
 800244c:	46c0      	nop			; (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b004      	add	sp, #16
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000320 	.word	0x20000320
 8002458:	2000043c 	.word	0x2000043c

0800245c <doggo_demo>:
#include "doggo.h"

int doggo_demo(I2C_HandleTypeDef* hi2c){
 800245c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	// Goes to +-8000 on its side
	int16_t x = 0;
 8002464:	230e      	movs	r3, #14
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	2200      	movs	r2, #0
 800246a:	801a      	strh	r2, [r3, #0]
	int16_t y = 0;
 800246c:	230c      	movs	r3, #12
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	2200      	movs	r2, #0
 8002472:	801a      	strh	r2, [r3, #0]
	int16_t z = 0;
 8002474:	230a      	movs	r3, #10
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2200      	movs	r2, #0
 800247a:	801a      	strh	r2, [r3, #0]

	while(1){
		x = get_x(hi2c);
 800247c:	250e      	movs	r5, #14
 800247e:	197c      	adds	r4, r7, r5
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	0018      	movs	r0, r3
 8002484:	f7ff fe48 	bl	8002118 <get_x>
 8002488:	0003      	movs	r3, r0
 800248a:	8023      	strh	r3, [r4, #0]
		y = get_y(hi2c);
 800248c:	260c      	movs	r6, #12
 800248e:	19bc      	adds	r4, r7, r6
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0018      	movs	r0, r3
 8002494:	f7ff fe4e 	bl	8002134 <get_y>
 8002498:	0003      	movs	r3, r0
 800249a:	8023      	strh	r3, [r4, #0]
		z = get_z(hi2c);
 800249c:	230a      	movs	r3, #10
 800249e:	18fc      	adds	r4, r7, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f7ff fe54 	bl	8002150 <get_z>
 80024a8:	0003      	movs	r3, r0
 80024aa:	8023      	strh	r3, [r4, #0]
		//next_fbuf[0] = x & 0xFF;
		next_fbuf[1] = (x & 0xFF00) >> 8;
 80024ac:	197b      	adds	r3, r7, r5
 80024ae:	2200      	movs	r2, #0
 80024b0:	5e9b      	ldrsh	r3, [r3, r2]
 80024b2:	121a      	asrs	r2, r3, #8
 80024b4:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <doggo_demo+0x94>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3301      	adds	r3, #1
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

		//next_fbuf[2] = y & 0xFF;
		next_fbuf[3] = (y & 0xFF00) >> 8;
 80024be:	19bb      	adds	r3, r7, r6
 80024c0:	2200      	movs	r2, #0
 80024c2:	5e9b      	ldrsh	r3, [r3, r2]
 80024c4:	121a      	asrs	r2, r3, #8
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <doggo_demo+0x94>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3303      	adds	r3, #3
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	701a      	strb	r2, [r3, #0]


		//next_fbuf[4] = z & 0xFF;
		next_fbuf[5] = (z & 0xFF00) >> 8;
 80024d0:	230a      	movs	r3, #10
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2200      	movs	r2, #0
 80024d6:	5e9b      	ldrsh	r3, [r3, r2]
 80024d8:	121a      	asrs	r2, r3, #8
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <doggo_demo+0x94>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3305      	adds	r3, #5
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	701a      	strb	r2, [r3, #0]
		update_fbuf(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f000 f9be 	bl	8002868 <update_fbuf>
		x = get_x(hi2c);
 80024ec:	e7c6      	b.n	800247c <doggo_demo+0x20>
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	2000043c 	.word	0x2000043c

080024f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024f8:	f000 fc48 	bl	8002d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024fc:	f000 f818 	bl	8002530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002500:	f000 f8ae 	bl	8002660 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002504:	f000 f86c 	bl	80025e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  init_matrix(&hi2c1);
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <main+0x38>)
 800250a:	0018      	movs	r0, r3
 800250c:	f000 f92e 	bl	800276c <init_matrix>
  init_accel(&hi2c1);
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <main+0x38>)
 8002512:	0018      	movs	r0, r3
 8002514:	f7ff fd7a 	bl	800200c <init_accel>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  doggo_demo(&hi2c1);
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <main+0x38>)
 800251a:	0018      	movs	r0, r3
 800251c:	f7ff ff9e 	bl	800245c <doggo_demo>
	  conway_demo(&hi2c1);
 8002520:	4b02      	ldr	r3, [pc, #8]	; (800252c <main+0x38>)
 8002522:	0018      	movs	r0, r3
 8002524:	f7ff ff28 	bl	8002378 <conway_demo>
	  doggo_demo(&hi2c1);
 8002528:	e7f6      	b.n	8002518 <main+0x24>
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	200003f0 	.word	0x200003f0

08002530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b099      	sub	sp, #100	; 0x64
 8002534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002536:	242c      	movs	r4, #44	; 0x2c
 8002538:	193b      	adds	r3, r7, r4
 800253a:	0018      	movs	r0, r3
 800253c:	2334      	movs	r3, #52	; 0x34
 800253e:	001a      	movs	r2, r3
 8002540:	2100      	movs	r1, #0
 8002542:	f002 fc26 	bl	8004d92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002546:	231c      	movs	r3, #28
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	0018      	movs	r0, r3
 800254c:	2310      	movs	r3, #16
 800254e:	001a      	movs	r2, r3
 8002550:	2100      	movs	r1, #0
 8002552:	f002 fc1e 	bl	8004d92 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	0018      	movs	r0, r3
 800255a:	2318      	movs	r3, #24
 800255c:	001a      	movs	r2, r3
 800255e:	2100      	movs	r1, #0
 8002560:	f002 fc17 	bl	8004d92 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002564:	0021      	movs	r1, r4
 8002566:	187b      	adds	r3, r7, r1
 8002568:	2202      	movs	r2, #2
 800256a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800256c:	187b      	adds	r3, r7, r1
 800256e:	2201      	movs	r2, #1
 8002570:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2210      	movs	r2, #16
 8002576:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002578:	187b      	adds	r3, r7, r1
 800257a:	2200      	movs	r2, #0
 800257c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800257e:	187b      	adds	r3, r7, r1
 8002580:	0018      	movs	r0, r3
 8002582:	f001 fbab 	bl	8003cdc <HAL_RCC_OscConfig>
 8002586:	1e03      	subs	r3, r0, #0
 8002588:	d001      	beq.n	800258e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800258a:	f000 f8e9 	bl	8002760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800258e:	211c      	movs	r1, #28
 8002590:	187b      	adds	r3, r7, r1
 8002592:	2207      	movs	r2, #7
 8002594:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002596:	187b      	adds	r3, r7, r1
 8002598:	2200      	movs	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800259c:	187b      	adds	r3, r7, r1
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025a2:	187b      	adds	r3, r7, r1
 80025a4:	2200      	movs	r2, #0
 80025a6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	2100      	movs	r1, #0
 80025ac:	0018      	movs	r0, r3
 80025ae:	f001 ff1b 	bl	80043e8 <HAL_RCC_ClockConfig>
 80025b2:	1e03      	subs	r3, r0, #0
 80025b4:	d001      	beq.n	80025ba <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80025b6:	f000 f8d3 	bl	8002760 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	2220      	movs	r2, #32
 80025be:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	0018      	movs	r0, r3
 80025ca:	f002 f8af 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 80025ce:	1e03      	subs	r3, r0, #0
 80025d0:	d001      	beq.n	80025d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80025d2:	f000 f8c5 	bl	8002760 <Error_Handler>
  }
}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b019      	add	sp, #100	; 0x64
 80025dc:	bd90      	pop	{r4, r7, pc}
	...

080025e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025e4:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <MX_I2C1_Init+0x74>)
 80025e6:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <MX_I2C1_Init+0x78>)
 80025e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <MX_I2C1_Init+0x74>)
 80025ec:	4a1b      	ldr	r2, [pc, #108]	; (800265c <MX_I2C1_Init+0x7c>)
 80025ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <MX_I2C1_Init+0x74>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <MX_I2C1_Init+0x74>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <MX_I2C1_Init+0x74>)
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002602:	4b14      	ldr	r3, [pc, #80]	; (8002654 <MX_I2C1_Init+0x74>)
 8002604:	2200      	movs	r2, #0
 8002606:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <MX_I2C1_Init+0x74>)
 800260a:	2200      	movs	r2, #0
 800260c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <MX_I2C1_Init+0x74>)
 8002610:	2200      	movs	r2, #0
 8002612:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002614:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <MX_I2C1_Init+0x74>)
 8002616:	2200      	movs	r2, #0
 8002618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <MX_I2C1_Init+0x74>)
 800261c:	0018      	movs	r0, r3
 800261e:	f000 fe3b 	bl	8003298 <HAL_I2C_Init>
 8002622:	1e03      	subs	r3, r0, #0
 8002624:	d001      	beq.n	800262a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002626:	f000 f89b 	bl	8002760 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <MX_I2C1_Init+0x74>)
 800262c:	2100      	movs	r1, #0
 800262e:	0018      	movs	r0, r3
 8002630:	f001 fabc 	bl	8003bac <HAL_I2CEx_ConfigAnalogFilter>
 8002634:	1e03      	subs	r3, r0, #0
 8002636:	d001      	beq.n	800263c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002638:	f000 f892 	bl	8002760 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <MX_I2C1_Init+0x74>)
 800263e:	2100      	movs	r1, #0
 8002640:	0018      	movs	r0, r3
 8002642:	f001 faff 	bl	8003c44 <HAL_I2CEx_ConfigDigitalFilter>
 8002646:	1e03      	subs	r3, r0, #0
 8002648:	d001      	beq.n	800264e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800264a:	f000 f889 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	200003f0 	.word	0x200003f0
 8002658:	40005400 	.word	0x40005400
 800265c:	2000090e 	.word	0x2000090e

08002660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002666:	240c      	movs	r4, #12
 8002668:	193b      	adds	r3, r7, r4
 800266a:	0018      	movs	r0, r3
 800266c:	2314      	movs	r3, #20
 800266e:	001a      	movs	r2, r3
 8002670:	2100      	movs	r1, #0
 8002672:	f002 fb8e 	bl	8004d92 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002676:	4b2f      	ldr	r3, [pc, #188]	; (8002734 <MX_GPIO_Init+0xd4>)
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <MX_GPIO_Init+0xd4>)
 800267c:	2180      	movs	r1, #128	; 0x80
 800267e:	03c9      	lsls	r1, r1, #15
 8002680:	430a      	orrs	r2, r1
 8002682:	615a      	str	r2, [r3, #20]
 8002684:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <MX_GPIO_Init+0xd4>)
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	03db      	lsls	r3, r3, #15
 800268c:	4013      	ands	r3, r2
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	4b28      	ldr	r3, [pc, #160]	; (8002734 <MX_GPIO_Init+0xd4>)
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	4b27      	ldr	r3, [pc, #156]	; (8002734 <MX_GPIO_Init+0xd4>)
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	0289      	lsls	r1, r1, #10
 800269c:	430a      	orrs	r2, r1
 800269e:	615a      	str	r2, [r3, #20]
 80026a0:	4b24      	ldr	r3, [pc, #144]	; (8002734 <MX_GPIO_Init+0xd4>)
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	029b      	lsls	r3, r3, #10
 80026a8:	4013      	ands	r3, r2
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ae:	4b21      	ldr	r3, [pc, #132]	; (8002734 <MX_GPIO_Init+0xd4>)
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <MX_GPIO_Init+0xd4>)
 80026b4:	2180      	movs	r1, #128	; 0x80
 80026b6:	02c9      	lsls	r1, r1, #11
 80026b8:	430a      	orrs	r2, r1
 80026ba:	615a      	str	r2, [r3, #20]
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <MX_GPIO_Init+0xd4>)
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	02db      	lsls	r3, r3, #11
 80026c4:	4013      	ands	r3, r2
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80026ca:	2390      	movs	r3, #144	; 0x90
 80026cc:	05db      	lsls	r3, r3, #23
 80026ce:	2200      	movs	r2, #0
 80026d0:	2101      	movs	r1, #1
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 fdc2 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026d8:	193b      	adds	r3, r7, r4
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026de:	193b      	adds	r3, r7, r4
 80026e0:	2201      	movs	r2, #1
 80026e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	193b      	adds	r3, r7, r4
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	193b      	adds	r3, r7, r4
 80026ec:	2200      	movs	r2, #0
 80026ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f0:	193a      	adds	r2, r7, r4
 80026f2:	2390      	movs	r3, #144	; 0x90
 80026f4:	05db      	lsls	r3, r3, #23
 80026f6:	0011      	movs	r1, r2
 80026f8:	0018      	movs	r0, r3
 80026fa:	f000 fc47 	bl	8002f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80026fe:	0021      	movs	r1, r4
 8002700:	187b      	adds	r3, r7, r1
 8002702:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <MX_GPIO_Init+0xd8>)
 8002704:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2202      	movs	r2, #2
 800270a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	187b      	adds	r3, r7, r1
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002712:	187b      	adds	r3, r7, r1
 8002714:	2203      	movs	r2, #3
 8002716:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002718:	187b      	adds	r3, r7, r1
 800271a:	2201      	movs	r2, #1
 800271c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271e:	187a      	adds	r2, r7, r1
 8002720:	2390      	movs	r3, #144	; 0x90
 8002722:	05db      	lsls	r3, r3, #23
 8002724:	0011      	movs	r1, r2
 8002726:	0018      	movs	r0, r3
 8002728:	f000 fc30 	bl	8002f8c <HAL_GPIO_Init>

}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b009      	add	sp, #36	; 0x24
 8002732:	bd90      	pop	{r4, r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	00008004 	.word	0x00008004

0800273c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a04      	ldr	r2, [pc, #16]	; (800275c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d101      	bne.n	8002752 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800274e:	f000 fb31 	bl	8002db4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	b002      	add	sp, #8
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	40012c00 	.word	0x40012c00

08002760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <init_matrix>:
#include <string.h>

uint8_t* active_fbuf;
uint8_t* next_fbuf;

int init_matrix(I2C_HandleTypeDef* i2c){
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b087      	sub	sp, #28
 8002770:	af02      	add	r7, sp, #8
 8002772:	6078      	str	r0, [r7, #4]
	// Set up the next and active fbuf pointers
	active_fbuf = fbuf0;
 8002774:	4b36      	ldr	r3, [pc, #216]	; (8002850 <init_matrix+0xe4>)
 8002776:	4a37      	ldr	r2, [pc, #220]	; (8002854 <init_matrix+0xe8>)
 8002778:	601a      	str	r2, [r3, #0]
	next_fbuf = fbuf1;
 800277a:	4b37      	ldr	r3, [pc, #220]	; (8002858 <init_matrix+0xec>)
 800277c:	4a37      	ldr	r2, [pc, #220]	; (800285c <init_matrix+0xf0>)
 800277e:	601a      	str	r2, [r3, #0]
	// Clear the frame buffers
	clear_fbuf();
 8002780:	f000 f95a 	bl	8002a38 <clear_fbuf>
	// Turn on the GPIO that controls the shutdown register for the matrix
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8002784:	2390      	movs	r3, #144	; 0x90
 8002786:	05db      	lsls	r3, r3, #23
 8002788:	2201      	movs	r2, #1
 800278a:	2101      	movs	r1, #1
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fd65 	bl	800325c <HAL_GPIO_WritePin>

	// Set command register to point to function register
	uint8_t dat[2] = {0xfd, 0x0b};
 8002792:	210c      	movs	r1, #12
 8002794:	187b      	adds	r3, r7, r1
 8002796:	4a32      	ldr	r2, [pc, #200]	; (8002860 <init_matrix+0xf4>)
 8002798:	8812      	ldrh	r2, [r2, #0]
 800279a:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 800279c:	000c      	movs	r4, r1
 800279e:	187a      	adds	r2, r7, r1
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	2301      	movs	r3, #1
 80027a4:	425b      	negs	r3, r3
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	2302      	movs	r3, #2
 80027aa:	21e8      	movs	r1, #232	; 0xe8
 80027ac:	f000 fe0a 	bl	80033c4 <HAL_I2C_Master_Transmit>

	// Bring matrix out of shutdown, write a 1 to shutdown register
	dat[0] = 0xa;
 80027b0:	0021      	movs	r1, r4
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	220a      	movs	r2, #10
 80027b6:	701a      	strb	r2, [r3, #0]
	dat[1] = 0x1;
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	2201      	movs	r2, #1
 80027bc:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 80027be:	000c      	movs	r4, r1
 80027c0:	187a      	adds	r2, r7, r1
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	2301      	movs	r3, #1
 80027c6:	425b      	negs	r3, r3
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2302      	movs	r3, #2
 80027cc:	21e8      	movs	r1, #232	; 0xe8
 80027ce:	f000 fdf9 	bl	80033c4 <HAL_I2C_Master_Transmit>

	// Set command register to point to frame 1 register
	dat[0] = 0xfd;
 80027d2:	0021      	movs	r1, r4
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	22fd      	movs	r2, #253	; 0xfd
 80027d8:	701a      	strb	r2, [r3, #0]
	dat[1] = 0x00;
 80027da:	187b      	adds	r3, r7, r1
 80027dc:	2200      	movs	r2, #0
 80027de:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 80027e0:	187a      	adds	r2, r7, r1
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	2301      	movs	r3, #1
 80027e6:	425b      	negs	r3, r3
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	2302      	movs	r3, #2
 80027ec:	21e8      	movs	r1, #232	; 0xe8
 80027ee:	f000 fde9 	bl	80033c4 <HAL_I2C_Master_Transmit>

	// Set all the LEDs to on
	for(uint8_t i = 0; i < 0x12; i++){
 80027f2:	230f      	movs	r3, #15
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e016      	b.n	800282a <init_matrix+0xbe>
	  dat[0] = i;
 80027fc:	210c      	movs	r1, #12
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	240f      	movs	r4, #15
 8002802:	193a      	adds	r2, r7, r4
 8002804:	7812      	ldrb	r2, [r2, #0]
 8002806:	701a      	strb	r2, [r3, #0]
	  dat[1] = 0xFF;
 8002808:	187b      	adds	r3, r7, r1
 800280a:	22ff      	movs	r2, #255	; 0xff
 800280c:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 800280e:	187a      	adds	r2, r7, r1
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	2301      	movs	r3, #1
 8002814:	425b      	negs	r3, r3
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2302      	movs	r3, #2
 800281a:	21e8      	movs	r1, #232	; 0xe8
 800281c:	f000 fdd2 	bl	80033c4 <HAL_I2C_Master_Transmit>
	for(uint8_t i = 0; i < 0x12; i++){
 8002820:	193b      	adds	r3, r7, r4
 8002822:	781a      	ldrb	r2, [r3, #0]
 8002824:	193b      	adds	r3, r7, r4
 8002826:	3201      	adds	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	230f      	movs	r3, #15
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b11      	cmp	r3, #17
 8002832:	d9e3      	bls.n	80027fc <init_matrix+0x90>
	}
	// Initialize the LEDs with the cleared frame buffer
	HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, send_fbuf, 145, HAL_MAX_DELAY);
 8002834:	4a0b      	ldr	r2, [pc, #44]	; (8002864 <init_matrix+0xf8>)
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	2301      	movs	r3, #1
 800283a:	425b      	negs	r3, r3
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2391      	movs	r3, #145	; 0x91
 8002840:	21e8      	movs	r1, #232	; 0xe8
 8002842:	f000 fdbf 	bl	80033c4 <HAL_I2C_Master_Transmit>
	// Set the I2C as ready
	return MTX_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b005      	add	sp, #20
 800284e:	bd90      	pop	{r4, r7, pc}
 8002850:	20000324 	.word	0x20000324
 8002854:	20000290 	.word	0x20000290
 8002858:	2000043c 	.word	0x2000043c
 800285c:	20000200 	.word	0x20000200
 8002860:	0800686c 	.word	0x0800686c
 8002864:	20000328 	.word	0x20000328

08002868 <update_fbuf>:

int update_fbuf(I2C_HandleTypeDef* i2c){
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af02      	add	r7, sp, #8
 800286e:	6078      	str	r0, [r7, #4]
	// Transform the fbuf so it gets displayed properly
	transform_fbuf();
 8002870:	f000 f826 	bl	80028c0 <transform_fbuf>
	// Send the new fbuf over to the matrix
	HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, send_fbuf, 145, HAL_MAX_DELAY);
 8002874:	4a0f      	ldr	r2, [pc, #60]	; (80028b4 <update_fbuf+0x4c>)
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	2301      	movs	r3, #1
 800287a:	425b      	negs	r3, r3
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	2391      	movs	r3, #145	; 0x91
 8002880:	21e8      	movs	r1, #232	; 0xe8
 8002882:	f000 fd9f 	bl	80033c4 <HAL_I2C_Master_Transmit>
	// Swap the next and active fbuf pointers
	uint8_t *tmp = next_fbuf;
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <update_fbuf+0x50>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60fb      	str	r3, [r7, #12]
	next_fbuf = active_fbuf;
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <update_fbuf+0x54>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <update_fbuf+0x50>)
 8002892:	601a      	str	r2, [r3, #0]
	active_fbuf = tmp;
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <update_fbuf+0x54>)
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	601a      	str	r2, [r3, #0]
	memset(next_fbuf, 0, 144);
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <update_fbuf+0x50>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2290      	movs	r2, #144	; 0x90
 80028a0:	2100      	movs	r1, #0
 80028a2:	0018      	movs	r0, r3
 80028a4:	f002 fa75 	bl	8004d92 <memset>
	return MTX_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	0018      	movs	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b004      	add	sp, #16
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	20000328 	.word	0x20000328
 80028b8:	2000043c 	.word	0x2000043c
 80028bc:	20000324 	.word	0x20000324

080028c0 <transform_fbuf>:

int transform_fbuf(){
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
	// Move the data in the fbuf around to handle the LED layout
	memcpy(send_fbuf + 1,   next_fbuf + 0 *  MTX_WIDTH, 8);
 80028c4:	4849      	ldr	r0, [pc, #292]	; (80029ec <transform_fbuf+0x12c>)
 80028c6:	4b4a      	ldr	r3, [pc, #296]	; (80029f0 <transform_fbuf+0x130>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2208      	movs	r2, #8
 80028cc:	0019      	movs	r1, r3
 80028ce:	f002 fa57 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 17,  next_fbuf + 1 *  MTX_WIDTH, 8);
 80028d2:	4848      	ldr	r0, [pc, #288]	; (80029f4 <transform_fbuf+0x134>)
 80028d4:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <transform_fbuf+0x130>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3308      	adds	r3, #8
 80028da:	2208      	movs	r2, #8
 80028dc:	0019      	movs	r1, r3
 80028de:	f002 fa4f 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 33,  next_fbuf + 2 *  MTX_WIDTH, 8);
 80028e2:	4845      	ldr	r0, [pc, #276]	; (80029f8 <transform_fbuf+0x138>)
 80028e4:	4b42      	ldr	r3, [pc, #264]	; (80029f0 <transform_fbuf+0x130>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	3310      	adds	r3, #16
 80028ea:	2208      	movs	r2, #8
 80028ec:	0019      	movs	r1, r3
 80028ee:	f002 fa47 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 49,  next_fbuf + 3 *  MTX_WIDTH, 8);
 80028f2:	4842      	ldr	r0, [pc, #264]	; (80029fc <transform_fbuf+0x13c>)
 80028f4:	4b3e      	ldr	r3, [pc, #248]	; (80029f0 <transform_fbuf+0x130>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3318      	adds	r3, #24
 80028fa:	2208      	movs	r2, #8
 80028fc:	0019      	movs	r1, r3
 80028fe:	f002 fa3f 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 65,  next_fbuf + 4 *  MTX_WIDTH, 8);
 8002902:	483f      	ldr	r0, [pc, #252]	; (8002a00 <transform_fbuf+0x140>)
 8002904:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <transform_fbuf+0x130>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3320      	adds	r3, #32
 800290a:	2208      	movs	r2, #8
 800290c:	0019      	movs	r1, r3
 800290e:	f002 fa37 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 81,  next_fbuf + 5 *  MTX_WIDTH, 8);
 8002912:	483c      	ldr	r0, [pc, #240]	; (8002a04 <transform_fbuf+0x144>)
 8002914:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <transform_fbuf+0x130>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3328      	adds	r3, #40	; 0x28
 800291a:	2208      	movs	r2, #8
 800291c:	0019      	movs	r1, r3
 800291e:	f002 fa2f 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 97,  next_fbuf + 6 *  MTX_WIDTH, 8);
 8002922:	4839      	ldr	r0, [pc, #228]	; (8002a08 <transform_fbuf+0x148>)
 8002924:	4b32      	ldr	r3, [pc, #200]	; (80029f0 <transform_fbuf+0x130>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3330      	adds	r3, #48	; 0x30
 800292a:	2208      	movs	r2, #8
 800292c:	0019      	movs	r1, r3
 800292e:	f002 fa27 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 113, next_fbuf + 7 *  MTX_WIDTH, 8);
 8002932:	4836      	ldr	r0, [pc, #216]	; (8002a0c <transform_fbuf+0x14c>)
 8002934:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <transform_fbuf+0x130>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3338      	adds	r3, #56	; 0x38
 800293a:	2208      	movs	r2, #8
 800293c:	0019      	movs	r1, r3
 800293e:	f002 fa1f 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 129, next_fbuf + 8 *  MTX_WIDTH, 8);
 8002942:	4833      	ldr	r0, [pc, #204]	; (8002a10 <transform_fbuf+0x150>)
 8002944:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <transform_fbuf+0x130>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3340      	adds	r3, #64	; 0x40
 800294a:	2208      	movs	r2, #8
 800294c:	0019      	movs	r1, r3
 800294e:	f002 fa17 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 9,   next_fbuf + 9 *  MTX_WIDTH, 8);
 8002952:	4830      	ldr	r0, [pc, #192]	; (8002a14 <transform_fbuf+0x154>)
 8002954:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <transform_fbuf+0x130>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3348      	adds	r3, #72	; 0x48
 800295a:	2208      	movs	r2, #8
 800295c:	0019      	movs	r1, r3
 800295e:	f002 fa0f 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 25,  next_fbuf + 10 * MTX_WIDTH, 8);
 8002962:	482d      	ldr	r0, [pc, #180]	; (8002a18 <transform_fbuf+0x158>)
 8002964:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <transform_fbuf+0x130>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3350      	adds	r3, #80	; 0x50
 800296a:	2208      	movs	r2, #8
 800296c:	0019      	movs	r1, r3
 800296e:	f002 fa07 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 41,  next_fbuf + 11 * MTX_WIDTH, 8);
 8002972:	482a      	ldr	r0, [pc, #168]	; (8002a1c <transform_fbuf+0x15c>)
 8002974:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <transform_fbuf+0x130>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3358      	adds	r3, #88	; 0x58
 800297a:	2208      	movs	r2, #8
 800297c:	0019      	movs	r1, r3
 800297e:	f002 f9ff 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 57,  next_fbuf + 12 * MTX_WIDTH, 8);
 8002982:	4827      	ldr	r0, [pc, #156]	; (8002a20 <transform_fbuf+0x160>)
 8002984:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <transform_fbuf+0x130>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	3360      	adds	r3, #96	; 0x60
 800298a:	2208      	movs	r2, #8
 800298c:	0019      	movs	r1, r3
 800298e:	f002 f9f7 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 73,  next_fbuf + 13 * MTX_WIDTH, 8);
 8002992:	4824      	ldr	r0, [pc, #144]	; (8002a24 <transform_fbuf+0x164>)
 8002994:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <transform_fbuf+0x130>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3368      	adds	r3, #104	; 0x68
 800299a:	2208      	movs	r2, #8
 800299c:	0019      	movs	r1, r3
 800299e:	f002 f9ef 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 89,  next_fbuf + 14 * MTX_WIDTH, 8);
 80029a2:	4821      	ldr	r0, [pc, #132]	; (8002a28 <transform_fbuf+0x168>)
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <transform_fbuf+0x130>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3370      	adds	r3, #112	; 0x70
 80029aa:	2208      	movs	r2, #8
 80029ac:	0019      	movs	r1, r3
 80029ae:	f002 f9e7 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 105, next_fbuf + 15 * MTX_WIDTH, 8);
 80029b2:	481e      	ldr	r0, [pc, #120]	; (8002a2c <transform_fbuf+0x16c>)
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <transform_fbuf+0x130>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3378      	adds	r3, #120	; 0x78
 80029ba:	2208      	movs	r2, #8
 80029bc:	0019      	movs	r1, r3
 80029be:	f002 f9df 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 121, next_fbuf + 16 * MTX_WIDTH, 8);
 80029c2:	481b      	ldr	r0, [pc, #108]	; (8002a30 <transform_fbuf+0x170>)
 80029c4:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <transform_fbuf+0x130>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3380      	adds	r3, #128	; 0x80
 80029ca:	2208      	movs	r2, #8
 80029cc:	0019      	movs	r1, r3
 80029ce:	f002 f9d7 	bl	8004d80 <memcpy>
	memcpy(send_fbuf + 137, next_fbuf + 17 * MTX_WIDTH, 8);
 80029d2:	4818      	ldr	r0, [pc, #96]	; (8002a34 <transform_fbuf+0x174>)
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <transform_fbuf+0x130>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3388      	adds	r3, #136	; 0x88
 80029da:	2208      	movs	r2, #8
 80029dc:	0019      	movs	r1, r3
 80029de:	f002 f9cf 	bl	8004d80 <memcpy>
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	20000329 	.word	0x20000329
 80029f0:	2000043c 	.word	0x2000043c
 80029f4:	20000339 	.word	0x20000339
 80029f8:	20000349 	.word	0x20000349
 80029fc:	20000359 	.word	0x20000359
 8002a00:	20000369 	.word	0x20000369
 8002a04:	20000379 	.word	0x20000379
 8002a08:	20000389 	.word	0x20000389
 8002a0c:	20000399 	.word	0x20000399
 8002a10:	200003a9 	.word	0x200003a9
 8002a14:	20000331 	.word	0x20000331
 8002a18:	20000341 	.word	0x20000341
 8002a1c:	20000351 	.word	0x20000351
 8002a20:	20000361 	.word	0x20000361
 8002a24:	20000371 	.word	0x20000371
 8002a28:	20000381 	.word	0x20000381
 8002a2c:	20000391 	.word	0x20000391
 8002a30:	200003a1 	.word	0x200003a1
 8002a34:	200003b1 	.word	0x200003b1

08002a38 <clear_fbuf>:

int clear_fbuf(){
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
	// Clear the frame buffers that the matrix uses
	memset(fbuf0, 0, 144);
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <clear_fbuf+0x38>)
 8002a3e:	2290      	movs	r2, #144	; 0x90
 8002a40:	2100      	movs	r1, #0
 8002a42:	0018      	movs	r0, r3
 8002a44:	f002 f9a5 	bl	8004d92 <memset>
	memset(fbuf1, 0, 144);
 8002a48:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <clear_fbuf+0x3c>)
 8002a4a:	2290      	movs	r2, #144	; 0x90
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f002 f99f 	bl	8004d92 <memset>
	memset(send_fbuf, 0, 145);
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <clear_fbuf+0x40>)
 8002a56:	2291      	movs	r2, #145	; 0x91
 8002a58:	2100      	movs	r1, #0
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f002 f999 	bl	8004d92 <memset>
	// Set the first address of the frame buffer to the address of the first
	// PWM register. This makes transmitting easier
	send_fbuf[0] = MTX_FBUF_ADDR;
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <clear_fbuf+0x40>)
 8002a62:	2224      	movs	r2, #36	; 0x24
 8002a64:	701a      	strb	r2, [r3, #0]
	return MTX_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	0018      	movs	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	20000290 	.word	0x20000290
 8002a74:	20000200 	.word	0x20000200
 8002a78:	20000328 	.word	0x20000328

08002a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a82:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <HAL_MspInit+0x44>)
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <HAL_MspInit+0x44>)
 8002a88:	2101      	movs	r1, #1
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	619a      	str	r2, [r3, #24]
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <HAL_MspInit+0x44>)
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2201      	movs	r2, #1
 8002a94:	4013      	ands	r3, r2
 8002a96:	607b      	str	r3, [r7, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_MspInit+0x44>)
 8002a9c:	69da      	ldr	r2, [r3, #28]
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <HAL_MspInit+0x44>)
 8002aa0:	2180      	movs	r1, #128	; 0x80
 8002aa2:	0549      	lsls	r1, r1, #21
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	61da      	str	r2, [r3, #28]
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_MspInit+0x44>)
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	055b      	lsls	r3, r3, #21
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b002      	add	sp, #8
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b08b      	sub	sp, #44	; 0x2c
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	2314      	movs	r3, #20
 8002ace:	18fb      	adds	r3, r7, r3
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	2314      	movs	r3, #20
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	f002 f95b 	bl	8004d92 <memset>
  if(hi2c->Instance==I2C1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a2f      	ldr	r2, [pc, #188]	; (8002ba0 <HAL_I2C_MspInit+0xdc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d158      	bne.n	8002b98 <HAL_I2C_MspInit+0xd4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	4b2e      	ldr	r3, [pc, #184]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	0289      	lsls	r1, r1, #10
 8002af0:	430a      	orrs	r2, r1
 8002af2:	615a      	str	r2, [r3, #20]
 8002af4:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	029b      	lsls	r3, r3, #10
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b02:	4b28      	ldr	r3, [pc, #160]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	02c9      	lsls	r1, r1, #11
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	615a      	str	r2, [r3, #20]
 8002b10:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002b12:	695a      	ldr	r2, [r3, #20]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	02db      	lsls	r3, r3, #11
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b1e:	2114      	movs	r1, #20
 8002b20:	187b      	adds	r3, r7, r1
 8002b22:	2280      	movs	r2, #128	; 0x80
 8002b24:	00d2      	lsls	r2, r2, #3
 8002b26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b28:	000c      	movs	r4, r1
 8002b2a:	193b      	adds	r3, r7, r4
 8002b2c:	2212      	movs	r2, #18
 8002b2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b30:	193b      	adds	r3, r7, r4
 8002b32:	2201      	movs	r2, #1
 8002b34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b36:	193b      	adds	r3, r7, r4
 8002b38:	2203      	movs	r2, #3
 8002b3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b3c:	193b      	adds	r3, r7, r4
 8002b3e:	2204      	movs	r2, #4
 8002b40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b42:	193a      	adds	r2, r7, r4
 8002b44:	2390      	movs	r3, #144	; 0x90
 8002b46:	05db      	lsls	r3, r3, #23
 8002b48:	0011      	movs	r1, r2
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 fa1e 	bl	8002f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b50:	0021      	movs	r1, r4
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2240      	movs	r2, #64	; 0x40
 8002b56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	2212      	movs	r2, #18
 8002b5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2201      	movs	r2, #1
 8002b62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	2203      	movs	r2, #3
 8002b68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b70:	187b      	adds	r3, r7, r1
 8002b72:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <HAL_I2C_MspInit+0xe4>)
 8002b74:	0019      	movs	r1, r3
 8002b76:	0010      	movs	r0, r2
 8002b78:	f000 fa08 	bl	8002f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002b7e:	69da      	ldr	r2, [r3, #28]
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002b82:	2180      	movs	r1, #128	; 0x80
 8002b84:	0389      	lsls	r1, r1, #14
 8002b86:	430a      	orrs	r2, r1
 8002b88:	61da      	str	r2, [r3, #28]
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	039b      	lsls	r3, r3, #14
 8002b92:	4013      	ands	r3, r2
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b00b      	add	sp, #44	; 0x2c
 8002b9e:	bd90      	pop	{r4, r7, pc}
 8002ba0:	40005400 	.word	0x40005400
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	48000400 	.word	0x48000400

08002bac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	200d      	movs	r0, #13
 8002bc4:	f000 f9bc 	bl	8002f40 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 8002bc8:	200d      	movs	r0, #13
 8002bca:	f000 f9ce 	bl	8002f6a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002bce:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <HAL_InitTick+0xa8>)
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <HAL_InitTick+0xa8>)
 8002bd4:	2180      	movs	r1, #128	; 0x80
 8002bd6:	0109      	lsls	r1, r1, #4
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	619a      	str	r2, [r3, #24]
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <HAL_InitTick+0xa8>)
 8002bde:	699a      	ldr	r2, [r3, #24]
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	4013      	ands	r3, r2
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bea:	230c      	movs	r3, #12
 8002bec:	18fa      	adds	r2, r7, r3
 8002bee:	2310      	movs	r3, #16
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	0011      	movs	r1, r2
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f001 fd6f 	bl	80046d8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bfa:	f001 fd57 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	4914      	ldr	r1, [pc, #80]	; (8002c58 <HAL_InitTick+0xac>)
 8002c06:	0018      	movs	r0, r3
 8002c08:	f7fd fa90 	bl	800012c <__udivsi3>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002c12:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_InitTick+0xb0>)
 8002c14:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <HAL_InitTick+0xb4>)
 8002c16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002c18:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_InitTick+0xb0>)
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <HAL_InitTick+0xb8>)
 8002c1c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <HAL_InitTick+0xb0>)
 8002c20:	6a3a      	ldr	r2, [r7, #32]
 8002c22:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8002c24:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <HAL_InitTick+0xb0>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_InitTick+0xb0>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002c30:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <HAL_InitTick+0xb0>)
 8002c32:	0018      	movs	r0, r3
 8002c34:	f001 fe68 	bl	8004908 <HAL_TIM_Base_Init>
 8002c38:	1e03      	subs	r3, r0, #0
 8002c3a:	d105      	bne.n	8002c48 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002c3c:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <HAL_InitTick+0xb0>)
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f001 fe96 	bl	8004970 <HAL_TIM_Base_Start_IT>
 8002c44:	0003      	movs	r3, r0
 8002c46:	e000      	b.n	8002c4a <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
}
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b00a      	add	sp, #40	; 0x28
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	40021000 	.word	0x40021000
 8002c58:	000f4240 	.word	0x000f4240
 8002c5c:	20000440 	.word	0x20000440
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	000003e7 	.word	0x000003e7

08002c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <HardFault_Handler+0x4>

08002c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c7c:	46c0      	nop			; (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002c92:	0018      	movs	r0, r3
 8002c94:	f001 fe8e 	bl	80049b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002c98:	46c0      	nop			; (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	20000440 	.word	0x20000440

08002ca4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002cac:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <_sbrk+0x50>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d102      	bne.n	8002cba <_sbrk+0x16>
		heap_end = &end;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <_sbrk+0x50>)
 8002cb6:	4a10      	ldr	r2, [pc, #64]	; (8002cf8 <_sbrk+0x54>)
 8002cb8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <_sbrk+0x50>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <_sbrk+0x50>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	18d3      	adds	r3, r2, r3
 8002cc8:	466a      	mov	r2, sp
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d907      	bls.n	8002cde <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002cce:	f002 f82d 	bl	8004d2c <__errno>
 8002cd2:	0003      	movs	r3, r0
 8002cd4:	220c      	movs	r2, #12
 8002cd6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	425b      	negs	r3, r3
 8002cdc:	e006      	b.n	8002cec <_sbrk+0x48>
	}

	heap_end += incr;
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <_sbrk+0x50>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	18d2      	adds	r2, r2, r3
 8002ce6:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <_sbrk+0x50>)
 8002ce8:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b004      	add	sp, #16
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	200001f4 	.word	0x200001f4
 8002cf8:	20000488 	.word	0x20000488

08002cfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d08:	4813      	ldr	r0, [pc, #76]	; (8002d58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d0a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002d0c:	4813      	ldr	r0, [pc, #76]	; (8002d5c <LoopForever+0x6>)
    LDR R1, [R0]
 8002d0e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002d10:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002d12:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <LoopForever+0xa>)
    CMP R1, R2
 8002d14:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002d16:	d105      	bne.n	8002d24 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002d18:	4812      	ldr	r0, [pc, #72]	; (8002d64 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002d1a:	4913      	ldr	r1, [pc, #76]	; (8002d68 <LoopForever+0x12>)
    STR R1, [R0]
 8002d1c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002d1e:	4813      	ldr	r0, [pc, #76]	; (8002d6c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002d20:	4913      	ldr	r1, [pc, #76]	; (8002d70 <LoopForever+0x1a>)
    STR R1, [R0]
 8002d22:	6001      	str	r1, [r0, #0]

08002d24 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d24:	4813      	ldr	r0, [pc, #76]	; (8002d74 <LoopForever+0x1e>)
  ldr r1, =_edata
 8002d26:	4914      	ldr	r1, [pc, #80]	; (8002d78 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002d28:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <LoopForever+0x26>)
  movs r3, #0
 8002d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d2c:	e002      	b.n	8002d34 <LoopCopyDataInit>

08002d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d32:	3304      	adds	r3, #4

08002d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d38:	d3f9      	bcc.n	8002d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3a:	4a11      	ldr	r2, [pc, #68]	; (8002d80 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002d3c:	4c11      	ldr	r4, [pc, #68]	; (8002d84 <LoopForever+0x2e>)
  movs r3, #0
 8002d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d40:	e001      	b.n	8002d46 <LoopFillZerobss>

08002d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d44:	3204      	adds	r2, #4

08002d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d48:	d3fb      	bcc.n	8002d42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d4a:	f7ff ffd7 	bl	8002cfc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d4e:	f001 fff3 	bl	8004d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d52:	f7ff fbcf 	bl	80024f4 <main>

08002d56 <LoopForever>:

LoopForever:
    b LoopForever
 8002d56:	e7fe      	b.n	8002d56 <LoopForever>
  ldr   r0, =_estack
 8002d58:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002d5c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002d60:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002d64:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002d68:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002d6c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002d70:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d78:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002d7c:	08006b58 	.word	0x08006b58
  ldr r2, =_sbss
 8002d80:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002d84:	20000488 	.word	0x20000488

08002d88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d88:	e7fe      	b.n	8002d88 <ADC1_IRQHandler>
	...

08002d8c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d90:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <HAL_Init+0x24>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_Init+0x24>)
 8002d96:	2110      	movs	r1, #16
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7ff ff05 	bl	8002bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da2:	f7ff fe6b 	bl	8002a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	40022000 	.word	0x40022000

08002db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_IncTick+0x1c>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	001a      	movs	r2, r3
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_IncTick+0x20>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	18d2      	adds	r2, r2, r3
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <HAL_IncTick+0x20>)
 8002dc6:	601a      	str	r2, [r3, #0]
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	20000004 	.word	0x20000004
 8002dd4:	20000480 	.word	0x20000480

08002dd8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  return uwTick;
 8002ddc:	4b02      	ldr	r3, [pc, #8]	; (8002de8 <HAL_GetTick+0x10>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	20000480 	.word	0x20000480

08002dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df4:	f7ff fff0 	bl	8002dd8 <HAL_GetTick>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3301      	adds	r3, #1
 8002e04:	d005      	beq.n	8002e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_Delay+0x40>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	001a      	movs	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	189b      	adds	r3, r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	f7ff ffe0 	bl	8002dd8 <HAL_GetTick>
 8002e18:	0002      	movs	r2, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d8f7      	bhi.n	8002e14 <HAL_Delay+0x28>
  {
  }
}
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b004      	add	sp, #16
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000004 	.word	0x20000004

08002e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	0002      	movs	r2, r0
 8002e38:	1dfb      	adds	r3, r7, #7
 8002e3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	1dfb      	adds	r3, r7, #7
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b7f      	cmp	r3, #127	; 0x7f
 8002e42:	d809      	bhi.n	8002e58 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e44:	1dfb      	adds	r3, r7, #7
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	001a      	movs	r2, r3
 8002e4a:	231f      	movs	r3, #31
 8002e4c:	401a      	ands	r2, r3
 8002e4e:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <__NVIC_EnableIRQ+0x30>)
 8002e50:	2101      	movs	r1, #1
 8002e52:	4091      	lsls	r1, r2
 8002e54:	000a      	movs	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]
  }
}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	e000e100 	.word	0xe000e100

08002e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	6039      	str	r1, [r7, #0]
 8002e6e:	1dfb      	adds	r3, r7, #7
 8002e70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e72:	1dfb      	adds	r3, r7, #7
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b7f      	cmp	r3, #127	; 0x7f
 8002e78:	d828      	bhi.n	8002ecc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e7a:	4a2f      	ldr	r2, [pc, #188]	; (8002f38 <__NVIC_SetPriority+0xd4>)
 8002e7c:	1dfb      	adds	r3, r7, #7
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	b25b      	sxtb	r3, r3
 8002e82:	089b      	lsrs	r3, r3, #2
 8002e84:	33c0      	adds	r3, #192	; 0xc0
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	589b      	ldr	r3, [r3, r2]
 8002e8a:	1dfa      	adds	r2, r7, #7
 8002e8c:	7812      	ldrb	r2, [r2, #0]
 8002e8e:	0011      	movs	r1, r2
 8002e90:	2203      	movs	r2, #3
 8002e92:	400a      	ands	r2, r1
 8002e94:	00d2      	lsls	r2, r2, #3
 8002e96:	21ff      	movs	r1, #255	; 0xff
 8002e98:	4091      	lsls	r1, r2
 8002e9a:	000a      	movs	r2, r1
 8002e9c:	43d2      	mvns	r2, r2
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	019b      	lsls	r3, r3, #6
 8002ea6:	22ff      	movs	r2, #255	; 0xff
 8002ea8:	401a      	ands	r2, r3
 8002eaa:	1dfb      	adds	r3, r7, #7
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	0018      	movs	r0, r3
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	4003      	ands	r3, r0
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eb8:	481f      	ldr	r0, [pc, #124]	; (8002f38 <__NVIC_SetPriority+0xd4>)
 8002eba:	1dfb      	adds	r3, r7, #7
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	b25b      	sxtb	r3, r3
 8002ec0:	089b      	lsrs	r3, r3, #2
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	33c0      	adds	r3, #192	; 0xc0
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002eca:	e031      	b.n	8002f30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ecc:	4a1b      	ldr	r2, [pc, #108]	; (8002f3c <__NVIC_SetPriority+0xd8>)
 8002ece:	1dfb      	adds	r3, r7, #7
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	230f      	movs	r3, #15
 8002ed6:	400b      	ands	r3, r1
 8002ed8:	3b08      	subs	r3, #8
 8002eda:	089b      	lsrs	r3, r3, #2
 8002edc:	3306      	adds	r3, #6
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	18d3      	adds	r3, r2, r3
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	1dfa      	adds	r2, r7, #7
 8002ee8:	7812      	ldrb	r2, [r2, #0]
 8002eea:	0011      	movs	r1, r2
 8002eec:	2203      	movs	r2, #3
 8002eee:	400a      	ands	r2, r1
 8002ef0:	00d2      	lsls	r2, r2, #3
 8002ef2:	21ff      	movs	r1, #255	; 0xff
 8002ef4:	4091      	lsls	r1, r2
 8002ef6:	000a      	movs	r2, r1
 8002ef8:	43d2      	mvns	r2, r2
 8002efa:	401a      	ands	r2, r3
 8002efc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	019b      	lsls	r3, r3, #6
 8002f02:	22ff      	movs	r2, #255	; 0xff
 8002f04:	401a      	ands	r2, r3
 8002f06:	1dfb      	adds	r3, r7, #7
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	4003      	ands	r3, r0
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f14:	4809      	ldr	r0, [pc, #36]	; (8002f3c <__NVIC_SetPriority+0xd8>)
 8002f16:	1dfb      	adds	r3, r7, #7
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	001c      	movs	r4, r3
 8002f1c:	230f      	movs	r3, #15
 8002f1e:	4023      	ands	r3, r4
 8002f20:	3b08      	subs	r3, #8
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	430a      	orrs	r2, r1
 8002f26:	3306      	adds	r3, #6
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	18c3      	adds	r3, r0, r3
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	601a      	str	r2, [r3, #0]
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b003      	add	sp, #12
 8002f36:	bd90      	pop	{r4, r7, pc}
 8002f38:	e000e100 	.word	0xe000e100
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	210f      	movs	r1, #15
 8002f4c:	187b      	adds	r3, r7, r1
 8002f4e:	1c02      	adds	r2, r0, #0
 8002f50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	187b      	adds	r3, r7, r1
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	b25b      	sxtb	r3, r3
 8002f5a:	0011      	movs	r1, r2
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7ff ff81 	bl	8002e64 <__NVIC_SetPriority>
}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b004      	add	sp, #16
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	0002      	movs	r2, r0
 8002f72:	1dfb      	adds	r3, r7, #7
 8002f74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f76:	1dfb      	adds	r3, r7, #7
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	b25b      	sxtb	r3, r3
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f7ff ff57 	bl	8002e30 <__NVIC_EnableIRQ>
}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b002      	add	sp, #8
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f9a:	e149      	b.n	8003230 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4091      	lsls	r1, r2
 8002fa6:	000a      	movs	r2, r1
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d100      	bne.n	8002fb4 <HAL_GPIO_Init+0x28>
 8002fb2:	e13a      	b.n	800322a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x38>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b12      	cmp	r3, #18
 8002fc2:	d123      	bne.n	800300c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	08da      	lsrs	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3208      	adds	r2, #8
 8002fcc:	0092      	lsls	r2, r2, #2
 8002fce:	58d3      	ldr	r3, [r2, r3]
 8002fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	220f      	movs	r2, #15
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	0013      	movs	r3, r2
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2107      	movs	r1, #7
 8002ff0:	400b      	ands	r3, r1
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	0013      	movs	r3, r2
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	08da      	lsrs	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3208      	adds	r2, #8
 8003006:	0092      	lsls	r2, r2, #2
 8003008:	6939      	ldr	r1, [r7, #16]
 800300a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	409a      	lsls	r2, r3
 800301a:	0013      	movs	r3, r2
 800301c:	43da      	mvns	r2, r3
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2203      	movs	r2, #3
 800302a:	401a      	ands	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	409a      	lsls	r2, r3
 8003032:	0013      	movs	r3, r2
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d00b      	beq.n	8003060 <HAL_GPIO_Init+0xd4>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d007      	beq.n	8003060 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003054:	2b11      	cmp	r3, #17
 8003056:	d003      	beq.n	8003060 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b12      	cmp	r3, #18
 800305e:	d130      	bne.n	80030c2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	409a      	lsls	r2, r3
 800306e:	0013      	movs	r3, r2
 8003070:	43da      	mvns	r2, r3
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4013      	ands	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	409a      	lsls	r2, r3
 8003082:	0013      	movs	r3, r2
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003096:	2201      	movs	r2, #1
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	409a      	lsls	r2, r3
 800309c:	0013      	movs	r3, r2
 800309e:	43da      	mvns	r2, r3
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	2201      	movs	r2, #1
 80030ae:	401a      	ands	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	409a      	lsls	r2, r3
 80030b4:	0013      	movs	r3, r2
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	2203      	movs	r2, #3
 80030ce:	409a      	lsls	r2, r3
 80030d0:	0013      	movs	r3, r2
 80030d2:	43da      	mvns	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	409a      	lsls	r2, r3
 80030e4:	0013      	movs	r3, r2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	055b      	lsls	r3, r3, #21
 80030fa:	4013      	ands	r3, r2
 80030fc:	d100      	bne.n	8003100 <HAL_GPIO_Init+0x174>
 80030fe:	e094      	b.n	800322a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003100:	4b51      	ldr	r3, [pc, #324]	; (8003248 <HAL_GPIO_Init+0x2bc>)
 8003102:	699a      	ldr	r2, [r3, #24]
 8003104:	4b50      	ldr	r3, [pc, #320]	; (8003248 <HAL_GPIO_Init+0x2bc>)
 8003106:	2101      	movs	r1, #1
 8003108:	430a      	orrs	r2, r1
 800310a:	619a      	str	r2, [r3, #24]
 800310c:	4b4e      	ldr	r3, [pc, #312]	; (8003248 <HAL_GPIO_Init+0x2bc>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2201      	movs	r2, #1
 8003112:	4013      	ands	r3, r2
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003118:	4a4c      	ldr	r2, [pc, #304]	; (800324c <HAL_GPIO_Init+0x2c0>)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	3302      	adds	r3, #2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	589b      	ldr	r3, [r3, r2]
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2203      	movs	r2, #3
 800312a:	4013      	ands	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	220f      	movs	r2, #15
 8003130:	409a      	lsls	r2, r3
 8003132:	0013      	movs	r3, r2
 8003134:	43da      	mvns	r2, r3
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	2390      	movs	r3, #144	; 0x90
 8003140:	05db      	lsls	r3, r3, #23
 8003142:	429a      	cmp	r2, r3
 8003144:	d00d      	beq.n	8003162 <HAL_GPIO_Init+0x1d6>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a41      	ldr	r2, [pc, #260]	; (8003250 <HAL_GPIO_Init+0x2c4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d007      	beq.n	800315e <HAL_GPIO_Init+0x1d2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a40      	ldr	r2, [pc, #256]	; (8003254 <HAL_GPIO_Init+0x2c8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_GPIO_Init+0x1ce>
 8003156:	2302      	movs	r3, #2
 8003158:	e004      	b.n	8003164 <HAL_GPIO_Init+0x1d8>
 800315a:	2305      	movs	r3, #5
 800315c:	e002      	b.n	8003164 <HAL_GPIO_Init+0x1d8>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <HAL_GPIO_Init+0x1d8>
 8003162:	2300      	movs	r3, #0
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	2103      	movs	r1, #3
 8003168:	400a      	ands	r2, r1
 800316a:	0092      	lsls	r2, r2, #2
 800316c:	4093      	lsls	r3, r2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003174:	4935      	ldr	r1, [pc, #212]	; (800324c <HAL_GPIO_Init+0x2c0>)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	3302      	adds	r3, #2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003182:	4b35      	ldr	r3, [pc, #212]	; (8003258 <HAL_GPIO_Init+0x2cc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	43da      	mvns	r2, r3
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	025b      	lsls	r3, r3, #9
 800319a:	4013      	ands	r3, r2
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031a6:	4b2c      	ldr	r3, [pc, #176]	; (8003258 <HAL_GPIO_Init+0x2cc>)
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80031ac:	4b2a      	ldr	r3, [pc, #168]	; (8003258 <HAL_GPIO_Init+0x2cc>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	43da      	mvns	r2, r3
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	2380      	movs	r3, #128	; 0x80
 80031c2:	029b      	lsls	r3, r3, #10
 80031c4:	4013      	ands	r3, r2
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031d0:	4b21      	ldr	r3, [pc, #132]	; (8003258 <HAL_GPIO_Init+0x2cc>)
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_GPIO_Init+0x2cc>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	43da      	mvns	r2, r3
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	035b      	lsls	r3, r3, #13
 80031ee:	4013      	ands	r3, r2
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031fa:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_GPIO_Init+0x2cc>)
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003200:	4b15      	ldr	r3, [pc, #84]	; (8003258 <HAL_GPIO_Init+0x2cc>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	43da      	mvns	r2, r3
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	039b      	lsls	r3, r3, #14
 8003218:	4013      	ands	r3, r2
 800321a:	d003      	beq.n	8003224 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <HAL_GPIO_Init+0x2cc>)
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	3301      	adds	r3, #1
 800322e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	40da      	lsrs	r2, r3
 8003238:	1e13      	subs	r3, r2, #0
 800323a:	d000      	beq.n	800323e <HAL_GPIO_Init+0x2b2>
 800323c:	e6ae      	b.n	8002f9c <HAL_GPIO_Init+0x10>
  } 
}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	b006      	add	sp, #24
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	40021000 	.word	0x40021000
 800324c:	40010000 	.word	0x40010000
 8003250:	48000400 	.word	0x48000400
 8003254:	48000800 	.word	0x48000800
 8003258:	40010400 	.word	0x40010400

0800325c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	0008      	movs	r0, r1
 8003266:	0011      	movs	r1, r2
 8003268:	1cbb      	adds	r3, r7, #2
 800326a:	1c02      	adds	r2, r0, #0
 800326c:	801a      	strh	r2, [r3, #0]
 800326e:	1c7b      	adds	r3, r7, #1
 8003270:	1c0a      	adds	r2, r1, #0
 8003272:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003274:	1c7b      	adds	r3, r7, #1
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d004      	beq.n	8003286 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800327c:	1cbb      	adds	r3, r7, #2
 800327e:	881a      	ldrh	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003284:	e003      	b.n	800328e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003286:	1cbb      	adds	r3, r7, #2
 8003288:	881a      	ldrh	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	46bd      	mov	sp, r7
 8003292:	b002      	add	sp, #8
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e082      	b.n	80033b0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2241      	movs	r2, #65	; 0x41
 80032ae:	5c9b      	ldrb	r3, [r3, r2]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d107      	bne.n	80032c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2240      	movs	r2, #64	; 0x40
 80032ba:	2100      	movs	r1, #0
 80032bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7ff fbff 	bl	8002ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2241      	movs	r2, #65	; 0x41
 80032ca:	2124      	movs	r1, #36	; 0x24
 80032cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2101      	movs	r1, #1
 80032da:	438a      	bics	r2, r1
 80032dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4934      	ldr	r1, [pc, #208]	; (80033b8 <HAL_I2C_Init+0x120>)
 80032e8:	400a      	ands	r2, r1
 80032ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4931      	ldr	r1, [pc, #196]	; (80033bc <HAL_I2C_Init+0x124>)
 80032f8:	400a      	ands	r2, r1
 80032fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d108      	bne.n	8003316 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	0209      	lsls	r1, r1, #8
 8003310:	430a      	orrs	r2, r1
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	e007      	b.n	8003326 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2184      	movs	r1, #132	; 0x84
 8003320:	0209      	lsls	r1, r1, #8
 8003322:	430a      	orrs	r2, r1
 8003324:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d104      	bne.n	8003338 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2280      	movs	r2, #128	; 0x80
 8003334:	0112      	lsls	r2, r2, #4
 8003336:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	491f      	ldr	r1, [pc, #124]	; (80033c0 <HAL_I2C_Init+0x128>)
 8003344:	430a      	orrs	r2, r1
 8003346:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	491a      	ldr	r1, [pc, #104]	; (80033bc <HAL_I2C_Init+0x124>)
 8003354:	400a      	ands	r2, r1
 8003356:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	431a      	orrs	r2, r3
 8003362:	0011      	movs	r1, r2
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	021a      	lsls	r2, r3, #8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69d9      	ldr	r1, [r3, #28]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1a      	ldr	r2, [r3, #32]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2101      	movs	r1, #1
 800338e:	430a      	orrs	r2, r1
 8003390:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2241      	movs	r2, #65	; 0x41
 800339c:	2120      	movs	r1, #32
 800339e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2242      	movs	r2, #66	; 0x42
 80033aa:	2100      	movs	r1, #0
 80033ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	0018      	movs	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b002      	add	sp, #8
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	f0ffffff 	.word	0xf0ffffff
 80033bc:	ffff7fff 	.word	0xffff7fff
 80033c0:	02008000 	.word	0x02008000

080033c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b089      	sub	sp, #36	; 0x24
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	0008      	movs	r0, r1
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	0019      	movs	r1, r3
 80033d2:	230a      	movs	r3, #10
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	1c02      	adds	r2, r0, #0
 80033d8:	801a      	strh	r2, [r3, #0]
 80033da:	2308      	movs	r3, #8
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	1c0a      	adds	r2, r1, #0
 80033e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2241      	movs	r2, #65	; 0x41
 80033e6:	5c9b      	ldrb	r3, [r3, r2]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d000      	beq.n	80033f0 <HAL_I2C_Master_Transmit+0x2c>
 80033ee:	e0e7      	b.n	80035c0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2240      	movs	r2, #64	; 0x40
 80033f4:	5c9b      	ldrb	r3, [r3, r2]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_I2C_Master_Transmit+0x3a>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e0e1      	b.n	80035c2 <HAL_I2C_Master_Transmit+0x1fe>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2240      	movs	r2, #64	; 0x40
 8003402:	2101      	movs	r1, #1
 8003404:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003406:	f7ff fce7 	bl	8002dd8 <HAL_GetTick>
 800340a:	0003      	movs	r3, r0
 800340c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	0219      	lsls	r1, r3, #8
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2319      	movs	r3, #25
 800341a:	2201      	movs	r2, #1
 800341c:	f000 fa04 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 8003420:	1e03      	subs	r3, r0, #0
 8003422:	d001      	beq.n	8003428 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0cc      	b.n	80035c2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2241      	movs	r2, #65	; 0x41
 800342c:	2121      	movs	r1, #33	; 0x21
 800342e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2242      	movs	r2, #66	; 0x42
 8003434:	2110      	movs	r1, #16
 8003436:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2208      	movs	r2, #8
 8003448:	18ba      	adds	r2, r7, r2
 800344a:	8812      	ldrh	r2, [r2, #0]
 800344c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	2bff      	cmp	r3, #255	; 0xff
 800345c:	d911      	bls.n	8003482 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	22ff      	movs	r2, #255	; 0xff
 8003462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	b2da      	uxtb	r2, r3
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	045c      	lsls	r4, r3, #17
 800346e:	230a      	movs	r3, #10
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	8819      	ldrh	r1, [r3, #0]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	4b55      	ldr	r3, [pc, #340]	; (80035cc <HAL_I2C_Master_Transmit+0x208>)
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	0023      	movs	r3, r4
 800347c:	f000 fb60 	bl	8003b40 <I2C_TransferConfig>
 8003480:	e075      	b.n	800356e <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003490:	b2da      	uxtb	r2, r3
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	049c      	lsls	r4, r3, #18
 8003496:	230a      	movs	r3, #10
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	8819      	ldrh	r1, [r3, #0]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	4b4b      	ldr	r3, [pc, #300]	; (80035cc <HAL_I2C_Master_Transmit+0x208>)
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	0023      	movs	r3, r4
 80034a4:	f000 fb4c 	bl	8003b40 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80034a8:	e061      	b.n	800356e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	0018      	movs	r0, r3
 80034b2:	f000 f9f8 	bl	80038a6 <I2C_WaitOnTXISFlagUntilTimeout>
 80034b6:	1e03      	subs	r3, r0, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e081      	b.n	80035c2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d03a      	beq.n	800356e <HAL_I2C_Master_Transmit+0x1aa>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d136      	bne.n	800356e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	0013      	movs	r3, r2
 800350a:	2200      	movs	r2, #0
 800350c:	2180      	movs	r1, #128	; 0x80
 800350e:	f000 f98b 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 8003512:	1e03      	subs	r3, r0, #0
 8003514:	d001      	beq.n	800351a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e053      	b.n	80035c2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	2bff      	cmp	r3, #255	; 0xff
 8003522:	d911      	bls.n	8003548 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	22ff      	movs	r2, #255	; 0xff
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	b2da      	uxtb	r2, r3
 8003530:	2380      	movs	r3, #128	; 0x80
 8003532:	045c      	lsls	r4, r3, #17
 8003534:	230a      	movs	r3, #10
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	8819      	ldrh	r1, [r3, #0]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	2300      	movs	r3, #0
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	0023      	movs	r3, r4
 8003542:	f000 fafd 	bl	8003b40 <I2C_TransferConfig>
 8003546:	e012      	b.n	800356e <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	b2da      	uxtb	r2, r3
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	049c      	lsls	r4, r3, #18
 800355c:	230a      	movs	r3, #10
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	8819      	ldrh	r1, [r3, #0]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	2300      	movs	r3, #0
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	0023      	movs	r3, r4
 800356a:	f000 fae9 	bl	8003b40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d198      	bne.n	80034aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	0018      	movs	r0, r3
 8003580:	f000 f9d0 	bl	8003924 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003584:	1e03      	subs	r3, r0, #0
 8003586:	d001      	beq.n	800358c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e01a      	b.n	80035c2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2220      	movs	r2, #32
 8003592:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	490c      	ldr	r1, [pc, #48]	; (80035d0 <HAL_I2C_Master_Transmit+0x20c>)
 80035a0:	400a      	ands	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2241      	movs	r2, #65	; 0x41
 80035a8:	2120      	movs	r1, #32
 80035aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2242      	movs	r2, #66	; 0x42
 80035b0:	2100      	movs	r1, #0
 80035b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2240      	movs	r2, #64	; 0x40
 80035b8:	2100      	movs	r1, #0
 80035ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	0018      	movs	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b007      	add	sp, #28
 80035c8:	bd90      	pop	{r4, r7, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	80002000 	.word	0x80002000
 80035d0:	fe00e800 	.word	0xfe00e800

080035d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b089      	sub	sp, #36	; 0x24
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	0008      	movs	r0, r1
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	0019      	movs	r1, r3
 80035e2:	230a      	movs	r3, #10
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	1c02      	adds	r2, r0, #0
 80035e8:	801a      	strh	r2, [r3, #0]
 80035ea:	2308      	movs	r3, #8
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	1c0a      	adds	r2, r1, #0
 80035f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2241      	movs	r2, #65	; 0x41
 80035f6:	5c9b      	ldrb	r3, [r3, r2]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d000      	beq.n	8003600 <HAL_I2C_Master_Receive+0x2c>
 80035fe:	e0e8      	b.n	80037d2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2240      	movs	r2, #64	; 0x40
 8003604:	5c9b      	ldrb	r3, [r3, r2]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_I2C_Master_Receive+0x3a>
 800360a:	2302      	movs	r3, #2
 800360c:	e0e2      	b.n	80037d4 <HAL_I2C_Master_Receive+0x200>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2240      	movs	r2, #64	; 0x40
 8003612:	2101      	movs	r1, #1
 8003614:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003616:	f7ff fbdf 	bl	8002dd8 <HAL_GetTick>
 800361a:	0003      	movs	r3, r0
 800361c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	0219      	lsls	r1, r3, #8
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	2319      	movs	r3, #25
 800362a:	2201      	movs	r2, #1
 800362c:	f000 f8fc 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d001      	beq.n	8003638 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0cd      	b.n	80037d4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2241      	movs	r2, #65	; 0x41
 800363c:	2122      	movs	r1, #34	; 0x22
 800363e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2242      	movs	r2, #66	; 0x42
 8003644:	2110      	movs	r1, #16
 8003646:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2208      	movs	r2, #8
 8003658:	18ba      	adds	r2, r7, r2
 800365a:	8812      	ldrh	r2, [r2, #0]
 800365c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	2bff      	cmp	r3, #255	; 0xff
 800366c:	d911      	bls.n	8003692 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	22ff      	movs	r2, #255	; 0xff
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	b2da      	uxtb	r2, r3
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	045c      	lsls	r4, r3, #17
 800367e:	230a      	movs	r3, #10
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	8819      	ldrh	r1, [r3, #0]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	4b55      	ldr	r3, [pc, #340]	; (80037dc <HAL_I2C_Master_Receive+0x208>)
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	0023      	movs	r3, r4
 800368c:	f000 fa58 	bl	8003b40 <I2C_TransferConfig>
 8003690:	e076      	b.n	8003780 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	049c      	lsls	r4, r3, #18
 80036a6:	230a      	movs	r3, #10
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	8819      	ldrh	r1, [r3, #0]
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	4b4b      	ldr	r3, [pc, #300]	; (80037dc <HAL_I2C_Master_Receive+0x208>)
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	0023      	movs	r3, r4
 80036b4:	f000 fa44 	bl	8003b40 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80036b8:	e062      	b.n	8003780 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f000 f96b 	bl	800399c <I2C_WaitOnRXNEFlagUntilTimeout>
 80036c6:	1e03      	subs	r3, r0, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e082      	b.n	80037d4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d03a      	beq.n	8003780 <HAL_I2C_Master_Receive+0x1ac>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370e:	2b00      	cmp	r3, #0
 8003710:	d136      	bne.n	8003780 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	0013      	movs	r3, r2
 800371c:	2200      	movs	r2, #0
 800371e:	2180      	movs	r1, #128	; 0x80
 8003720:	f000 f882 	bl	8003828 <I2C_WaitOnFlagUntilTimeout>
 8003724:	1e03      	subs	r3, r0, #0
 8003726:	d001      	beq.n	800372c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e053      	b.n	80037d4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	2bff      	cmp	r3, #255	; 0xff
 8003734:	d911      	bls.n	800375a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	22ff      	movs	r2, #255	; 0xff
 800373a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	b2da      	uxtb	r2, r3
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	045c      	lsls	r4, r3, #17
 8003746:	230a      	movs	r3, #10
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	8819      	ldrh	r1, [r3, #0]
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	2300      	movs	r3, #0
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	0023      	movs	r3, r4
 8003754:	f000 f9f4 	bl	8003b40 <I2C_TransferConfig>
 8003758:	e012      	b.n	8003780 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003768:	b2da      	uxtb	r2, r3
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	049c      	lsls	r4, r3, #18
 800376e:	230a      	movs	r3, #10
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	8819      	ldrh	r1, [r3, #0]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	2300      	movs	r3, #0
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	0023      	movs	r3, r4
 800377c:	f000 f9e0 	bl	8003b40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d197      	bne.n	80036ba <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	0018      	movs	r0, r3
 8003792:	f000 f8c7 	bl	8003924 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003796:	1e03      	subs	r3, r0, #0
 8003798:	d001      	beq.n	800379e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e01a      	b.n	80037d4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2220      	movs	r2, #32
 80037a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	490b      	ldr	r1, [pc, #44]	; (80037e0 <HAL_I2C_Master_Receive+0x20c>)
 80037b2:	400a      	ands	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2241      	movs	r2, #65	; 0x41
 80037ba:	2120      	movs	r1, #32
 80037bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2242      	movs	r2, #66	; 0x42
 80037c2:	2100      	movs	r1, #0
 80037c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2240      	movs	r2, #64	; 0x40
 80037ca:	2100      	movs	r1, #0
 80037cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e000      	b.n	80037d4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
  }
}
 80037d4:	0018      	movs	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b007      	add	sp, #28
 80037da:	bd90      	pop	{r4, r7, pc}
 80037dc:	80002400 	.word	0x80002400
 80037e0:	fe00e800 	.word	0xfe00e800

080037e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2202      	movs	r2, #2
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d103      	bne.n	8003802 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2200      	movs	r2, #0
 8003800:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2201      	movs	r2, #1
 800380a:	4013      	ands	r3, r2
 800380c:	2b01      	cmp	r3, #1
 800380e:	d007      	beq.n	8003820 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2101      	movs	r1, #1
 800381c:	430a      	orrs	r2, r1
 800381e:	619a      	str	r2, [r3, #24]
  }
}
 8003820:	46c0      	nop			; (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b002      	add	sp, #8
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003838:	e021      	b.n	800387e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	3301      	adds	r3, #1
 800383e:	d01e      	beq.n	800387e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003840:	f7ff faca 	bl	8002dd8 <HAL_GetTick>
 8003844:	0002      	movs	r2, r0
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d302      	bcc.n	8003856 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d113      	bne.n	800387e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	2220      	movs	r2, #32
 800385c:	431a      	orrs	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2241      	movs	r2, #65	; 0x41
 8003866:	2120      	movs	r1, #32
 8003868:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2242      	movs	r2, #66	; 0x42
 800386e:	2100      	movs	r1, #0
 8003870:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2240      	movs	r2, #64	; 0x40
 8003876:	2100      	movs	r1, #0
 8003878:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e00f      	b.n	800389e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	4013      	ands	r3, r2
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	425a      	negs	r2, r3
 800388e:	4153      	adcs	r3, r2
 8003890:	b2db      	uxtb	r3, r3
 8003892:	001a      	movs	r2, r3
 8003894:	1dfb      	adds	r3, r7, #7
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d0ce      	beq.n	800383a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	0018      	movs	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b004      	add	sp, #16
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038b2:	e02b      	b.n	800390c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	0018      	movs	r0, r3
 80038bc:	f000 f8da 	bl	8003a74 <I2C_IsAcknowledgeFailed>
 80038c0:	1e03      	subs	r3, r0, #0
 80038c2:	d001      	beq.n	80038c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e029      	b.n	800391c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	3301      	adds	r3, #1
 80038cc:	d01e      	beq.n	800390c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7ff fa83 	bl	8002dd8 <HAL_GetTick>
 80038d2:	0002      	movs	r2, r0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d113      	bne.n	800390c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e8:	2220      	movs	r2, #32
 80038ea:	431a      	orrs	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2241      	movs	r2, #65	; 0x41
 80038f4:	2120      	movs	r1, #32
 80038f6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2242      	movs	r2, #66	; 0x42
 80038fc:	2100      	movs	r1, #0
 80038fe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2240      	movs	r2, #64	; 0x40
 8003904:	2100      	movs	r1, #0
 8003906:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e007      	b.n	800391c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2202      	movs	r2, #2
 8003914:	4013      	ands	r3, r2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d1cc      	bne.n	80038b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b004      	add	sp, #16
 8003922:	bd80      	pop	{r7, pc}

08003924 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003930:	e028      	b.n	8003984 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	0018      	movs	r0, r3
 800393a:	f000 f89b 	bl	8003a74 <I2C_IsAcknowledgeFailed>
 800393e:	1e03      	subs	r3, r0, #0
 8003940:	d001      	beq.n	8003946 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e026      	b.n	8003994 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003946:	f7ff fa47 	bl	8002dd8 <HAL_GetTick>
 800394a:	0002      	movs	r2, r0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	d302      	bcc.n	800395c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d113      	bne.n	8003984 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003960:	2220      	movs	r2, #32
 8003962:	431a      	orrs	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2241      	movs	r2, #65	; 0x41
 800396c:	2120      	movs	r1, #32
 800396e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2242      	movs	r2, #66	; 0x42
 8003974:	2100      	movs	r1, #0
 8003976:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2240      	movs	r2, #64	; 0x40
 800397c:	2100      	movs	r1, #0
 800397e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e007      	b.n	8003994 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2220      	movs	r2, #32
 800398c:	4013      	ands	r3, r2
 800398e:	2b20      	cmp	r3, #32
 8003990:	d1cf      	bne.n	8003932 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	0018      	movs	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	b004      	add	sp, #16
 800399a:	bd80      	pop	{r7, pc}

0800399c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039a8:	e055      	b.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	0018      	movs	r0, r3
 80039b2:	f000 f85f 	bl	8003a74 <I2C_IsAcknowledgeFailed>
 80039b6:	1e03      	subs	r3, r0, #0
 80039b8:	d001      	beq.n	80039be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e053      	b.n	8003a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2220      	movs	r2, #32
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d129      	bne.n	8003a20 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2204      	movs	r2, #4
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d105      	bne.n	80039e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e03f      	b.n	8003a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2220      	movs	r2, #32
 80039ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	491d      	ldr	r1, [pc, #116]	; (8003a70 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80039fa:	400a      	ands	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2241      	movs	r2, #65	; 0x41
 8003a08:	2120      	movs	r1, #32
 8003a0a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2242      	movs	r2, #66	; 0x42
 8003a10:	2100      	movs	r1, #0
 8003a12:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2240      	movs	r2, #64	; 0x40
 8003a18:	2100      	movs	r1, #0
 8003a1a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e022      	b.n	8003a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a20:	f7ff f9da 	bl	8002dd8 <HAL_GetTick>
 8003a24:	0002      	movs	r2, r0
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d302      	bcc.n	8003a36 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2241      	movs	r2, #65	; 0x41
 8003a46:	2120      	movs	r1, #32
 8003a48:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2240      	movs	r2, #64	; 0x40
 8003a4e:	2100      	movs	r1, #0
 8003a50:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e007      	b.n	8003a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d1a2      	bne.n	80039aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	0018      	movs	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b004      	add	sp, #16
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	fe00e800 	.word	0xfe00e800

08003a74 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2210      	movs	r2, #16
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b10      	cmp	r3, #16
 8003a8c:	d151      	bne.n	8003b32 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a8e:	e021      	b.n	8003ad4 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	3301      	adds	r3, #1
 8003a94:	d01e      	beq.n	8003ad4 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a96:	f7ff f99f 	bl	8002dd8 <HAL_GetTick>
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d302      	bcc.n	8003aac <I2C_IsAcknowledgeFailed+0x38>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d113      	bne.n	8003ad4 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2241      	movs	r2, #65	; 0x41
 8003abc:	2120      	movs	r1, #32
 8003abe:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2242      	movs	r2, #66	; 0x42
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2240      	movs	r2, #64	; 0x40
 8003acc:	2100      	movs	r1, #0
 8003ace:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e02f      	b.n	8003b34 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2220      	movs	r2, #32
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d1d6      	bne.n	8003a90 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2220      	movs	r2, #32
 8003af0:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	0018      	movs	r0, r3
 8003af6:	f7ff fe75 	bl	80037e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	490d      	ldr	r1, [pc, #52]	; (8003b3c <I2C_IsAcknowledgeFailed+0xc8>)
 8003b06:	400a      	ands	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	2204      	movs	r2, #4
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2241      	movs	r2, #65	; 0x41
 8003b1a:	2120      	movs	r1, #32
 8003b1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2242      	movs	r2, #66	; 0x42
 8003b22:	2100      	movs	r1, #0
 8003b24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2240      	movs	r2, #64	; 0x40
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	0018      	movs	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b004      	add	sp, #16
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	fe00e800 	.word	0xfe00e800

08003b40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	0008      	movs	r0, r1
 8003b4a:	0011      	movs	r1, r2
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	240a      	movs	r4, #10
 8003b50:	193b      	adds	r3, r7, r4
 8003b52:	1c02      	adds	r2, r0, #0
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	2009      	movs	r0, #9
 8003b58:	183b      	adds	r3, r7, r0
 8003b5a:	1c0a      	adds	r2, r1, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	6a3a      	ldr	r2, [r7, #32]
 8003b66:	0d51      	lsrs	r1, r2, #21
 8003b68:	2280      	movs	r2, #128	; 0x80
 8003b6a:	00d2      	lsls	r2, r2, #3
 8003b6c:	400a      	ands	r2, r1
 8003b6e:	490e      	ldr	r1, [pc, #56]	; (8003ba8 <I2C_TransferConfig+0x68>)
 8003b70:	430a      	orrs	r2, r1
 8003b72:	43d2      	mvns	r2, r2
 8003b74:	401a      	ands	r2, r3
 8003b76:	0011      	movs	r1, r2
 8003b78:	193b      	adds	r3, r7, r4
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	059b      	lsls	r3, r3, #22
 8003b7e:	0d9a      	lsrs	r2, r3, #22
 8003b80:	183b      	adds	r3, r7, r0
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	0418      	lsls	r0, r3, #16
 8003b86:	23ff      	movs	r3, #255	; 0xff
 8003b88:	041b      	lsls	r3, r3, #16
 8003b8a:	4003      	ands	r3, r0
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b005      	add	sp, #20
 8003ba4:	bd90      	pop	{r4, r7, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	03ff63ff 	.word	0x03ff63ff

08003bac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2241      	movs	r2, #65	; 0x41
 8003bba:	5c9b      	ldrb	r3, [r3, r2]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d138      	bne.n	8003c34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2240      	movs	r2, #64	; 0x40
 8003bc6:	5c9b      	ldrb	r3, [r3, r2]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e032      	b.n	8003c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2240      	movs	r2, #64	; 0x40
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2241      	movs	r2, #65	; 0x41
 8003bdc:	2124      	movs	r1, #36	; 0x24
 8003bde:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2101      	movs	r1, #1
 8003bec:	438a      	bics	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4911      	ldr	r1, [pc, #68]	; (8003c40 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6819      	ldr	r1, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2241      	movs	r2, #65	; 0x41
 8003c24:	2120      	movs	r1, #32
 8003c26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2240      	movs	r2, #64	; 0x40
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e000      	b.n	8003c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b002      	add	sp, #8
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	ffffefff 	.word	0xffffefff

08003c44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2241      	movs	r2, #65	; 0x41
 8003c52:	5c9b      	ldrb	r3, [r3, r2]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d139      	bne.n	8003cce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2240      	movs	r2, #64	; 0x40
 8003c5e:	5c9b      	ldrb	r3, [r3, r2]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e033      	b.n	8003cd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2240      	movs	r2, #64	; 0x40
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2241      	movs	r2, #65	; 0x41
 8003c74:	2124      	movs	r1, #36	; 0x24
 8003c76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2101      	movs	r1, #1
 8003c84:	438a      	bics	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a11      	ldr	r2, [pc, #68]	; (8003cd8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2241      	movs	r2, #65	; 0x41
 8003cbe:	2120      	movs	r1, #32
 8003cc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2240      	movs	r2, #64	; 0x40
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
  }
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b004      	add	sp, #16
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	fffff0ff 	.word	0xfffff0ff

08003cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f000 fb76 	bl	80043dc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d100      	bne.n	8003cfc <HAL_RCC_OscConfig+0x20>
 8003cfa:	e08e      	b.n	8003e1a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003cfc:	4bc5      	ldr	r3, [pc, #788]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	220c      	movs	r2, #12
 8003d02:	4013      	ands	r3, r2
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d00e      	beq.n	8003d26 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d08:	4bc2      	ldr	r3, [pc, #776]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	220c      	movs	r2, #12
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d117      	bne.n	8003d44 <HAL_RCC_OscConfig+0x68>
 8003d14:	4bbf      	ldr	r3, [pc, #764]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	23c0      	movs	r3, #192	; 0xc0
 8003d1a:	025b      	lsls	r3, r3, #9
 8003d1c:	401a      	ands	r2, r3
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	025b      	lsls	r3, r3, #9
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d10e      	bne.n	8003d44 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d26:	4bbb      	ldr	r3, [pc, #748]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	2380      	movs	r3, #128	; 0x80
 8003d2c:	029b      	lsls	r3, r3, #10
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d100      	bne.n	8003d34 <HAL_RCC_OscConfig+0x58>
 8003d32:	e071      	b.n	8003e18 <HAL_RCC_OscConfig+0x13c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d000      	beq.n	8003d3e <HAL_RCC_OscConfig+0x62>
 8003d3c:	e06c      	b.n	8003e18 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f000 fb4c 	bl	80043dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d107      	bne.n	8003d5c <HAL_RCC_OscConfig+0x80>
 8003d4c:	4bb1      	ldr	r3, [pc, #708]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4bb0      	ldr	r3, [pc, #704]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003d52:	2180      	movs	r1, #128	; 0x80
 8003d54:	0249      	lsls	r1, r1, #9
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e02f      	b.n	8003dbc <HAL_RCC_OscConfig+0xe0>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10c      	bne.n	8003d7e <HAL_RCC_OscConfig+0xa2>
 8003d64:	4bab      	ldr	r3, [pc, #684]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4baa      	ldr	r3, [pc, #680]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003d6a:	49ab      	ldr	r1, [pc, #684]	; (8004018 <HAL_RCC_OscConfig+0x33c>)
 8003d6c:	400a      	ands	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	4ba8      	ldr	r3, [pc, #672]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4ba7      	ldr	r3, [pc, #668]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003d76:	49a9      	ldr	r1, [pc, #676]	; (800401c <HAL_RCC_OscConfig+0x340>)
 8003d78:	400a      	ands	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	e01e      	b.n	8003dbc <HAL_RCC_OscConfig+0xe0>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b05      	cmp	r3, #5
 8003d84:	d10e      	bne.n	8003da4 <HAL_RCC_OscConfig+0xc8>
 8003d86:	4ba3      	ldr	r3, [pc, #652]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4ba2      	ldr	r3, [pc, #648]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	02c9      	lsls	r1, r1, #11
 8003d90:	430a      	orrs	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	4b9f      	ldr	r3, [pc, #636]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4b9e      	ldr	r3, [pc, #632]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003d9a:	2180      	movs	r1, #128	; 0x80
 8003d9c:	0249      	lsls	r1, r1, #9
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0xe0>
 8003da4:	4b9b      	ldr	r3, [pc, #620]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4b9a      	ldr	r3, [pc, #616]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003daa:	499b      	ldr	r1, [pc, #620]	; (8004018 <HAL_RCC_OscConfig+0x33c>)
 8003dac:	400a      	ands	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	4b98      	ldr	r3, [pc, #608]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b97      	ldr	r3, [pc, #604]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003db6:	4999      	ldr	r1, [pc, #612]	; (800401c <HAL_RCC_OscConfig+0x340>)
 8003db8:	400a      	ands	r2, r1
 8003dba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d014      	beq.n	8003dee <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7ff f808 	bl	8002dd8 <HAL_GetTick>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dce:	f7ff f803 	bl	8002dd8 <HAL_GetTick>
 8003dd2:	0002      	movs	r2, r0
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b64      	cmp	r3, #100	; 0x64
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e2fd      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de0:	4b8c      	ldr	r3, [pc, #560]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	029b      	lsls	r3, r3, #10
 8003de8:	4013      	ands	r3, r2
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0xf2>
 8003dec:	e015      	b.n	8003e1a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dee:	f7fe fff3 	bl	8002dd8 <HAL_GetTick>
 8003df2:	0003      	movs	r3, r0
 8003df4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df8:	f7fe ffee 	bl	8002dd8 <HAL_GetTick>
 8003dfc:	0002      	movs	r2, r0
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	; 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e2e8      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0a:	4b82      	ldr	r3, [pc, #520]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	029b      	lsls	r3, r3, #10
 8003e12:	4013      	ands	r3, r2
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x11c>
 8003e16:	e000      	b.n	8003e1a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e18:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	4013      	ands	r3, r2
 8003e22:	d100      	bne.n	8003e26 <HAL_RCC_OscConfig+0x14a>
 8003e24:	e06c      	b.n	8003f00 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e26:	4b7b      	ldr	r3, [pc, #492]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	220c      	movs	r2, #12
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d00e      	beq.n	8003e4e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e30:	4b78      	ldr	r3, [pc, #480]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	220c      	movs	r2, #12
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d11f      	bne.n	8003e7c <HAL_RCC_OscConfig+0x1a0>
 8003e3c:	4b75      	ldr	r3, [pc, #468]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	23c0      	movs	r3, #192	; 0xc0
 8003e42:	025b      	lsls	r3, r3, #9
 8003e44:	401a      	ands	r2, r3
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d116      	bne.n	8003e7c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	4b71      	ldr	r3, [pc, #452]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2202      	movs	r2, #2
 8003e54:	4013      	ands	r3, r2
 8003e56:	d005      	beq.n	8003e64 <HAL_RCC_OscConfig+0x188>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e2bb      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e64:	4b6b      	ldr	r3, [pc, #428]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	22f8      	movs	r2, #248	; 0xf8
 8003e6a:	4393      	bics	r3, r2
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	00da      	lsls	r2, r3, #3
 8003e74:	4b67      	ldr	r3, [pc, #412]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003e76:	430a      	orrs	r2, r1
 8003e78:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7a:	e041      	b.n	8003f00 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d024      	beq.n	8003ece <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e84:	4b63      	ldr	r3, [pc, #396]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b62      	ldr	r3, [pc, #392]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fe ffa2 	bl	8002dd8 <HAL_GetTick>
 8003e94:	0003      	movs	r3, r0
 8003e96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e9a:	f7fe ff9d 	bl	8002dd8 <HAL_GetTick>
 8003e9e:	0002      	movs	r2, r0
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e297      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eac:	4b59      	ldr	r3, [pc, #356]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d0f1      	beq.n	8003e9a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb6:	4b57      	ldr	r3, [pc, #348]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	22f8      	movs	r2, #248	; 0xf8
 8003ebc:	4393      	bics	r3, r2
 8003ebe:	0019      	movs	r1, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	00da      	lsls	r2, r3, #3
 8003ec6:	4b53      	ldr	r3, [pc, #332]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	e018      	b.n	8003f00 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ece:	4b51      	ldr	r3, [pc, #324]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4b50      	ldr	r3, [pc, #320]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	438a      	bics	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fe ff7d 	bl	8002dd8 <HAL_GetTick>
 8003ede:	0003      	movs	r3, r0
 8003ee0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee4:	f7fe ff78 	bl	8002dd8 <HAL_GetTick>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e272      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef6:	4b47      	ldr	r3, [pc, #284]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2202      	movs	r2, #2
 8003efc:	4013      	ands	r3, r2
 8003efe:	d1f1      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2208      	movs	r2, #8
 8003f06:	4013      	ands	r3, r2
 8003f08:	d036      	beq.n	8003f78 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d019      	beq.n	8003f46 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f12:	4b40      	ldr	r3, [pc, #256]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f16:	4b3f      	ldr	r3, [pc, #252]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003f18:	2101      	movs	r1, #1
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1e:	f7fe ff5b 	bl	8002dd8 <HAL_GetTick>
 8003f22:	0003      	movs	r3, r0
 8003f24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f28:	f7fe ff56 	bl	8002dd8 <HAL_GetTick>
 8003f2c:	0002      	movs	r2, r0
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e250      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3a:	4b36      	ldr	r3, [pc, #216]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	2202      	movs	r2, #2
 8003f40:	4013      	ands	r3, r2
 8003f42:	d0f1      	beq.n	8003f28 <HAL_RCC_OscConfig+0x24c>
 8003f44:	e018      	b.n	8003f78 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f46:	4b33      	ldr	r3, [pc, #204]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f4a:	4b32      	ldr	r3, [pc, #200]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	438a      	bics	r2, r1
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f52:	f7fe ff41 	bl	8002dd8 <HAL_GetTick>
 8003f56:	0003      	movs	r3, r0
 8003f58:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f5c:	f7fe ff3c 	bl	8002dd8 <HAL_GetTick>
 8003f60:	0002      	movs	r2, r0
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e236      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6e:	4b29      	ldr	r3, [pc, #164]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2202      	movs	r2, #2
 8003f74:	4013      	ands	r3, r2
 8003f76:	d1f1      	bne.n	8003f5c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d100      	bne.n	8003f84 <HAL_RCC_OscConfig+0x2a8>
 8003f82:	e0b5      	b.n	80040f0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f84:	231f      	movs	r3, #31
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8c:	4b21      	ldr	r3, [pc, #132]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	055b      	lsls	r3, r3, #21
 8003f94:	4013      	ands	r3, r2
 8003f96:	d111      	bne.n	8003fbc <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f98:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003f9e:	2180      	movs	r1, #128	; 0x80
 8003fa0:	0549      	lsls	r1, r1, #21
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	61da      	str	r2, [r3, #28]
 8003fa6:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	055b      	lsls	r3, r3, #21
 8003fae:	4013      	ands	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fb4:	231f      	movs	r3, #31
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbc:	4b18      	ldr	r3, [pc, #96]	; (8004020 <HAL_RCC_OscConfig+0x344>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d11a      	bne.n	8003ffe <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fc8:	4b15      	ldr	r3, [pc, #84]	; (8004020 <HAL_RCC_OscConfig+0x344>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b14      	ldr	r3, [pc, #80]	; (8004020 <HAL_RCC_OscConfig+0x344>)
 8003fce:	2180      	movs	r1, #128	; 0x80
 8003fd0:	0049      	lsls	r1, r1, #1
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd6:	f7fe feff 	bl	8002dd8 <HAL_GetTick>
 8003fda:	0003      	movs	r3, r0
 8003fdc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe0:	f7fe fefa 	bl	8002dd8 <HAL_GetTick>
 8003fe4:	0002      	movs	r2, r0
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b64      	cmp	r3, #100	; 0x64
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e1f4      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff2:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCC_OscConfig+0x344>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d10e      	bne.n	8004024 <HAL_RCC_OscConfig+0x348>
 8004006:	4b03      	ldr	r3, [pc, #12]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 8004008:	6a1a      	ldr	r2, [r3, #32]
 800400a:	4b02      	ldr	r3, [pc, #8]	; (8004014 <HAL_RCC_OscConfig+0x338>)
 800400c:	2101      	movs	r1, #1
 800400e:	430a      	orrs	r2, r1
 8004010:	621a      	str	r2, [r3, #32]
 8004012:	e035      	b.n	8004080 <HAL_RCC_OscConfig+0x3a4>
 8004014:	40021000 	.word	0x40021000
 8004018:	fffeffff 	.word	0xfffeffff
 800401c:	fffbffff 	.word	0xfffbffff
 8004020:	40007000 	.word	0x40007000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10c      	bne.n	8004046 <HAL_RCC_OscConfig+0x36a>
 800402c:	4bca      	ldr	r3, [pc, #808]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 800402e:	6a1a      	ldr	r2, [r3, #32]
 8004030:	4bc9      	ldr	r3, [pc, #804]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004032:	2101      	movs	r1, #1
 8004034:	438a      	bics	r2, r1
 8004036:	621a      	str	r2, [r3, #32]
 8004038:	4bc7      	ldr	r3, [pc, #796]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 800403a:	6a1a      	ldr	r2, [r3, #32]
 800403c:	4bc6      	ldr	r3, [pc, #792]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 800403e:	2104      	movs	r1, #4
 8004040:	438a      	bics	r2, r1
 8004042:	621a      	str	r2, [r3, #32]
 8004044:	e01c      	b.n	8004080 <HAL_RCC_OscConfig+0x3a4>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b05      	cmp	r3, #5
 800404c:	d10c      	bne.n	8004068 <HAL_RCC_OscConfig+0x38c>
 800404e:	4bc2      	ldr	r3, [pc, #776]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	4bc1      	ldr	r3, [pc, #772]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004054:	2104      	movs	r1, #4
 8004056:	430a      	orrs	r2, r1
 8004058:	621a      	str	r2, [r3, #32]
 800405a:	4bbf      	ldr	r3, [pc, #764]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 800405c:	6a1a      	ldr	r2, [r3, #32]
 800405e:	4bbe      	ldr	r3, [pc, #760]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004060:	2101      	movs	r1, #1
 8004062:	430a      	orrs	r2, r1
 8004064:	621a      	str	r2, [r3, #32]
 8004066:	e00b      	b.n	8004080 <HAL_RCC_OscConfig+0x3a4>
 8004068:	4bbb      	ldr	r3, [pc, #748]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 800406a:	6a1a      	ldr	r2, [r3, #32]
 800406c:	4bba      	ldr	r3, [pc, #744]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 800406e:	2101      	movs	r1, #1
 8004070:	438a      	bics	r2, r1
 8004072:	621a      	str	r2, [r3, #32]
 8004074:	4bb8      	ldr	r3, [pc, #736]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004076:	6a1a      	ldr	r2, [r3, #32]
 8004078:	4bb7      	ldr	r3, [pc, #732]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 800407a:	2104      	movs	r1, #4
 800407c:	438a      	bics	r2, r1
 800407e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d014      	beq.n	80040b2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004088:	f7fe fea6 	bl	8002dd8 <HAL_GetTick>
 800408c:	0003      	movs	r3, r0
 800408e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004090:	e009      	b.n	80040a6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004092:	f7fe fea1 	bl	8002dd8 <HAL_GetTick>
 8004096:	0002      	movs	r2, r0
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	4aaf      	ldr	r2, [pc, #700]	; (800435c <HAL_RCC_OscConfig+0x680>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e19a      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a6:	4bac      	ldr	r3, [pc, #688]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	2202      	movs	r2, #2
 80040ac:	4013      	ands	r3, r2
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x3b6>
 80040b0:	e013      	b.n	80040da <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b2:	f7fe fe91 	bl	8002dd8 <HAL_GetTick>
 80040b6:	0003      	movs	r3, r0
 80040b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ba:	e009      	b.n	80040d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040bc:	f7fe fe8c 	bl	8002dd8 <HAL_GetTick>
 80040c0:	0002      	movs	r2, r0
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	4aa5      	ldr	r2, [pc, #660]	; (800435c <HAL_RCC_OscConfig+0x680>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e185      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d0:	4ba1      	ldr	r3, [pc, #644]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	2202      	movs	r2, #2
 80040d6:	4013      	ands	r3, r2
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040da:	231f      	movs	r3, #31
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d105      	bne.n	80040f0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e4:	4b9c      	ldr	r3, [pc, #624]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	4b9b      	ldr	r3, [pc, #620]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 80040ea:	499d      	ldr	r1, [pc, #628]	; (8004360 <HAL_RCC_OscConfig+0x684>)
 80040ec:	400a      	ands	r2, r1
 80040ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2210      	movs	r2, #16
 80040f6:	4013      	ands	r3, r2
 80040f8:	d063      	beq.n	80041c2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d12a      	bne.n	8004158 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004102:	4b95      	ldr	r3, [pc, #596]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004106:	4b94      	ldr	r3, [pc, #592]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004108:	2104      	movs	r1, #4
 800410a:	430a      	orrs	r2, r1
 800410c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800410e:	4b92      	ldr	r3, [pc, #584]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004112:	4b91      	ldr	r3, [pc, #580]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004114:	2101      	movs	r1, #1
 8004116:	430a      	orrs	r2, r1
 8004118:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411a:	f7fe fe5d 	bl	8002dd8 <HAL_GetTick>
 800411e:	0003      	movs	r3, r0
 8004120:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004124:	f7fe fe58 	bl	8002dd8 <HAL_GetTick>
 8004128:	0002      	movs	r2, r0
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e152      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004136:	4b88      	ldr	r3, [pc, #544]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413a:	2202      	movs	r2, #2
 800413c:	4013      	ands	r3, r2
 800413e:	d0f1      	beq.n	8004124 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004140:	4b85      	ldr	r3, [pc, #532]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004144:	22f8      	movs	r2, #248	; 0xf8
 8004146:	4393      	bics	r3, r2
 8004148:	0019      	movs	r1, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	00da      	lsls	r2, r3, #3
 8004150:	4b81      	ldr	r3, [pc, #516]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004152:	430a      	orrs	r2, r1
 8004154:	635a      	str	r2, [r3, #52]	; 0x34
 8004156:	e034      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	3305      	adds	r3, #5
 800415e:	d111      	bne.n	8004184 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004160:	4b7d      	ldr	r3, [pc, #500]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004164:	4b7c      	ldr	r3, [pc, #496]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004166:	2104      	movs	r1, #4
 8004168:	438a      	bics	r2, r1
 800416a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800416c:	4b7a      	ldr	r3, [pc, #488]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	22f8      	movs	r2, #248	; 0xf8
 8004172:	4393      	bics	r3, r2
 8004174:	0019      	movs	r1, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	00da      	lsls	r2, r3, #3
 800417c:	4b76      	ldr	r3, [pc, #472]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 800417e:	430a      	orrs	r2, r1
 8004180:	635a      	str	r2, [r3, #52]	; 0x34
 8004182:	e01e      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004184:	4b74      	ldr	r3, [pc, #464]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004188:	4b73      	ldr	r3, [pc, #460]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 800418a:	2104      	movs	r1, #4
 800418c:	430a      	orrs	r2, r1
 800418e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004190:	4b71      	ldr	r3, [pc, #452]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004194:	4b70      	ldr	r3, [pc, #448]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004196:	2101      	movs	r1, #1
 8004198:	438a      	bics	r2, r1
 800419a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800419c:	f7fe fe1c 	bl	8002dd8 <HAL_GetTick>
 80041a0:	0003      	movs	r3, r0
 80041a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80041a6:	f7fe fe17 	bl	8002dd8 <HAL_GetTick>
 80041aa:	0002      	movs	r2, r0
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e111      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041b8:	4b67      	ldr	r3, [pc, #412]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 80041ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041bc:	2202      	movs	r2, #2
 80041be:	4013      	ands	r3, r2
 80041c0:	d1f1      	bne.n	80041a6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2220      	movs	r2, #32
 80041c8:	4013      	ands	r3, r2
 80041ca:	d05c      	beq.n	8004286 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80041cc:	4b62      	ldr	r3, [pc, #392]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	220c      	movs	r2, #12
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b0c      	cmp	r3, #12
 80041d6:	d00e      	beq.n	80041f6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80041d8:	4b5f      	ldr	r3, [pc, #380]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	220c      	movs	r2, #12
 80041de:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d114      	bne.n	800420e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80041e4:	4b5c      	ldr	r3, [pc, #368]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	23c0      	movs	r3, #192	; 0xc0
 80041ea:	025b      	lsls	r3, r3, #9
 80041ec:	401a      	ands	r2, r3
 80041ee:	23c0      	movs	r3, #192	; 0xc0
 80041f0:	025b      	lsls	r3, r3, #9
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d10b      	bne.n	800420e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80041f6:	4b58      	ldr	r3, [pc, #352]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 80041f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041fa:	2380      	movs	r3, #128	; 0x80
 80041fc:	025b      	lsls	r3, r3, #9
 80041fe:	4013      	ands	r3, r2
 8004200:	d040      	beq.n	8004284 <HAL_RCC_OscConfig+0x5a8>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d03c      	beq.n	8004284 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e0e6      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01b      	beq.n	800424e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004216:	4b50      	ldr	r3, [pc, #320]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421a:	4b4f      	ldr	r3, [pc, #316]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	0249      	lsls	r1, r1, #9
 8004220:	430a      	orrs	r2, r1
 8004222:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004224:	f7fe fdd8 	bl	8002dd8 <HAL_GetTick>
 8004228:	0003      	movs	r3, r0
 800422a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800422e:	f7fe fdd3 	bl	8002dd8 <HAL_GetTick>
 8004232:	0002      	movs	r2, r0
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e0cd      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004240:	4b45      	ldr	r3, [pc, #276]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	025b      	lsls	r3, r3, #9
 8004248:	4013      	ands	r3, r2
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x552>
 800424c:	e01b      	b.n	8004286 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800424e:	4b42      	ldr	r3, [pc, #264]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004252:	4b41      	ldr	r3, [pc, #260]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004254:	4943      	ldr	r1, [pc, #268]	; (8004364 <HAL_RCC_OscConfig+0x688>)
 8004256:	400a      	ands	r2, r1
 8004258:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425a:	f7fe fdbd 	bl	8002dd8 <HAL_GetTick>
 800425e:	0003      	movs	r3, r0
 8004260:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004264:	f7fe fdb8 	bl	8002dd8 <HAL_GetTick>
 8004268:	0002      	movs	r2, r0
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e0b2      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004276:	4b38      	ldr	r3, [pc, #224]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800427a:	2380      	movs	r3, #128	; 0x80
 800427c:	025b      	lsls	r3, r3, #9
 800427e:	4013      	ands	r3, r2
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x588>
 8004282:	e000      	b.n	8004286 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004284:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	2b00      	cmp	r3, #0
 800428c:	d100      	bne.n	8004290 <HAL_RCC_OscConfig+0x5b4>
 800428e:	e0a4      	b.n	80043da <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004290:	4b31      	ldr	r3, [pc, #196]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	220c      	movs	r2, #12
 8004296:	4013      	ands	r3, r2
 8004298:	2b08      	cmp	r3, #8
 800429a:	d100      	bne.n	800429e <HAL_RCC_OscConfig+0x5c2>
 800429c:	e078      	b.n	8004390 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d14c      	bne.n	8004340 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a6:	4b2c      	ldr	r3, [pc, #176]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4b2b      	ldr	r3, [pc, #172]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 80042ac:	492e      	ldr	r1, [pc, #184]	; (8004368 <HAL_RCC_OscConfig+0x68c>)
 80042ae:	400a      	ands	r2, r1
 80042b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b2:	f7fe fd91 	bl	8002dd8 <HAL_GetTick>
 80042b6:	0003      	movs	r3, r0
 80042b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fe fd8c 	bl	8002dd8 <HAL_GetTick>
 80042c0:	0002      	movs	r2, r0
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e086      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ce:	4b22      	ldr	r3, [pc, #136]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	2380      	movs	r3, #128	; 0x80
 80042d4:	049b      	lsls	r3, r3, #18
 80042d6:	4013      	ands	r3, r2
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042da:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 80042dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042de:	220f      	movs	r2, #15
 80042e0:	4393      	bics	r3, r2
 80042e2:	0019      	movs	r1, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 80042ea:	430a      	orrs	r2, r1
 80042ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80042ee:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4a1e      	ldr	r2, [pc, #120]	; (800436c <HAL_RCC_OscConfig+0x690>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	0019      	movs	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	431a      	orrs	r2, r3
 8004302:	4b15      	ldr	r3, [pc, #84]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4b12      	ldr	r3, [pc, #72]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 800430e:	2180      	movs	r1, #128	; 0x80
 8004310:	0449      	lsls	r1, r1, #17
 8004312:	430a      	orrs	r2, r1
 8004314:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004316:	f7fe fd5f 	bl	8002dd8 <HAL_GetTick>
 800431a:	0003      	movs	r3, r0
 800431c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004320:	f7fe fd5a 	bl	8002dd8 <HAL_GetTick>
 8004324:	0002      	movs	r2, r0
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e054      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	2380      	movs	r3, #128	; 0x80
 8004338:	049b      	lsls	r3, r3, #18
 800433a:	4013      	ands	r3, r2
 800433c:	d0f0      	beq.n	8004320 <HAL_RCC_OscConfig+0x644>
 800433e:	e04c      	b.n	80043da <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b04      	ldr	r3, [pc, #16]	; (8004358 <HAL_RCC_OscConfig+0x67c>)
 8004346:	4908      	ldr	r1, [pc, #32]	; (8004368 <HAL_RCC_OscConfig+0x68c>)
 8004348:	400a      	ands	r2, r1
 800434a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434c:	f7fe fd44 	bl	8002dd8 <HAL_GetTick>
 8004350:	0003      	movs	r3, r0
 8004352:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004354:	e015      	b.n	8004382 <HAL_RCC_OscConfig+0x6a6>
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	40021000 	.word	0x40021000
 800435c:	00001388 	.word	0x00001388
 8004360:	efffffff 	.word	0xefffffff
 8004364:	fffeffff 	.word	0xfffeffff
 8004368:	feffffff 	.word	0xfeffffff
 800436c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004370:	f7fe fd32 	bl	8002dd8 <HAL_GetTick>
 8004374:	0002      	movs	r2, r0
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e02c      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004382:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <HAL_RCC_OscConfig+0x708>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	049b      	lsls	r3, r3, #18
 800438a:	4013      	ands	r3, r2
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x694>
 800438e:	e024      	b.n	80043da <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e01f      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800439c:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <HAL_RCC_OscConfig+0x708>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80043a2:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <HAL_RCC_OscConfig+0x708>)
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	23c0      	movs	r3, #192	; 0xc0
 80043ac:	025b      	lsls	r3, r3, #9
 80043ae:	401a      	ands	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d10e      	bne.n	80043d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	220f      	movs	r2, #15
 80043bc:	401a      	ands	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	23f0      	movs	r3, #240	; 0xf0
 80043ca:	039b      	lsls	r3, r3, #14
 80043cc:	401a      	ands	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	0018      	movs	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	b008      	add	sp, #32
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40021000 	.word	0x40021000

080043e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0bf      	b.n	800457c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043fc:	4b61      	ldr	r3, [pc, #388]	; (8004584 <HAL_RCC_ClockConfig+0x19c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2201      	movs	r2, #1
 8004402:	4013      	ands	r3, r2
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d911      	bls.n	800442e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440a:	4b5e      	ldr	r3, [pc, #376]	; (8004584 <HAL_RCC_ClockConfig+0x19c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2201      	movs	r2, #1
 8004410:	4393      	bics	r3, r2
 8004412:	0019      	movs	r1, r3
 8004414:	4b5b      	ldr	r3, [pc, #364]	; (8004584 <HAL_RCC_ClockConfig+0x19c>)
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441c:	4b59      	ldr	r3, [pc, #356]	; (8004584 <HAL_RCC_ClockConfig+0x19c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2201      	movs	r2, #1
 8004422:	4013      	ands	r3, r2
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d001      	beq.n	800442e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e0a6      	b.n	800457c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2202      	movs	r2, #2
 8004434:	4013      	ands	r3, r2
 8004436:	d015      	beq.n	8004464 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2204      	movs	r2, #4
 800443e:	4013      	ands	r3, r2
 8004440:	d006      	beq.n	8004450 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004442:	4b51      	ldr	r3, [pc, #324]	; (8004588 <HAL_RCC_ClockConfig+0x1a0>)
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	4b50      	ldr	r3, [pc, #320]	; (8004588 <HAL_RCC_ClockConfig+0x1a0>)
 8004448:	21e0      	movs	r1, #224	; 0xe0
 800444a:	00c9      	lsls	r1, r1, #3
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004450:	4b4d      	ldr	r3, [pc, #308]	; (8004588 <HAL_RCC_ClockConfig+0x1a0>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	22f0      	movs	r2, #240	; 0xf0
 8004456:	4393      	bics	r3, r2
 8004458:	0019      	movs	r1, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	4b4a      	ldr	r3, [pc, #296]	; (8004588 <HAL_RCC_ClockConfig+0x1a0>)
 8004460:	430a      	orrs	r2, r1
 8004462:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2201      	movs	r2, #1
 800446a:	4013      	ands	r3, r2
 800446c:	d04c      	beq.n	8004508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d107      	bne.n	8004486 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	4b44      	ldr	r3, [pc, #272]	; (8004588 <HAL_RCC_ClockConfig+0x1a0>)
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	029b      	lsls	r3, r3, #10
 800447e:	4013      	ands	r3, r2
 8004480:	d120      	bne.n	80044c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e07a      	b.n	800457c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d107      	bne.n	800449e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448e:	4b3e      	ldr	r3, [pc, #248]	; (8004588 <HAL_RCC_ClockConfig+0x1a0>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	049b      	lsls	r3, r3, #18
 8004496:	4013      	ands	r3, r2
 8004498:	d114      	bne.n	80044c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e06e      	b.n	800457c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d107      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80044a6:	4b38      	ldr	r3, [pc, #224]	; (8004588 <HAL_RCC_ClockConfig+0x1a0>)
 80044a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044aa:	2380      	movs	r3, #128	; 0x80
 80044ac:	025b      	lsls	r3, r3, #9
 80044ae:	4013      	ands	r3, r2
 80044b0:	d108      	bne.n	80044c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e062      	b.n	800457c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b6:	4b34      	ldr	r3, [pc, #208]	; (8004588 <HAL_RCC_ClockConfig+0x1a0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2202      	movs	r2, #2
 80044bc:	4013      	ands	r3, r2
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e05b      	b.n	800457c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044c4:	4b30      	ldr	r3, [pc, #192]	; (8004588 <HAL_RCC_ClockConfig+0x1a0>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2203      	movs	r2, #3
 80044ca:	4393      	bics	r3, r2
 80044cc:	0019      	movs	r1, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	4b2d      	ldr	r3, [pc, #180]	; (8004588 <HAL_RCC_ClockConfig+0x1a0>)
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044d8:	f7fe fc7e 	bl	8002dd8 <HAL_GetTick>
 80044dc:	0003      	movs	r3, r0
 80044de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e0:	e009      	b.n	80044f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e2:	f7fe fc79 	bl	8002dd8 <HAL_GetTick>
 80044e6:	0002      	movs	r2, r0
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	4a27      	ldr	r2, [pc, #156]	; (800458c <HAL_RCC_ClockConfig+0x1a4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e042      	b.n	800457c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f6:	4b24      	ldr	r3, [pc, #144]	; (8004588 <HAL_RCC_ClockConfig+0x1a0>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	220c      	movs	r2, #12
 80044fc:	401a      	ands	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	429a      	cmp	r2, r3
 8004506:	d1ec      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004508:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <HAL_RCC_ClockConfig+0x19c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2201      	movs	r2, #1
 800450e:	4013      	ands	r3, r2
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d211      	bcs.n	800453a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004516:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <HAL_RCC_ClockConfig+0x19c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2201      	movs	r2, #1
 800451c:	4393      	bics	r3, r2
 800451e:	0019      	movs	r1, r3
 8004520:	4b18      	ldr	r3, [pc, #96]	; (8004584 <HAL_RCC_ClockConfig+0x19c>)
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004528:	4b16      	ldr	r3, [pc, #88]	; (8004584 <HAL_RCC_ClockConfig+0x19c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2201      	movs	r2, #1
 800452e:	4013      	ands	r3, r2
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d001      	beq.n	800453a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e020      	b.n	800457c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2204      	movs	r2, #4
 8004540:	4013      	ands	r3, r2
 8004542:	d009      	beq.n	8004558 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004544:	4b10      	ldr	r3, [pc, #64]	; (8004588 <HAL_RCC_ClockConfig+0x1a0>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4a11      	ldr	r2, [pc, #68]	; (8004590 <HAL_RCC_ClockConfig+0x1a8>)
 800454a:	4013      	ands	r3, r2
 800454c:	0019      	movs	r1, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <HAL_RCC_ClockConfig+0x1a0>)
 8004554:	430a      	orrs	r2, r1
 8004556:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004558:	f000 f820 	bl	800459c <HAL_RCC_GetSysClockFreq>
 800455c:	0001      	movs	r1, r0
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <HAL_RCC_ClockConfig+0x1a0>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	220f      	movs	r2, #15
 8004566:	4013      	ands	r3, r2
 8004568:	4a0a      	ldr	r2, [pc, #40]	; (8004594 <HAL_RCC_ClockConfig+0x1ac>)
 800456a:	5cd3      	ldrb	r3, [r2, r3]
 800456c:	000a      	movs	r2, r1
 800456e:	40da      	lsrs	r2, r3
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <HAL_RCC_ClockConfig+0x1b0>)
 8004572:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004574:	2000      	movs	r0, #0
 8004576:	f7fe fb19 	bl	8002bac <HAL_InitTick>
  
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	0018      	movs	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	b004      	add	sp, #16
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40022000 	.word	0x40022000
 8004588:	40021000 	.word	0x40021000
 800458c:	00001388 	.word	0x00001388
 8004590:	fffff8ff 	.word	0xfffff8ff
 8004594:	08006910 	.word	0x08006910
 8004598:	20000000 	.word	0x20000000

0800459c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800459c:	b590      	push	{r4, r7, lr}
 800459e:	b08f      	sub	sp, #60	; 0x3c
 80045a0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80045a2:	2314      	movs	r3, #20
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	4a37      	ldr	r2, [pc, #220]	; (8004684 <HAL_RCC_GetSysClockFreq+0xe8>)
 80045a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045aa:	c313      	stmia	r3!, {r0, r1, r4}
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80045b0:	1d3b      	adds	r3, r7, #4
 80045b2:	4a35      	ldr	r2, [pc, #212]	; (8004688 <HAL_RCC_GetSysClockFreq+0xec>)
 80045b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045b6:	c313      	stmia	r3!, {r0, r1, r4}
 80045b8:	6812      	ldr	r2, [r2, #0]
 80045ba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c0:	2300      	movs	r3, #0
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c4:	2300      	movs	r3, #0
 80045c6:	637b      	str	r3, [r7, #52]	; 0x34
 80045c8:	2300      	movs	r3, #0
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80045d0:	4b2e      	ldr	r3, [pc, #184]	; (800468c <HAL_RCC_GetSysClockFreq+0xf0>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	220c      	movs	r2, #12
 80045da:	4013      	ands	r3, r2
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d006      	beq.n	80045ee <HAL_RCC_GetSysClockFreq+0x52>
 80045e0:	2b0c      	cmp	r3, #12
 80045e2:	d043      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0xd0>
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d144      	bne.n	8004672 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045e8:	4b29      	ldr	r3, [pc, #164]	; (8004690 <HAL_RCC_GetSysClockFreq+0xf4>)
 80045ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80045ec:	e044      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80045ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f0:	0c9b      	lsrs	r3, r3, #18
 80045f2:	220f      	movs	r2, #15
 80045f4:	4013      	ands	r3, r2
 80045f6:	2214      	movs	r2, #20
 80045f8:	18ba      	adds	r2, r7, r2
 80045fa:	5cd3      	ldrb	r3, [r2, r3]
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80045fe:	4b23      	ldr	r3, [pc, #140]	; (800468c <HAL_RCC_GetSysClockFreq+0xf0>)
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	220f      	movs	r2, #15
 8004604:	4013      	ands	r3, r2
 8004606:	1d3a      	adds	r2, r7, #4
 8004608:	5cd3      	ldrb	r3, [r2, r3]
 800460a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800460c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800460e:	23c0      	movs	r3, #192	; 0xc0
 8004610:	025b      	lsls	r3, r3, #9
 8004612:	401a      	ands	r2, r3
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	025b      	lsls	r3, r3, #9
 8004618:	429a      	cmp	r2, r3
 800461a:	d109      	bne.n	8004630 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800461c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800461e:	481c      	ldr	r0, [pc, #112]	; (8004690 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004620:	f7fb fd84 	bl	800012c <__udivsi3>
 8004624:	0003      	movs	r3, r0
 8004626:	001a      	movs	r2, r3
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	4353      	muls	r3, r2
 800462c:	637b      	str	r3, [r7, #52]	; 0x34
 800462e:	e01a      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004632:	23c0      	movs	r3, #192	; 0xc0
 8004634:	025b      	lsls	r3, r3, #9
 8004636:	401a      	ands	r2, r3
 8004638:	23c0      	movs	r3, #192	; 0xc0
 800463a:	025b      	lsls	r3, r3, #9
 800463c:	429a      	cmp	r2, r3
 800463e:	d109      	bne.n	8004654 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004642:	4814      	ldr	r0, [pc, #80]	; (8004694 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004644:	f7fb fd72 	bl	800012c <__udivsi3>
 8004648:	0003      	movs	r3, r0
 800464a:	001a      	movs	r2, r3
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	4353      	muls	r3, r2
 8004650:	637b      	str	r3, [r7, #52]	; 0x34
 8004652:	e008      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004656:	480e      	ldr	r0, [pc, #56]	; (8004690 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004658:	f7fb fd68 	bl	800012c <__udivsi3>
 800465c:	0003      	movs	r3, r0
 800465e:	001a      	movs	r2, r3
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	4353      	muls	r3, r2
 8004664:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004668:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800466a:	e005      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800466c:	4b09      	ldr	r3, [pc, #36]	; (8004694 <HAL_RCC_GetSysClockFreq+0xf8>)
 800466e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004670:	e002      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004672:	4b07      	ldr	r3, [pc, #28]	; (8004690 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004674:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004676:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800467a:	0018      	movs	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	b00f      	add	sp, #60	; 0x3c
 8004680:	bd90      	pop	{r4, r7, pc}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	08006870 	.word	0x08006870
 8004688:	08006880 	.word	0x08006880
 800468c:	40021000 	.word	0x40021000
 8004690:	007a1200 	.word	0x007a1200
 8004694:	02dc6c00 	.word	0x02dc6c00

08004698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800469c:	4b02      	ldr	r3, [pc, #8]	; (80046a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800469e:	681b      	ldr	r3, [r3, #0]
}
 80046a0:	0018      	movs	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	20000000 	.word	0x20000000

080046ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80046b0:	f7ff fff2 	bl	8004698 <HAL_RCC_GetHCLKFreq>
 80046b4:	0001      	movs	r1, r0
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	2207      	movs	r2, #7
 80046be:	4013      	ands	r3, r2
 80046c0:	4a04      	ldr	r2, [pc, #16]	; (80046d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046c2:	5cd3      	ldrb	r3, [r2, r3]
 80046c4:	40d9      	lsrs	r1, r3
 80046c6:	000b      	movs	r3, r1
}    
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	40021000 	.word	0x40021000
 80046d4:	08006920 	.word	0x08006920

080046d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2207      	movs	r2, #7
 80046e6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046e8:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <HAL_RCC_GetClockConfig+0x4c>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2203      	movs	r2, #3
 80046ee:	401a      	ands	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <HAL_RCC_GetClockConfig+0x4c>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	22f0      	movs	r2, #240	; 0xf0
 80046fa:	401a      	ands	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004700:	4b08      	ldr	r3, [pc, #32]	; (8004724 <HAL_RCC_GetClockConfig+0x4c>)
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	23e0      	movs	r3, #224	; 0xe0
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	401a      	ands	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800470e:	4b06      	ldr	r3, [pc, #24]	; (8004728 <HAL_RCC_GetClockConfig+0x50>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2201      	movs	r2, #1
 8004714:	401a      	ands	r2, r3
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	601a      	str	r2, [r3, #0]
}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	46bd      	mov	sp, r7
 800471e:	b002      	add	sp, #8
 8004720:	bd80      	pop	{r7, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	40021000 	.word	0x40021000
 8004728:	40022000 	.word	0x40022000

0800472c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	025b      	lsls	r3, r3, #9
 8004744:	4013      	ands	r3, r2
 8004746:	d100      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004748:	e08f      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800474a:	2317      	movs	r3, #23
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004752:	4b67      	ldr	r3, [pc, #412]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004754:	69da      	ldr	r2, [r3, #28]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	055b      	lsls	r3, r3, #21
 800475a:	4013      	ands	r3, r2
 800475c:	d111      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800475e:	4b64      	ldr	r3, [pc, #400]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004760:	69da      	ldr	r2, [r3, #28]
 8004762:	4b63      	ldr	r3, [pc, #396]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004764:	2180      	movs	r1, #128	; 0x80
 8004766:	0549      	lsls	r1, r1, #21
 8004768:	430a      	orrs	r2, r1
 800476a:	61da      	str	r2, [r3, #28]
 800476c:	4b60      	ldr	r3, [pc, #384]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	2380      	movs	r3, #128	; 0x80
 8004772:	055b      	lsls	r3, r3, #21
 8004774:	4013      	ands	r3, r2
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800477a:	2317      	movs	r3, #23
 800477c:	18fb      	adds	r3, r7, r3
 800477e:	2201      	movs	r2, #1
 8004780:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004782:	4b5c      	ldr	r3, [pc, #368]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	2380      	movs	r3, #128	; 0x80
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	4013      	ands	r3, r2
 800478c:	d11a      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800478e:	4b59      	ldr	r3, [pc, #356]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4b58      	ldr	r3, [pc, #352]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004794:	2180      	movs	r1, #128	; 0x80
 8004796:	0049      	lsls	r1, r1, #1
 8004798:	430a      	orrs	r2, r1
 800479a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800479c:	f7fe fb1c 	bl	8002dd8 <HAL_GetTick>
 80047a0:	0003      	movs	r3, r0
 80047a2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a4:	e008      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a6:	f7fe fb17 	bl	8002dd8 <HAL_GetTick>
 80047aa:	0002      	movs	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b64      	cmp	r3, #100	; 0x64
 80047b2:	d901      	bls.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e097      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b8:	4b4e      	ldr	r3, [pc, #312]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	2380      	movs	r3, #128	; 0x80
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	4013      	ands	r3, r2
 80047c2:	d0f0      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047c4:	4b4a      	ldr	r3, [pc, #296]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047c6:	6a1a      	ldr	r2, [r3, #32]
 80047c8:	23c0      	movs	r3, #192	; 0xc0
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4013      	ands	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d034      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	23c0      	movs	r3, #192	; 0xc0
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4013      	ands	r3, r2
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d02c      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047e6:	4b42      	ldr	r3, [pc, #264]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	4a43      	ldr	r2, [pc, #268]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047f0:	4b3f      	ldr	r3, [pc, #252]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047f2:	6a1a      	ldr	r2, [r3, #32]
 80047f4:	4b3e      	ldr	r3, [pc, #248]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047f6:	2180      	movs	r1, #128	; 0x80
 80047f8:	0249      	lsls	r1, r1, #9
 80047fa:	430a      	orrs	r2, r1
 80047fc:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047fe:	4b3c      	ldr	r3, [pc, #240]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004800:	6a1a      	ldr	r2, [r3, #32]
 8004802:	4b3b      	ldr	r3, [pc, #236]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004804:	493d      	ldr	r1, [pc, #244]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004806:	400a      	ands	r2, r1
 8004808:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800480a:	4b39      	ldr	r3, [pc, #228]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	4013      	ands	r3, r2
 8004816:	d013      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7fe fade 	bl	8002dd8 <HAL_GetTick>
 800481c:	0003      	movs	r3, r0
 800481e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004820:	e009      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fe fad9 	bl	8002dd8 <HAL_GetTick>
 8004826:	0002      	movs	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	4a34      	ldr	r2, [pc, #208]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e058      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004836:	4b2e      	ldr	r3, [pc, #184]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	2202      	movs	r2, #2
 800483c:	4013      	ands	r3, r2
 800483e:	d0f0      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004840:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	4a2c      	ldr	r2, [pc, #176]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004846:	4013      	ands	r3, r2
 8004848:	0019      	movs	r1, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	4b28      	ldr	r3, [pc, #160]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004850:	430a      	orrs	r2, r1
 8004852:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004854:	2317      	movs	r3, #23
 8004856:	18fb      	adds	r3, r7, r3
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d105      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485e:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004864:	4927      	ldr	r1, [pc, #156]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004866:	400a      	ands	r2, r1
 8004868:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2201      	movs	r2, #1
 8004870:	4013      	ands	r3, r2
 8004872:	d009      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004874:	4b1e      	ldr	r3, [pc, #120]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	2203      	movs	r2, #3
 800487a:	4393      	bics	r3, r2
 800487c:	0019      	movs	r1, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	4b1b      	ldr	r3, [pc, #108]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004884:	430a      	orrs	r2, r1
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2220      	movs	r2, #32
 800488e:	4013      	ands	r3, r2
 8004890:	d009      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004892:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	2210      	movs	r2, #16
 8004898:	4393      	bics	r3, r2
 800489a:	0019      	movs	r1, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048a2:	430a      	orrs	r2, r1
 80048a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	029b      	lsls	r3, r3, #10
 80048ae:	4013      	ands	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048b2:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	2280      	movs	r2, #128	; 0x80
 80048b8:	4393      	bics	r3, r2
 80048ba:	0019      	movs	r1, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048c2:	430a      	orrs	r2, r1
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	2380      	movs	r3, #128	; 0x80
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	4013      	ands	r3, r2
 80048d0:	d009      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048d2:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	2240      	movs	r2, #64	; 0x40
 80048d8:	4393      	bics	r3, r2
 80048da:	0019      	movs	r1, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048e2:	430a      	orrs	r2, r1
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	0018      	movs	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b006      	add	sp, #24
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40021000 	.word	0x40021000
 80048f4:	40007000 	.word	0x40007000
 80048f8:	fffffcff 	.word	0xfffffcff
 80048fc:	fffeffff 	.word	0xfffeffff
 8004900:	00001388 	.word	0x00001388
 8004904:	efffffff 	.word	0xefffffff

08004908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e01e      	b.n	8004958 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	223d      	movs	r2, #61	; 0x3d
 800491e:	5c9b      	ldrb	r3, [r3, r2]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d107      	bne.n	8004936 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	223c      	movs	r2, #60	; 0x3c
 800492a:	2100      	movs	r1, #0
 800492c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	0018      	movs	r0, r3
 8004932:	f000 f815 	bl	8004960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	223d      	movs	r2, #61	; 0x3d
 800493a:	2102      	movs	r1, #2
 800493c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3304      	adds	r3, #4
 8004946:	0019      	movs	r1, r3
 8004948:	0010      	movs	r0, r2
 800494a:	f000 f969 	bl	8004c20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	223d      	movs	r2, #61	; 0x3d
 8004952:	2101      	movs	r1, #1
 8004954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	0018      	movs	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	b002      	add	sp, #8
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004968:	46c0      	nop			; (mov r8, r8)
 800496a:	46bd      	mov	sp, r7
 800496c:	b002      	add	sp, #8
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2101      	movs	r1, #1
 8004984:	430a      	orrs	r2, r1
 8004986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2207      	movs	r2, #7
 8004990:	4013      	ands	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b06      	cmp	r3, #6
 8004998:	d007      	beq.n	80049aa <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2101      	movs	r1, #1
 80049a6:	430a      	orrs	r2, r1
 80049a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	0018      	movs	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b004      	add	sp, #16
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2202      	movs	r2, #2
 80049c4:	4013      	ands	r3, r2
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d124      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2202      	movs	r2, #2
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d11d      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2203      	movs	r2, #3
 80049de:	4252      	negs	r2, r2
 80049e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2203      	movs	r2, #3
 80049f0:	4013      	ands	r3, r2
 80049f2:	d004      	beq.n	80049fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	0018      	movs	r0, r3
 80049f8:	f000 f8fa 	bl	8004bf0 <HAL_TIM_IC_CaptureCallback>
 80049fc:	e007      	b.n	8004a0e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	0018      	movs	r0, r3
 8004a02:	f000 f8ed 	bl	8004be0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f000 f8f9 	bl	8004c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d125      	bne.n	8004a6e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2204      	movs	r2, #4
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d11e      	bne.n	8004a6e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2205      	movs	r2, #5
 8004a36:	4252      	negs	r2, r2
 8004a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	23c0      	movs	r3, #192	; 0xc0
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d004      	beq.n	8004a58 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f000 f8cd 	bl	8004bf0 <HAL_TIM_IC_CaptureCallback>
 8004a56:	e007      	b.n	8004a68 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f000 f8c0 	bl	8004be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	0018      	movs	r0, r3
 8004a64:	f000 f8cc 	bl	8004c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	2208      	movs	r2, #8
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d124      	bne.n	8004ac6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2208      	movs	r2, #8
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d11d      	bne.n	8004ac6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2209      	movs	r2, #9
 8004a90:	4252      	negs	r2, r2
 8004a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2204      	movs	r2, #4
 8004a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f000 f8a1 	bl	8004bf0 <HAL_TIM_IC_CaptureCallback>
 8004aae:	e007      	b.n	8004ac0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 f894 	bl	8004be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	0018      	movs	r0, r3
 8004abc:	f000 f8a0 	bl	8004c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	2210      	movs	r2, #16
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d125      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2210      	movs	r2, #16
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b10      	cmp	r3, #16
 8004ae0:	d11e      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2211      	movs	r2, #17
 8004ae8:	4252      	negs	r2, r2
 8004aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2208      	movs	r2, #8
 8004af0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	23c0      	movs	r3, #192	; 0xc0
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4013      	ands	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	0018      	movs	r0, r3
 8004b04:	f000 f874 	bl	8004bf0 <HAL_TIM_IC_CaptureCallback>
 8004b08:	e007      	b.n	8004b1a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f000 f867 	bl	8004be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f000 f873 	bl	8004c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2201      	movs	r2, #1
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d10f      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d108      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2202      	movs	r2, #2
 8004b42:	4252      	negs	r2, r2
 8004b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f7fd fdf7 	bl	800273c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2280      	movs	r2, #128	; 0x80
 8004b56:	4013      	ands	r3, r2
 8004b58:	2b80      	cmp	r3, #128	; 0x80
 8004b5a:	d10f      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2280      	movs	r2, #128	; 0x80
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b80      	cmp	r3, #128	; 0x80
 8004b68:	d108      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2281      	movs	r2, #129	; 0x81
 8004b70:	4252      	negs	r2, r2
 8004b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	0018      	movs	r0, r3
 8004b78:	f000 f8d0 	bl	8004d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2240      	movs	r2, #64	; 0x40
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d10f      	bne.n	8004baa <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2240      	movs	r2, #64	; 0x40
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d108      	bne.n	8004baa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2241      	movs	r2, #65	; 0x41
 8004b9e:	4252      	negs	r2, r2
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f000 f833 	bl	8004c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d10f      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d108      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2221      	movs	r2, #33	; 0x21
 8004bcc:	4252      	negs	r2, r2
 8004bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f000 f89a 	bl	8004d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b002      	add	sp, #8
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004be8:	46c0      	nop			; (mov r8, r8)
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b002      	add	sp, #8
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bf8:	46c0      	nop			; (mov r8, r8)
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	b002      	add	sp, #8
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c08:	46c0      	nop			; (mov r8, r8)
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b002      	add	sp, #8
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c18:	46c0      	nop			; (mov r8, r8)
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b002      	add	sp, #8
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a30      	ldr	r2, [pc, #192]	; (8004cf4 <TIM_Base_SetConfig+0xd4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d008      	beq.n	8004c4a <TIM_Base_SetConfig+0x2a>
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	05db      	lsls	r3, r3, #23
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d003      	beq.n	8004c4a <TIM_Base_SetConfig+0x2a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a2c      	ldr	r2, [pc, #176]	; (8004cf8 <TIM_Base_SetConfig+0xd8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d108      	bne.n	8004c5c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2270      	movs	r2, #112	; 0x70
 8004c4e:	4393      	bics	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a25      	ldr	r2, [pc, #148]	; (8004cf4 <TIM_Base_SetConfig+0xd4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d014      	beq.n	8004c8e <TIM_Base_SetConfig+0x6e>
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	2380      	movs	r3, #128	; 0x80
 8004c68:	05db      	lsls	r3, r3, #23
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d00f      	beq.n	8004c8e <TIM_Base_SetConfig+0x6e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a21      	ldr	r2, [pc, #132]	; (8004cf8 <TIM_Base_SetConfig+0xd8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00b      	beq.n	8004c8e <TIM_Base_SetConfig+0x6e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a20      	ldr	r2, [pc, #128]	; (8004cfc <TIM_Base_SetConfig+0xdc>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d007      	beq.n	8004c8e <TIM_Base_SetConfig+0x6e>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a1f      	ldr	r2, [pc, #124]	; (8004d00 <TIM_Base_SetConfig+0xe0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d003      	beq.n	8004c8e <TIM_Base_SetConfig+0x6e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a1e      	ldr	r2, [pc, #120]	; (8004d04 <TIM_Base_SetConfig+0xe4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d108      	bne.n	8004ca0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a1d      	ldr	r2, [pc, #116]	; (8004d08 <TIM_Base_SetConfig+0xe8>)
 8004c92:	4013      	ands	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2280      	movs	r2, #128	; 0x80
 8004ca4:	4393      	bics	r3, r2
 8004ca6:	001a      	movs	r2, r3
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <TIM_Base_SetConfig+0xd4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <TIM_Base_SetConfig+0xbe>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a0b      	ldr	r2, [pc, #44]	; (8004d00 <TIM_Base_SetConfig+0xe0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d003      	beq.n	8004cde <TIM_Base_SetConfig+0xbe>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <TIM_Base_SetConfig+0xe4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d103      	bne.n	8004ce6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	615a      	str	r2, [r3, #20]
}
 8004cec:	46c0      	nop			; (mov r8, r8)
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	b004      	add	sp, #16
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40012c00 	.word	0x40012c00
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40002000 	.word	0x40002000
 8004d00:	40014400 	.word	0x40014400
 8004d04:	40014800 	.word	0x40014800
 8004d08:	fffffcff 	.word	0xfffffcff

08004d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b002      	add	sp, #8
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d24:	46c0      	nop			; (mov r8, r8)
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b002      	add	sp, #8
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <__errno>:
 8004d2c:	4b01      	ldr	r3, [pc, #4]	; (8004d34 <__errno+0x8>)
 8004d2e:	6818      	ldr	r0, [r3, #0]
 8004d30:	4770      	bx	lr
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	20000008 	.word	0x20000008

08004d38 <__libc_init_array>:
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	2600      	movs	r6, #0
 8004d3c:	4d0c      	ldr	r5, [pc, #48]	; (8004d70 <__libc_init_array+0x38>)
 8004d3e:	4c0d      	ldr	r4, [pc, #52]	; (8004d74 <__libc_init_array+0x3c>)
 8004d40:	1b64      	subs	r4, r4, r5
 8004d42:	10a4      	asrs	r4, r4, #2
 8004d44:	42a6      	cmp	r6, r4
 8004d46:	d109      	bne.n	8004d5c <__libc_init_array+0x24>
 8004d48:	2600      	movs	r6, #0
 8004d4a:	f001 fd81 	bl	8006850 <_init>
 8004d4e:	4d0a      	ldr	r5, [pc, #40]	; (8004d78 <__libc_init_array+0x40>)
 8004d50:	4c0a      	ldr	r4, [pc, #40]	; (8004d7c <__libc_init_array+0x44>)
 8004d52:	1b64      	subs	r4, r4, r5
 8004d54:	10a4      	asrs	r4, r4, #2
 8004d56:	42a6      	cmp	r6, r4
 8004d58:	d105      	bne.n	8004d66 <__libc_init_array+0x2e>
 8004d5a:	bd70      	pop	{r4, r5, r6, pc}
 8004d5c:	00b3      	lsls	r3, r6, #2
 8004d5e:	58eb      	ldr	r3, [r5, r3]
 8004d60:	4798      	blx	r3
 8004d62:	3601      	adds	r6, #1
 8004d64:	e7ee      	b.n	8004d44 <__libc_init_array+0xc>
 8004d66:	00b3      	lsls	r3, r6, #2
 8004d68:	58eb      	ldr	r3, [r5, r3]
 8004d6a:	4798      	blx	r3
 8004d6c:	3601      	adds	r6, #1
 8004d6e:	e7f2      	b.n	8004d56 <__libc_init_array+0x1e>
 8004d70:	08006b50 	.word	0x08006b50
 8004d74:	08006b50 	.word	0x08006b50
 8004d78:	08006b50 	.word	0x08006b50
 8004d7c:	08006b54 	.word	0x08006b54

08004d80 <memcpy>:
 8004d80:	2300      	movs	r3, #0
 8004d82:	b510      	push	{r4, lr}
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d100      	bne.n	8004d8a <memcpy+0xa>
 8004d88:	bd10      	pop	{r4, pc}
 8004d8a:	5ccc      	ldrb	r4, [r1, r3]
 8004d8c:	54c4      	strb	r4, [r0, r3]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	e7f8      	b.n	8004d84 <memcpy+0x4>

08004d92 <memset>:
 8004d92:	0003      	movs	r3, r0
 8004d94:	1812      	adds	r2, r2, r0
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d100      	bne.n	8004d9c <memset+0xa>
 8004d9a:	4770      	bx	lr
 8004d9c:	7019      	strb	r1, [r3, #0]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	e7f9      	b.n	8004d96 <memset+0x4>

08004da2 <__cvt>:
 8004da2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004da4:	b08b      	sub	sp, #44	; 0x2c
 8004da6:	0014      	movs	r4, r2
 8004da8:	1e1d      	subs	r5, r3, #0
 8004daa:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004dac:	da53      	bge.n	8004e56 <__cvt+0xb4>
 8004dae:	2480      	movs	r4, #128	; 0x80
 8004db0:	0624      	lsls	r4, r4, #24
 8004db2:	191b      	adds	r3, r3, r4
 8004db4:	001d      	movs	r5, r3
 8004db6:	0014      	movs	r4, r2
 8004db8:	232d      	movs	r3, #45	; 0x2d
 8004dba:	700b      	strb	r3, [r1, #0]
 8004dbc:	2320      	movs	r3, #32
 8004dbe:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004dc0:	2203      	movs	r2, #3
 8004dc2:	439e      	bics	r6, r3
 8004dc4:	2e46      	cmp	r6, #70	; 0x46
 8004dc6:	d007      	beq.n	8004dd8 <__cvt+0x36>
 8004dc8:	0033      	movs	r3, r6
 8004dca:	3b45      	subs	r3, #69	; 0x45
 8004dcc:	4259      	negs	r1, r3
 8004dce:	414b      	adcs	r3, r1
 8004dd0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004dd2:	3a01      	subs	r2, #1
 8004dd4:	18cb      	adds	r3, r1, r3
 8004dd6:	9310      	str	r3, [sp, #64]	; 0x40
 8004dd8:	ab09      	add	r3, sp, #36	; 0x24
 8004dda:	9304      	str	r3, [sp, #16]
 8004ddc:	ab08      	add	r3, sp, #32
 8004dde:	9303      	str	r3, [sp, #12]
 8004de0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004de2:	9200      	str	r2, [sp, #0]
 8004de4:	9302      	str	r3, [sp, #8]
 8004de6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004de8:	0022      	movs	r2, r4
 8004dea:	9301      	str	r3, [sp, #4]
 8004dec:	002b      	movs	r3, r5
 8004dee:	f000 fbb5 	bl	800555c <_dtoa_r>
 8004df2:	0007      	movs	r7, r0
 8004df4:	2e47      	cmp	r6, #71	; 0x47
 8004df6:	d102      	bne.n	8004dfe <__cvt+0x5c>
 8004df8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004dfa:	07db      	lsls	r3, r3, #31
 8004dfc:	d524      	bpl.n	8004e48 <__cvt+0xa6>
 8004dfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	9307      	str	r3, [sp, #28]
 8004e04:	2e46      	cmp	r6, #70	; 0x46
 8004e06:	d114      	bne.n	8004e32 <__cvt+0x90>
 8004e08:	783b      	ldrb	r3, [r7, #0]
 8004e0a:	2b30      	cmp	r3, #48	; 0x30
 8004e0c:	d10c      	bne.n	8004e28 <__cvt+0x86>
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2300      	movs	r3, #0
 8004e12:	0020      	movs	r0, r4
 8004e14:	0029      	movs	r1, r5
 8004e16:	f7fb fb0f 	bl	8000438 <__aeabi_dcmpeq>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d104      	bne.n	8004e28 <__cvt+0x86>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e2a:	9a07      	ldr	r2, [sp, #28]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	18d3      	adds	r3, r2, r3
 8004e30:	9307      	str	r3, [sp, #28]
 8004e32:	2200      	movs	r2, #0
 8004e34:	2300      	movs	r3, #0
 8004e36:	0020      	movs	r0, r4
 8004e38:	0029      	movs	r1, r5
 8004e3a:	f7fb fafd 	bl	8000438 <__aeabi_dcmpeq>
 8004e3e:	2230      	movs	r2, #48	; 0x30
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d00d      	beq.n	8004e60 <__cvt+0xbe>
 8004e44:	9b07      	ldr	r3, [sp, #28]
 8004e46:	9309      	str	r3, [sp, #36]	; 0x24
 8004e48:	0038      	movs	r0, r7
 8004e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004e4e:	1bdb      	subs	r3, r3, r7
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	b00b      	add	sp, #44	; 0x2c
 8004e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e56:	2300      	movs	r3, #0
 8004e58:	e7af      	b.n	8004dba <__cvt+0x18>
 8004e5a:	1c59      	adds	r1, r3, #1
 8004e5c:	9109      	str	r1, [sp, #36]	; 0x24
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e62:	9907      	ldr	r1, [sp, #28]
 8004e64:	428b      	cmp	r3, r1
 8004e66:	d3f8      	bcc.n	8004e5a <__cvt+0xb8>
 8004e68:	e7ee      	b.n	8004e48 <__cvt+0xa6>

08004e6a <__exponent>:
 8004e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e6c:	1c83      	adds	r3, r0, #2
 8004e6e:	b085      	sub	sp, #20
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	0006      	movs	r6, r0
 8004e74:	000c      	movs	r4, r1
 8004e76:	7002      	strb	r2, [r0, #0]
 8004e78:	232b      	movs	r3, #43	; 0x2b
 8004e7a:	2900      	cmp	r1, #0
 8004e7c:	da01      	bge.n	8004e82 <__exponent+0x18>
 8004e7e:	232d      	movs	r3, #45	; 0x2d
 8004e80:	424c      	negs	r4, r1
 8004e82:	7073      	strb	r3, [r6, #1]
 8004e84:	2c09      	cmp	r4, #9
 8004e86:	dd22      	ble.n	8004ece <__exponent+0x64>
 8004e88:	ab02      	add	r3, sp, #8
 8004e8a:	1ddd      	adds	r5, r3, #7
 8004e8c:	0020      	movs	r0, r4
 8004e8e:	210a      	movs	r1, #10
 8004e90:	f7fb fabc 	bl	800040c <__aeabi_idivmod>
 8004e94:	1e6f      	subs	r7, r5, #1
 8004e96:	3130      	adds	r1, #48	; 0x30
 8004e98:	7039      	strb	r1, [r7, #0]
 8004e9a:	0020      	movs	r0, r4
 8004e9c:	210a      	movs	r1, #10
 8004e9e:	f7fb f9cf 	bl	8000240 <__divsi3>
 8004ea2:	0004      	movs	r4, r0
 8004ea4:	2809      	cmp	r0, #9
 8004ea6:	dc0b      	bgt.n	8004ec0 <__exponent+0x56>
 8004ea8:	3d02      	subs	r5, #2
 8004eaa:	3430      	adds	r4, #48	; 0x30
 8004eac:	9b01      	ldr	r3, [sp, #4]
 8004eae:	702c      	strb	r4, [r5, #0]
 8004eb0:	aa02      	add	r2, sp, #8
 8004eb2:	3207      	adds	r2, #7
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	42aa      	cmp	r2, r5
 8004eb8:	d804      	bhi.n	8004ec4 <__exponent+0x5a>
 8004eba:	1b80      	subs	r0, r0, r6
 8004ebc:	b005      	add	sp, #20
 8004ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec0:	003d      	movs	r5, r7
 8004ec2:	e7e3      	b.n	8004e8c <__exponent+0x22>
 8004ec4:	782a      	ldrb	r2, [r5, #0]
 8004ec6:	3501      	adds	r5, #1
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	e7f0      	b.n	8004eb0 <__exponent+0x46>
 8004ece:	2330      	movs	r3, #48	; 0x30
 8004ed0:	18e4      	adds	r4, r4, r3
 8004ed2:	70b3      	strb	r3, [r6, #2]
 8004ed4:	1d30      	adds	r0, r6, #4
 8004ed6:	70f4      	strb	r4, [r6, #3]
 8004ed8:	e7ef      	b.n	8004eba <__exponent+0x50>
	...

08004edc <_printf_float>:
 8004edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ede:	b095      	sub	sp, #84	; 0x54
 8004ee0:	000c      	movs	r4, r1
 8004ee2:	920a      	str	r2, [sp, #40]	; 0x28
 8004ee4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ee6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004ee8:	9009      	str	r0, [sp, #36]	; 0x24
 8004eea:	f001 f917 	bl	800611c <_localeconv_r>
 8004eee:	6803      	ldr	r3, [r0, #0]
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	930c      	str	r3, [sp, #48]	; 0x30
 8004ef4:	f7fb f908 	bl	8000108 <strlen>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9312      	str	r3, [sp, #72]	; 0x48
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	900e      	str	r0, [sp, #56]	; 0x38
 8004f00:	930d      	str	r3, [sp, #52]	; 0x34
 8004f02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f04:	7e27      	ldrb	r7, [r4, #24]
 8004f06:	682b      	ldr	r3, [r5, #0]
 8004f08:	2207      	movs	r2, #7
 8004f0a:	05c9      	lsls	r1, r1, #23
 8004f0c:	d545      	bpl.n	8004f9a <_printf_float+0xbe>
 8004f0e:	189b      	adds	r3, r3, r2
 8004f10:	4393      	bics	r3, r2
 8004f12:	001a      	movs	r2, r3
 8004f14:	3208      	adds	r2, #8
 8004f16:	602a      	str	r2, [r5, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	64a2      	str	r2, [r4, #72]	; 0x48
 8004f1e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004f20:	2201      	movs	r2, #1
 8004f22:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004f24:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8004f26:	006b      	lsls	r3, r5, #1
 8004f28:	085b      	lsrs	r3, r3, #1
 8004f2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f2c:	4252      	negs	r2, r2
 8004f2e:	4bac      	ldr	r3, [pc, #688]	; (80051e0 <_printf_float+0x304>)
 8004f30:	0030      	movs	r0, r6
 8004f32:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004f34:	f7fc ff8e 	bl	8001e54 <__aeabi_dcmpun>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	d130      	bne.n	8004f9e <_printf_float+0xc2>
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	4ba8      	ldr	r3, [pc, #672]	; (80051e0 <_printf_float+0x304>)
 8004f40:	4252      	negs	r2, r2
 8004f42:	0030      	movs	r0, r6
 8004f44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004f46:	f7fb fa87 	bl	8000458 <__aeabi_dcmple>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d127      	bne.n	8004f9e <_printf_float+0xc2>
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2300      	movs	r3, #0
 8004f52:	0030      	movs	r0, r6
 8004f54:	0029      	movs	r1, r5
 8004f56:	f7fb fa75 	bl	8000444 <__aeabi_dcmplt>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d003      	beq.n	8004f66 <_printf_float+0x8a>
 8004f5e:	0023      	movs	r3, r4
 8004f60:	222d      	movs	r2, #45	; 0x2d
 8004f62:	3343      	adds	r3, #67	; 0x43
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	4d9f      	ldr	r5, [pc, #636]	; (80051e4 <_printf_float+0x308>)
 8004f68:	2f47      	cmp	r7, #71	; 0x47
 8004f6a:	d800      	bhi.n	8004f6e <_printf_float+0x92>
 8004f6c:	4d9e      	ldr	r5, [pc, #632]	; (80051e8 <_printf_float+0x30c>)
 8004f6e:	2303      	movs	r3, #3
 8004f70:	2600      	movs	r6, #0
 8004f72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f74:	6123      	str	r3, [r4, #16]
 8004f76:	3301      	adds	r3, #1
 8004f78:	439a      	bics	r2, r3
 8004f7a:	6022      	str	r2, [r4, #0]
 8004f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f7e:	aa13      	add	r2, sp, #76	; 0x4c
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	0021      	movs	r1, r4
 8004f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f88:	f000 f9f4 	bl	8005374 <_printf_common>
 8004f8c:	1c43      	adds	r3, r0, #1
 8004f8e:	d000      	beq.n	8004f92 <_printf_float+0xb6>
 8004f90:	e093      	b.n	80050ba <_printf_float+0x1de>
 8004f92:	2001      	movs	r0, #1
 8004f94:	4240      	negs	r0, r0
 8004f96:	b015      	add	sp, #84	; 0x54
 8004f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f9a:	3307      	adds	r3, #7
 8004f9c:	e7b8      	b.n	8004f10 <_printf_float+0x34>
 8004f9e:	0032      	movs	r2, r6
 8004fa0:	002b      	movs	r3, r5
 8004fa2:	0030      	movs	r0, r6
 8004fa4:	0029      	movs	r1, r5
 8004fa6:	f7fc ff55 	bl	8001e54 <__aeabi_dcmpun>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d004      	beq.n	8004fb8 <_printf_float+0xdc>
 8004fae:	4d8f      	ldr	r5, [pc, #572]	; (80051ec <_printf_float+0x310>)
 8004fb0:	2f47      	cmp	r7, #71	; 0x47
 8004fb2:	d8dc      	bhi.n	8004f6e <_printf_float+0x92>
 8004fb4:	4d8e      	ldr	r5, [pc, #568]	; (80051f0 <_printf_float+0x314>)
 8004fb6:	e7da      	b.n	8004f6e <_printf_float+0x92>
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004fbc:	6862      	ldr	r2, [r4, #4]
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	1c51      	adds	r1, r2, #1
 8004fc4:	d143      	bne.n	800504e <_printf_float+0x172>
 8004fc6:	3207      	adds	r2, #7
 8004fc8:	6062      	str	r2, [r4, #4]
 8004fca:	aa12      	add	r2, sp, #72	; 0x48
 8004fcc:	2100      	movs	r1, #0
 8004fce:	9205      	str	r2, [sp, #20]
 8004fd0:	aa11      	add	r2, sp, #68	; 0x44
 8004fd2:	9203      	str	r2, [sp, #12]
 8004fd4:	2223      	movs	r2, #35	; 0x23
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	9106      	str	r1, [sp, #24]
 8004fda:	9301      	str	r3, [sp, #4]
 8004fdc:	a908      	add	r1, sp, #32
 8004fde:	6863      	ldr	r3, [r4, #4]
 8004fe0:	1852      	adds	r2, r2, r1
 8004fe2:	9202      	str	r2, [sp, #8]
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	0032      	movs	r2, r6
 8004fe8:	002b      	movs	r3, r5
 8004fea:	9704      	str	r7, [sp, #16]
 8004fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fee:	f7ff fed8 	bl	8004da2 <__cvt>
 8004ff2:	2320      	movs	r3, #32
 8004ff4:	003a      	movs	r2, r7
 8004ff6:	0005      	movs	r5, r0
 8004ff8:	439a      	bics	r2, r3
 8004ffa:	2a47      	cmp	r2, #71	; 0x47
 8004ffc:	d107      	bne.n	800500e <_printf_float+0x132>
 8004ffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005000:	1cda      	adds	r2, r3, #3
 8005002:	db02      	blt.n	800500a <_printf_float+0x12e>
 8005004:	6862      	ldr	r2, [r4, #4]
 8005006:	4293      	cmp	r3, r2
 8005008:	dd45      	ble.n	8005096 <_printf_float+0x1ba>
 800500a:	3f02      	subs	r7, #2
 800500c:	b2ff      	uxtb	r7, r7
 800500e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005010:	2f65      	cmp	r7, #101	; 0x65
 8005012:	d825      	bhi.n	8005060 <_printf_float+0x184>
 8005014:	0020      	movs	r0, r4
 8005016:	3901      	subs	r1, #1
 8005018:	003a      	movs	r2, r7
 800501a:	3050      	adds	r0, #80	; 0x50
 800501c:	9111      	str	r1, [sp, #68]	; 0x44
 800501e:	f7ff ff24 	bl	8004e6a <__exponent>
 8005022:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005024:	0006      	movs	r6, r0
 8005026:	1813      	adds	r3, r2, r0
 8005028:	6123      	str	r3, [r4, #16]
 800502a:	2a01      	cmp	r2, #1
 800502c:	dc02      	bgt.n	8005034 <_printf_float+0x158>
 800502e:	6822      	ldr	r2, [r4, #0]
 8005030:	07d2      	lsls	r2, r2, #31
 8005032:	d501      	bpl.n	8005038 <_printf_float+0x15c>
 8005034:	3301      	adds	r3, #1
 8005036:	6123      	str	r3, [r4, #16]
 8005038:	2323      	movs	r3, #35	; 0x23
 800503a:	aa08      	add	r2, sp, #32
 800503c:	189b      	adds	r3, r3, r2
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d09b      	beq.n	8004f7c <_printf_float+0xa0>
 8005044:	0023      	movs	r3, r4
 8005046:	222d      	movs	r2, #45	; 0x2d
 8005048:	3343      	adds	r3, #67	; 0x43
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	e796      	b.n	8004f7c <_printf_float+0xa0>
 800504e:	2f67      	cmp	r7, #103	; 0x67
 8005050:	d100      	bne.n	8005054 <_printf_float+0x178>
 8005052:	e176      	b.n	8005342 <_printf_float+0x466>
 8005054:	2f47      	cmp	r7, #71	; 0x47
 8005056:	d1b8      	bne.n	8004fca <_printf_float+0xee>
 8005058:	2a00      	cmp	r2, #0
 800505a:	d1b6      	bne.n	8004fca <_printf_float+0xee>
 800505c:	2201      	movs	r2, #1
 800505e:	e7b3      	b.n	8004fc8 <_printf_float+0xec>
 8005060:	2f66      	cmp	r7, #102	; 0x66
 8005062:	d119      	bne.n	8005098 <_printf_float+0x1bc>
 8005064:	6863      	ldr	r3, [r4, #4]
 8005066:	2900      	cmp	r1, #0
 8005068:	dd0c      	ble.n	8005084 <_printf_float+0x1a8>
 800506a:	6121      	str	r1, [r4, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d102      	bne.n	8005076 <_printf_float+0x19a>
 8005070:	6822      	ldr	r2, [r4, #0]
 8005072:	07d2      	lsls	r2, r2, #31
 8005074:	d502      	bpl.n	800507c <_printf_float+0x1a0>
 8005076:	3301      	adds	r3, #1
 8005078:	185b      	adds	r3, r3, r1
 800507a:	6123      	str	r3, [r4, #16]
 800507c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800507e:	2600      	movs	r6, #0
 8005080:	65a3      	str	r3, [r4, #88]	; 0x58
 8005082:	e7d9      	b.n	8005038 <_printf_float+0x15c>
 8005084:	2b00      	cmp	r3, #0
 8005086:	d103      	bne.n	8005090 <_printf_float+0x1b4>
 8005088:	2201      	movs	r2, #1
 800508a:	6821      	ldr	r1, [r4, #0]
 800508c:	4211      	tst	r1, r2
 800508e:	d000      	beq.n	8005092 <_printf_float+0x1b6>
 8005090:	1c9a      	adds	r2, r3, #2
 8005092:	6122      	str	r2, [r4, #16]
 8005094:	e7f2      	b.n	800507c <_printf_float+0x1a0>
 8005096:	2767      	movs	r7, #103	; 0x67
 8005098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800509a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800509c:	4293      	cmp	r3, r2
 800509e:	db05      	blt.n	80050ac <_printf_float+0x1d0>
 80050a0:	6822      	ldr	r2, [r4, #0]
 80050a2:	6123      	str	r3, [r4, #16]
 80050a4:	07d2      	lsls	r2, r2, #31
 80050a6:	d5e9      	bpl.n	800507c <_printf_float+0x1a0>
 80050a8:	3301      	adds	r3, #1
 80050aa:	e7e6      	b.n	800507a <_printf_float+0x19e>
 80050ac:	2101      	movs	r1, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	dc01      	bgt.n	80050b6 <_printf_float+0x1da>
 80050b2:	1849      	adds	r1, r1, r1
 80050b4:	1ac9      	subs	r1, r1, r3
 80050b6:	1852      	adds	r2, r2, r1
 80050b8:	e7eb      	b.n	8005092 <_printf_float+0x1b6>
 80050ba:	6822      	ldr	r2, [r4, #0]
 80050bc:	0553      	lsls	r3, r2, #21
 80050be:	d408      	bmi.n	80050d2 <_printf_float+0x1f6>
 80050c0:	6923      	ldr	r3, [r4, #16]
 80050c2:	002a      	movs	r2, r5
 80050c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80050ca:	47a8      	blx	r5
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d129      	bne.n	8005124 <_printf_float+0x248>
 80050d0:	e75f      	b.n	8004f92 <_printf_float+0xb6>
 80050d2:	2f65      	cmp	r7, #101	; 0x65
 80050d4:	d800      	bhi.n	80050d8 <_printf_float+0x1fc>
 80050d6:	e0e0      	b.n	800529a <_printf_float+0x3be>
 80050d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80050da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80050dc:	2200      	movs	r2, #0
 80050de:	2300      	movs	r3, #0
 80050e0:	f7fb f9aa 	bl	8000438 <__aeabi_dcmpeq>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	d034      	beq.n	8005152 <_printf_float+0x276>
 80050e8:	2301      	movs	r3, #1
 80050ea:	4a42      	ldr	r2, [pc, #264]	; (80051f4 <_printf_float+0x318>)
 80050ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80050f2:	47a8      	blx	r5
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d100      	bne.n	80050fa <_printf_float+0x21e>
 80050f8:	e74b      	b.n	8004f92 <_printf_float+0xb6>
 80050fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050fe:	4293      	cmp	r3, r2
 8005100:	db02      	blt.n	8005108 <_printf_float+0x22c>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	07db      	lsls	r3, r3, #31
 8005106:	d50d      	bpl.n	8005124 <_printf_float+0x248>
 8005108:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800510a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800510c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800510e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005112:	47a8      	blx	r5
 8005114:	2500      	movs	r5, #0
 8005116:	1c43      	adds	r3, r0, #1
 8005118:	d100      	bne.n	800511c <_printf_float+0x240>
 800511a:	e73a      	b.n	8004f92 <_printf_float+0xb6>
 800511c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800511e:	3b01      	subs	r3, #1
 8005120:	42ab      	cmp	r3, r5
 8005122:	dc0a      	bgt.n	800513a <_printf_float+0x25e>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	079b      	lsls	r3, r3, #30
 8005128:	d500      	bpl.n	800512c <_printf_float+0x250>
 800512a:	e108      	b.n	800533e <_printf_float+0x462>
 800512c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800512e:	68e0      	ldr	r0, [r4, #12]
 8005130:	4298      	cmp	r0, r3
 8005132:	db00      	blt.n	8005136 <_printf_float+0x25a>
 8005134:	e72f      	b.n	8004f96 <_printf_float+0xba>
 8005136:	0018      	movs	r0, r3
 8005138:	e72d      	b.n	8004f96 <_printf_float+0xba>
 800513a:	0022      	movs	r2, r4
 800513c:	2301      	movs	r3, #1
 800513e:	321a      	adds	r2, #26
 8005140:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005142:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005144:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005146:	47b0      	blx	r6
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d100      	bne.n	800514e <_printf_float+0x272>
 800514c:	e721      	b.n	8004f92 <_printf_float+0xb6>
 800514e:	3501      	adds	r5, #1
 8005150:	e7e4      	b.n	800511c <_printf_float+0x240>
 8005152:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005154:	2b00      	cmp	r3, #0
 8005156:	dc2d      	bgt.n	80051b4 <_printf_float+0x2d8>
 8005158:	2301      	movs	r3, #1
 800515a:	4a26      	ldr	r2, [pc, #152]	; (80051f4 <_printf_float+0x318>)
 800515c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800515e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005160:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005162:	47b0      	blx	r6
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d100      	bne.n	800516a <_printf_float+0x28e>
 8005168:	e713      	b.n	8004f92 <_printf_float+0xb6>
 800516a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800516c:	2b00      	cmp	r3, #0
 800516e:	d105      	bne.n	800517c <_printf_float+0x2a0>
 8005170:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005172:	2b00      	cmp	r3, #0
 8005174:	d102      	bne.n	800517c <_printf_float+0x2a0>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	07db      	lsls	r3, r3, #31
 800517a:	d5d3      	bpl.n	8005124 <_printf_float+0x248>
 800517c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800517e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005180:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005182:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005186:	47b0      	blx	r6
 8005188:	2600      	movs	r6, #0
 800518a:	1c43      	adds	r3, r0, #1
 800518c:	d100      	bne.n	8005190 <_printf_float+0x2b4>
 800518e:	e700      	b.n	8004f92 <_printf_float+0xb6>
 8005190:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005192:	425b      	negs	r3, r3
 8005194:	42b3      	cmp	r3, r6
 8005196:	dc01      	bgt.n	800519c <_printf_float+0x2c0>
 8005198:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800519a:	e792      	b.n	80050c2 <_printf_float+0x1e6>
 800519c:	0022      	movs	r2, r4
 800519e:	2301      	movs	r3, #1
 80051a0:	321a      	adds	r2, #26
 80051a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80051a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051a6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80051a8:	47b8      	blx	r7
 80051aa:	1c43      	adds	r3, r0, #1
 80051ac:	d100      	bne.n	80051b0 <_printf_float+0x2d4>
 80051ae:	e6f0      	b.n	8004f92 <_printf_float+0xb6>
 80051b0:	3601      	adds	r6, #1
 80051b2:	e7ed      	b.n	8005190 <_printf_float+0x2b4>
 80051b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051b6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80051b8:	429f      	cmp	r7, r3
 80051ba:	dd00      	ble.n	80051be <_printf_float+0x2e2>
 80051bc:	001f      	movs	r7, r3
 80051be:	2f00      	cmp	r7, #0
 80051c0:	dd08      	ble.n	80051d4 <_printf_float+0x2f8>
 80051c2:	003b      	movs	r3, r7
 80051c4:	002a      	movs	r2, r5
 80051c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80051c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80051cc:	47b0      	blx	r6
 80051ce:	1c43      	adds	r3, r0, #1
 80051d0:	d100      	bne.n	80051d4 <_printf_float+0x2f8>
 80051d2:	e6de      	b.n	8004f92 <_printf_float+0xb6>
 80051d4:	2300      	movs	r3, #0
 80051d6:	930d      	str	r3, [sp, #52]	; 0x34
 80051d8:	43fb      	mvns	r3, r7
 80051da:	17db      	asrs	r3, r3, #31
 80051dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80051de:	e018      	b.n	8005212 <_printf_float+0x336>
 80051e0:	7fefffff 	.word	0x7fefffff
 80051e4:	0800692c 	.word	0x0800692c
 80051e8:	08006928 	.word	0x08006928
 80051ec:	08006934 	.word	0x08006934
 80051f0:	08006930 	.word	0x08006930
 80051f4:	08006938 	.word	0x08006938
 80051f8:	0022      	movs	r2, r4
 80051fa:	2301      	movs	r3, #1
 80051fc:	321a      	adds	r2, #26
 80051fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005202:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005204:	47b0      	blx	r6
 8005206:	1c43      	adds	r3, r0, #1
 8005208:	d100      	bne.n	800520c <_printf_float+0x330>
 800520a:	e6c2      	b.n	8004f92 <_printf_float+0xb6>
 800520c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800520e:	3301      	adds	r3, #1
 8005210:	930d      	str	r3, [sp, #52]	; 0x34
 8005212:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005214:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8005216:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005218:	403b      	ands	r3, r7
 800521a:	1af3      	subs	r3, r6, r3
 800521c:	4293      	cmp	r3, r2
 800521e:	dceb      	bgt.n	80051f8 <_printf_float+0x31c>
 8005220:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005222:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005224:	19ad      	adds	r5, r5, r6
 8005226:	4293      	cmp	r3, r2
 8005228:	db10      	blt.n	800524c <_printf_float+0x370>
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	07db      	lsls	r3, r3, #31
 800522e:	d40d      	bmi.n	800524c <_printf_float+0x370>
 8005230:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8005232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005234:	1bbe      	subs	r6, r7, r6
 8005236:	1aff      	subs	r7, r7, r3
 8005238:	42b7      	cmp	r7, r6
 800523a:	dd00      	ble.n	800523e <_printf_float+0x362>
 800523c:	0037      	movs	r7, r6
 800523e:	2f00      	cmp	r7, #0
 8005240:	dc0d      	bgt.n	800525e <_printf_float+0x382>
 8005242:	43fe      	mvns	r6, r7
 8005244:	17f3      	asrs	r3, r6, #31
 8005246:	2500      	movs	r5, #0
 8005248:	930c      	str	r3, [sp, #48]	; 0x30
 800524a:	e01c      	b.n	8005286 <_printf_float+0x3aa>
 800524c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800524e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005250:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005252:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005254:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005256:	47b8      	blx	r7
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d1e9      	bne.n	8005230 <_printf_float+0x354>
 800525c:	e699      	b.n	8004f92 <_printf_float+0xb6>
 800525e:	003b      	movs	r3, r7
 8005260:	002a      	movs	r2, r5
 8005262:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005266:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005268:	47a8      	blx	r5
 800526a:	1c43      	adds	r3, r0, #1
 800526c:	d1e9      	bne.n	8005242 <_printf_float+0x366>
 800526e:	e690      	b.n	8004f92 <_printf_float+0xb6>
 8005270:	0022      	movs	r2, r4
 8005272:	2301      	movs	r3, #1
 8005274:	321a      	adds	r2, #26
 8005276:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800527a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800527c:	47b0      	blx	r6
 800527e:	1c43      	adds	r3, r0, #1
 8005280:	d100      	bne.n	8005284 <_printf_float+0x3a8>
 8005282:	e686      	b.n	8004f92 <_printf_float+0xb6>
 8005284:	3501      	adds	r5, #1
 8005286:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005288:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800528a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800528c:	1a9b      	subs	r3, r3, r2
 800528e:	003a      	movs	r2, r7
 8005290:	400a      	ands	r2, r1
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	42ab      	cmp	r3, r5
 8005296:	dceb      	bgt.n	8005270 <_printf_float+0x394>
 8005298:	e744      	b.n	8005124 <_printf_float+0x248>
 800529a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800529c:	2b01      	cmp	r3, #1
 800529e:	dc02      	bgt.n	80052a6 <_printf_float+0x3ca>
 80052a0:	2301      	movs	r3, #1
 80052a2:	421a      	tst	r2, r3
 80052a4:	d032      	beq.n	800530c <_printf_float+0x430>
 80052a6:	2301      	movs	r3, #1
 80052a8:	002a      	movs	r2, r5
 80052aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80052ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052ae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80052b0:	47b8      	blx	r7
 80052b2:	1c43      	adds	r3, r0, #1
 80052b4:	d100      	bne.n	80052b8 <_printf_float+0x3dc>
 80052b6:	e66c      	b.n	8004f92 <_printf_float+0xb6>
 80052b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80052be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80052c2:	3501      	adds	r5, #1
 80052c4:	47b8      	blx	r7
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	d100      	bne.n	80052cc <_printf_float+0x3f0>
 80052ca:	e662      	b.n	8004f92 <_printf_float+0xb6>
 80052cc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80052ce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80052d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052d2:	2200      	movs	r2, #0
 80052d4:	1e5f      	subs	r7, r3, #1
 80052d6:	2300      	movs	r3, #0
 80052d8:	f7fb f8ae 	bl	8000438 <__aeabi_dcmpeq>
 80052dc:	003b      	movs	r3, r7
 80052de:	2800      	cmp	r0, #0
 80052e0:	d014      	beq.n	800530c <_printf_float+0x430>
 80052e2:	2500      	movs	r5, #0
 80052e4:	e00a      	b.n	80052fc <_printf_float+0x420>
 80052e6:	0022      	movs	r2, r4
 80052e8:	2301      	movs	r3, #1
 80052ea:	321a      	adds	r2, #26
 80052ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80052ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052f0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80052f2:	47b8      	blx	r7
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	d100      	bne.n	80052fa <_printf_float+0x41e>
 80052f8:	e64b      	b.n	8004f92 <_printf_float+0xb6>
 80052fa:	3501      	adds	r5, #1
 80052fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052fe:	3b01      	subs	r3, #1
 8005300:	42ab      	cmp	r3, r5
 8005302:	dcf0      	bgt.n	80052e6 <_printf_float+0x40a>
 8005304:	0022      	movs	r2, r4
 8005306:	0033      	movs	r3, r6
 8005308:	3250      	adds	r2, #80	; 0x50
 800530a:	e6db      	b.n	80050c4 <_printf_float+0x1e8>
 800530c:	002a      	movs	r2, r5
 800530e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005312:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005314:	47a8      	blx	r5
 8005316:	1c43      	adds	r3, r0, #1
 8005318:	d1f4      	bne.n	8005304 <_printf_float+0x428>
 800531a:	e63a      	b.n	8004f92 <_printf_float+0xb6>
 800531c:	0022      	movs	r2, r4
 800531e:	2301      	movs	r3, #1
 8005320:	3219      	adds	r2, #25
 8005322:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005326:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005328:	47b0      	blx	r6
 800532a:	1c43      	adds	r3, r0, #1
 800532c:	d100      	bne.n	8005330 <_printf_float+0x454>
 800532e:	e630      	b.n	8004f92 <_printf_float+0xb6>
 8005330:	3501      	adds	r5, #1
 8005332:	68e3      	ldr	r3, [r4, #12]
 8005334:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	42ab      	cmp	r3, r5
 800533a:	dcef      	bgt.n	800531c <_printf_float+0x440>
 800533c:	e6f6      	b.n	800512c <_printf_float+0x250>
 800533e:	2500      	movs	r5, #0
 8005340:	e7f7      	b.n	8005332 <_printf_float+0x456>
 8005342:	2a00      	cmp	r2, #0
 8005344:	d100      	bne.n	8005348 <_printf_float+0x46c>
 8005346:	e689      	b.n	800505c <_printf_float+0x180>
 8005348:	2100      	movs	r1, #0
 800534a:	9106      	str	r1, [sp, #24]
 800534c:	a912      	add	r1, sp, #72	; 0x48
 800534e:	9105      	str	r1, [sp, #20]
 8005350:	a911      	add	r1, sp, #68	; 0x44
 8005352:	9103      	str	r1, [sp, #12]
 8005354:	2123      	movs	r1, #35	; 0x23
 8005356:	a808      	add	r0, sp, #32
 8005358:	1809      	adds	r1, r1, r0
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	9200      	str	r2, [sp, #0]
 8005360:	002b      	movs	r3, r5
 8005362:	9704      	str	r7, [sp, #16]
 8005364:	9102      	str	r1, [sp, #8]
 8005366:	0032      	movs	r2, r6
 8005368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800536a:	f7ff fd1a 	bl	8004da2 <__cvt>
 800536e:	0005      	movs	r5, r0
 8005370:	e645      	b.n	8004ffe <_printf_float+0x122>
 8005372:	46c0      	nop			; (mov r8, r8)

08005374 <_printf_common>:
 8005374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005376:	0015      	movs	r5, r2
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	688a      	ldr	r2, [r1, #8]
 800537c:	690b      	ldr	r3, [r1, #16]
 800537e:	9000      	str	r0, [sp, #0]
 8005380:	000c      	movs	r4, r1
 8005382:	4293      	cmp	r3, r2
 8005384:	da00      	bge.n	8005388 <_printf_common+0x14>
 8005386:	0013      	movs	r3, r2
 8005388:	0022      	movs	r2, r4
 800538a:	602b      	str	r3, [r5, #0]
 800538c:	3243      	adds	r2, #67	; 0x43
 800538e:	7812      	ldrb	r2, [r2, #0]
 8005390:	2a00      	cmp	r2, #0
 8005392:	d001      	beq.n	8005398 <_printf_common+0x24>
 8005394:	3301      	adds	r3, #1
 8005396:	602b      	str	r3, [r5, #0]
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	069b      	lsls	r3, r3, #26
 800539c:	d502      	bpl.n	80053a4 <_printf_common+0x30>
 800539e:	682b      	ldr	r3, [r5, #0]
 80053a0:	3302      	adds	r3, #2
 80053a2:	602b      	str	r3, [r5, #0]
 80053a4:	2706      	movs	r7, #6
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	401f      	ands	r7, r3
 80053aa:	d027      	beq.n	80053fc <_printf_common+0x88>
 80053ac:	0023      	movs	r3, r4
 80053ae:	3343      	adds	r3, #67	; 0x43
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	1e5a      	subs	r2, r3, #1
 80053b4:	4193      	sbcs	r3, r2
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	0692      	lsls	r2, r2, #26
 80053ba:	d430      	bmi.n	800541e <_printf_common+0xaa>
 80053bc:	0022      	movs	r2, r4
 80053be:	9901      	ldr	r1, [sp, #4]
 80053c0:	3243      	adds	r2, #67	; 0x43
 80053c2:	9800      	ldr	r0, [sp, #0]
 80053c4:	9e08      	ldr	r6, [sp, #32]
 80053c6:	47b0      	blx	r6
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d025      	beq.n	8005418 <_printf_common+0xa4>
 80053cc:	2306      	movs	r3, #6
 80053ce:	6820      	ldr	r0, [r4, #0]
 80053d0:	682a      	ldr	r2, [r5, #0]
 80053d2:	68e1      	ldr	r1, [r4, #12]
 80053d4:	4003      	ands	r3, r0
 80053d6:	2500      	movs	r5, #0
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d103      	bne.n	80053e4 <_printf_common+0x70>
 80053dc:	1a8d      	subs	r5, r1, r2
 80053de:	43eb      	mvns	r3, r5
 80053e0:	17db      	asrs	r3, r3, #31
 80053e2:	401d      	ands	r5, r3
 80053e4:	68a3      	ldr	r3, [r4, #8]
 80053e6:	6922      	ldr	r2, [r4, #16]
 80053e8:	4293      	cmp	r3, r2
 80053ea:	dd01      	ble.n	80053f0 <_printf_common+0x7c>
 80053ec:	1a9b      	subs	r3, r3, r2
 80053ee:	18ed      	adds	r5, r5, r3
 80053f0:	2700      	movs	r7, #0
 80053f2:	42bd      	cmp	r5, r7
 80053f4:	d120      	bne.n	8005438 <_printf_common+0xc4>
 80053f6:	2000      	movs	r0, #0
 80053f8:	e010      	b.n	800541c <_printf_common+0xa8>
 80053fa:	3701      	adds	r7, #1
 80053fc:	68e3      	ldr	r3, [r4, #12]
 80053fe:	682a      	ldr	r2, [r5, #0]
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	42bb      	cmp	r3, r7
 8005404:	ddd2      	ble.n	80053ac <_printf_common+0x38>
 8005406:	0022      	movs	r2, r4
 8005408:	2301      	movs	r3, #1
 800540a:	3219      	adds	r2, #25
 800540c:	9901      	ldr	r1, [sp, #4]
 800540e:	9800      	ldr	r0, [sp, #0]
 8005410:	9e08      	ldr	r6, [sp, #32]
 8005412:	47b0      	blx	r6
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	d1f0      	bne.n	80053fa <_printf_common+0x86>
 8005418:	2001      	movs	r0, #1
 800541a:	4240      	negs	r0, r0
 800541c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800541e:	2030      	movs	r0, #48	; 0x30
 8005420:	18e1      	adds	r1, r4, r3
 8005422:	3143      	adds	r1, #67	; 0x43
 8005424:	7008      	strb	r0, [r1, #0]
 8005426:	0021      	movs	r1, r4
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	3145      	adds	r1, #69	; 0x45
 800542c:	7809      	ldrb	r1, [r1, #0]
 800542e:	18a2      	adds	r2, r4, r2
 8005430:	3243      	adds	r2, #67	; 0x43
 8005432:	3302      	adds	r3, #2
 8005434:	7011      	strb	r1, [r2, #0]
 8005436:	e7c1      	b.n	80053bc <_printf_common+0x48>
 8005438:	0022      	movs	r2, r4
 800543a:	2301      	movs	r3, #1
 800543c:	321a      	adds	r2, #26
 800543e:	9901      	ldr	r1, [sp, #4]
 8005440:	9800      	ldr	r0, [sp, #0]
 8005442:	9e08      	ldr	r6, [sp, #32]
 8005444:	47b0      	blx	r6
 8005446:	1c43      	adds	r3, r0, #1
 8005448:	d0e6      	beq.n	8005418 <_printf_common+0xa4>
 800544a:	3701      	adds	r7, #1
 800544c:	e7d1      	b.n	80053f2 <_printf_common+0x7e>

0800544e <quorem>:
 800544e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005450:	6903      	ldr	r3, [r0, #16]
 8005452:	690c      	ldr	r4, [r1, #16]
 8005454:	b089      	sub	sp, #36	; 0x24
 8005456:	0007      	movs	r7, r0
 8005458:	9105      	str	r1, [sp, #20]
 800545a:	2600      	movs	r6, #0
 800545c:	42a3      	cmp	r3, r4
 800545e:	db65      	blt.n	800552c <quorem+0xde>
 8005460:	000b      	movs	r3, r1
 8005462:	3c01      	subs	r4, #1
 8005464:	3314      	adds	r3, #20
 8005466:	00a5      	lsls	r5, r4, #2
 8005468:	9303      	str	r3, [sp, #12]
 800546a:	195b      	adds	r3, r3, r5
 800546c:	9304      	str	r3, [sp, #16]
 800546e:	0003      	movs	r3, r0
 8005470:	3314      	adds	r3, #20
 8005472:	9302      	str	r3, [sp, #8]
 8005474:	195d      	adds	r5, r3, r5
 8005476:	9b04      	ldr	r3, [sp, #16]
 8005478:	6828      	ldr	r0, [r5, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	1c59      	adds	r1, r3, #1
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	f7fa fe54 	bl	800012c <__udivsi3>
 8005484:	9001      	str	r0, [sp, #4]
 8005486:	42b0      	cmp	r0, r6
 8005488:	d029      	beq.n	80054de <quorem+0x90>
 800548a:	9b03      	ldr	r3, [sp, #12]
 800548c:	9802      	ldr	r0, [sp, #8]
 800548e:	469c      	mov	ip, r3
 8005490:	9606      	str	r6, [sp, #24]
 8005492:	4662      	mov	r2, ip
 8005494:	ca08      	ldmia	r2!, {r3}
 8005496:	4694      	mov	ip, r2
 8005498:	9a01      	ldr	r2, [sp, #4]
 800549a:	b299      	uxth	r1, r3
 800549c:	4351      	muls	r1, r2
 800549e:	0c1b      	lsrs	r3, r3, #16
 80054a0:	4353      	muls	r3, r2
 80054a2:	1989      	adds	r1, r1, r6
 80054a4:	0c0a      	lsrs	r2, r1, #16
 80054a6:	189b      	adds	r3, r3, r2
 80054a8:	9307      	str	r3, [sp, #28]
 80054aa:	0c1e      	lsrs	r6, r3, #16
 80054ac:	6803      	ldr	r3, [r0, #0]
 80054ae:	b289      	uxth	r1, r1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	9b06      	ldr	r3, [sp, #24]
 80054b4:	18d2      	adds	r2, r2, r3
 80054b6:	6803      	ldr	r3, [r0, #0]
 80054b8:	1a52      	subs	r2, r2, r1
 80054ba:	0c19      	lsrs	r1, r3, #16
 80054bc:	466b      	mov	r3, sp
 80054be:	8b9b      	ldrh	r3, [r3, #28]
 80054c0:	1acb      	subs	r3, r1, r3
 80054c2:	1411      	asrs	r1, r2, #16
 80054c4:	185b      	adds	r3, r3, r1
 80054c6:	1419      	asrs	r1, r3, #16
 80054c8:	b292      	uxth	r2, r2
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	431a      	orrs	r2, r3
 80054ce:	9b04      	ldr	r3, [sp, #16]
 80054d0:	9106      	str	r1, [sp, #24]
 80054d2:	c004      	stmia	r0!, {r2}
 80054d4:	4563      	cmp	r3, ip
 80054d6:	d2dc      	bcs.n	8005492 <quorem+0x44>
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d02d      	beq.n	800553a <quorem+0xec>
 80054de:	9905      	ldr	r1, [sp, #20]
 80054e0:	0038      	movs	r0, r7
 80054e2:	f001 f845 	bl	8006570 <__mcmp>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	db1f      	blt.n	800552a <quorem+0xdc>
 80054ea:	2500      	movs	r5, #0
 80054ec:	9b01      	ldr	r3, [sp, #4]
 80054ee:	9802      	ldr	r0, [sp, #8]
 80054f0:	3301      	adds	r3, #1
 80054f2:	9903      	ldr	r1, [sp, #12]
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	6802      	ldr	r2, [r0, #0]
 80054f8:	c908      	ldmia	r1!, {r3}
 80054fa:	b292      	uxth	r2, r2
 80054fc:	1955      	adds	r5, r2, r5
 80054fe:	b29a      	uxth	r2, r3
 8005500:	1aaa      	subs	r2, r5, r2
 8005502:	6805      	ldr	r5, [r0, #0]
 8005504:	0c1b      	lsrs	r3, r3, #16
 8005506:	0c2d      	lsrs	r5, r5, #16
 8005508:	1aeb      	subs	r3, r5, r3
 800550a:	1415      	asrs	r5, r2, #16
 800550c:	195b      	adds	r3, r3, r5
 800550e:	141d      	asrs	r5, r3, #16
 8005510:	b292      	uxth	r2, r2
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	4313      	orrs	r3, r2
 8005516:	c008      	stmia	r0!, {r3}
 8005518:	9b04      	ldr	r3, [sp, #16]
 800551a:	428b      	cmp	r3, r1
 800551c:	d2eb      	bcs.n	80054f6 <quorem+0xa8>
 800551e:	9a02      	ldr	r2, [sp, #8]
 8005520:	00a3      	lsls	r3, r4, #2
 8005522:	18d3      	adds	r3, r2, r3
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	2a00      	cmp	r2, #0
 8005528:	d011      	beq.n	800554e <quorem+0x100>
 800552a:	9e01      	ldr	r6, [sp, #4]
 800552c:	0030      	movs	r0, r6
 800552e:	b009      	add	sp, #36	; 0x24
 8005530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005532:	682b      	ldr	r3, [r5, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d104      	bne.n	8005542 <quorem+0xf4>
 8005538:	3c01      	subs	r4, #1
 800553a:	9b02      	ldr	r3, [sp, #8]
 800553c:	3d04      	subs	r5, #4
 800553e:	42ab      	cmp	r3, r5
 8005540:	d3f7      	bcc.n	8005532 <quorem+0xe4>
 8005542:	613c      	str	r4, [r7, #16]
 8005544:	e7cb      	b.n	80054de <quorem+0x90>
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	2a00      	cmp	r2, #0
 800554a:	d104      	bne.n	8005556 <quorem+0x108>
 800554c:	3c01      	subs	r4, #1
 800554e:	9a02      	ldr	r2, [sp, #8]
 8005550:	3b04      	subs	r3, #4
 8005552:	429a      	cmp	r2, r3
 8005554:	d3f7      	bcc.n	8005546 <quorem+0xf8>
 8005556:	613c      	str	r4, [r7, #16]
 8005558:	e7e7      	b.n	800552a <quorem+0xdc>
	...

0800555c <_dtoa_r>:
 800555c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800555e:	0016      	movs	r6, r2
 8005560:	001f      	movs	r7, r3
 8005562:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005564:	b09b      	sub	sp, #108	; 0x6c
 8005566:	9002      	str	r0, [sp, #8]
 8005568:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800556a:	9606      	str	r6, [sp, #24]
 800556c:	9707      	str	r7, [sp, #28]
 800556e:	2c00      	cmp	r4, #0
 8005570:	d108      	bne.n	8005584 <_dtoa_r+0x28>
 8005572:	2010      	movs	r0, #16
 8005574:	f000 fdde 	bl	8006134 <malloc>
 8005578:	9b02      	ldr	r3, [sp, #8]
 800557a:	6258      	str	r0, [r3, #36]	; 0x24
 800557c:	6044      	str	r4, [r0, #4]
 800557e:	6084      	str	r4, [r0, #8]
 8005580:	6004      	str	r4, [r0, #0]
 8005582:	60c4      	str	r4, [r0, #12]
 8005584:	9b02      	ldr	r3, [sp, #8]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	6819      	ldr	r1, [r3, #0]
 800558a:	2900      	cmp	r1, #0
 800558c:	d00b      	beq.n	80055a6 <_dtoa_r+0x4a>
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	2301      	movs	r3, #1
 8005592:	4093      	lsls	r3, r2
 8005594:	604a      	str	r2, [r1, #4]
 8005596:	608b      	str	r3, [r1, #8]
 8005598:	9802      	ldr	r0, [sp, #8]
 800559a:	f000 fe0d 	bl	80061b8 <_Bfree>
 800559e:	2200      	movs	r2, #0
 80055a0:	9b02      	ldr	r3, [sp, #8]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	2f00      	cmp	r7, #0
 80055a8:	da20      	bge.n	80055ec <_dtoa_r+0x90>
 80055aa:	2301      	movs	r3, #1
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	007b      	lsls	r3, r7, #1
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	9307      	str	r3, [sp, #28]
 80055b4:	9c07      	ldr	r4, [sp, #28]
 80055b6:	4bb2      	ldr	r3, [pc, #712]	; (8005880 <_dtoa_r+0x324>)
 80055b8:	0022      	movs	r2, r4
 80055ba:	9317      	str	r3, [sp, #92]	; 0x5c
 80055bc:	401a      	ands	r2, r3
 80055be:	429a      	cmp	r2, r3
 80055c0:	d117      	bne.n	80055f2 <_dtoa_r+0x96>
 80055c2:	4bb0      	ldr	r3, [pc, #704]	; (8005884 <_dtoa_r+0x328>)
 80055c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	9b06      	ldr	r3, [sp, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d103      	bne.n	80055d6 <_dtoa_r+0x7a>
 80055ce:	0324      	lsls	r4, r4, #12
 80055d0:	d101      	bne.n	80055d6 <_dtoa_r+0x7a>
 80055d2:	f000 fd87 	bl	80060e4 <_dtoa_r+0xb88>
 80055d6:	4bac      	ldr	r3, [pc, #688]	; (8005888 <_dtoa_r+0x32c>)
 80055d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80055da:	9308      	str	r3, [sp, #32]
 80055dc:	2a00      	cmp	r2, #0
 80055de:	d002      	beq.n	80055e6 <_dtoa_r+0x8a>
 80055e0:	4baa      	ldr	r3, [pc, #680]	; (800588c <_dtoa_r+0x330>)
 80055e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	9808      	ldr	r0, [sp, #32]
 80055e8:	b01b      	add	sp, #108	; 0x6c
 80055ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ec:	2300      	movs	r3, #0
 80055ee:	602b      	str	r3, [r5, #0]
 80055f0:	e7e0      	b.n	80055b4 <_dtoa_r+0x58>
 80055f2:	9e06      	ldr	r6, [sp, #24]
 80055f4:	9f07      	ldr	r7, [sp, #28]
 80055f6:	2200      	movs	r2, #0
 80055f8:	2300      	movs	r3, #0
 80055fa:	0030      	movs	r0, r6
 80055fc:	0039      	movs	r1, r7
 80055fe:	f7fa ff1b 	bl	8000438 <__aeabi_dcmpeq>
 8005602:	1e05      	subs	r5, r0, #0
 8005604:	d00b      	beq.n	800561e <_dtoa_r+0xc2>
 8005606:	2301      	movs	r3, #1
 8005608:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	4ba0      	ldr	r3, [pc, #640]	; (8005890 <_dtoa_r+0x334>)
 800560e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005610:	9308      	str	r3, [sp, #32]
 8005612:	2a00      	cmp	r2, #0
 8005614:	d0e7      	beq.n	80055e6 <_dtoa_r+0x8a>
 8005616:	4a9f      	ldr	r2, [pc, #636]	; (8005894 <_dtoa_r+0x338>)
 8005618:	9924      	ldr	r1, [sp, #144]	; 0x90
 800561a:	600a      	str	r2, [r1, #0]
 800561c:	e7e3      	b.n	80055e6 <_dtoa_r+0x8a>
 800561e:	ab18      	add	r3, sp, #96	; 0x60
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	ab19      	add	r3, sp, #100	; 0x64
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	0032      	movs	r2, r6
 8005628:	003b      	movs	r3, r7
 800562a:	9802      	ldr	r0, [sp, #8]
 800562c:	f001 f81e 	bl	800666c <__d2b>
 8005630:	0063      	lsls	r3, r4, #1
 8005632:	9003      	str	r0, [sp, #12]
 8005634:	0d5b      	lsrs	r3, r3, #21
 8005636:	d074      	beq.n	8005722 <_dtoa_r+0x1c6>
 8005638:	033a      	lsls	r2, r7, #12
 800563a:	4c97      	ldr	r4, [pc, #604]	; (8005898 <_dtoa_r+0x33c>)
 800563c:	0b12      	lsrs	r2, r2, #12
 800563e:	4314      	orrs	r4, r2
 8005640:	0021      	movs	r1, r4
 8005642:	4a96      	ldr	r2, [pc, #600]	; (800589c <_dtoa_r+0x340>)
 8005644:	0030      	movs	r0, r6
 8005646:	9516      	str	r5, [sp, #88]	; 0x58
 8005648:	189e      	adds	r6, r3, r2
 800564a:	2200      	movs	r2, #0
 800564c:	4b94      	ldr	r3, [pc, #592]	; (80058a0 <_dtoa_r+0x344>)
 800564e:	f7fc f8b9 	bl	80017c4 <__aeabi_dsub>
 8005652:	4a94      	ldr	r2, [pc, #592]	; (80058a4 <_dtoa_r+0x348>)
 8005654:	4b94      	ldr	r3, [pc, #592]	; (80058a8 <_dtoa_r+0x34c>)
 8005656:	f7fb fe43 	bl	80012e0 <__aeabi_dmul>
 800565a:	4a94      	ldr	r2, [pc, #592]	; (80058ac <_dtoa_r+0x350>)
 800565c:	4b94      	ldr	r3, [pc, #592]	; (80058b0 <_dtoa_r+0x354>)
 800565e:	f7fa ff19 	bl	8000494 <__aeabi_dadd>
 8005662:	0004      	movs	r4, r0
 8005664:	0030      	movs	r0, r6
 8005666:	000d      	movs	r5, r1
 8005668:	f7fc fc46 	bl	8001ef8 <__aeabi_i2d>
 800566c:	4a91      	ldr	r2, [pc, #580]	; (80058b4 <_dtoa_r+0x358>)
 800566e:	4b92      	ldr	r3, [pc, #584]	; (80058b8 <_dtoa_r+0x35c>)
 8005670:	f7fb fe36 	bl	80012e0 <__aeabi_dmul>
 8005674:	0002      	movs	r2, r0
 8005676:	000b      	movs	r3, r1
 8005678:	0020      	movs	r0, r4
 800567a:	0029      	movs	r1, r5
 800567c:	f7fa ff0a 	bl	8000494 <__aeabi_dadd>
 8005680:	0004      	movs	r4, r0
 8005682:	000d      	movs	r5, r1
 8005684:	f7fc fc02 	bl	8001e8c <__aeabi_d2iz>
 8005688:	2200      	movs	r2, #0
 800568a:	0007      	movs	r7, r0
 800568c:	2300      	movs	r3, #0
 800568e:	0020      	movs	r0, r4
 8005690:	0029      	movs	r1, r5
 8005692:	f7fa fed7 	bl	8000444 <__aeabi_dcmplt>
 8005696:	2800      	cmp	r0, #0
 8005698:	d009      	beq.n	80056ae <_dtoa_r+0x152>
 800569a:	0038      	movs	r0, r7
 800569c:	f7fc fc2c 	bl	8001ef8 <__aeabi_i2d>
 80056a0:	002b      	movs	r3, r5
 80056a2:	0022      	movs	r2, r4
 80056a4:	f7fa fec8 	bl	8000438 <__aeabi_dcmpeq>
 80056a8:	4243      	negs	r3, r0
 80056aa:	4158      	adcs	r0, r3
 80056ac:	1a3f      	subs	r7, r7, r0
 80056ae:	2301      	movs	r3, #1
 80056b0:	9314      	str	r3, [sp, #80]	; 0x50
 80056b2:	2f16      	cmp	r7, #22
 80056b4:	d80d      	bhi.n	80056d2 <_dtoa_r+0x176>
 80056b6:	4981      	ldr	r1, [pc, #516]	; (80058bc <_dtoa_r+0x360>)
 80056b8:	00fb      	lsls	r3, r7, #3
 80056ba:	18c9      	adds	r1, r1, r3
 80056bc:	6808      	ldr	r0, [r1, #0]
 80056be:	6849      	ldr	r1, [r1, #4]
 80056c0:	9a06      	ldr	r2, [sp, #24]
 80056c2:	9b07      	ldr	r3, [sp, #28]
 80056c4:	f7fa fed2 	bl	800046c <__aeabi_dcmpgt>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d046      	beq.n	800575a <_dtoa_r+0x1fe>
 80056cc:	2300      	movs	r3, #0
 80056ce:	3f01      	subs	r7, #1
 80056d0:	9314      	str	r3, [sp, #80]	; 0x50
 80056d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80056d4:	1b9e      	subs	r6, r3, r6
 80056d6:	2300      	movs	r3, #0
 80056d8:	930a      	str	r3, [sp, #40]	; 0x28
 80056da:	0033      	movs	r3, r6
 80056dc:	3b01      	subs	r3, #1
 80056de:	930b      	str	r3, [sp, #44]	; 0x2c
 80056e0:	d504      	bpl.n	80056ec <_dtoa_r+0x190>
 80056e2:	2301      	movs	r3, #1
 80056e4:	1b9b      	subs	r3, r3, r6
 80056e6:	930a      	str	r3, [sp, #40]	; 0x28
 80056e8:	2300      	movs	r3, #0
 80056ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80056ec:	2f00      	cmp	r7, #0
 80056ee:	db36      	blt.n	800575e <_dtoa_r+0x202>
 80056f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056f2:	9711      	str	r7, [sp, #68]	; 0x44
 80056f4:	19db      	adds	r3, r3, r7
 80056f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80056f8:	2300      	movs	r3, #0
 80056fa:	9304      	str	r3, [sp, #16]
 80056fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056fe:	2401      	movs	r4, #1
 8005700:	2b09      	cmp	r3, #9
 8005702:	d900      	bls.n	8005706 <_dtoa_r+0x1aa>
 8005704:	e084      	b.n	8005810 <_dtoa_r+0x2b4>
 8005706:	2b05      	cmp	r3, #5
 8005708:	dd02      	ble.n	8005710 <_dtoa_r+0x1b4>
 800570a:	2400      	movs	r4, #0
 800570c:	3b04      	subs	r3, #4
 800570e:	9320      	str	r3, [sp, #128]	; 0x80
 8005710:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005712:	1e98      	subs	r0, r3, #2
 8005714:	2803      	cmp	r0, #3
 8005716:	d900      	bls.n	800571a <_dtoa_r+0x1be>
 8005718:	e084      	b.n	8005824 <_dtoa_r+0x2c8>
 800571a:	f7fa fcfd 	bl	8000118 <__gnu_thumb1_case_uqi>
 800571e:	7775      	.short	0x7775
 8005720:	6a28      	.short	0x6a28
 8005722:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005724:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005726:	189e      	adds	r6, r3, r2
 8005728:	4b65      	ldr	r3, [pc, #404]	; (80058c0 <_dtoa_r+0x364>)
 800572a:	18f2      	adds	r2, r6, r3
 800572c:	2a20      	cmp	r2, #32
 800572e:	dd0f      	ble.n	8005750 <_dtoa_r+0x1f4>
 8005730:	2340      	movs	r3, #64	; 0x40
 8005732:	1a9b      	subs	r3, r3, r2
 8005734:	409c      	lsls	r4, r3
 8005736:	4b63      	ldr	r3, [pc, #396]	; (80058c4 <_dtoa_r+0x368>)
 8005738:	9806      	ldr	r0, [sp, #24]
 800573a:	18f3      	adds	r3, r6, r3
 800573c:	40d8      	lsrs	r0, r3
 800573e:	4320      	orrs	r0, r4
 8005740:	f7fc fc14 	bl	8001f6c <__aeabi_ui2d>
 8005744:	2301      	movs	r3, #1
 8005746:	4c60      	ldr	r4, [pc, #384]	; (80058c8 <_dtoa_r+0x36c>)
 8005748:	3e01      	subs	r6, #1
 800574a:	1909      	adds	r1, r1, r4
 800574c:	9316      	str	r3, [sp, #88]	; 0x58
 800574e:	e77c      	b.n	800564a <_dtoa_r+0xee>
 8005750:	2320      	movs	r3, #32
 8005752:	9806      	ldr	r0, [sp, #24]
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	4098      	lsls	r0, r3
 8005758:	e7f2      	b.n	8005740 <_dtoa_r+0x1e4>
 800575a:	9014      	str	r0, [sp, #80]	; 0x50
 800575c:	e7b9      	b.n	80056d2 <_dtoa_r+0x176>
 800575e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005760:	1bdb      	subs	r3, r3, r7
 8005762:	930a      	str	r3, [sp, #40]	; 0x28
 8005764:	427b      	negs	r3, r7
 8005766:	9304      	str	r3, [sp, #16]
 8005768:	2300      	movs	r3, #0
 800576a:	9311      	str	r3, [sp, #68]	; 0x44
 800576c:	e7c6      	b.n	80056fc <_dtoa_r+0x1a0>
 800576e:	2301      	movs	r3, #1
 8005770:	930d      	str	r3, [sp, #52]	; 0x34
 8005772:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005774:	2b00      	cmp	r3, #0
 8005776:	dd59      	ble.n	800582c <_dtoa_r+0x2d0>
 8005778:	930c      	str	r3, [sp, #48]	; 0x30
 800577a:	9309      	str	r3, [sp, #36]	; 0x24
 800577c:	9a02      	ldr	r2, [sp, #8]
 800577e:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8005780:	2200      	movs	r2, #0
 8005782:	606a      	str	r2, [r5, #4]
 8005784:	3204      	adds	r2, #4
 8005786:	0010      	movs	r0, r2
 8005788:	3014      	adds	r0, #20
 800578a:	6869      	ldr	r1, [r5, #4]
 800578c:	4298      	cmp	r0, r3
 800578e:	d952      	bls.n	8005836 <_dtoa_r+0x2da>
 8005790:	9802      	ldr	r0, [sp, #8]
 8005792:	f000 fcd9 	bl	8006148 <_Balloc>
 8005796:	9b02      	ldr	r3, [sp, #8]
 8005798:	6028      	str	r0, [r5, #0]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	9308      	str	r3, [sp, #32]
 80057a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a2:	2b0e      	cmp	r3, #14
 80057a4:	d900      	bls.n	80057a8 <_dtoa_r+0x24c>
 80057a6:	e10a      	b.n	80059be <_dtoa_r+0x462>
 80057a8:	2c00      	cmp	r4, #0
 80057aa:	d100      	bne.n	80057ae <_dtoa_r+0x252>
 80057ac:	e107      	b.n	80059be <_dtoa_r+0x462>
 80057ae:	9b06      	ldr	r3, [sp, #24]
 80057b0:	9c07      	ldr	r4, [sp, #28]
 80057b2:	9312      	str	r3, [sp, #72]	; 0x48
 80057b4:	9413      	str	r4, [sp, #76]	; 0x4c
 80057b6:	2f00      	cmp	r7, #0
 80057b8:	dc00      	bgt.n	80057bc <_dtoa_r+0x260>
 80057ba:	e089      	b.n	80058d0 <_dtoa_r+0x374>
 80057bc:	210f      	movs	r1, #15
 80057be:	003a      	movs	r2, r7
 80057c0:	4b3e      	ldr	r3, [pc, #248]	; (80058bc <_dtoa_r+0x360>)
 80057c2:	400a      	ands	r2, r1
 80057c4:	00d2      	lsls	r2, r2, #3
 80057c6:	189b      	adds	r3, r3, r2
 80057c8:	681d      	ldr	r5, [r3, #0]
 80057ca:	685e      	ldr	r6, [r3, #4]
 80057cc:	2302      	movs	r3, #2
 80057ce:	113c      	asrs	r4, r7, #4
 80057d0:	930e      	str	r3, [sp, #56]	; 0x38
 80057d2:	06e3      	lsls	r3, r4, #27
 80057d4:	d50b      	bpl.n	80057ee <_dtoa_r+0x292>
 80057d6:	4b3d      	ldr	r3, [pc, #244]	; (80058cc <_dtoa_r+0x370>)
 80057d8:	400c      	ands	r4, r1
 80057da:	6a1a      	ldr	r2, [r3, #32]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	9812      	ldr	r0, [sp, #72]	; 0x48
 80057e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80057e2:	f7fb f973 	bl	8000acc <__aeabi_ddiv>
 80057e6:	2303      	movs	r3, #3
 80057e8:	9006      	str	r0, [sp, #24]
 80057ea:	9107      	str	r1, [sp, #28]
 80057ec:	930e      	str	r3, [sp, #56]	; 0x38
 80057ee:	2300      	movs	r3, #0
 80057f0:	e03a      	b.n	8005868 <_dtoa_r+0x30c>
 80057f2:	2301      	movs	r3, #1
 80057f4:	930d      	str	r3, [sp, #52]	; 0x34
 80057f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057f8:	18fb      	adds	r3, r7, r3
 80057fa:	930c      	str	r3, [sp, #48]	; 0x30
 80057fc:	3301      	adds	r3, #1
 80057fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	dcbb      	bgt.n	800577c <_dtoa_r+0x220>
 8005804:	2301      	movs	r3, #1
 8005806:	e7b9      	b.n	800577c <_dtoa_r+0x220>
 8005808:	2300      	movs	r3, #0
 800580a:	e7b1      	b.n	8005770 <_dtoa_r+0x214>
 800580c:	2300      	movs	r3, #0
 800580e:	e7f1      	b.n	80057f4 <_dtoa_r+0x298>
 8005810:	2300      	movs	r3, #0
 8005812:	940d      	str	r4, [sp, #52]	; 0x34
 8005814:	9320      	str	r3, [sp, #128]	; 0x80
 8005816:	3b01      	subs	r3, #1
 8005818:	2200      	movs	r2, #0
 800581a:	930c      	str	r3, [sp, #48]	; 0x30
 800581c:	9309      	str	r3, [sp, #36]	; 0x24
 800581e:	3313      	adds	r3, #19
 8005820:	9221      	str	r2, [sp, #132]	; 0x84
 8005822:	e7ab      	b.n	800577c <_dtoa_r+0x220>
 8005824:	2301      	movs	r3, #1
 8005826:	930d      	str	r3, [sp, #52]	; 0x34
 8005828:	3b02      	subs	r3, #2
 800582a:	e7f5      	b.n	8005818 <_dtoa_r+0x2bc>
 800582c:	2301      	movs	r3, #1
 800582e:	930c      	str	r3, [sp, #48]	; 0x30
 8005830:	9309      	str	r3, [sp, #36]	; 0x24
 8005832:	001a      	movs	r2, r3
 8005834:	e7f4      	b.n	8005820 <_dtoa_r+0x2c4>
 8005836:	3101      	adds	r1, #1
 8005838:	6069      	str	r1, [r5, #4]
 800583a:	0052      	lsls	r2, r2, #1
 800583c:	e7a3      	b.n	8005786 <_dtoa_r+0x22a>
 800583e:	2301      	movs	r3, #1
 8005840:	421c      	tst	r4, r3
 8005842:	d00e      	beq.n	8005862 <_dtoa_r+0x306>
 8005844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005846:	4a21      	ldr	r2, [pc, #132]	; (80058cc <_dtoa_r+0x370>)
 8005848:	3301      	adds	r3, #1
 800584a:	930e      	str	r3, [sp, #56]	; 0x38
 800584c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800584e:	0028      	movs	r0, r5
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	189b      	adds	r3, r3, r2
 8005854:	0031      	movs	r1, r6
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f7fb fd41 	bl	80012e0 <__aeabi_dmul>
 800585e:	0005      	movs	r5, r0
 8005860:	000e      	movs	r6, r1
 8005862:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005864:	1064      	asrs	r4, r4, #1
 8005866:	3301      	adds	r3, #1
 8005868:	9310      	str	r3, [sp, #64]	; 0x40
 800586a:	2c00      	cmp	r4, #0
 800586c:	d1e7      	bne.n	800583e <_dtoa_r+0x2e2>
 800586e:	9806      	ldr	r0, [sp, #24]
 8005870:	9907      	ldr	r1, [sp, #28]
 8005872:	002a      	movs	r2, r5
 8005874:	0033      	movs	r3, r6
 8005876:	f7fb f929 	bl	8000acc <__aeabi_ddiv>
 800587a:	9006      	str	r0, [sp, #24]
 800587c:	9107      	str	r1, [sp, #28]
 800587e:	e042      	b.n	8005906 <_dtoa_r+0x3aa>
 8005880:	7ff00000 	.word	0x7ff00000
 8005884:	0000270f 	.word	0x0000270f
 8005888:	08006943 	.word	0x08006943
 800588c:	08006946 	.word	0x08006946
 8005890:	08006938 	.word	0x08006938
 8005894:	08006939 	.word	0x08006939
 8005898:	3ff00000 	.word	0x3ff00000
 800589c:	fffffc01 	.word	0xfffffc01
 80058a0:	3ff80000 	.word	0x3ff80000
 80058a4:	636f4361 	.word	0x636f4361
 80058a8:	3fd287a7 	.word	0x3fd287a7
 80058ac:	8b60c8b3 	.word	0x8b60c8b3
 80058b0:	3fc68a28 	.word	0x3fc68a28
 80058b4:	509f79fb 	.word	0x509f79fb
 80058b8:	3fd34413 	.word	0x3fd34413
 80058bc:	08006970 	.word	0x08006970
 80058c0:	00000432 	.word	0x00000432
 80058c4:	00000412 	.word	0x00000412
 80058c8:	fe100000 	.word	0xfe100000
 80058cc:	08006948 	.word	0x08006948
 80058d0:	2302      	movs	r3, #2
 80058d2:	930e      	str	r3, [sp, #56]	; 0x38
 80058d4:	2f00      	cmp	r7, #0
 80058d6:	d016      	beq.n	8005906 <_dtoa_r+0x3aa>
 80058d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80058da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80058dc:	427c      	negs	r4, r7
 80058de:	330d      	adds	r3, #13
 80058e0:	4023      	ands	r3, r4
 80058e2:	4ace      	ldr	r2, [pc, #824]	; (8005c1c <_dtoa_r+0x6c0>)
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	18d3      	adds	r3, r2, r3
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f7fb fcf8 	bl	80012e0 <__aeabi_dmul>
 80058f0:	2300      	movs	r3, #0
 80058f2:	2601      	movs	r6, #1
 80058f4:	001d      	movs	r5, r3
 80058f6:	9006      	str	r0, [sp, #24]
 80058f8:	9107      	str	r1, [sp, #28]
 80058fa:	1124      	asrs	r4, r4, #4
 80058fc:	2c00      	cmp	r4, #0
 80058fe:	d000      	beq.n	8005902 <_dtoa_r+0x3a6>
 8005900:	e08c      	b.n	8005a1c <_dtoa_r+0x4c0>
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1b9      	bne.n	800587a <_dtoa_r+0x31e>
 8005906:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005908:	2b00      	cmp	r3, #0
 800590a:	d100      	bne.n	800590e <_dtoa_r+0x3b2>
 800590c:	e096      	b.n	8005a3c <_dtoa_r+0x4e0>
 800590e:	9c06      	ldr	r4, [sp, #24]
 8005910:	9d07      	ldr	r5, [sp, #28]
 8005912:	2200      	movs	r2, #0
 8005914:	4bc2      	ldr	r3, [pc, #776]	; (8005c20 <_dtoa_r+0x6c4>)
 8005916:	0020      	movs	r0, r4
 8005918:	0029      	movs	r1, r5
 800591a:	f7fa fd93 	bl	8000444 <__aeabi_dcmplt>
 800591e:	2800      	cmp	r0, #0
 8005920:	d100      	bne.n	8005924 <_dtoa_r+0x3c8>
 8005922:	e08b      	b.n	8005a3c <_dtoa_r+0x4e0>
 8005924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d100      	bne.n	800592c <_dtoa_r+0x3d0>
 800592a:	e087      	b.n	8005a3c <_dtoa_r+0x4e0>
 800592c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800592e:	2b00      	cmp	r3, #0
 8005930:	dd41      	ble.n	80059b6 <_dtoa_r+0x45a>
 8005932:	4bbc      	ldr	r3, [pc, #752]	; (8005c24 <_dtoa_r+0x6c8>)
 8005934:	2200      	movs	r2, #0
 8005936:	0020      	movs	r0, r4
 8005938:	0029      	movs	r1, r5
 800593a:	f7fb fcd1 	bl	80012e0 <__aeabi_dmul>
 800593e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005940:	9006      	str	r0, [sp, #24]
 8005942:	9107      	str	r1, [sp, #28]
 8005944:	3301      	adds	r3, #1
 8005946:	930e      	str	r3, [sp, #56]	; 0x38
 8005948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800594a:	1e7e      	subs	r6, r7, #1
 800594c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800594e:	9310      	str	r3, [sp, #64]	; 0x40
 8005950:	f7fc fad2 	bl	8001ef8 <__aeabi_i2d>
 8005954:	9a06      	ldr	r2, [sp, #24]
 8005956:	9b07      	ldr	r3, [sp, #28]
 8005958:	f7fb fcc2 	bl	80012e0 <__aeabi_dmul>
 800595c:	2200      	movs	r2, #0
 800595e:	4bb2      	ldr	r3, [pc, #712]	; (8005c28 <_dtoa_r+0x6cc>)
 8005960:	f7fa fd98 	bl	8000494 <__aeabi_dadd>
 8005964:	4ab1      	ldr	r2, [pc, #708]	; (8005c2c <_dtoa_r+0x6d0>)
 8005966:	900e      	str	r0, [sp, #56]	; 0x38
 8005968:	910f      	str	r1, [sp, #60]	; 0x3c
 800596a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800596c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800596e:	4694      	mov	ip, r2
 8005970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005972:	4463      	add	r3, ip
 8005974:	9315      	str	r3, [sp, #84]	; 0x54
 8005976:	001d      	movs	r5, r3
 8005978:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d161      	bne.n	8005a42 <_dtoa_r+0x4e6>
 800597e:	9806      	ldr	r0, [sp, #24]
 8005980:	9907      	ldr	r1, [sp, #28]
 8005982:	2200      	movs	r2, #0
 8005984:	4baa      	ldr	r3, [pc, #680]	; (8005c30 <_dtoa_r+0x6d4>)
 8005986:	f7fb ff1d 	bl	80017c4 <__aeabi_dsub>
 800598a:	0022      	movs	r2, r4
 800598c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800598e:	9006      	str	r0, [sp, #24]
 8005990:	9107      	str	r1, [sp, #28]
 8005992:	f7fa fd6b 	bl	800046c <__aeabi_dcmpgt>
 8005996:	2800      	cmp	r0, #0
 8005998:	d000      	beq.n	800599c <_dtoa_r+0x440>
 800599a:	e2a8      	b.n	8005eee <_dtoa_r+0x992>
 800599c:	48a5      	ldr	r0, [pc, #660]	; (8005c34 <_dtoa_r+0x6d8>)
 800599e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80059a0:	4684      	mov	ip, r0
 80059a2:	4461      	add	r1, ip
 80059a4:	000b      	movs	r3, r1
 80059a6:	9806      	ldr	r0, [sp, #24]
 80059a8:	9907      	ldr	r1, [sp, #28]
 80059aa:	0022      	movs	r2, r4
 80059ac:	f7fa fd4a 	bl	8000444 <__aeabi_dcmplt>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d000      	beq.n	80059b6 <_dtoa_r+0x45a>
 80059b4:	e295      	b.n	8005ee2 <_dtoa_r+0x986>
 80059b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80059ba:	9306      	str	r3, [sp, #24]
 80059bc:	9407      	str	r4, [sp, #28]
 80059be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	da00      	bge.n	80059c6 <_dtoa_r+0x46a>
 80059c4:	e15c      	b.n	8005c80 <_dtoa_r+0x724>
 80059c6:	2f0e      	cmp	r7, #14
 80059c8:	dd00      	ble.n	80059cc <_dtoa_r+0x470>
 80059ca:	e159      	b.n	8005c80 <_dtoa_r+0x724>
 80059cc:	4b93      	ldr	r3, [pc, #588]	; (8005c1c <_dtoa_r+0x6c0>)
 80059ce:	00fa      	lsls	r2, r7, #3
 80059d0:	189b      	adds	r3, r3, r2
 80059d2:	685c      	ldr	r4, [r3, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	9304      	str	r3, [sp, #16]
 80059d8:	9405      	str	r4, [sp, #20]
 80059da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059dc:	2b00      	cmp	r3, #0
 80059de:	db00      	blt.n	80059e2 <_dtoa_r+0x486>
 80059e0:	e0d8      	b.n	8005b94 <_dtoa_r+0x638>
 80059e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dd00      	ble.n	80059ea <_dtoa_r+0x48e>
 80059e8:	e0d4      	b.n	8005b94 <_dtoa_r+0x638>
 80059ea:	d000      	beq.n	80059ee <_dtoa_r+0x492>
 80059ec:	e27d      	b.n	8005eea <_dtoa_r+0x98e>
 80059ee:	9804      	ldr	r0, [sp, #16]
 80059f0:	9905      	ldr	r1, [sp, #20]
 80059f2:	2200      	movs	r2, #0
 80059f4:	4b8e      	ldr	r3, [pc, #568]	; (8005c30 <_dtoa_r+0x6d4>)
 80059f6:	f7fb fc73 	bl	80012e0 <__aeabi_dmul>
 80059fa:	9a06      	ldr	r2, [sp, #24]
 80059fc:	9b07      	ldr	r3, [sp, #28]
 80059fe:	f7fa fd3f 	bl	8000480 <__aeabi_dcmpge>
 8005a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a04:	9304      	str	r3, [sp, #16]
 8005a06:	001e      	movs	r6, r3
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d000      	beq.n	8005a0e <_dtoa_r+0x4b2>
 8005a0c:	e24f      	b.n	8005eae <_dtoa_r+0x952>
 8005a0e:	9b08      	ldr	r3, [sp, #32]
 8005a10:	9a08      	ldr	r2, [sp, #32]
 8005a12:	1c5d      	adds	r5, r3, #1
 8005a14:	2331      	movs	r3, #49	; 0x31
 8005a16:	3701      	adds	r7, #1
 8005a18:	7013      	strb	r3, [r2, #0]
 8005a1a:	e24b      	b.n	8005eb4 <_dtoa_r+0x958>
 8005a1c:	4234      	tst	r4, r6
 8005a1e:	d00a      	beq.n	8005a36 <_dtoa_r+0x4da>
 8005a20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a22:	4a85      	ldr	r2, [pc, #532]	; (8005c38 <_dtoa_r+0x6dc>)
 8005a24:	3301      	adds	r3, #1
 8005a26:	930e      	str	r3, [sp, #56]	; 0x38
 8005a28:	00eb      	lsls	r3, r5, #3
 8005a2a:	189b      	adds	r3, r3, r2
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f7fb fc56 	bl	80012e0 <__aeabi_dmul>
 8005a34:	0033      	movs	r3, r6
 8005a36:	1064      	asrs	r4, r4, #1
 8005a38:	3501      	adds	r5, #1
 8005a3a:	e75f      	b.n	80058fc <_dtoa_r+0x3a0>
 8005a3c:	003e      	movs	r6, r7
 8005a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a40:	e784      	b.n	800594c <_dtoa_r+0x3f0>
 8005a42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005a46:	1e5a      	subs	r2, r3, #1
 8005a48:	4b74      	ldr	r3, [pc, #464]	; (8005c1c <_dtoa_r+0x6c0>)
 8005a4a:	00d2      	lsls	r2, r2, #3
 8005a4c:	189b      	adds	r3, r3, r2
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2900      	cmp	r1, #0
 8005a54:	d049      	beq.n	8005aea <_dtoa_r+0x58e>
 8005a56:	2000      	movs	r0, #0
 8005a58:	4978      	ldr	r1, [pc, #480]	; (8005c3c <_dtoa_r+0x6e0>)
 8005a5a:	f7fb f837 	bl	8000acc <__aeabi_ddiv>
 8005a5e:	002b      	movs	r3, r5
 8005a60:	0022      	movs	r2, r4
 8005a62:	f7fb feaf 	bl	80017c4 <__aeabi_dsub>
 8005a66:	9b08      	ldr	r3, [sp, #32]
 8005a68:	900e      	str	r0, [sp, #56]	; 0x38
 8005a6a:	910f      	str	r1, [sp, #60]	; 0x3c
 8005a6c:	9315      	str	r3, [sp, #84]	; 0x54
 8005a6e:	9806      	ldr	r0, [sp, #24]
 8005a70:	9907      	ldr	r1, [sp, #28]
 8005a72:	f7fc fa0b 	bl	8001e8c <__aeabi_d2iz>
 8005a76:	0004      	movs	r4, r0
 8005a78:	f7fc fa3e 	bl	8001ef8 <__aeabi_i2d>
 8005a7c:	0002      	movs	r2, r0
 8005a7e:	000b      	movs	r3, r1
 8005a80:	9806      	ldr	r0, [sp, #24]
 8005a82:	9907      	ldr	r1, [sp, #28]
 8005a84:	f7fb fe9e 	bl	80017c4 <__aeabi_dsub>
 8005a88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a8a:	3430      	adds	r4, #48	; 0x30
 8005a8c:	1c5d      	adds	r5, r3, #1
 8005a8e:	701c      	strb	r4, [r3, #0]
 8005a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a94:	9006      	str	r0, [sp, #24]
 8005a96:	9107      	str	r1, [sp, #28]
 8005a98:	f7fa fcd4 	bl	8000444 <__aeabi_dcmplt>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	d16c      	bne.n	8005b7a <_dtoa_r+0x61e>
 8005aa0:	9a06      	ldr	r2, [sp, #24]
 8005aa2:	9b07      	ldr	r3, [sp, #28]
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	495e      	ldr	r1, [pc, #376]	; (8005c20 <_dtoa_r+0x6c4>)
 8005aa8:	f7fb fe8c 	bl	80017c4 <__aeabi_dsub>
 8005aac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005aae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ab0:	f7fa fcc8 	bl	8000444 <__aeabi_dcmplt>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d000      	beq.n	8005aba <_dtoa_r+0x55e>
 8005ab8:	e0c3      	b.n	8005c42 <_dtoa_r+0x6e6>
 8005aba:	9b08      	ldr	r3, [sp, #32]
 8005abc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005abe:	1aeb      	subs	r3, r5, r3
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	dc00      	bgt.n	8005ac6 <_dtoa_r+0x56a>
 8005ac4:	e777      	b.n	80059b6 <_dtoa_r+0x45a>
 8005ac6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005ac8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005aca:	2200      	movs	r2, #0
 8005acc:	4b55      	ldr	r3, [pc, #340]	; (8005c24 <_dtoa_r+0x6c8>)
 8005ace:	f7fb fc07 	bl	80012e0 <__aeabi_dmul>
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	900e      	str	r0, [sp, #56]	; 0x38
 8005ad6:	910f      	str	r1, [sp, #60]	; 0x3c
 8005ad8:	9806      	ldr	r0, [sp, #24]
 8005ada:	9907      	ldr	r1, [sp, #28]
 8005adc:	4b51      	ldr	r3, [pc, #324]	; (8005c24 <_dtoa_r+0x6c8>)
 8005ade:	f7fb fbff 	bl	80012e0 <__aeabi_dmul>
 8005ae2:	9515      	str	r5, [sp, #84]	; 0x54
 8005ae4:	9006      	str	r0, [sp, #24]
 8005ae6:	9107      	str	r1, [sp, #28]
 8005ae8:	e7c1      	b.n	8005a6e <_dtoa_r+0x512>
 8005aea:	0020      	movs	r0, r4
 8005aec:	0029      	movs	r1, r5
 8005aee:	f7fb fbf7 	bl	80012e0 <__aeabi_dmul>
 8005af2:	9c08      	ldr	r4, [sp, #32]
 8005af4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005af6:	0023      	movs	r3, r4
 8005af8:	4694      	mov	ip, r2
 8005afa:	900e      	str	r0, [sp, #56]	; 0x38
 8005afc:	910f      	str	r1, [sp, #60]	; 0x3c
 8005afe:	4463      	add	r3, ip
 8005b00:	9315      	str	r3, [sp, #84]	; 0x54
 8005b02:	9806      	ldr	r0, [sp, #24]
 8005b04:	9907      	ldr	r1, [sp, #28]
 8005b06:	f7fc f9c1 	bl	8001e8c <__aeabi_d2iz>
 8005b0a:	0005      	movs	r5, r0
 8005b0c:	f7fc f9f4 	bl	8001ef8 <__aeabi_i2d>
 8005b10:	000b      	movs	r3, r1
 8005b12:	0002      	movs	r2, r0
 8005b14:	9806      	ldr	r0, [sp, #24]
 8005b16:	9907      	ldr	r1, [sp, #28]
 8005b18:	f7fb fe54 	bl	80017c4 <__aeabi_dsub>
 8005b1c:	3530      	adds	r5, #48	; 0x30
 8005b1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b20:	7025      	strb	r5, [r4, #0]
 8005b22:	3401      	adds	r4, #1
 8005b24:	9006      	str	r0, [sp, #24]
 8005b26:	9107      	str	r1, [sp, #28]
 8005b28:	42a3      	cmp	r3, r4
 8005b2a:	d12a      	bne.n	8005b82 <_dtoa_r+0x626>
 8005b2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005b2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b30:	9a08      	ldr	r2, [sp, #32]
 8005b32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b34:	4694      	mov	ip, r2
 8005b36:	4463      	add	r3, ip
 8005b38:	2200      	movs	r2, #0
 8005b3a:	001d      	movs	r5, r3
 8005b3c:	4b3f      	ldr	r3, [pc, #252]	; (8005c3c <_dtoa_r+0x6e0>)
 8005b3e:	f7fa fca9 	bl	8000494 <__aeabi_dadd>
 8005b42:	0002      	movs	r2, r0
 8005b44:	000b      	movs	r3, r1
 8005b46:	9806      	ldr	r0, [sp, #24]
 8005b48:	9907      	ldr	r1, [sp, #28]
 8005b4a:	f7fa fc8f 	bl	800046c <__aeabi_dcmpgt>
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d000      	beq.n	8005b54 <_dtoa_r+0x5f8>
 8005b52:	e076      	b.n	8005c42 <_dtoa_r+0x6e6>
 8005b54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b58:	2000      	movs	r0, #0
 8005b5a:	4938      	ldr	r1, [pc, #224]	; (8005c3c <_dtoa_r+0x6e0>)
 8005b5c:	f7fb fe32 	bl	80017c4 <__aeabi_dsub>
 8005b60:	0002      	movs	r2, r0
 8005b62:	000b      	movs	r3, r1
 8005b64:	9806      	ldr	r0, [sp, #24]
 8005b66:	9907      	ldr	r1, [sp, #28]
 8005b68:	f7fa fc6c 	bl	8000444 <__aeabi_dcmplt>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d100      	bne.n	8005b72 <_dtoa_r+0x616>
 8005b70:	e721      	b.n	80059b6 <_dtoa_r+0x45a>
 8005b72:	1e6b      	subs	r3, r5, #1
 8005b74:	781a      	ldrb	r2, [r3, #0]
 8005b76:	2a30      	cmp	r2, #48	; 0x30
 8005b78:	d001      	beq.n	8005b7e <_dtoa_r+0x622>
 8005b7a:	0037      	movs	r7, r6
 8005b7c:	e03f      	b.n	8005bfe <_dtoa_r+0x6a2>
 8005b7e:	001d      	movs	r5, r3
 8005b80:	e7f7      	b.n	8005b72 <_dtoa_r+0x616>
 8005b82:	9806      	ldr	r0, [sp, #24]
 8005b84:	9907      	ldr	r1, [sp, #28]
 8005b86:	2200      	movs	r2, #0
 8005b88:	4b26      	ldr	r3, [pc, #152]	; (8005c24 <_dtoa_r+0x6c8>)
 8005b8a:	f7fb fba9 	bl	80012e0 <__aeabi_dmul>
 8005b8e:	9006      	str	r0, [sp, #24]
 8005b90:	9107      	str	r1, [sp, #28]
 8005b92:	e7b6      	b.n	8005b02 <_dtoa_r+0x5a6>
 8005b94:	9e08      	ldr	r6, [sp, #32]
 8005b96:	9a04      	ldr	r2, [sp, #16]
 8005b98:	9b05      	ldr	r3, [sp, #20]
 8005b9a:	9806      	ldr	r0, [sp, #24]
 8005b9c:	9907      	ldr	r1, [sp, #28]
 8005b9e:	f7fa ff95 	bl	8000acc <__aeabi_ddiv>
 8005ba2:	f7fc f973 	bl	8001e8c <__aeabi_d2iz>
 8005ba6:	0004      	movs	r4, r0
 8005ba8:	f7fc f9a6 	bl	8001ef8 <__aeabi_i2d>
 8005bac:	9a04      	ldr	r2, [sp, #16]
 8005bae:	9b05      	ldr	r3, [sp, #20]
 8005bb0:	f7fb fb96 	bl	80012e0 <__aeabi_dmul>
 8005bb4:	0002      	movs	r2, r0
 8005bb6:	000b      	movs	r3, r1
 8005bb8:	9806      	ldr	r0, [sp, #24]
 8005bba:	9907      	ldr	r1, [sp, #28]
 8005bbc:	f7fb fe02 	bl	80017c4 <__aeabi_dsub>
 8005bc0:	0023      	movs	r3, r4
 8005bc2:	3330      	adds	r3, #48	; 0x30
 8005bc4:	7033      	strb	r3, [r6, #0]
 8005bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bc8:	9b08      	ldr	r3, [sp, #32]
 8005bca:	1c75      	adds	r5, r6, #1
 8005bcc:	1aeb      	subs	r3, r5, r3
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d148      	bne.n	8005c64 <_dtoa_r+0x708>
 8005bd2:	0002      	movs	r2, r0
 8005bd4:	000b      	movs	r3, r1
 8005bd6:	f7fa fc5d 	bl	8000494 <__aeabi_dadd>
 8005bda:	9a04      	ldr	r2, [sp, #16]
 8005bdc:	9b05      	ldr	r3, [sp, #20]
 8005bde:	9006      	str	r0, [sp, #24]
 8005be0:	9107      	str	r1, [sp, #28]
 8005be2:	f7fa fc43 	bl	800046c <__aeabi_dcmpgt>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d12a      	bne.n	8005c40 <_dtoa_r+0x6e4>
 8005bea:	9a04      	ldr	r2, [sp, #16]
 8005bec:	9b05      	ldr	r3, [sp, #20]
 8005bee:	9806      	ldr	r0, [sp, #24]
 8005bf0:	9907      	ldr	r1, [sp, #28]
 8005bf2:	f7fa fc21 	bl	8000438 <__aeabi_dcmpeq>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d001      	beq.n	8005bfe <_dtoa_r+0x6a2>
 8005bfa:	07e3      	lsls	r3, r4, #31
 8005bfc:	d420      	bmi.n	8005c40 <_dtoa_r+0x6e4>
 8005bfe:	9903      	ldr	r1, [sp, #12]
 8005c00:	9802      	ldr	r0, [sp, #8]
 8005c02:	f000 fad9 	bl	80061b8 <_Bfree>
 8005c06:	2300      	movs	r3, #0
 8005c08:	702b      	strb	r3, [r5, #0]
 8005c0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c0c:	3701      	adds	r7, #1
 8005c0e:	601f      	str	r7, [r3, #0]
 8005c10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d100      	bne.n	8005c18 <_dtoa_r+0x6bc>
 8005c16:	e4e6      	b.n	80055e6 <_dtoa_r+0x8a>
 8005c18:	601d      	str	r5, [r3, #0]
 8005c1a:	e4e4      	b.n	80055e6 <_dtoa_r+0x8a>
 8005c1c:	08006970 	.word	0x08006970
 8005c20:	3ff00000 	.word	0x3ff00000
 8005c24:	40240000 	.word	0x40240000
 8005c28:	401c0000 	.word	0x401c0000
 8005c2c:	fcc00000 	.word	0xfcc00000
 8005c30:	40140000 	.word	0x40140000
 8005c34:	7cc00000 	.word	0x7cc00000
 8005c38:	08006948 	.word	0x08006948
 8005c3c:	3fe00000 	.word	0x3fe00000
 8005c40:	003e      	movs	r6, r7
 8005c42:	1e6b      	subs	r3, r5, #1
 8005c44:	781a      	ldrb	r2, [r3, #0]
 8005c46:	2a39      	cmp	r2, #57	; 0x39
 8005c48:	d106      	bne.n	8005c58 <_dtoa_r+0x6fc>
 8005c4a:	9a08      	ldr	r2, [sp, #32]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d107      	bne.n	8005c60 <_dtoa_r+0x704>
 8005c50:	2330      	movs	r3, #48	; 0x30
 8005c52:	7013      	strb	r3, [r2, #0]
 8005c54:	0013      	movs	r3, r2
 8005c56:	3601      	adds	r6, #1
 8005c58:	781a      	ldrb	r2, [r3, #0]
 8005c5a:	3201      	adds	r2, #1
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	e78c      	b.n	8005b7a <_dtoa_r+0x61e>
 8005c60:	001d      	movs	r5, r3
 8005c62:	e7ee      	b.n	8005c42 <_dtoa_r+0x6e6>
 8005c64:	2200      	movs	r2, #0
 8005c66:	4ba4      	ldr	r3, [pc, #656]	; (8005ef8 <_dtoa_r+0x99c>)
 8005c68:	f7fb fb3a 	bl	80012e0 <__aeabi_dmul>
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2300      	movs	r3, #0
 8005c70:	9006      	str	r0, [sp, #24]
 8005c72:	9107      	str	r1, [sp, #28]
 8005c74:	002e      	movs	r6, r5
 8005c76:	f7fa fbdf 	bl	8000438 <__aeabi_dcmpeq>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d08b      	beq.n	8005b96 <_dtoa_r+0x63a>
 8005c7e:	e7be      	b.n	8005bfe <_dtoa_r+0x6a2>
 8005c80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c82:	2a00      	cmp	r2, #0
 8005c84:	d100      	bne.n	8005c88 <_dtoa_r+0x72c>
 8005c86:	e0da      	b.n	8005e3e <_dtoa_r+0x8e2>
 8005c88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c8a:	2a01      	cmp	r2, #1
 8005c8c:	dd00      	ble.n	8005c90 <_dtoa_r+0x734>
 8005c8e:	e0bd      	b.n	8005e0c <_dtoa_r+0x8b0>
 8005c90:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005c92:	2a00      	cmp	r2, #0
 8005c94:	d100      	bne.n	8005c98 <_dtoa_r+0x73c>
 8005c96:	e0b5      	b.n	8005e04 <_dtoa_r+0x8a8>
 8005c98:	4a98      	ldr	r2, [pc, #608]	; (8005efc <_dtoa_r+0x9a0>)
 8005c9a:	189b      	adds	r3, r3, r2
 8005c9c:	9d04      	ldr	r5, [sp, #16]
 8005c9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	18d2      	adds	r2, r2, r3
 8005ca6:	920a      	str	r2, [sp, #40]	; 0x28
 8005ca8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005caa:	9802      	ldr	r0, [sp, #8]
 8005cac:	18d3      	adds	r3, r2, r3
 8005cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cb0:	f000 fb22 	bl	80062f8 <__i2b>
 8005cb4:	0006      	movs	r6, r0
 8005cb6:	2c00      	cmp	r4, #0
 8005cb8:	dd0e      	ble.n	8005cd8 <_dtoa_r+0x77c>
 8005cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	dd0b      	ble.n	8005cd8 <_dtoa_r+0x77c>
 8005cc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cc2:	0023      	movs	r3, r4
 8005cc4:	4294      	cmp	r4, r2
 8005cc6:	dd00      	ble.n	8005cca <_dtoa_r+0x76e>
 8005cc8:	0013      	movs	r3, r2
 8005cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ccc:	1ae4      	subs	r4, r4, r3
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	920a      	str	r2, [sp, #40]	; 0x28
 8005cd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cd8:	9b04      	ldr	r3, [sp, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01f      	beq.n	8005d1e <_dtoa_r+0x7c2>
 8005cde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d100      	bne.n	8005ce6 <_dtoa_r+0x78a>
 8005ce4:	e0af      	b.n	8005e46 <_dtoa_r+0x8ea>
 8005ce6:	2d00      	cmp	r5, #0
 8005ce8:	d011      	beq.n	8005d0e <_dtoa_r+0x7b2>
 8005cea:	0031      	movs	r1, r6
 8005cec:	002a      	movs	r2, r5
 8005cee:	9802      	ldr	r0, [sp, #8]
 8005cf0:	f000 fb9a 	bl	8006428 <__pow5mult>
 8005cf4:	9a03      	ldr	r2, [sp, #12]
 8005cf6:	0001      	movs	r1, r0
 8005cf8:	0006      	movs	r6, r0
 8005cfa:	9802      	ldr	r0, [sp, #8]
 8005cfc:	f000 fb05 	bl	800630a <__multiply>
 8005d00:	9903      	ldr	r1, [sp, #12]
 8005d02:	9010      	str	r0, [sp, #64]	; 0x40
 8005d04:	9802      	ldr	r0, [sp, #8]
 8005d06:	f000 fa57 	bl	80061b8 <_Bfree>
 8005d0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d0c:	9303      	str	r3, [sp, #12]
 8005d0e:	9b04      	ldr	r3, [sp, #16]
 8005d10:	1b5a      	subs	r2, r3, r5
 8005d12:	d004      	beq.n	8005d1e <_dtoa_r+0x7c2>
 8005d14:	9903      	ldr	r1, [sp, #12]
 8005d16:	9802      	ldr	r0, [sp, #8]
 8005d18:	f000 fb86 	bl	8006428 <__pow5mult>
 8005d1c:	9003      	str	r0, [sp, #12]
 8005d1e:	2101      	movs	r1, #1
 8005d20:	9802      	ldr	r0, [sp, #8]
 8005d22:	f000 fae9 	bl	80062f8 <__i2b>
 8005d26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d28:	9004      	str	r0, [sp, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d100      	bne.n	8005d30 <_dtoa_r+0x7d4>
 8005d2e:	e1e3      	b.n	80060f8 <_dtoa_r+0xb9c>
 8005d30:	001a      	movs	r2, r3
 8005d32:	0001      	movs	r1, r0
 8005d34:	9802      	ldr	r0, [sp, #8]
 8005d36:	f000 fb77 	bl	8006428 <__pow5mult>
 8005d3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d3c:	9004      	str	r0, [sp, #16]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	dd00      	ble.n	8005d44 <_dtoa_r+0x7e8>
 8005d42:	e082      	b.n	8005e4a <_dtoa_r+0x8ee>
 8005d44:	2500      	movs	r5, #0
 8005d46:	9b06      	ldr	r3, [sp, #24]
 8005d48:	42ab      	cmp	r3, r5
 8005d4a:	d10e      	bne.n	8005d6a <_dtoa_r+0x80e>
 8005d4c:	9b07      	ldr	r3, [sp, #28]
 8005d4e:	031b      	lsls	r3, r3, #12
 8005d50:	42ab      	cmp	r3, r5
 8005d52:	d10a      	bne.n	8005d6a <_dtoa_r+0x80e>
 8005d54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d56:	9a07      	ldr	r2, [sp, #28]
 8005d58:	4213      	tst	r3, r2
 8005d5a:	d006      	beq.n	8005d6a <_dtoa_r+0x80e>
 8005d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d5e:	3501      	adds	r5, #1
 8005d60:	3301      	adds	r3, #1
 8005d62:	930a      	str	r3, [sp, #40]	; 0x28
 8005d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d66:	3301      	adds	r3, #1
 8005d68:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d16c      	bne.n	8005e4c <_dtoa_r+0x8f0>
 8005d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d74:	1818      	adds	r0, r3, r0
 8005d76:	231f      	movs	r3, #31
 8005d78:	4018      	ands	r0, r3
 8005d7a:	d07e      	beq.n	8005e7a <_dtoa_r+0x91e>
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	1a1b      	subs	r3, r3, r0
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	dd70      	ble.n	8005e66 <_dtoa_r+0x90a>
 8005d84:	231c      	movs	r3, #28
 8005d86:	1a18      	subs	r0, r3, r0
 8005d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d8a:	1824      	adds	r4, r4, r0
 8005d8c:	181b      	adds	r3, r3, r0
 8005d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d92:	181b      	adds	r3, r3, r0
 8005d94:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	dd05      	ble.n	8005da8 <_dtoa_r+0x84c>
 8005d9c:	001a      	movs	r2, r3
 8005d9e:	9903      	ldr	r1, [sp, #12]
 8005da0:	9802      	ldr	r0, [sp, #8]
 8005da2:	f000 fb93 	bl	80064cc <__lshift>
 8005da6:	9003      	str	r0, [sp, #12]
 8005da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	dd05      	ble.n	8005dba <_dtoa_r+0x85e>
 8005dae:	001a      	movs	r2, r3
 8005db0:	9904      	ldr	r1, [sp, #16]
 8005db2:	9802      	ldr	r0, [sp, #8]
 8005db4:	f000 fb8a 	bl	80064cc <__lshift>
 8005db8:	9004      	str	r0, [sp, #16]
 8005dba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d05e      	beq.n	8005e7e <_dtoa_r+0x922>
 8005dc0:	9904      	ldr	r1, [sp, #16]
 8005dc2:	9803      	ldr	r0, [sp, #12]
 8005dc4:	f000 fbd4 	bl	8006570 <__mcmp>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	da58      	bge.n	8005e7e <_dtoa_r+0x922>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	220a      	movs	r2, #10
 8005dd0:	9903      	ldr	r1, [sp, #12]
 8005dd2:	9802      	ldr	r0, [sp, #8]
 8005dd4:	f000 fa09 	bl	80061ea <__multadd>
 8005dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dda:	3f01      	subs	r7, #1
 8005ddc:	9003      	str	r0, [sp, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d100      	bne.n	8005de4 <_dtoa_r+0x888>
 8005de2:	e190      	b.n	8006106 <_dtoa_r+0xbaa>
 8005de4:	2300      	movs	r3, #0
 8005de6:	0031      	movs	r1, r6
 8005de8:	220a      	movs	r2, #10
 8005dea:	9802      	ldr	r0, [sp, #8]
 8005dec:	f000 f9fd 	bl	80061ea <__multadd>
 8005df0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005df2:	0006      	movs	r6, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	dd00      	ble.n	8005dfa <_dtoa_r+0x89e>
 8005df8:	e088      	b.n	8005f0c <_dtoa_r+0x9b0>
 8005dfa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	dc00      	bgt.n	8005e02 <_dtoa_r+0x8a6>
 8005e00:	e084      	b.n	8005f0c <_dtoa_r+0x9b0>
 8005e02:	e044      	b.n	8005e8e <_dtoa_r+0x932>
 8005e04:	2336      	movs	r3, #54	; 0x36
 8005e06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005e08:	1a9b      	subs	r3, r3, r2
 8005e0a:	e747      	b.n	8005c9c <_dtoa_r+0x740>
 8005e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e0e:	1e5d      	subs	r5, r3, #1
 8005e10:	9b04      	ldr	r3, [sp, #16]
 8005e12:	42ab      	cmp	r3, r5
 8005e14:	db08      	blt.n	8005e28 <_dtoa_r+0x8cc>
 8005e16:	1b5d      	subs	r5, r3, r5
 8005e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	da0c      	bge.n	8005e38 <_dtoa_r+0x8dc>
 8005e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e22:	1a9c      	subs	r4, r3, r2
 8005e24:	2300      	movs	r3, #0
 8005e26:	e73b      	b.n	8005ca0 <_dtoa_r+0x744>
 8005e28:	9b04      	ldr	r3, [sp, #16]
 8005e2a:	9504      	str	r5, [sp, #16]
 8005e2c:	1aea      	subs	r2, r5, r3
 8005e2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e30:	2500      	movs	r5, #0
 8005e32:	189b      	adds	r3, r3, r2
 8005e34:	9311      	str	r3, [sp, #68]	; 0x44
 8005e36:	e7ef      	b.n	8005e18 <_dtoa_r+0x8bc>
 8005e38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3c:	e730      	b.n	8005ca0 <_dtoa_r+0x744>
 8005e3e:	9d04      	ldr	r5, [sp, #16]
 8005e40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e42:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8005e44:	e737      	b.n	8005cb6 <_dtoa_r+0x75a>
 8005e46:	9a04      	ldr	r2, [sp, #16]
 8005e48:	e764      	b.n	8005d14 <_dtoa_r+0x7b8>
 8005e4a:	2500      	movs	r5, #0
 8005e4c:	9b04      	ldr	r3, [sp, #16]
 8005e4e:	9a04      	ldr	r2, [sp, #16]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	9310      	str	r3, [sp, #64]	; 0x40
 8005e54:	3303      	adds	r3, #3
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	18d3      	adds	r3, r2, r3
 8005e5a:	6858      	ldr	r0, [r3, #4]
 8005e5c:	f000 fa03 	bl	8006266 <__hi0bits>
 8005e60:	2320      	movs	r3, #32
 8005e62:	1a18      	subs	r0, r3, r0
 8005e64:	e785      	b.n	8005d72 <_dtoa_r+0x816>
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d095      	beq.n	8005d96 <_dtoa_r+0x83a>
 8005e6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e6c:	331c      	adds	r3, #28
 8005e6e:	18d2      	adds	r2, r2, r3
 8005e70:	920a      	str	r2, [sp, #40]	; 0x28
 8005e72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e74:	18e4      	adds	r4, r4, r3
 8005e76:	18d3      	adds	r3, r2, r3
 8005e78:	e78c      	b.n	8005d94 <_dtoa_r+0x838>
 8005e7a:	0003      	movs	r3, r0
 8005e7c:	e7f5      	b.n	8005e6a <_dtoa_r+0x90e>
 8005e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	dc3d      	bgt.n	8005f00 <_dtoa_r+0x9a4>
 8005e84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	dd3a      	ble.n	8005f00 <_dtoa_r+0x9a4>
 8005e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e8c:	930c      	str	r3, [sp, #48]	; 0x30
 8005e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10c      	bne.n	8005eae <_dtoa_r+0x952>
 8005e94:	9904      	ldr	r1, [sp, #16]
 8005e96:	2205      	movs	r2, #5
 8005e98:	9802      	ldr	r0, [sp, #8]
 8005e9a:	f000 f9a6 	bl	80061ea <__multadd>
 8005e9e:	9004      	str	r0, [sp, #16]
 8005ea0:	0001      	movs	r1, r0
 8005ea2:	9803      	ldr	r0, [sp, #12]
 8005ea4:	f000 fb64 	bl	8006570 <__mcmp>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	dd00      	ble.n	8005eae <_dtoa_r+0x952>
 8005eac:	e5af      	b.n	8005a0e <_dtoa_r+0x4b2>
 8005eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005eb0:	9d08      	ldr	r5, [sp, #32]
 8005eb2:	43df      	mvns	r7, r3
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb8:	9904      	ldr	r1, [sp, #16]
 8005eba:	9802      	ldr	r0, [sp, #8]
 8005ebc:	f000 f97c 	bl	80061b8 <_Bfree>
 8005ec0:	2e00      	cmp	r6, #0
 8005ec2:	d100      	bne.n	8005ec6 <_dtoa_r+0x96a>
 8005ec4:	e69b      	b.n	8005bfe <_dtoa_r+0x6a2>
 8005ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <_dtoa_r+0x97c>
 8005ecc:	42b3      	cmp	r3, r6
 8005ece:	d003      	beq.n	8005ed8 <_dtoa_r+0x97c>
 8005ed0:	0019      	movs	r1, r3
 8005ed2:	9802      	ldr	r0, [sp, #8]
 8005ed4:	f000 f970 	bl	80061b8 <_Bfree>
 8005ed8:	0031      	movs	r1, r6
 8005eda:	9802      	ldr	r0, [sp, #8]
 8005edc:	f000 f96c 	bl	80061b8 <_Bfree>
 8005ee0:	e68d      	b.n	8005bfe <_dtoa_r+0x6a2>
 8005ee2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ee4:	9304      	str	r3, [sp, #16]
 8005ee6:	001e      	movs	r6, r3
 8005ee8:	e7e1      	b.n	8005eae <_dtoa_r+0x952>
 8005eea:	2300      	movs	r3, #0
 8005eec:	e7fa      	b.n	8005ee4 <_dtoa_r+0x988>
 8005eee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ef0:	0037      	movs	r7, r6
 8005ef2:	9304      	str	r3, [sp, #16]
 8005ef4:	001e      	movs	r6, r3
 8005ef6:	e58a      	b.n	8005a0e <_dtoa_r+0x4b2>
 8005ef8:	40240000 	.word	0x40240000
 8005efc:	00000433 	.word	0x00000433
 8005f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d100      	bne.n	8005f08 <_dtoa_r+0x9ac>
 8005f06:	e0b2      	b.n	800606e <_dtoa_r+0xb12>
 8005f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f0a:	930c      	str	r3, [sp, #48]	; 0x30
 8005f0c:	2c00      	cmp	r4, #0
 8005f0e:	dd05      	ble.n	8005f1c <_dtoa_r+0x9c0>
 8005f10:	0031      	movs	r1, r6
 8005f12:	0022      	movs	r2, r4
 8005f14:	9802      	ldr	r0, [sp, #8]
 8005f16:	f000 fad9 	bl	80064cc <__lshift>
 8005f1a:	0006      	movs	r6, r0
 8005f1c:	0030      	movs	r0, r6
 8005f1e:	2d00      	cmp	r5, #0
 8005f20:	d011      	beq.n	8005f46 <_dtoa_r+0x9ea>
 8005f22:	6871      	ldr	r1, [r6, #4]
 8005f24:	9802      	ldr	r0, [sp, #8]
 8005f26:	f000 f90f 	bl	8006148 <_Balloc>
 8005f2a:	0031      	movs	r1, r6
 8005f2c:	0004      	movs	r4, r0
 8005f2e:	6933      	ldr	r3, [r6, #16]
 8005f30:	310c      	adds	r1, #12
 8005f32:	1c9a      	adds	r2, r3, #2
 8005f34:	0092      	lsls	r2, r2, #2
 8005f36:	300c      	adds	r0, #12
 8005f38:	f7fe ff22 	bl	8004d80 <memcpy>
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	0021      	movs	r1, r4
 8005f40:	9802      	ldr	r0, [sp, #8]
 8005f42:	f000 fac3 	bl	80064cc <__lshift>
 8005f46:	9609      	str	r6, [sp, #36]	; 0x24
 8005f48:	0006      	movs	r6, r0
 8005f4a:	9b08      	ldr	r3, [sp, #32]
 8005f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8005f4e:	9904      	ldr	r1, [sp, #16]
 8005f50:	9803      	ldr	r0, [sp, #12]
 8005f52:	f7ff fa7c 	bl	800544e <quorem>
 8005f56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f58:	900d      	str	r0, [sp, #52]	; 0x34
 8005f5a:	0004      	movs	r4, r0
 8005f5c:	9803      	ldr	r0, [sp, #12]
 8005f5e:	f000 fb07 	bl	8006570 <__mcmp>
 8005f62:	0032      	movs	r2, r6
 8005f64:	9010      	str	r0, [sp, #64]	; 0x40
 8005f66:	9904      	ldr	r1, [sp, #16]
 8005f68:	9802      	ldr	r0, [sp, #8]
 8005f6a:	f000 fb1b 	bl	80065a4 <__mdiff>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f72:	68c3      	ldr	r3, [r0, #12]
 8005f74:	3430      	adds	r4, #48	; 0x30
 8005f76:	0005      	movs	r5, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d104      	bne.n	8005f86 <_dtoa_r+0xa2a>
 8005f7c:	0001      	movs	r1, r0
 8005f7e:	9803      	ldr	r0, [sp, #12]
 8005f80:	f000 faf6 	bl	8006570 <__mcmp>
 8005f84:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f86:	0029      	movs	r1, r5
 8005f88:	9802      	ldr	r0, [sp, #8]
 8005f8a:	f000 f915 	bl	80061b8 <_Bfree>
 8005f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f92:	4313      	orrs	r3, r2
 8005f94:	d10e      	bne.n	8005fb4 <_dtoa_r+0xa58>
 8005f96:	9a06      	ldr	r2, [sp, #24]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	4213      	tst	r3, r2
 8005f9c:	d10a      	bne.n	8005fb4 <_dtoa_r+0xa58>
 8005f9e:	2c39      	cmp	r4, #57	; 0x39
 8005fa0:	d026      	beq.n	8005ff0 <_dtoa_r+0xa94>
 8005fa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	dd01      	ble.n	8005fac <_dtoa_r+0xa50>
 8005fa8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005faa:	3431      	adds	r4, #49	; 0x31
 8005fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fae:	1c5d      	adds	r5, r3, #1
 8005fb0:	701c      	strb	r4, [r3, #0]
 8005fb2:	e781      	b.n	8005eb8 <_dtoa_r+0x95c>
 8005fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	db07      	blt.n	8005fca <_dtoa_r+0xa6e>
 8005fba:	001d      	movs	r5, r3
 8005fbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005fbe:	431d      	orrs	r5, r3
 8005fc0:	d122      	bne.n	8006008 <_dtoa_r+0xaac>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	9a06      	ldr	r2, [sp, #24]
 8005fc6:	4213      	tst	r3, r2
 8005fc8:	d11e      	bne.n	8006008 <_dtoa_r+0xaac>
 8005fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	dded      	ble.n	8005fac <_dtoa_r+0xa50>
 8005fd0:	9903      	ldr	r1, [sp, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	9802      	ldr	r0, [sp, #8]
 8005fd6:	f000 fa79 	bl	80064cc <__lshift>
 8005fda:	9904      	ldr	r1, [sp, #16]
 8005fdc:	9003      	str	r0, [sp, #12]
 8005fde:	f000 fac7 	bl	8006570 <__mcmp>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	dc02      	bgt.n	8005fec <_dtoa_r+0xa90>
 8005fe6:	d1e1      	bne.n	8005fac <_dtoa_r+0xa50>
 8005fe8:	07e3      	lsls	r3, r4, #31
 8005fea:	d5df      	bpl.n	8005fac <_dtoa_r+0xa50>
 8005fec:	2c39      	cmp	r4, #57	; 0x39
 8005fee:	d1db      	bne.n	8005fa8 <_dtoa_r+0xa4c>
 8005ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ff4:	1c5d      	adds	r5, r3, #1
 8005ff6:	2339      	movs	r3, #57	; 0x39
 8005ff8:	7013      	strb	r3, [r2, #0]
 8005ffa:	1e6b      	subs	r3, r5, #1
 8005ffc:	781a      	ldrb	r2, [r3, #0]
 8005ffe:	2a39      	cmp	r2, #57	; 0x39
 8006000:	d067      	beq.n	80060d2 <_dtoa_r+0xb76>
 8006002:	3201      	adds	r2, #1
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	e757      	b.n	8005eb8 <_dtoa_r+0x95c>
 8006008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800600a:	1c5d      	adds	r5, r3, #1
 800600c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800600e:	2b00      	cmp	r3, #0
 8006010:	dd04      	ble.n	800601c <_dtoa_r+0xac0>
 8006012:	2c39      	cmp	r4, #57	; 0x39
 8006014:	d0ec      	beq.n	8005ff0 <_dtoa_r+0xa94>
 8006016:	3401      	adds	r4, #1
 8006018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800601a:	e7c9      	b.n	8005fb0 <_dtoa_r+0xa54>
 800601c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800601e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006020:	701c      	strb	r4, [r3, #0]
 8006022:	9b08      	ldr	r3, [sp, #32]
 8006024:	1aeb      	subs	r3, r5, r3
 8006026:	4293      	cmp	r3, r2
 8006028:	d03e      	beq.n	80060a8 <_dtoa_r+0xb4c>
 800602a:	2300      	movs	r3, #0
 800602c:	220a      	movs	r2, #10
 800602e:	9903      	ldr	r1, [sp, #12]
 8006030:	9802      	ldr	r0, [sp, #8]
 8006032:	f000 f8da 	bl	80061ea <__multadd>
 8006036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006038:	9003      	str	r0, [sp, #12]
 800603a:	42b3      	cmp	r3, r6
 800603c:	d109      	bne.n	8006052 <_dtoa_r+0xaf6>
 800603e:	2300      	movs	r3, #0
 8006040:	220a      	movs	r2, #10
 8006042:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006044:	9802      	ldr	r0, [sp, #8]
 8006046:	f000 f8d0 	bl	80061ea <__multadd>
 800604a:	9009      	str	r0, [sp, #36]	; 0x24
 800604c:	0006      	movs	r6, r0
 800604e:	950a      	str	r5, [sp, #40]	; 0x28
 8006050:	e77d      	b.n	8005f4e <_dtoa_r+0x9f2>
 8006052:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006054:	2300      	movs	r3, #0
 8006056:	220a      	movs	r2, #10
 8006058:	9802      	ldr	r0, [sp, #8]
 800605a:	f000 f8c6 	bl	80061ea <__multadd>
 800605e:	2300      	movs	r3, #0
 8006060:	9009      	str	r0, [sp, #36]	; 0x24
 8006062:	220a      	movs	r2, #10
 8006064:	0031      	movs	r1, r6
 8006066:	9802      	ldr	r0, [sp, #8]
 8006068:	f000 f8bf 	bl	80061ea <__multadd>
 800606c:	e7ee      	b.n	800604c <_dtoa_r+0xaf0>
 800606e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006070:	930c      	str	r3, [sp, #48]	; 0x30
 8006072:	9b08      	ldr	r3, [sp, #32]
 8006074:	9306      	str	r3, [sp, #24]
 8006076:	9904      	ldr	r1, [sp, #16]
 8006078:	9803      	ldr	r0, [sp, #12]
 800607a:	f7ff f9e8 	bl	800544e <quorem>
 800607e:	9b06      	ldr	r3, [sp, #24]
 8006080:	3030      	adds	r0, #48	; 0x30
 8006082:	1c5d      	adds	r5, r3, #1
 8006084:	7018      	strb	r0, [r3, #0]
 8006086:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006088:	9b08      	ldr	r3, [sp, #32]
 800608a:	0004      	movs	r4, r0
 800608c:	1aeb      	subs	r3, r5, r3
 800608e:	429a      	cmp	r2, r3
 8006090:	dd08      	ble.n	80060a4 <_dtoa_r+0xb48>
 8006092:	2300      	movs	r3, #0
 8006094:	220a      	movs	r2, #10
 8006096:	9903      	ldr	r1, [sp, #12]
 8006098:	9802      	ldr	r0, [sp, #8]
 800609a:	f000 f8a6 	bl	80061ea <__multadd>
 800609e:	9506      	str	r5, [sp, #24]
 80060a0:	9003      	str	r0, [sp, #12]
 80060a2:	e7e8      	b.n	8006076 <_dtoa_r+0xb1a>
 80060a4:	2300      	movs	r3, #0
 80060a6:	9309      	str	r3, [sp, #36]	; 0x24
 80060a8:	9903      	ldr	r1, [sp, #12]
 80060aa:	2201      	movs	r2, #1
 80060ac:	9802      	ldr	r0, [sp, #8]
 80060ae:	f000 fa0d 	bl	80064cc <__lshift>
 80060b2:	9904      	ldr	r1, [sp, #16]
 80060b4:	9003      	str	r0, [sp, #12]
 80060b6:	f000 fa5b 	bl	8006570 <__mcmp>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	dc9d      	bgt.n	8005ffa <_dtoa_r+0xa9e>
 80060be:	d101      	bne.n	80060c4 <_dtoa_r+0xb68>
 80060c0:	07e3      	lsls	r3, r4, #31
 80060c2:	d49a      	bmi.n	8005ffa <_dtoa_r+0xa9e>
 80060c4:	1e6b      	subs	r3, r5, #1
 80060c6:	781a      	ldrb	r2, [r3, #0]
 80060c8:	2a30      	cmp	r2, #48	; 0x30
 80060ca:	d000      	beq.n	80060ce <_dtoa_r+0xb72>
 80060cc:	e6f4      	b.n	8005eb8 <_dtoa_r+0x95c>
 80060ce:	001d      	movs	r5, r3
 80060d0:	e7f8      	b.n	80060c4 <_dtoa_r+0xb68>
 80060d2:	9a08      	ldr	r2, [sp, #32]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d103      	bne.n	80060e0 <_dtoa_r+0xb84>
 80060d8:	2331      	movs	r3, #49	; 0x31
 80060da:	3701      	adds	r7, #1
 80060dc:	7013      	strb	r3, [r2, #0]
 80060de:	e6eb      	b.n	8005eb8 <_dtoa_r+0x95c>
 80060e0:	001d      	movs	r5, r3
 80060e2:	e78a      	b.n	8005ffa <_dtoa_r+0xa9e>
 80060e4:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <_dtoa_r+0xbb8>)
 80060e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060e8:	9308      	str	r3, [sp, #32]
 80060ea:	4b0b      	ldr	r3, [pc, #44]	; (8006118 <_dtoa_r+0xbbc>)
 80060ec:	2a00      	cmp	r2, #0
 80060ee:	d001      	beq.n	80060f4 <_dtoa_r+0xb98>
 80060f0:	f7ff fa77 	bl	80055e2 <_dtoa_r+0x86>
 80060f4:	f7ff fa77 	bl	80055e6 <_dtoa_r+0x8a>
 80060f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	dc00      	bgt.n	8006100 <_dtoa_r+0xba4>
 80060fe:	e621      	b.n	8005d44 <_dtoa_r+0x7e8>
 8006100:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8006102:	2001      	movs	r0, #1
 8006104:	e635      	b.n	8005d72 <_dtoa_r+0x816>
 8006106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006108:	2b00      	cmp	r3, #0
 800610a:	dcb2      	bgt.n	8006072 <_dtoa_r+0xb16>
 800610c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800610e:	2b02      	cmp	r3, #2
 8006110:	ddaf      	ble.n	8006072 <_dtoa_r+0xb16>
 8006112:	e6bc      	b.n	8005e8e <_dtoa_r+0x932>
 8006114:	0800693a 	.word	0x0800693a
 8006118:	08006942 	.word	0x08006942

0800611c <_localeconv_r>:
 800611c:	4b03      	ldr	r3, [pc, #12]	; (800612c <_localeconv_r+0x10>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6a18      	ldr	r0, [r3, #32]
 8006122:	2800      	cmp	r0, #0
 8006124:	d100      	bne.n	8006128 <_localeconv_r+0xc>
 8006126:	4802      	ldr	r0, [pc, #8]	; (8006130 <_localeconv_r+0x14>)
 8006128:	30f0      	adds	r0, #240	; 0xf0
 800612a:	4770      	bx	lr
 800612c:	20000008 	.word	0x20000008
 8006130:	2000006c 	.word	0x2000006c

08006134 <malloc>:
 8006134:	b510      	push	{r4, lr}
 8006136:	4b03      	ldr	r3, [pc, #12]	; (8006144 <malloc+0x10>)
 8006138:	0001      	movs	r1, r0
 800613a:	6818      	ldr	r0, [r3, #0]
 800613c:	f000 faf8 	bl	8006730 <_malloc_r>
 8006140:	bd10      	pop	{r4, pc}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	20000008 	.word	0x20000008

08006148 <_Balloc>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800614c:	0004      	movs	r4, r0
 800614e:	000d      	movs	r5, r1
 8006150:	2e00      	cmp	r6, #0
 8006152:	d107      	bne.n	8006164 <_Balloc+0x1c>
 8006154:	2010      	movs	r0, #16
 8006156:	f7ff ffed 	bl	8006134 <malloc>
 800615a:	6260      	str	r0, [r4, #36]	; 0x24
 800615c:	6046      	str	r6, [r0, #4]
 800615e:	6086      	str	r6, [r0, #8]
 8006160:	6006      	str	r6, [r0, #0]
 8006162:	60c6      	str	r6, [r0, #12]
 8006164:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006166:	68f3      	ldr	r3, [r6, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d013      	beq.n	8006194 <_Balloc+0x4c>
 800616c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800616e:	00aa      	lsls	r2, r5, #2
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	189b      	adds	r3, r3, r2
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	2800      	cmp	r0, #0
 8006178:	d118      	bne.n	80061ac <_Balloc+0x64>
 800617a:	2101      	movs	r1, #1
 800617c:	000e      	movs	r6, r1
 800617e:	40ae      	lsls	r6, r5
 8006180:	1d72      	adds	r2, r6, #5
 8006182:	0092      	lsls	r2, r2, #2
 8006184:	0020      	movs	r0, r4
 8006186:	f000 fac5 	bl	8006714 <_calloc_r>
 800618a:	2800      	cmp	r0, #0
 800618c:	d00c      	beq.n	80061a8 <_Balloc+0x60>
 800618e:	6045      	str	r5, [r0, #4]
 8006190:	6086      	str	r6, [r0, #8]
 8006192:	e00d      	b.n	80061b0 <_Balloc+0x68>
 8006194:	2221      	movs	r2, #33	; 0x21
 8006196:	2104      	movs	r1, #4
 8006198:	0020      	movs	r0, r4
 800619a:	f000 fabb 	bl	8006714 <_calloc_r>
 800619e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061a0:	60f0      	str	r0, [r6, #12]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e1      	bne.n	800616c <_Balloc+0x24>
 80061a8:	2000      	movs	r0, #0
 80061aa:	bd70      	pop	{r4, r5, r6, pc}
 80061ac:	6802      	ldr	r2, [r0, #0]
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	2300      	movs	r3, #0
 80061b2:	6103      	str	r3, [r0, #16]
 80061b4:	60c3      	str	r3, [r0, #12]
 80061b6:	e7f8      	b.n	80061aa <_Balloc+0x62>

080061b8 <_Bfree>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80061bc:	0006      	movs	r6, r0
 80061be:	000d      	movs	r5, r1
 80061c0:	2c00      	cmp	r4, #0
 80061c2:	d107      	bne.n	80061d4 <_Bfree+0x1c>
 80061c4:	2010      	movs	r0, #16
 80061c6:	f7ff ffb5 	bl	8006134 <malloc>
 80061ca:	6270      	str	r0, [r6, #36]	; 0x24
 80061cc:	6044      	str	r4, [r0, #4]
 80061ce:	6084      	str	r4, [r0, #8]
 80061d0:	6004      	str	r4, [r0, #0]
 80061d2:	60c4      	str	r4, [r0, #12]
 80061d4:	2d00      	cmp	r5, #0
 80061d6:	d007      	beq.n	80061e8 <_Bfree+0x30>
 80061d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80061da:	686a      	ldr	r2, [r5, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	0092      	lsls	r2, r2, #2
 80061e0:	189b      	adds	r3, r3, r2
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	602a      	str	r2, [r5, #0]
 80061e6:	601d      	str	r5, [r3, #0]
 80061e8:	bd70      	pop	{r4, r5, r6, pc}

080061ea <__multadd>:
 80061ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061ec:	001e      	movs	r6, r3
 80061ee:	2314      	movs	r3, #20
 80061f0:	469c      	mov	ip, r3
 80061f2:	0007      	movs	r7, r0
 80061f4:	000c      	movs	r4, r1
 80061f6:	2000      	movs	r0, #0
 80061f8:	690d      	ldr	r5, [r1, #16]
 80061fa:	448c      	add	ip, r1
 80061fc:	4663      	mov	r3, ip
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3001      	adds	r0, #1
 8006202:	b299      	uxth	r1, r3
 8006204:	4663      	mov	r3, ip
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4351      	muls	r1, r2
 800620a:	0c1b      	lsrs	r3, r3, #16
 800620c:	4353      	muls	r3, r2
 800620e:	1989      	adds	r1, r1, r6
 8006210:	0c0e      	lsrs	r6, r1, #16
 8006212:	199b      	adds	r3, r3, r6
 8006214:	b289      	uxth	r1, r1
 8006216:	0c1e      	lsrs	r6, r3, #16
 8006218:	041b      	lsls	r3, r3, #16
 800621a:	185b      	adds	r3, r3, r1
 800621c:	4661      	mov	r1, ip
 800621e:	c108      	stmia	r1!, {r3}
 8006220:	468c      	mov	ip, r1
 8006222:	4285      	cmp	r5, r0
 8006224:	dcea      	bgt.n	80061fc <__multadd+0x12>
 8006226:	2e00      	cmp	r6, #0
 8006228:	d01b      	beq.n	8006262 <__multadd+0x78>
 800622a:	68a3      	ldr	r3, [r4, #8]
 800622c:	42ab      	cmp	r3, r5
 800622e:	dc12      	bgt.n	8006256 <__multadd+0x6c>
 8006230:	6863      	ldr	r3, [r4, #4]
 8006232:	0038      	movs	r0, r7
 8006234:	1c59      	adds	r1, r3, #1
 8006236:	f7ff ff87 	bl	8006148 <_Balloc>
 800623a:	0021      	movs	r1, r4
 800623c:	6923      	ldr	r3, [r4, #16]
 800623e:	9001      	str	r0, [sp, #4]
 8006240:	1c9a      	adds	r2, r3, #2
 8006242:	0092      	lsls	r2, r2, #2
 8006244:	310c      	adds	r1, #12
 8006246:	300c      	adds	r0, #12
 8006248:	f7fe fd9a 	bl	8004d80 <memcpy>
 800624c:	0021      	movs	r1, r4
 800624e:	0038      	movs	r0, r7
 8006250:	f7ff ffb2 	bl	80061b8 <_Bfree>
 8006254:	9c01      	ldr	r4, [sp, #4]
 8006256:	1d2b      	adds	r3, r5, #4
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	18e3      	adds	r3, r4, r3
 800625c:	3501      	adds	r5, #1
 800625e:	605e      	str	r6, [r3, #4]
 8006260:	6125      	str	r5, [r4, #16]
 8006262:	0020      	movs	r0, r4
 8006264:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08006266 <__hi0bits>:
 8006266:	0003      	movs	r3, r0
 8006268:	0c02      	lsrs	r2, r0, #16
 800626a:	2000      	movs	r0, #0
 800626c:	4282      	cmp	r2, r0
 800626e:	d101      	bne.n	8006274 <__hi0bits+0xe>
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	3010      	adds	r0, #16
 8006274:	0e1a      	lsrs	r2, r3, #24
 8006276:	d101      	bne.n	800627c <__hi0bits+0x16>
 8006278:	3008      	adds	r0, #8
 800627a:	021b      	lsls	r3, r3, #8
 800627c:	0f1a      	lsrs	r2, r3, #28
 800627e:	d101      	bne.n	8006284 <__hi0bits+0x1e>
 8006280:	3004      	adds	r0, #4
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	0f9a      	lsrs	r2, r3, #30
 8006286:	d101      	bne.n	800628c <__hi0bits+0x26>
 8006288:	3002      	adds	r0, #2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	db03      	blt.n	8006298 <__hi0bits+0x32>
 8006290:	3001      	adds	r0, #1
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	d400      	bmi.n	8006298 <__hi0bits+0x32>
 8006296:	2020      	movs	r0, #32
 8006298:	4770      	bx	lr

0800629a <__lo0bits>:
 800629a:	2207      	movs	r2, #7
 800629c:	6803      	ldr	r3, [r0, #0]
 800629e:	b510      	push	{r4, lr}
 80062a0:	0001      	movs	r1, r0
 80062a2:	401a      	ands	r2, r3
 80062a4:	d00d      	beq.n	80062c2 <__lo0bits+0x28>
 80062a6:	2401      	movs	r4, #1
 80062a8:	2000      	movs	r0, #0
 80062aa:	4223      	tst	r3, r4
 80062ac:	d105      	bne.n	80062ba <__lo0bits+0x20>
 80062ae:	3002      	adds	r0, #2
 80062b0:	4203      	tst	r3, r0
 80062b2:	d003      	beq.n	80062bc <__lo0bits+0x22>
 80062b4:	40e3      	lsrs	r3, r4
 80062b6:	0020      	movs	r0, r4
 80062b8:	600b      	str	r3, [r1, #0]
 80062ba:	bd10      	pop	{r4, pc}
 80062bc:	089b      	lsrs	r3, r3, #2
 80062be:	600b      	str	r3, [r1, #0]
 80062c0:	e7fb      	b.n	80062ba <__lo0bits+0x20>
 80062c2:	b29c      	uxth	r4, r3
 80062c4:	0010      	movs	r0, r2
 80062c6:	2c00      	cmp	r4, #0
 80062c8:	d101      	bne.n	80062ce <__lo0bits+0x34>
 80062ca:	2010      	movs	r0, #16
 80062cc:	0c1b      	lsrs	r3, r3, #16
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	2a00      	cmp	r2, #0
 80062d2:	d101      	bne.n	80062d8 <__lo0bits+0x3e>
 80062d4:	3008      	adds	r0, #8
 80062d6:	0a1b      	lsrs	r3, r3, #8
 80062d8:	071a      	lsls	r2, r3, #28
 80062da:	d101      	bne.n	80062e0 <__lo0bits+0x46>
 80062dc:	3004      	adds	r0, #4
 80062de:	091b      	lsrs	r3, r3, #4
 80062e0:	079a      	lsls	r2, r3, #30
 80062e2:	d101      	bne.n	80062e8 <__lo0bits+0x4e>
 80062e4:	3002      	adds	r0, #2
 80062e6:	089b      	lsrs	r3, r3, #2
 80062e8:	07da      	lsls	r2, r3, #31
 80062ea:	d4e8      	bmi.n	80062be <__lo0bits+0x24>
 80062ec:	085b      	lsrs	r3, r3, #1
 80062ee:	d001      	beq.n	80062f4 <__lo0bits+0x5a>
 80062f0:	3001      	adds	r0, #1
 80062f2:	e7e4      	b.n	80062be <__lo0bits+0x24>
 80062f4:	2020      	movs	r0, #32
 80062f6:	e7e0      	b.n	80062ba <__lo0bits+0x20>

080062f8 <__i2b>:
 80062f8:	b510      	push	{r4, lr}
 80062fa:	000c      	movs	r4, r1
 80062fc:	2101      	movs	r1, #1
 80062fe:	f7ff ff23 	bl	8006148 <_Balloc>
 8006302:	2301      	movs	r3, #1
 8006304:	6144      	str	r4, [r0, #20]
 8006306:	6103      	str	r3, [r0, #16]
 8006308:	bd10      	pop	{r4, pc}

0800630a <__multiply>:
 800630a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800630c:	690b      	ldr	r3, [r1, #16]
 800630e:	0014      	movs	r4, r2
 8006310:	6912      	ldr	r2, [r2, #16]
 8006312:	b089      	sub	sp, #36	; 0x24
 8006314:	000d      	movs	r5, r1
 8006316:	4293      	cmp	r3, r2
 8006318:	da01      	bge.n	800631e <__multiply+0x14>
 800631a:	0025      	movs	r5, r4
 800631c:	000c      	movs	r4, r1
 800631e:	692f      	ldr	r7, [r5, #16]
 8006320:	6926      	ldr	r6, [r4, #16]
 8006322:	6869      	ldr	r1, [r5, #4]
 8006324:	19bb      	adds	r3, r7, r6
 8006326:	9302      	str	r3, [sp, #8]
 8006328:	68ab      	ldr	r3, [r5, #8]
 800632a:	19ba      	adds	r2, r7, r6
 800632c:	4293      	cmp	r3, r2
 800632e:	da00      	bge.n	8006332 <__multiply+0x28>
 8006330:	3101      	adds	r1, #1
 8006332:	f7ff ff09 	bl	8006148 <_Balloc>
 8006336:	0002      	movs	r2, r0
 8006338:	19bb      	adds	r3, r7, r6
 800633a:	3214      	adds	r2, #20
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	18d3      	adds	r3, r2, r3
 8006340:	469c      	mov	ip, r3
 8006342:	2100      	movs	r1, #0
 8006344:	0013      	movs	r3, r2
 8006346:	9004      	str	r0, [sp, #16]
 8006348:	4563      	cmp	r3, ip
 800634a:	d31d      	bcc.n	8006388 <__multiply+0x7e>
 800634c:	3514      	adds	r5, #20
 800634e:	00bf      	lsls	r7, r7, #2
 8006350:	19eb      	adds	r3, r5, r7
 8006352:	3414      	adds	r4, #20
 8006354:	00b6      	lsls	r6, r6, #2
 8006356:	9305      	str	r3, [sp, #20]
 8006358:	19a3      	adds	r3, r4, r6
 800635a:	9503      	str	r5, [sp, #12]
 800635c:	9401      	str	r4, [sp, #4]
 800635e:	9307      	str	r3, [sp, #28]
 8006360:	9b07      	ldr	r3, [sp, #28]
 8006362:	9901      	ldr	r1, [sp, #4]
 8006364:	4299      	cmp	r1, r3
 8006366:	d311      	bcc.n	800638c <__multiply+0x82>
 8006368:	9b02      	ldr	r3, [sp, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	dd06      	ble.n	800637c <__multiply+0x72>
 800636e:	2304      	movs	r3, #4
 8006370:	425b      	negs	r3, r3
 8006372:	449c      	add	ip, r3
 8006374:	4663      	mov	r3, ip
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d051      	beq.n	8006420 <__multiply+0x116>
 800637c:	9b04      	ldr	r3, [sp, #16]
 800637e:	9a02      	ldr	r2, [sp, #8]
 8006380:	0018      	movs	r0, r3
 8006382:	611a      	str	r2, [r3, #16]
 8006384:	b009      	add	sp, #36	; 0x24
 8006386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006388:	c302      	stmia	r3!, {r1}
 800638a:	e7dd      	b.n	8006348 <__multiply+0x3e>
 800638c:	9b01      	ldr	r3, [sp, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	b298      	uxth	r0, r3
 8006392:	2800      	cmp	r0, #0
 8006394:	d01c      	beq.n	80063d0 <__multiply+0xc6>
 8006396:	0015      	movs	r5, r2
 8006398:	2600      	movs	r6, #0
 800639a:	9f03      	ldr	r7, [sp, #12]
 800639c:	cf02      	ldmia	r7!, {r1}
 800639e:	682c      	ldr	r4, [r5, #0]
 80063a0:	b28b      	uxth	r3, r1
 80063a2:	4343      	muls	r3, r0
 80063a4:	0c09      	lsrs	r1, r1, #16
 80063a6:	4341      	muls	r1, r0
 80063a8:	b2a4      	uxth	r4, r4
 80063aa:	191b      	adds	r3, r3, r4
 80063ac:	199b      	adds	r3, r3, r6
 80063ae:	000e      	movs	r6, r1
 80063b0:	6829      	ldr	r1, [r5, #0]
 80063b2:	9506      	str	r5, [sp, #24]
 80063b4:	0c09      	lsrs	r1, r1, #16
 80063b6:	1871      	adds	r1, r6, r1
 80063b8:	0c1e      	lsrs	r6, r3, #16
 80063ba:	1989      	adds	r1, r1, r6
 80063bc:	0c0e      	lsrs	r6, r1, #16
 80063be:	b29b      	uxth	r3, r3
 80063c0:	0409      	lsls	r1, r1, #16
 80063c2:	430b      	orrs	r3, r1
 80063c4:	c508      	stmia	r5!, {r3}
 80063c6:	9b05      	ldr	r3, [sp, #20]
 80063c8:	42bb      	cmp	r3, r7
 80063ca:	d8e7      	bhi.n	800639c <__multiply+0x92>
 80063cc:	9b06      	ldr	r3, [sp, #24]
 80063ce:	605e      	str	r6, [r3, #4]
 80063d0:	9b01      	ldr	r3, [sp, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	0c1d      	lsrs	r5, r3, #16
 80063d6:	d01e      	beq.n	8006416 <__multiply+0x10c>
 80063d8:	0010      	movs	r0, r2
 80063da:	2700      	movs	r7, #0
 80063dc:	6813      	ldr	r3, [r2, #0]
 80063de:	9e03      	ldr	r6, [sp, #12]
 80063e0:	6831      	ldr	r1, [r6, #0]
 80063e2:	6804      	ldr	r4, [r0, #0]
 80063e4:	b289      	uxth	r1, r1
 80063e6:	4369      	muls	r1, r5
 80063e8:	0c24      	lsrs	r4, r4, #16
 80063ea:	1909      	adds	r1, r1, r4
 80063ec:	19c9      	adds	r1, r1, r7
 80063ee:	040f      	lsls	r7, r1, #16
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	433b      	orrs	r3, r7
 80063f4:	6003      	str	r3, [r0, #0]
 80063f6:	ce80      	ldmia	r6!, {r7}
 80063f8:	6843      	ldr	r3, [r0, #4]
 80063fa:	0c3f      	lsrs	r7, r7, #16
 80063fc:	436f      	muls	r7, r5
 80063fe:	b29b      	uxth	r3, r3
 8006400:	18fb      	adds	r3, r7, r3
 8006402:	0c09      	lsrs	r1, r1, #16
 8006404:	185b      	adds	r3, r3, r1
 8006406:	9905      	ldr	r1, [sp, #20]
 8006408:	9006      	str	r0, [sp, #24]
 800640a:	0c1f      	lsrs	r7, r3, #16
 800640c:	3004      	adds	r0, #4
 800640e:	42b1      	cmp	r1, r6
 8006410:	d8e6      	bhi.n	80063e0 <__multiply+0xd6>
 8006412:	9906      	ldr	r1, [sp, #24]
 8006414:	604b      	str	r3, [r1, #4]
 8006416:	9b01      	ldr	r3, [sp, #4]
 8006418:	3204      	adds	r2, #4
 800641a:	3304      	adds	r3, #4
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	e79f      	b.n	8006360 <__multiply+0x56>
 8006420:	9b02      	ldr	r3, [sp, #8]
 8006422:	3b01      	subs	r3, #1
 8006424:	9302      	str	r3, [sp, #8]
 8006426:	e79f      	b.n	8006368 <__multiply+0x5e>

08006428 <__pow5mult>:
 8006428:	2303      	movs	r3, #3
 800642a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800642c:	4013      	ands	r3, r2
 800642e:	0005      	movs	r5, r0
 8006430:	000e      	movs	r6, r1
 8006432:	0014      	movs	r4, r2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <__pow5mult+0x22>
 8006438:	4922      	ldr	r1, [pc, #136]	; (80064c4 <__pow5mult+0x9c>)
 800643a:	3b01      	subs	r3, #1
 800643c:	009a      	lsls	r2, r3, #2
 800643e:	5852      	ldr	r2, [r2, r1]
 8006440:	2300      	movs	r3, #0
 8006442:	0031      	movs	r1, r6
 8006444:	f7ff fed1 	bl	80061ea <__multadd>
 8006448:	0006      	movs	r6, r0
 800644a:	10a3      	asrs	r3, r4, #2
 800644c:	9301      	str	r3, [sp, #4]
 800644e:	d036      	beq.n	80064be <__pow5mult+0x96>
 8006450:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8006452:	2c00      	cmp	r4, #0
 8006454:	d107      	bne.n	8006466 <__pow5mult+0x3e>
 8006456:	2010      	movs	r0, #16
 8006458:	f7ff fe6c 	bl	8006134 <malloc>
 800645c:	6268      	str	r0, [r5, #36]	; 0x24
 800645e:	6044      	str	r4, [r0, #4]
 8006460:	6084      	str	r4, [r0, #8]
 8006462:	6004      	str	r4, [r0, #0]
 8006464:	60c4      	str	r4, [r0, #12]
 8006466:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8006468:	68bc      	ldr	r4, [r7, #8]
 800646a:	2c00      	cmp	r4, #0
 800646c:	d107      	bne.n	800647e <__pow5mult+0x56>
 800646e:	4916      	ldr	r1, [pc, #88]	; (80064c8 <__pow5mult+0xa0>)
 8006470:	0028      	movs	r0, r5
 8006472:	f7ff ff41 	bl	80062f8 <__i2b>
 8006476:	2300      	movs	r3, #0
 8006478:	0004      	movs	r4, r0
 800647a:	60b8      	str	r0, [r7, #8]
 800647c:	6003      	str	r3, [r0, #0]
 800647e:	2201      	movs	r2, #1
 8006480:	9b01      	ldr	r3, [sp, #4]
 8006482:	4213      	tst	r3, r2
 8006484:	d00a      	beq.n	800649c <__pow5mult+0x74>
 8006486:	0031      	movs	r1, r6
 8006488:	0022      	movs	r2, r4
 800648a:	0028      	movs	r0, r5
 800648c:	f7ff ff3d 	bl	800630a <__multiply>
 8006490:	0007      	movs	r7, r0
 8006492:	0031      	movs	r1, r6
 8006494:	0028      	movs	r0, r5
 8006496:	f7ff fe8f 	bl	80061b8 <_Bfree>
 800649a:	003e      	movs	r6, r7
 800649c:	9b01      	ldr	r3, [sp, #4]
 800649e:	105b      	asrs	r3, r3, #1
 80064a0:	9301      	str	r3, [sp, #4]
 80064a2:	d00c      	beq.n	80064be <__pow5mult+0x96>
 80064a4:	6820      	ldr	r0, [r4, #0]
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d107      	bne.n	80064ba <__pow5mult+0x92>
 80064aa:	0022      	movs	r2, r4
 80064ac:	0021      	movs	r1, r4
 80064ae:	0028      	movs	r0, r5
 80064b0:	f7ff ff2b 	bl	800630a <__multiply>
 80064b4:	2300      	movs	r3, #0
 80064b6:	6020      	str	r0, [r4, #0]
 80064b8:	6003      	str	r3, [r0, #0]
 80064ba:	0004      	movs	r4, r0
 80064bc:	e7df      	b.n	800647e <__pow5mult+0x56>
 80064be:	0030      	movs	r0, r6
 80064c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	08006a38 	.word	0x08006a38
 80064c8:	00000271 	.word	0x00000271

080064cc <__lshift>:
 80064cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ce:	000d      	movs	r5, r1
 80064d0:	0017      	movs	r7, r2
 80064d2:	692b      	ldr	r3, [r5, #16]
 80064d4:	1154      	asrs	r4, r2, #5
 80064d6:	b085      	sub	sp, #20
 80064d8:	18e3      	adds	r3, r4, r3
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	3301      	adds	r3, #1
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	6849      	ldr	r1, [r1, #4]
 80064e2:	68ab      	ldr	r3, [r5, #8]
 80064e4:	9002      	str	r0, [sp, #8]
 80064e6:	9a00      	ldr	r2, [sp, #0]
 80064e8:	4293      	cmp	r3, r2
 80064ea:	db35      	blt.n	8006558 <__lshift+0x8c>
 80064ec:	9802      	ldr	r0, [sp, #8]
 80064ee:	f7ff fe2b 	bl	8006148 <_Balloc>
 80064f2:	2300      	movs	r3, #0
 80064f4:	0002      	movs	r2, r0
 80064f6:	0006      	movs	r6, r0
 80064f8:	0019      	movs	r1, r3
 80064fa:	3214      	adds	r2, #20
 80064fc:	42a3      	cmp	r3, r4
 80064fe:	db2e      	blt.n	800655e <__lshift+0x92>
 8006500:	43e3      	mvns	r3, r4
 8006502:	17db      	asrs	r3, r3, #31
 8006504:	401c      	ands	r4, r3
 8006506:	002b      	movs	r3, r5
 8006508:	00a4      	lsls	r4, r4, #2
 800650a:	1914      	adds	r4, r2, r4
 800650c:	692a      	ldr	r2, [r5, #16]
 800650e:	3314      	adds	r3, #20
 8006510:	0092      	lsls	r2, r2, #2
 8006512:	189a      	adds	r2, r3, r2
 8006514:	4694      	mov	ip, r2
 8006516:	221f      	movs	r2, #31
 8006518:	4017      	ands	r7, r2
 800651a:	d024      	beq.n	8006566 <__lshift+0x9a>
 800651c:	3201      	adds	r2, #1
 800651e:	1bd2      	subs	r2, r2, r7
 8006520:	9203      	str	r2, [sp, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	6819      	ldr	r1, [r3, #0]
 8006526:	0020      	movs	r0, r4
 8006528:	40b9      	lsls	r1, r7
 800652a:	430a      	orrs	r2, r1
 800652c:	c404      	stmia	r4!, {r2}
 800652e:	cb04      	ldmia	r3!, {r2}
 8006530:	9903      	ldr	r1, [sp, #12]
 8006532:	40ca      	lsrs	r2, r1
 8006534:	459c      	cmp	ip, r3
 8006536:	d8f5      	bhi.n	8006524 <__lshift+0x58>
 8006538:	6042      	str	r2, [r0, #4]
 800653a:	2a00      	cmp	r2, #0
 800653c:	d002      	beq.n	8006544 <__lshift+0x78>
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	3302      	adds	r3, #2
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	9b00      	ldr	r3, [sp, #0]
 8006546:	9802      	ldr	r0, [sp, #8]
 8006548:	3b01      	subs	r3, #1
 800654a:	6133      	str	r3, [r6, #16]
 800654c:	0029      	movs	r1, r5
 800654e:	f7ff fe33 	bl	80061b8 <_Bfree>
 8006552:	0030      	movs	r0, r6
 8006554:	b005      	add	sp, #20
 8006556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006558:	3101      	adds	r1, #1
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	e7c3      	b.n	80064e6 <__lshift+0x1a>
 800655e:	0098      	lsls	r0, r3, #2
 8006560:	5011      	str	r1, [r2, r0]
 8006562:	3301      	adds	r3, #1
 8006564:	e7ca      	b.n	80064fc <__lshift+0x30>
 8006566:	cb04      	ldmia	r3!, {r2}
 8006568:	c404      	stmia	r4!, {r2}
 800656a:	459c      	cmp	ip, r3
 800656c:	d8fb      	bhi.n	8006566 <__lshift+0x9a>
 800656e:	e7e9      	b.n	8006544 <__lshift+0x78>

08006570 <__mcmp>:
 8006570:	690a      	ldr	r2, [r1, #16]
 8006572:	6903      	ldr	r3, [r0, #16]
 8006574:	b530      	push	{r4, r5, lr}
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	d10d      	bne.n	8006596 <__mcmp+0x26>
 800657a:	0092      	lsls	r2, r2, #2
 800657c:	3014      	adds	r0, #20
 800657e:	3114      	adds	r1, #20
 8006580:	1884      	adds	r4, r0, r2
 8006582:	1889      	adds	r1, r1, r2
 8006584:	3c04      	subs	r4, #4
 8006586:	3904      	subs	r1, #4
 8006588:	6825      	ldr	r5, [r4, #0]
 800658a:	680a      	ldr	r2, [r1, #0]
 800658c:	4295      	cmp	r5, r2
 800658e:	d004      	beq.n	800659a <__mcmp+0x2a>
 8006590:	2301      	movs	r3, #1
 8006592:	4295      	cmp	r5, r2
 8006594:	d304      	bcc.n	80065a0 <__mcmp+0x30>
 8006596:	0018      	movs	r0, r3
 8006598:	bd30      	pop	{r4, r5, pc}
 800659a:	42a0      	cmp	r0, r4
 800659c:	d3f2      	bcc.n	8006584 <__mcmp+0x14>
 800659e:	e7fa      	b.n	8006596 <__mcmp+0x26>
 80065a0:	425b      	negs	r3, r3
 80065a2:	e7f8      	b.n	8006596 <__mcmp+0x26>

080065a4 <__mdiff>:
 80065a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065a6:	000d      	movs	r5, r1
 80065a8:	b085      	sub	sp, #20
 80065aa:	0007      	movs	r7, r0
 80065ac:	0011      	movs	r1, r2
 80065ae:	0028      	movs	r0, r5
 80065b0:	0014      	movs	r4, r2
 80065b2:	f7ff ffdd 	bl	8006570 <__mcmp>
 80065b6:	1e06      	subs	r6, r0, #0
 80065b8:	d108      	bne.n	80065cc <__mdiff+0x28>
 80065ba:	0001      	movs	r1, r0
 80065bc:	0038      	movs	r0, r7
 80065be:	f7ff fdc3 	bl	8006148 <_Balloc>
 80065c2:	2301      	movs	r3, #1
 80065c4:	6146      	str	r6, [r0, #20]
 80065c6:	6103      	str	r3, [r0, #16]
 80065c8:	b005      	add	sp, #20
 80065ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065cc:	2301      	movs	r3, #1
 80065ce:	9301      	str	r3, [sp, #4]
 80065d0:	2800      	cmp	r0, #0
 80065d2:	db04      	blt.n	80065de <__mdiff+0x3a>
 80065d4:	0023      	movs	r3, r4
 80065d6:	002c      	movs	r4, r5
 80065d8:	001d      	movs	r5, r3
 80065da:	2300      	movs	r3, #0
 80065dc:	9301      	str	r3, [sp, #4]
 80065de:	6861      	ldr	r1, [r4, #4]
 80065e0:	0038      	movs	r0, r7
 80065e2:	f7ff fdb1 	bl	8006148 <_Balloc>
 80065e6:	002f      	movs	r7, r5
 80065e8:	2200      	movs	r2, #0
 80065ea:	9b01      	ldr	r3, [sp, #4]
 80065ec:	6926      	ldr	r6, [r4, #16]
 80065ee:	60c3      	str	r3, [r0, #12]
 80065f0:	3414      	adds	r4, #20
 80065f2:	00b3      	lsls	r3, r6, #2
 80065f4:	18e3      	adds	r3, r4, r3
 80065f6:	9302      	str	r3, [sp, #8]
 80065f8:	692b      	ldr	r3, [r5, #16]
 80065fa:	3714      	adds	r7, #20
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	18fb      	adds	r3, r7, r3
 8006600:	9303      	str	r3, [sp, #12]
 8006602:	0003      	movs	r3, r0
 8006604:	4694      	mov	ip, r2
 8006606:	3314      	adds	r3, #20
 8006608:	cc20      	ldmia	r4!, {r5}
 800660a:	cf04      	ldmia	r7!, {r2}
 800660c:	9201      	str	r2, [sp, #4]
 800660e:	b2aa      	uxth	r2, r5
 8006610:	4494      	add	ip, r2
 8006612:	466a      	mov	r2, sp
 8006614:	4661      	mov	r1, ip
 8006616:	8892      	ldrh	r2, [r2, #4]
 8006618:	0c2d      	lsrs	r5, r5, #16
 800661a:	1a8a      	subs	r2, r1, r2
 800661c:	9901      	ldr	r1, [sp, #4]
 800661e:	0c09      	lsrs	r1, r1, #16
 8006620:	1a69      	subs	r1, r5, r1
 8006622:	1415      	asrs	r5, r2, #16
 8006624:	1949      	adds	r1, r1, r5
 8006626:	140d      	asrs	r5, r1, #16
 8006628:	b292      	uxth	r2, r2
 800662a:	0409      	lsls	r1, r1, #16
 800662c:	430a      	orrs	r2, r1
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	9a03      	ldr	r2, [sp, #12]
 8006632:	46ac      	mov	ip, r5
 8006634:	3304      	adds	r3, #4
 8006636:	42ba      	cmp	r2, r7
 8006638:	d8e6      	bhi.n	8006608 <__mdiff+0x64>
 800663a:	9902      	ldr	r1, [sp, #8]
 800663c:	001a      	movs	r2, r3
 800663e:	428c      	cmp	r4, r1
 8006640:	d305      	bcc.n	800664e <__mdiff+0xaa>
 8006642:	3a04      	subs	r2, #4
 8006644:	6813      	ldr	r3, [r2, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00e      	beq.n	8006668 <__mdiff+0xc4>
 800664a:	6106      	str	r6, [r0, #16]
 800664c:	e7bc      	b.n	80065c8 <__mdiff+0x24>
 800664e:	cc04      	ldmia	r4!, {r2}
 8006650:	b291      	uxth	r1, r2
 8006652:	4461      	add	r1, ip
 8006654:	140d      	asrs	r5, r1, #16
 8006656:	0c12      	lsrs	r2, r2, #16
 8006658:	1952      	adds	r2, r2, r5
 800665a:	1415      	asrs	r5, r2, #16
 800665c:	b289      	uxth	r1, r1
 800665e:	0412      	lsls	r2, r2, #16
 8006660:	430a      	orrs	r2, r1
 8006662:	46ac      	mov	ip, r5
 8006664:	c304      	stmia	r3!, {r2}
 8006666:	e7e8      	b.n	800663a <__mdiff+0x96>
 8006668:	3e01      	subs	r6, #1
 800666a:	e7ea      	b.n	8006642 <__mdiff+0x9e>

0800666c <__d2b>:
 800666c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800666e:	001d      	movs	r5, r3
 8006670:	2101      	movs	r1, #1
 8006672:	0014      	movs	r4, r2
 8006674:	9f08      	ldr	r7, [sp, #32]
 8006676:	f7ff fd67 	bl	8006148 <_Balloc>
 800667a:	032b      	lsls	r3, r5, #12
 800667c:	006d      	lsls	r5, r5, #1
 800667e:	0006      	movs	r6, r0
 8006680:	0b1b      	lsrs	r3, r3, #12
 8006682:	0d6d      	lsrs	r5, r5, #21
 8006684:	d124      	bne.n	80066d0 <__d2b+0x64>
 8006686:	9301      	str	r3, [sp, #4]
 8006688:	2c00      	cmp	r4, #0
 800668a:	d027      	beq.n	80066dc <__d2b+0x70>
 800668c:	4668      	mov	r0, sp
 800668e:	9400      	str	r4, [sp, #0]
 8006690:	f7ff fe03 	bl	800629a <__lo0bits>
 8006694:	9c00      	ldr	r4, [sp, #0]
 8006696:	2800      	cmp	r0, #0
 8006698:	d01e      	beq.n	80066d8 <__d2b+0x6c>
 800669a:	9b01      	ldr	r3, [sp, #4]
 800669c:	2120      	movs	r1, #32
 800669e:	001a      	movs	r2, r3
 80066a0:	1a09      	subs	r1, r1, r0
 80066a2:	408a      	lsls	r2, r1
 80066a4:	40c3      	lsrs	r3, r0
 80066a6:	4322      	orrs	r2, r4
 80066a8:	6172      	str	r2, [r6, #20]
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	9c01      	ldr	r4, [sp, #4]
 80066ae:	61b4      	str	r4, [r6, #24]
 80066b0:	1e63      	subs	r3, r4, #1
 80066b2:	419c      	sbcs	r4, r3
 80066b4:	3401      	adds	r4, #1
 80066b6:	6134      	str	r4, [r6, #16]
 80066b8:	2d00      	cmp	r5, #0
 80066ba:	d018      	beq.n	80066ee <__d2b+0x82>
 80066bc:	4b12      	ldr	r3, [pc, #72]	; (8006708 <__d2b+0x9c>)
 80066be:	18ed      	adds	r5, r5, r3
 80066c0:	2335      	movs	r3, #53	; 0x35
 80066c2:	182d      	adds	r5, r5, r0
 80066c4:	603d      	str	r5, [r7, #0]
 80066c6:	1a18      	subs	r0, r3, r0
 80066c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ca:	6018      	str	r0, [r3, #0]
 80066cc:	0030      	movs	r0, r6
 80066ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066d0:	2280      	movs	r2, #128	; 0x80
 80066d2:	0352      	lsls	r2, r2, #13
 80066d4:	4313      	orrs	r3, r2
 80066d6:	e7d6      	b.n	8006686 <__d2b+0x1a>
 80066d8:	6174      	str	r4, [r6, #20]
 80066da:	e7e7      	b.n	80066ac <__d2b+0x40>
 80066dc:	a801      	add	r0, sp, #4
 80066de:	f7ff fddc 	bl	800629a <__lo0bits>
 80066e2:	2401      	movs	r4, #1
 80066e4:	9b01      	ldr	r3, [sp, #4]
 80066e6:	6134      	str	r4, [r6, #16]
 80066e8:	6173      	str	r3, [r6, #20]
 80066ea:	3020      	adds	r0, #32
 80066ec:	e7e4      	b.n	80066b8 <__d2b+0x4c>
 80066ee:	4b07      	ldr	r3, [pc, #28]	; (800670c <__d2b+0xa0>)
 80066f0:	18c0      	adds	r0, r0, r3
 80066f2:	4b07      	ldr	r3, [pc, #28]	; (8006710 <__d2b+0xa4>)
 80066f4:	6038      	str	r0, [r7, #0]
 80066f6:	18e3      	adds	r3, r4, r3
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	18f3      	adds	r3, r6, r3
 80066fc:	6958      	ldr	r0, [r3, #20]
 80066fe:	f7ff fdb2 	bl	8006266 <__hi0bits>
 8006702:	0164      	lsls	r4, r4, #5
 8006704:	1a20      	subs	r0, r4, r0
 8006706:	e7df      	b.n	80066c8 <__d2b+0x5c>
 8006708:	fffffbcd 	.word	0xfffffbcd
 800670c:	fffffbce 	.word	0xfffffbce
 8006710:	3fffffff 	.word	0x3fffffff

08006714 <_calloc_r>:
 8006714:	434a      	muls	r2, r1
 8006716:	b570      	push	{r4, r5, r6, lr}
 8006718:	0011      	movs	r1, r2
 800671a:	0014      	movs	r4, r2
 800671c:	f000 f808 	bl	8006730 <_malloc_r>
 8006720:	1e05      	subs	r5, r0, #0
 8006722:	d003      	beq.n	800672c <_calloc_r+0x18>
 8006724:	0022      	movs	r2, r4
 8006726:	2100      	movs	r1, #0
 8006728:	f7fe fb33 	bl	8004d92 <memset>
 800672c:	0028      	movs	r0, r5
 800672e:	bd70      	pop	{r4, r5, r6, pc}

08006730 <_malloc_r>:
 8006730:	2303      	movs	r3, #3
 8006732:	b570      	push	{r4, r5, r6, lr}
 8006734:	1ccd      	adds	r5, r1, #3
 8006736:	439d      	bics	r5, r3
 8006738:	3508      	adds	r5, #8
 800673a:	0006      	movs	r6, r0
 800673c:	2d0c      	cmp	r5, #12
 800673e:	d21e      	bcs.n	800677e <_malloc_r+0x4e>
 8006740:	250c      	movs	r5, #12
 8006742:	42a9      	cmp	r1, r5
 8006744:	d81d      	bhi.n	8006782 <_malloc_r+0x52>
 8006746:	0030      	movs	r0, r6
 8006748:	f000 f874 	bl	8006834 <__malloc_lock>
 800674c:	4a25      	ldr	r2, [pc, #148]	; (80067e4 <_malloc_r+0xb4>)
 800674e:	6814      	ldr	r4, [r2, #0]
 8006750:	0021      	movs	r1, r4
 8006752:	2900      	cmp	r1, #0
 8006754:	d119      	bne.n	800678a <_malloc_r+0x5a>
 8006756:	4c24      	ldr	r4, [pc, #144]	; (80067e8 <_malloc_r+0xb8>)
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d103      	bne.n	8006766 <_malloc_r+0x36>
 800675e:	0030      	movs	r0, r6
 8006760:	f000 f844 	bl	80067ec <_sbrk_r>
 8006764:	6020      	str	r0, [r4, #0]
 8006766:	0029      	movs	r1, r5
 8006768:	0030      	movs	r0, r6
 800676a:	f000 f83f 	bl	80067ec <_sbrk_r>
 800676e:	1c43      	adds	r3, r0, #1
 8006770:	d12b      	bne.n	80067ca <_malloc_r+0x9a>
 8006772:	230c      	movs	r3, #12
 8006774:	0030      	movs	r0, r6
 8006776:	6033      	str	r3, [r6, #0]
 8006778:	f000 f85d 	bl	8006836 <__malloc_unlock>
 800677c:	e003      	b.n	8006786 <_malloc_r+0x56>
 800677e:	2d00      	cmp	r5, #0
 8006780:	dadf      	bge.n	8006742 <_malloc_r+0x12>
 8006782:	230c      	movs	r3, #12
 8006784:	6033      	str	r3, [r6, #0]
 8006786:	2000      	movs	r0, #0
 8006788:	bd70      	pop	{r4, r5, r6, pc}
 800678a:	680b      	ldr	r3, [r1, #0]
 800678c:	1b5b      	subs	r3, r3, r5
 800678e:	d419      	bmi.n	80067c4 <_malloc_r+0x94>
 8006790:	2b0b      	cmp	r3, #11
 8006792:	d903      	bls.n	800679c <_malloc_r+0x6c>
 8006794:	600b      	str	r3, [r1, #0]
 8006796:	18cc      	adds	r4, r1, r3
 8006798:	6025      	str	r5, [r4, #0]
 800679a:	e003      	b.n	80067a4 <_malloc_r+0x74>
 800679c:	684b      	ldr	r3, [r1, #4]
 800679e:	428c      	cmp	r4, r1
 80067a0:	d10d      	bne.n	80067be <_malloc_r+0x8e>
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	0030      	movs	r0, r6
 80067a6:	f000 f846 	bl	8006836 <__malloc_unlock>
 80067aa:	0020      	movs	r0, r4
 80067ac:	2207      	movs	r2, #7
 80067ae:	300b      	adds	r0, #11
 80067b0:	1d23      	adds	r3, r4, #4
 80067b2:	4390      	bics	r0, r2
 80067b4:	1ac3      	subs	r3, r0, r3
 80067b6:	d0e7      	beq.n	8006788 <_malloc_r+0x58>
 80067b8:	425a      	negs	r2, r3
 80067ba:	50e2      	str	r2, [r4, r3]
 80067bc:	e7e4      	b.n	8006788 <_malloc_r+0x58>
 80067be:	6063      	str	r3, [r4, #4]
 80067c0:	000c      	movs	r4, r1
 80067c2:	e7ef      	b.n	80067a4 <_malloc_r+0x74>
 80067c4:	000c      	movs	r4, r1
 80067c6:	6849      	ldr	r1, [r1, #4]
 80067c8:	e7c3      	b.n	8006752 <_malloc_r+0x22>
 80067ca:	2303      	movs	r3, #3
 80067cc:	1cc4      	adds	r4, r0, #3
 80067ce:	439c      	bics	r4, r3
 80067d0:	42a0      	cmp	r0, r4
 80067d2:	d0e1      	beq.n	8006798 <_malloc_r+0x68>
 80067d4:	1a21      	subs	r1, r4, r0
 80067d6:	0030      	movs	r0, r6
 80067d8:	f000 f808 	bl	80067ec <_sbrk_r>
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	d1db      	bne.n	8006798 <_malloc_r+0x68>
 80067e0:	e7c7      	b.n	8006772 <_malloc_r+0x42>
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	200001f8 	.word	0x200001f8
 80067e8:	200001fc 	.word	0x200001fc

080067ec <_sbrk_r>:
 80067ec:	2300      	movs	r3, #0
 80067ee:	b570      	push	{r4, r5, r6, lr}
 80067f0:	4c06      	ldr	r4, [pc, #24]	; (800680c <_sbrk_r+0x20>)
 80067f2:	0005      	movs	r5, r0
 80067f4:	0008      	movs	r0, r1
 80067f6:	6023      	str	r3, [r4, #0]
 80067f8:	f7fc fa54 	bl	8002ca4 <_sbrk>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d103      	bne.n	8006808 <_sbrk_r+0x1c>
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d000      	beq.n	8006808 <_sbrk_r+0x1c>
 8006806:	602b      	str	r3, [r5, #0]
 8006808:	bd70      	pop	{r4, r5, r6, pc}
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	20000484 	.word	0x20000484

08006810 <__ascii_mbtowc>:
 8006810:	b082      	sub	sp, #8
 8006812:	2900      	cmp	r1, #0
 8006814:	d100      	bne.n	8006818 <__ascii_mbtowc+0x8>
 8006816:	a901      	add	r1, sp, #4
 8006818:	1e10      	subs	r0, r2, #0
 800681a:	d006      	beq.n	800682a <__ascii_mbtowc+0x1a>
 800681c:	2b00      	cmp	r3, #0
 800681e:	d006      	beq.n	800682e <__ascii_mbtowc+0x1e>
 8006820:	7813      	ldrb	r3, [r2, #0]
 8006822:	600b      	str	r3, [r1, #0]
 8006824:	7810      	ldrb	r0, [r2, #0]
 8006826:	1e43      	subs	r3, r0, #1
 8006828:	4198      	sbcs	r0, r3
 800682a:	b002      	add	sp, #8
 800682c:	4770      	bx	lr
 800682e:	2002      	movs	r0, #2
 8006830:	4240      	negs	r0, r0
 8006832:	e7fa      	b.n	800682a <__ascii_mbtowc+0x1a>

08006834 <__malloc_lock>:
 8006834:	4770      	bx	lr

08006836 <__malloc_unlock>:
 8006836:	4770      	bx	lr

08006838 <__ascii_wctomb>:
 8006838:	1e0b      	subs	r3, r1, #0
 800683a:	d004      	beq.n	8006846 <__ascii_wctomb+0xe>
 800683c:	2aff      	cmp	r2, #255	; 0xff
 800683e:	d904      	bls.n	800684a <__ascii_wctomb+0x12>
 8006840:	238a      	movs	r3, #138	; 0x8a
 8006842:	6003      	str	r3, [r0, #0]
 8006844:	3b8b      	subs	r3, #139	; 0x8b
 8006846:	0018      	movs	r0, r3
 8006848:	4770      	bx	lr
 800684a:	700a      	strb	r2, [r1, #0]
 800684c:	2301      	movs	r3, #1
 800684e:	e7fa      	b.n	8006846 <__ascii_wctomb+0xe>

08006850 <_init>:
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006856:	bc08      	pop	{r3}
 8006858:	469e      	mov	lr, r3
 800685a:	4770      	bx	lr

0800685c <_fini>:
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	46c0      	nop			; (mov r8, r8)
 8006860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006862:	bc08      	pop	{r3}
 8006864:	469e      	mov	lr, r3
 8006866:	4770      	bx	lr
