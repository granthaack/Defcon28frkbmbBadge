
cancelled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08006a80  08006a80  00016a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006db8  08006db8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08006db8  08006db8  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006db8  08006db8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006db8  08006db8  00016db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dbc  08006dbc  00016dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08006dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001d8  08006f98  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08006f98  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dec2  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002408  00000000  00000000  0002e0c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d10  00000000  00000000  000304d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  000311e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015ba6  00000000  00000000  00031da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba03  00000000  00000000  0004794e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075c40  00000000  00000000  00053351  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c8f91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b8  00000000  00000000  000c900c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006a64 	.word	0x08006a64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	08006a64 	.word	0x08006a64

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fef1 	bl	8001210 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fe49 	bl	80010d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fee3 	bl	8001210 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fed9 	bl	8001210 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fe6b 	bl	8001148 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe61 	bl	8001148 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dadd>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	464f      	mov	r7, r9
 8000498:	4646      	mov	r6, r8
 800049a:	46d6      	mov	lr, sl
 800049c:	000c      	movs	r4, r1
 800049e:	0309      	lsls	r1, r1, #12
 80004a0:	b5c0      	push	{r6, r7, lr}
 80004a2:	0a49      	lsrs	r1, r1, #9
 80004a4:	0f47      	lsrs	r7, r0, #29
 80004a6:	005e      	lsls	r6, r3, #1
 80004a8:	4339      	orrs	r1, r7
 80004aa:	031f      	lsls	r7, r3, #12
 80004ac:	0fdb      	lsrs	r3, r3, #31
 80004ae:	469c      	mov	ip, r3
 80004b0:	0065      	lsls	r5, r4, #1
 80004b2:	0a7b      	lsrs	r3, r7, #9
 80004b4:	0f57      	lsrs	r7, r2, #29
 80004b6:	431f      	orrs	r7, r3
 80004b8:	0d6d      	lsrs	r5, r5, #21
 80004ba:	0fe4      	lsrs	r4, r4, #31
 80004bc:	0d76      	lsrs	r6, r6, #21
 80004be:	46a1      	mov	r9, r4
 80004c0:	00c0      	lsls	r0, r0, #3
 80004c2:	46b8      	mov	r8, r7
 80004c4:	00d2      	lsls	r2, r2, #3
 80004c6:	1bab      	subs	r3, r5, r6
 80004c8:	4564      	cmp	r4, ip
 80004ca:	d07b      	beq.n	80005c4 <__aeabi_dadd+0x130>
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dd5f      	ble.n	8000590 <__aeabi_dadd+0xfc>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_dadd+0x42>
 80004d4:	e0a4      	b.n	8000620 <__aeabi_dadd+0x18c>
 80004d6:	003e      	movs	r6, r7
 80004d8:	4316      	orrs	r6, r2
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x4a>
 80004dc:	e112      	b.n	8000704 <__aeabi_dadd+0x270>
 80004de:	1e5e      	subs	r6, r3, #1
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_dadd+0x52>
 80004e4:	e19e      	b.n	8000824 <__aeabi_dadd+0x390>
 80004e6:	1a87      	subs	r7, r0, r2
 80004e8:	4643      	mov	r3, r8
 80004ea:	42b8      	cmp	r0, r7
 80004ec:	4180      	sbcs	r0, r0
 80004ee:	2501      	movs	r5, #1
 80004f0:	1ac9      	subs	r1, r1, r3
 80004f2:	4240      	negs	r0, r0
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	020b      	lsls	r3, r1, #8
 80004f8:	d400      	bmi.n	80004fc <__aeabi_dadd+0x68>
 80004fa:	e131      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80004fc:	0249      	lsls	r1, r1, #9
 80004fe:	0a4e      	lsrs	r6, r1, #9
 8000500:	2e00      	cmp	r6, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x72>
 8000504:	e16e      	b.n	80007e4 <__aeabi_dadd+0x350>
 8000506:	0030      	movs	r0, r6
 8000508:	f001 fd62 	bl	8001fd0 <__clzsi2>
 800050c:	0003      	movs	r3, r0
 800050e:	3b08      	subs	r3, #8
 8000510:	2b1f      	cmp	r3, #31
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x82>
 8000514:	e161      	b.n	80007da <__aeabi_dadd+0x346>
 8000516:	2220      	movs	r2, #32
 8000518:	0039      	movs	r1, r7
 800051a:	1ad2      	subs	r2, r2, r3
 800051c:	409e      	lsls	r6, r3
 800051e:	40d1      	lsrs	r1, r2
 8000520:	409f      	lsls	r7, r3
 8000522:	430e      	orrs	r6, r1
 8000524:	429d      	cmp	r5, r3
 8000526:	dd00      	ble.n	800052a <__aeabi_dadd+0x96>
 8000528:	e151      	b.n	80007ce <__aeabi_dadd+0x33a>
 800052a:	1b5d      	subs	r5, r3, r5
 800052c:	1c6b      	adds	r3, r5, #1
 800052e:	2b1f      	cmp	r3, #31
 8000530:	dd00      	ble.n	8000534 <__aeabi_dadd+0xa0>
 8000532:	e17c      	b.n	800082e <__aeabi_dadd+0x39a>
 8000534:	2120      	movs	r1, #32
 8000536:	1ac9      	subs	r1, r1, r3
 8000538:	003d      	movs	r5, r7
 800053a:	0030      	movs	r0, r6
 800053c:	408f      	lsls	r7, r1
 800053e:	4088      	lsls	r0, r1
 8000540:	40dd      	lsrs	r5, r3
 8000542:	1e79      	subs	r1, r7, #1
 8000544:	418f      	sbcs	r7, r1
 8000546:	0031      	movs	r1, r6
 8000548:	2207      	movs	r2, #7
 800054a:	4328      	orrs	r0, r5
 800054c:	40d9      	lsrs	r1, r3
 800054e:	2500      	movs	r5, #0
 8000550:	4307      	orrs	r7, r0
 8000552:	403a      	ands	r2, r7
 8000554:	2a00      	cmp	r2, #0
 8000556:	d009      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000558:	230f      	movs	r3, #15
 800055a:	403b      	ands	r3, r7
 800055c:	2b04      	cmp	r3, #4
 800055e:	d005      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	42bb      	cmp	r3, r7
 8000564:	41bf      	sbcs	r7, r7
 8000566:	427f      	negs	r7, r7
 8000568:	19c9      	adds	r1, r1, r7
 800056a:	001f      	movs	r7, r3
 800056c:	020b      	lsls	r3, r1, #8
 800056e:	d400      	bmi.n	8000572 <__aeabi_dadd+0xde>
 8000570:	e226      	b.n	80009c0 <__aeabi_dadd+0x52c>
 8000572:	1c6a      	adds	r2, r5, #1
 8000574:	4bc6      	ldr	r3, [pc, #792]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000576:	0555      	lsls	r5, r2, #21
 8000578:	0d6d      	lsrs	r5, r5, #21
 800057a:	429a      	cmp	r2, r3
 800057c:	d100      	bne.n	8000580 <__aeabi_dadd+0xec>
 800057e:	e106      	b.n	800078e <__aeabi_dadd+0x2fa>
 8000580:	4ac4      	ldr	r2, [pc, #784]	; (8000894 <__aeabi_dadd+0x400>)
 8000582:	08ff      	lsrs	r7, r7, #3
 8000584:	400a      	ands	r2, r1
 8000586:	0753      	lsls	r3, r2, #29
 8000588:	0252      	lsls	r2, r2, #9
 800058a:	433b      	orrs	r3, r7
 800058c:	0b12      	lsrs	r2, r2, #12
 800058e:	e08e      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d000      	beq.n	8000596 <__aeabi_dadd+0x102>
 8000594:	e0b8      	b.n	8000708 <__aeabi_dadd+0x274>
 8000596:	1c6b      	adds	r3, r5, #1
 8000598:	055b      	lsls	r3, r3, #21
 800059a:	0d5b      	lsrs	r3, r3, #21
 800059c:	2b01      	cmp	r3, #1
 800059e:	dc00      	bgt.n	80005a2 <__aeabi_dadd+0x10e>
 80005a0:	e130      	b.n	8000804 <__aeabi_dadd+0x370>
 80005a2:	1a87      	subs	r7, r0, r2
 80005a4:	4643      	mov	r3, r8
 80005a6:	42b8      	cmp	r0, r7
 80005a8:	41b6      	sbcs	r6, r6
 80005aa:	1acb      	subs	r3, r1, r3
 80005ac:	4276      	negs	r6, r6
 80005ae:	1b9e      	subs	r6, r3, r6
 80005b0:	0233      	lsls	r3, r6, #8
 80005b2:	d500      	bpl.n	80005b6 <__aeabi_dadd+0x122>
 80005b4:	e14c      	b.n	8000850 <__aeabi_dadd+0x3bc>
 80005b6:	003b      	movs	r3, r7
 80005b8:	4333      	orrs	r3, r6
 80005ba:	d1a1      	bne.n	8000500 <__aeabi_dadd+0x6c>
 80005bc:	2200      	movs	r2, #0
 80005be:	2400      	movs	r4, #0
 80005c0:	2500      	movs	r5, #0
 80005c2:	e070      	b.n	80006a6 <__aeabi_dadd+0x212>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_dadd+0x136>
 80005c8:	e0e5      	b.n	8000796 <__aeabi_dadd+0x302>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0x13c>
 80005ce:	e083      	b.n	80006d8 <__aeabi_dadd+0x244>
 80005d0:	4eaf      	ldr	r6, [pc, #700]	; (8000890 <__aeabi_dadd+0x3fc>)
 80005d2:	42b5      	cmp	r5, r6
 80005d4:	d060      	beq.n	8000698 <__aeabi_dadd+0x204>
 80005d6:	2680      	movs	r6, #128	; 0x80
 80005d8:	0436      	lsls	r6, r6, #16
 80005da:	4337      	orrs	r7, r6
 80005dc:	46b8      	mov	r8, r7
 80005de:	2b38      	cmp	r3, #56	; 0x38
 80005e0:	dc00      	bgt.n	80005e4 <__aeabi_dadd+0x150>
 80005e2:	e13e      	b.n	8000862 <__aeabi_dadd+0x3ce>
 80005e4:	4643      	mov	r3, r8
 80005e6:	4313      	orrs	r3, r2
 80005e8:	001f      	movs	r7, r3
 80005ea:	1e7a      	subs	r2, r7, #1
 80005ec:	4197      	sbcs	r7, r2
 80005ee:	183f      	adds	r7, r7, r0
 80005f0:	4287      	cmp	r7, r0
 80005f2:	4180      	sbcs	r0, r0
 80005f4:	4240      	negs	r0, r0
 80005f6:	1809      	adds	r1, r1, r0
 80005f8:	020b      	lsls	r3, r1, #8
 80005fa:	d400      	bmi.n	80005fe <__aeabi_dadd+0x16a>
 80005fc:	e0b0      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80005fe:	4ba4      	ldr	r3, [pc, #656]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000600:	3501      	adds	r5, #1
 8000602:	429d      	cmp	r5, r3
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x174>
 8000606:	e0c3      	b.n	8000790 <__aeabi_dadd+0x2fc>
 8000608:	4aa2      	ldr	r2, [pc, #648]	; (8000894 <__aeabi_dadd+0x400>)
 800060a:	087b      	lsrs	r3, r7, #1
 800060c:	400a      	ands	r2, r1
 800060e:	2101      	movs	r1, #1
 8000610:	400f      	ands	r7, r1
 8000612:	431f      	orrs	r7, r3
 8000614:	0851      	lsrs	r1, r2, #1
 8000616:	07d3      	lsls	r3, r2, #31
 8000618:	2207      	movs	r2, #7
 800061a:	431f      	orrs	r7, r3
 800061c:	403a      	ands	r2, r7
 800061e:	e799      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000620:	4e9b      	ldr	r6, [pc, #620]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000622:	42b5      	cmp	r5, r6
 8000624:	d038      	beq.n	8000698 <__aeabi_dadd+0x204>
 8000626:	2680      	movs	r6, #128	; 0x80
 8000628:	0436      	lsls	r6, r6, #16
 800062a:	4337      	orrs	r7, r6
 800062c:	46b8      	mov	r8, r7
 800062e:	2b38      	cmp	r3, #56	; 0x38
 8000630:	dd00      	ble.n	8000634 <__aeabi_dadd+0x1a0>
 8000632:	e0dc      	b.n	80007ee <__aeabi_dadd+0x35a>
 8000634:	2b1f      	cmp	r3, #31
 8000636:	dc00      	bgt.n	800063a <__aeabi_dadd+0x1a6>
 8000638:	e130      	b.n	800089c <__aeabi_dadd+0x408>
 800063a:	001e      	movs	r6, r3
 800063c:	4647      	mov	r7, r8
 800063e:	3e20      	subs	r6, #32
 8000640:	40f7      	lsrs	r7, r6
 8000642:	46bc      	mov	ip, r7
 8000644:	2b20      	cmp	r3, #32
 8000646:	d004      	beq.n	8000652 <__aeabi_dadd+0x1be>
 8000648:	2640      	movs	r6, #64	; 0x40
 800064a:	1af3      	subs	r3, r6, r3
 800064c:	4646      	mov	r6, r8
 800064e:	409e      	lsls	r6, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	0017      	movs	r7, r2
 8000654:	4663      	mov	r3, ip
 8000656:	1e7a      	subs	r2, r7, #1
 8000658:	4197      	sbcs	r7, r2
 800065a:	431f      	orrs	r7, r3
 800065c:	e0cc      	b.n	80007f8 <__aeabi_dadd+0x364>
 800065e:	2b00      	cmp	r3, #0
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x1d0>
 8000662:	e204      	b.n	8000a6e <__aeabi_dadd+0x5da>
 8000664:	4643      	mov	r3, r8
 8000666:	4313      	orrs	r3, r2
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x1d8>
 800066a:	e159      	b.n	8000920 <__aeabi_dadd+0x48c>
 800066c:	074b      	lsls	r3, r1, #29
 800066e:	08c0      	lsrs	r0, r0, #3
 8000670:	4318      	orrs	r0, r3
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	08c9      	lsrs	r1, r1, #3
 8000676:	031b      	lsls	r3, r3, #12
 8000678:	4219      	tst	r1, r3
 800067a:	d008      	beq.n	800068e <__aeabi_dadd+0x1fa>
 800067c:	4645      	mov	r5, r8
 800067e:	08ed      	lsrs	r5, r5, #3
 8000680:	421d      	tst	r5, r3
 8000682:	d104      	bne.n	800068e <__aeabi_dadd+0x1fa>
 8000684:	4643      	mov	r3, r8
 8000686:	08d0      	lsrs	r0, r2, #3
 8000688:	0759      	lsls	r1, r3, #29
 800068a:	4308      	orrs	r0, r1
 800068c:	0029      	movs	r1, r5
 800068e:	0f42      	lsrs	r2, r0, #29
 8000690:	00c9      	lsls	r1, r1, #3
 8000692:	4d7f      	ldr	r5, [pc, #508]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000694:	4311      	orrs	r1, r2
 8000696:	00c0      	lsls	r0, r0, #3
 8000698:	074b      	lsls	r3, r1, #29
 800069a:	08ca      	lsrs	r2, r1, #3
 800069c:	497c      	ldr	r1, [pc, #496]	; (8000890 <__aeabi_dadd+0x3fc>)
 800069e:	08c0      	lsrs	r0, r0, #3
 80006a0:	4303      	orrs	r3, r0
 80006a2:	428d      	cmp	r5, r1
 80006a4:	d068      	beq.n	8000778 <__aeabi_dadd+0x2e4>
 80006a6:	0312      	lsls	r2, r2, #12
 80006a8:	056d      	lsls	r5, r5, #21
 80006aa:	0b12      	lsrs	r2, r2, #12
 80006ac:	0d6d      	lsrs	r5, r5, #21
 80006ae:	2100      	movs	r1, #0
 80006b0:	0312      	lsls	r2, r2, #12
 80006b2:	0018      	movs	r0, r3
 80006b4:	0b13      	lsrs	r3, r2, #12
 80006b6:	0d0a      	lsrs	r2, r1, #20
 80006b8:	0512      	lsls	r2, r2, #20
 80006ba:	431a      	orrs	r2, r3
 80006bc:	4b76      	ldr	r3, [pc, #472]	; (8000898 <__aeabi_dadd+0x404>)
 80006be:	052d      	lsls	r5, r5, #20
 80006c0:	4013      	ands	r3, r2
 80006c2:	432b      	orrs	r3, r5
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	07e4      	lsls	r4, r4, #31
 80006c8:	085b      	lsrs	r3, r3, #1
 80006ca:	4323      	orrs	r3, r4
 80006cc:	0019      	movs	r1, r3
 80006ce:	bc1c      	pop	{r2, r3, r4}
 80006d0:	4690      	mov	r8, r2
 80006d2:	4699      	mov	r9, r3
 80006d4:	46a2      	mov	sl, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	003e      	movs	r6, r7
 80006da:	4316      	orrs	r6, r2
 80006dc:	d012      	beq.n	8000704 <__aeabi_dadd+0x270>
 80006de:	1e5e      	subs	r6, r3, #1
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x252>
 80006e4:	e100      	b.n	80008e8 <__aeabi_dadd+0x454>
 80006e6:	1887      	adds	r7, r0, r2
 80006e8:	4287      	cmp	r7, r0
 80006ea:	4180      	sbcs	r0, r0
 80006ec:	4441      	add	r1, r8
 80006ee:	4240      	negs	r0, r0
 80006f0:	1809      	adds	r1, r1, r0
 80006f2:	2501      	movs	r5, #1
 80006f4:	020b      	lsls	r3, r1, #8
 80006f6:	d533      	bpl.n	8000760 <__aeabi_dadd+0x2cc>
 80006f8:	2502      	movs	r5, #2
 80006fa:	e785      	b.n	8000608 <__aeabi_dadd+0x174>
 80006fc:	4664      	mov	r4, ip
 80006fe:	0033      	movs	r3, r6
 8000700:	4641      	mov	r1, r8
 8000702:	0010      	movs	r0, r2
 8000704:	001d      	movs	r5, r3
 8000706:	e7c7      	b.n	8000698 <__aeabi_dadd+0x204>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d000      	beq.n	800070e <__aeabi_dadd+0x27a>
 800070c:	e0da      	b.n	80008c4 <__aeabi_dadd+0x430>
 800070e:	000c      	movs	r4, r1
 8000710:	4304      	orrs	r4, r0
 8000712:	d0f3      	beq.n	80006fc <__aeabi_dadd+0x268>
 8000714:	1c5c      	adds	r4, r3, #1
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x286>
 8000718:	e19f      	b.n	8000a5a <__aeabi_dadd+0x5c6>
 800071a:	4c5d      	ldr	r4, [pc, #372]	; (8000890 <__aeabi_dadd+0x3fc>)
 800071c:	42a6      	cmp	r6, r4
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x28e>
 8000720:	e12f      	b.n	8000982 <__aeabi_dadd+0x4ee>
 8000722:	43db      	mvns	r3, r3
 8000724:	2b38      	cmp	r3, #56	; 0x38
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x296>
 8000728:	e166      	b.n	80009f8 <__aeabi_dadd+0x564>
 800072a:	2b1f      	cmp	r3, #31
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x29c>
 800072e:	e183      	b.n	8000a38 <__aeabi_dadd+0x5a4>
 8000730:	2420      	movs	r4, #32
 8000732:	0005      	movs	r5, r0
 8000734:	1ae4      	subs	r4, r4, r3
 8000736:	000f      	movs	r7, r1
 8000738:	40dd      	lsrs	r5, r3
 800073a:	40d9      	lsrs	r1, r3
 800073c:	40a0      	lsls	r0, r4
 800073e:	4643      	mov	r3, r8
 8000740:	40a7      	lsls	r7, r4
 8000742:	1a5b      	subs	r3, r3, r1
 8000744:	1e44      	subs	r4, r0, #1
 8000746:	41a0      	sbcs	r0, r4
 8000748:	4698      	mov	r8, r3
 800074a:	432f      	orrs	r7, r5
 800074c:	4338      	orrs	r0, r7
 800074e:	1a17      	subs	r7, r2, r0
 8000750:	42ba      	cmp	r2, r7
 8000752:	4192      	sbcs	r2, r2
 8000754:	4643      	mov	r3, r8
 8000756:	4252      	negs	r2, r2
 8000758:	1a99      	subs	r1, r3, r2
 800075a:	4664      	mov	r4, ip
 800075c:	0035      	movs	r5, r6
 800075e:	e6ca      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000760:	2207      	movs	r2, #7
 8000762:	403a      	ands	r2, r7
 8000764:	2a00      	cmp	r2, #0
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x2d6>
 8000768:	e6f6      	b.n	8000558 <__aeabi_dadd+0xc4>
 800076a:	074b      	lsls	r3, r1, #29
 800076c:	08ca      	lsrs	r2, r1, #3
 800076e:	4948      	ldr	r1, [pc, #288]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000770:	08ff      	lsrs	r7, r7, #3
 8000772:	433b      	orrs	r3, r7
 8000774:	428d      	cmp	r5, r1
 8000776:	d196      	bne.n	80006a6 <__aeabi_dadd+0x212>
 8000778:	0019      	movs	r1, r3
 800077a:	4311      	orrs	r1, r2
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x2ec>
 800077e:	e19e      	b.n	8000abe <__aeabi_dadd+0x62a>
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0309      	lsls	r1, r1, #12
 8000784:	430a      	orrs	r2, r1
 8000786:	0312      	lsls	r2, r2, #12
 8000788:	0b12      	lsrs	r2, r2, #12
 800078a:	4d41      	ldr	r5, [pc, #260]	; (8000890 <__aeabi_dadd+0x3fc>)
 800078c:	e78f      	b.n	80006ae <__aeabi_dadd+0x21a>
 800078e:	0015      	movs	r5, r2
 8000790:	2200      	movs	r2, #0
 8000792:	2300      	movs	r3, #0
 8000794:	e78b      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d000      	beq.n	800079c <__aeabi_dadd+0x308>
 800079a:	e0c7      	b.n	800092c <__aeabi_dadd+0x498>
 800079c:	1c6b      	adds	r3, r5, #1
 800079e:	055f      	lsls	r7, r3, #21
 80007a0:	0d7f      	lsrs	r7, r7, #21
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_dadd+0x314>
 80007a6:	e0f1      	b.n	800098c <__aeabi_dadd+0x4f8>
 80007a8:	4d39      	ldr	r5, [pc, #228]	; (8000890 <__aeabi_dadd+0x3fc>)
 80007aa:	42ab      	cmp	r3, r5
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x31c>
 80007ae:	e0b9      	b.n	8000924 <__aeabi_dadd+0x490>
 80007b0:	1885      	adds	r5, r0, r2
 80007b2:	000a      	movs	r2, r1
 80007b4:	4285      	cmp	r5, r0
 80007b6:	4189      	sbcs	r1, r1
 80007b8:	4442      	add	r2, r8
 80007ba:	4249      	negs	r1, r1
 80007bc:	1851      	adds	r1, r2, r1
 80007be:	2207      	movs	r2, #7
 80007c0:	07cf      	lsls	r7, r1, #31
 80007c2:	086d      	lsrs	r5, r5, #1
 80007c4:	432f      	orrs	r7, r5
 80007c6:	0849      	lsrs	r1, r1, #1
 80007c8:	403a      	ands	r2, r7
 80007ca:	001d      	movs	r5, r3
 80007cc:	e6c2      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007ce:	2207      	movs	r2, #7
 80007d0:	4930      	ldr	r1, [pc, #192]	; (8000894 <__aeabi_dadd+0x400>)
 80007d2:	1aed      	subs	r5, r5, r3
 80007d4:	4031      	ands	r1, r6
 80007d6:	403a      	ands	r2, r7
 80007d8:	e6bc      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007da:	003e      	movs	r6, r7
 80007dc:	3828      	subs	r0, #40	; 0x28
 80007de:	4086      	lsls	r6, r0
 80007e0:	2700      	movs	r7, #0
 80007e2:	e69f      	b.n	8000524 <__aeabi_dadd+0x90>
 80007e4:	0038      	movs	r0, r7
 80007e6:	f001 fbf3 	bl	8001fd0 <__clzsi2>
 80007ea:	3020      	adds	r0, #32
 80007ec:	e68e      	b.n	800050c <__aeabi_dadd+0x78>
 80007ee:	4643      	mov	r3, r8
 80007f0:	4313      	orrs	r3, r2
 80007f2:	001f      	movs	r7, r3
 80007f4:	1e7a      	subs	r2, r7, #1
 80007f6:	4197      	sbcs	r7, r2
 80007f8:	1bc7      	subs	r7, r0, r7
 80007fa:	42b8      	cmp	r0, r7
 80007fc:	4180      	sbcs	r0, r0
 80007fe:	4240      	negs	r0, r0
 8000800:	1a09      	subs	r1, r1, r0
 8000802:	e678      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000804:	000e      	movs	r6, r1
 8000806:	003b      	movs	r3, r7
 8000808:	4306      	orrs	r6, r0
 800080a:	4313      	orrs	r3, r2
 800080c:	2d00      	cmp	r5, #0
 800080e:	d161      	bne.n	80008d4 <__aeabi_dadd+0x440>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x382>
 8000814:	e0f4      	b.n	8000a00 <__aeabi_dadd+0x56c>
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x388>
 800081a:	e11b      	b.n	8000a54 <__aeabi_dadd+0x5c0>
 800081c:	4664      	mov	r4, ip
 800081e:	0039      	movs	r1, r7
 8000820:	0010      	movs	r0, r2
 8000822:	e739      	b.n	8000698 <__aeabi_dadd+0x204>
 8000824:	4f1a      	ldr	r7, [pc, #104]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000826:	42bb      	cmp	r3, r7
 8000828:	d07a      	beq.n	8000920 <__aeabi_dadd+0x48c>
 800082a:	0033      	movs	r3, r6
 800082c:	e6ff      	b.n	800062e <__aeabi_dadd+0x19a>
 800082e:	0030      	movs	r0, r6
 8000830:	3d1f      	subs	r5, #31
 8000832:	40e8      	lsrs	r0, r5
 8000834:	2b20      	cmp	r3, #32
 8000836:	d003      	beq.n	8000840 <__aeabi_dadd+0x3ac>
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	409e      	lsls	r6, r3
 800083e:	4337      	orrs	r7, r6
 8000840:	1e7b      	subs	r3, r7, #1
 8000842:	419f      	sbcs	r7, r3
 8000844:	2207      	movs	r2, #7
 8000846:	4307      	orrs	r7, r0
 8000848:	403a      	ands	r2, r7
 800084a:	2100      	movs	r1, #0
 800084c:	2500      	movs	r5, #0
 800084e:	e789      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000850:	1a17      	subs	r7, r2, r0
 8000852:	4643      	mov	r3, r8
 8000854:	42ba      	cmp	r2, r7
 8000856:	41b6      	sbcs	r6, r6
 8000858:	1a59      	subs	r1, r3, r1
 800085a:	4276      	negs	r6, r6
 800085c:	1b8e      	subs	r6, r1, r6
 800085e:	4664      	mov	r4, ip
 8000860:	e64e      	b.n	8000500 <__aeabi_dadd+0x6c>
 8000862:	2b1f      	cmp	r3, #31
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0x3d4>
 8000866:	e0ad      	b.n	80009c4 <__aeabi_dadd+0x530>
 8000868:	2620      	movs	r6, #32
 800086a:	4647      	mov	r7, r8
 800086c:	1af6      	subs	r6, r6, r3
 800086e:	40b7      	lsls	r7, r6
 8000870:	46b9      	mov	r9, r7
 8000872:	0017      	movs	r7, r2
 8000874:	46b2      	mov	sl, r6
 8000876:	40df      	lsrs	r7, r3
 8000878:	464e      	mov	r6, r9
 800087a:	433e      	orrs	r6, r7
 800087c:	0037      	movs	r7, r6
 800087e:	4656      	mov	r6, sl
 8000880:	40b2      	lsls	r2, r6
 8000882:	1e56      	subs	r6, r2, #1
 8000884:	41b2      	sbcs	r2, r6
 8000886:	4317      	orrs	r7, r2
 8000888:	4642      	mov	r2, r8
 800088a:	40da      	lsrs	r2, r3
 800088c:	1889      	adds	r1, r1, r2
 800088e:	e6ae      	b.n	80005ee <__aeabi_dadd+0x15a>
 8000890:	000007ff 	.word	0x000007ff
 8000894:	ff7fffff 	.word	0xff7fffff
 8000898:	800fffff 	.word	0x800fffff
 800089c:	2620      	movs	r6, #32
 800089e:	4647      	mov	r7, r8
 80008a0:	1af6      	subs	r6, r6, r3
 80008a2:	40b7      	lsls	r7, r6
 80008a4:	46b9      	mov	r9, r7
 80008a6:	0017      	movs	r7, r2
 80008a8:	46b2      	mov	sl, r6
 80008aa:	40df      	lsrs	r7, r3
 80008ac:	464e      	mov	r6, r9
 80008ae:	433e      	orrs	r6, r7
 80008b0:	0037      	movs	r7, r6
 80008b2:	4656      	mov	r6, sl
 80008b4:	40b2      	lsls	r2, r6
 80008b6:	1e56      	subs	r6, r2, #1
 80008b8:	41b2      	sbcs	r2, r6
 80008ba:	4317      	orrs	r7, r2
 80008bc:	4642      	mov	r2, r8
 80008be:	40da      	lsrs	r2, r3
 80008c0:	1a89      	subs	r1, r1, r2
 80008c2:	e799      	b.n	80007f8 <__aeabi_dadd+0x364>
 80008c4:	4c7f      	ldr	r4, [pc, #508]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008c6:	42a6      	cmp	r6, r4
 80008c8:	d05b      	beq.n	8000982 <__aeabi_dadd+0x4ee>
 80008ca:	2480      	movs	r4, #128	; 0x80
 80008cc:	0424      	lsls	r4, r4, #16
 80008ce:	425b      	negs	r3, r3
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e727      	b.n	8000724 <__aeabi_dadd+0x290>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d10c      	bne.n	80008f2 <__aeabi_dadd+0x45e>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x44a>
 80008dc:	e0cb      	b.n	8000a76 <__aeabi_dadd+0x5e2>
 80008de:	4664      	mov	r4, ip
 80008e0:	0039      	movs	r1, r7
 80008e2:	0010      	movs	r0, r2
 80008e4:	4d77      	ldr	r5, [pc, #476]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008e6:	e6d7      	b.n	8000698 <__aeabi_dadd+0x204>
 80008e8:	4f76      	ldr	r7, [pc, #472]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008ea:	42bb      	cmp	r3, r7
 80008ec:	d018      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008ee:	0033      	movs	r3, r6
 80008f0:	e675      	b.n	80005de <__aeabi_dadd+0x14a>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d014      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008f6:	074b      	lsls	r3, r1, #29
 80008f8:	08c0      	lsrs	r0, r0, #3
 80008fa:	4318      	orrs	r0, r3
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	08c9      	lsrs	r1, r1, #3
 8000900:	031b      	lsls	r3, r3, #12
 8000902:	4219      	tst	r1, r3
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x482>
 8000906:	08fc      	lsrs	r4, r7, #3
 8000908:	421c      	tst	r4, r3
 800090a:	d104      	bne.n	8000916 <__aeabi_dadd+0x482>
 800090c:	0779      	lsls	r1, r7, #29
 800090e:	08d0      	lsrs	r0, r2, #3
 8000910:	4308      	orrs	r0, r1
 8000912:	46e1      	mov	r9, ip
 8000914:	0021      	movs	r1, r4
 8000916:	464c      	mov	r4, r9
 8000918:	0f42      	lsrs	r2, r0, #29
 800091a:	00c9      	lsls	r1, r1, #3
 800091c:	4311      	orrs	r1, r2
 800091e:	00c0      	lsls	r0, r0, #3
 8000920:	4d68      	ldr	r5, [pc, #416]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000922:	e6b9      	b.n	8000698 <__aeabi_dadd+0x204>
 8000924:	001d      	movs	r5, r3
 8000926:	2200      	movs	r2, #0
 8000928:	2300      	movs	r3, #0
 800092a:	e6c0      	b.n	80006ae <__aeabi_dadd+0x21a>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d15b      	bne.n	80009e8 <__aeabi_dadd+0x554>
 8000930:	000d      	movs	r5, r1
 8000932:	4305      	orrs	r5, r0
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x4a4>
 8000936:	e6e2      	b.n	80006fe <__aeabi_dadd+0x26a>
 8000938:	1c5d      	adds	r5, r3, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x4aa>
 800093c:	e0b0      	b.n	8000aa0 <__aeabi_dadd+0x60c>
 800093e:	4d61      	ldr	r5, [pc, #388]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000940:	42ae      	cmp	r6, r5
 8000942:	d01f      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 8000944:	43db      	mvns	r3, r3
 8000946:	2b38      	cmp	r3, #56	; 0x38
 8000948:	dc71      	bgt.n	8000a2e <__aeabi_dadd+0x59a>
 800094a:	2b1f      	cmp	r3, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dadd+0x4bc>
 800094e:	e096      	b.n	8000a7e <__aeabi_dadd+0x5ea>
 8000950:	2520      	movs	r5, #32
 8000952:	000f      	movs	r7, r1
 8000954:	1aed      	subs	r5, r5, r3
 8000956:	40af      	lsls	r7, r5
 8000958:	46b9      	mov	r9, r7
 800095a:	0007      	movs	r7, r0
 800095c:	46aa      	mov	sl, r5
 800095e:	40df      	lsrs	r7, r3
 8000960:	464d      	mov	r5, r9
 8000962:	433d      	orrs	r5, r7
 8000964:	002f      	movs	r7, r5
 8000966:	4655      	mov	r5, sl
 8000968:	40a8      	lsls	r0, r5
 800096a:	40d9      	lsrs	r1, r3
 800096c:	1e45      	subs	r5, r0, #1
 800096e:	41a8      	sbcs	r0, r5
 8000970:	4488      	add	r8, r1
 8000972:	4307      	orrs	r7, r0
 8000974:	18bf      	adds	r7, r7, r2
 8000976:	4297      	cmp	r7, r2
 8000978:	4192      	sbcs	r2, r2
 800097a:	4251      	negs	r1, r2
 800097c:	4441      	add	r1, r8
 800097e:	0035      	movs	r5, r6
 8000980:	e63a      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000982:	4664      	mov	r4, ip
 8000984:	0035      	movs	r5, r6
 8000986:	4641      	mov	r1, r8
 8000988:	0010      	movs	r0, r2
 800098a:	e685      	b.n	8000698 <__aeabi_dadd+0x204>
 800098c:	000b      	movs	r3, r1
 800098e:	4303      	orrs	r3, r0
 8000990:	2d00      	cmp	r5, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x502>
 8000994:	e663      	b.n	800065e <__aeabi_dadd+0x1ca>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f5      	beq.n	8000986 <__aeabi_dadd+0x4f2>
 800099a:	4643      	mov	r3, r8
 800099c:	4313      	orrs	r3, r2
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x50e>
 80009a0:	e67a      	b.n	8000698 <__aeabi_dadd+0x204>
 80009a2:	1887      	adds	r7, r0, r2
 80009a4:	4287      	cmp	r7, r0
 80009a6:	4180      	sbcs	r0, r0
 80009a8:	2207      	movs	r2, #7
 80009aa:	4441      	add	r1, r8
 80009ac:	4240      	negs	r0, r0
 80009ae:	1809      	adds	r1, r1, r0
 80009b0:	403a      	ands	r2, r7
 80009b2:	020b      	lsls	r3, r1, #8
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_dadd+0x524>
 80009b6:	e6d5      	b.n	8000764 <__aeabi_dadd+0x2d0>
 80009b8:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x634>)
 80009ba:	3501      	adds	r5, #1
 80009bc:	4019      	ands	r1, r3
 80009be:	e5c9      	b.n	8000554 <__aeabi_dadd+0xc0>
 80009c0:	0038      	movs	r0, r7
 80009c2:	e669      	b.n	8000698 <__aeabi_dadd+0x204>
 80009c4:	001e      	movs	r6, r3
 80009c6:	4647      	mov	r7, r8
 80009c8:	3e20      	subs	r6, #32
 80009ca:	40f7      	lsrs	r7, r6
 80009cc:	46bc      	mov	ip, r7
 80009ce:	2b20      	cmp	r3, #32
 80009d0:	d004      	beq.n	80009dc <__aeabi_dadd+0x548>
 80009d2:	2640      	movs	r6, #64	; 0x40
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	4646      	mov	r6, r8
 80009d8:	409e      	lsls	r6, r3
 80009da:	4332      	orrs	r2, r6
 80009dc:	0017      	movs	r7, r2
 80009de:	4663      	mov	r3, ip
 80009e0:	1e7a      	subs	r2, r7, #1
 80009e2:	4197      	sbcs	r7, r2
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e602      	b.n	80005ee <__aeabi_dadd+0x15a>
 80009e8:	4d36      	ldr	r5, [pc, #216]	; (8000ac4 <__aeabi_dadd+0x630>)
 80009ea:	42ae      	cmp	r6, r5
 80009ec:	d0ca      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 80009ee:	2580      	movs	r5, #128	; 0x80
 80009f0:	042d      	lsls	r5, r5, #16
 80009f2:	425b      	negs	r3, r3
 80009f4:	4329      	orrs	r1, r5
 80009f6:	e7a6      	b.n	8000946 <__aeabi_dadd+0x4b2>
 80009f8:	4308      	orrs	r0, r1
 80009fa:	1e41      	subs	r1, r0, #1
 80009fc:	4188      	sbcs	r0, r1
 80009fe:	e6a6      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x572>
 8000a04:	e648      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a06:	1a87      	subs	r7, r0, r2
 8000a08:	4643      	mov	r3, r8
 8000a0a:	42b8      	cmp	r0, r7
 8000a0c:	41b6      	sbcs	r6, r6
 8000a0e:	1acb      	subs	r3, r1, r3
 8000a10:	4276      	negs	r6, r6
 8000a12:	1b9e      	subs	r6, r3, r6
 8000a14:	0233      	lsls	r3, r6, #8
 8000a16:	d54b      	bpl.n	8000ab0 <__aeabi_dadd+0x61c>
 8000a18:	1a17      	subs	r7, r2, r0
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	42ba      	cmp	r2, r7
 8000a1e:	4192      	sbcs	r2, r2
 8000a20:	1a59      	subs	r1, r3, r1
 8000a22:	4252      	negs	r2, r2
 8000a24:	1a89      	subs	r1, r1, r2
 8000a26:	2207      	movs	r2, #7
 8000a28:	4664      	mov	r4, ip
 8000a2a:	403a      	ands	r2, r7
 8000a2c:	e592      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	000f      	movs	r7, r1
 8000a32:	1e79      	subs	r1, r7, #1
 8000a34:	418f      	sbcs	r7, r1
 8000a36:	e79d      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000a38:	001c      	movs	r4, r3
 8000a3a:	000f      	movs	r7, r1
 8000a3c:	3c20      	subs	r4, #32
 8000a3e:	40e7      	lsrs	r7, r4
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	d003      	beq.n	8000a4c <__aeabi_dadd+0x5b8>
 8000a44:	2440      	movs	r4, #64	; 0x40
 8000a46:	1ae3      	subs	r3, r4, r3
 8000a48:	4099      	lsls	r1, r3
 8000a4a:	4308      	orrs	r0, r1
 8000a4c:	1e41      	subs	r1, r0, #1
 8000a4e:	4188      	sbcs	r0, r1
 8000a50:	4338      	orrs	r0, r7
 8000a52:	e67c      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a54:	2200      	movs	r2, #0
 8000a56:	2400      	movs	r4, #0
 8000a58:	e625      	b.n	80006a6 <__aeabi_dadd+0x212>
 8000a5a:	1a17      	subs	r7, r2, r0
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	42ba      	cmp	r2, r7
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	1a59      	subs	r1, r3, r1
 8000a64:	4252      	negs	r2, r2
 8000a66:	1a89      	subs	r1, r1, r2
 8000a68:	4664      	mov	r4, ip
 8000a6a:	0035      	movs	r5, r6
 8000a6c:	e543      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000a6e:	4641      	mov	r1, r8
 8000a70:	0010      	movs	r0, r2
 8000a72:	4d14      	ldr	r5, [pc, #80]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000a74:	e610      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	2400      	movs	r4, #0
 8000a7a:	0312      	lsls	r2, r2, #12
 8000a7c:	e680      	b.n	8000780 <__aeabi_dadd+0x2ec>
 8000a7e:	001d      	movs	r5, r3
 8000a80:	000f      	movs	r7, r1
 8000a82:	3d20      	subs	r5, #32
 8000a84:	40ef      	lsrs	r7, r5
 8000a86:	46bc      	mov	ip, r7
 8000a88:	2b20      	cmp	r3, #32
 8000a8a:	d003      	beq.n	8000a94 <__aeabi_dadd+0x600>
 8000a8c:	2540      	movs	r5, #64	; 0x40
 8000a8e:	1aeb      	subs	r3, r5, r3
 8000a90:	4099      	lsls	r1, r3
 8000a92:	4308      	orrs	r0, r1
 8000a94:	0007      	movs	r7, r0
 8000a96:	4663      	mov	r3, ip
 8000a98:	1e78      	subs	r0, r7, #1
 8000a9a:	4187      	sbcs	r7, r0
 8000a9c:	431f      	orrs	r7, r3
 8000a9e:	e769      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000aa0:	1887      	adds	r7, r0, r2
 8000aa2:	4297      	cmp	r7, r2
 8000aa4:	419b      	sbcs	r3, r3
 8000aa6:	4441      	add	r1, r8
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	18c9      	adds	r1, r1, r3
 8000aac:	0035      	movs	r5, r6
 8000aae:	e5a3      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	4333      	orrs	r3, r6
 8000ab4:	d0ce      	beq.n	8000a54 <__aeabi_dadd+0x5c0>
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	0031      	movs	r1, r6
 8000aba:	403a      	ands	r2, r7
 8000abc:	e652      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	e5f4      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff

08000acc <__aeabi_ddiv>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	4657      	mov	r7, sl
 8000ad0:	46de      	mov	lr, fp
 8000ad2:	464e      	mov	r6, r9
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	b5e0      	push	{r5, r6, r7, lr}
 8000ad8:	4683      	mov	fp, r0
 8000ada:	0007      	movs	r7, r0
 8000adc:	030e      	lsls	r6, r1, #12
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	4692      	mov	sl, r2
 8000ae4:	001c      	movs	r4, r3
 8000ae6:	0b36      	lsrs	r6, r6, #12
 8000ae8:	0d40      	lsrs	r0, r0, #21
 8000aea:	0fcd      	lsrs	r5, r1, #31
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_ddiv+0x26>
 8000af0:	e09d      	b.n	8000c2e <__aeabi_ddiv+0x162>
 8000af2:	4b95      	ldr	r3, [pc, #596]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d039      	beq.n	8000b6c <__aeabi_ddiv+0xa0>
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	00f6      	lsls	r6, r6, #3
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	431e      	orrs	r6, r3
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b02:	0f7b      	lsrs	r3, r7, #29
 8000b04:	4333      	orrs	r3, r6
 8000b06:	4699      	mov	r9, r3
 8000b08:	4694      	mov	ip, r2
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	4463      	add	r3, ip
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2600      	movs	r6, #0
 8000b14:	00ff      	lsls	r7, r7, #3
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	0323      	lsls	r3, r4, #12
 8000b1a:	0b1b      	lsrs	r3, r3, #12
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	0063      	lsls	r3, r4, #1
 8000b20:	0fe4      	lsrs	r4, r4, #31
 8000b22:	4652      	mov	r2, sl
 8000b24:	0d5b      	lsrs	r3, r3, #21
 8000b26:	9401      	str	r4, [sp, #4]
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x60>
 8000b2a:	e0b3      	b.n	8000c94 <__aeabi_ddiv+0x1c8>
 8000b2c:	4986      	ldr	r1, [pc, #536]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_ddiv+0x68>
 8000b32:	e09e      	b.n	8000c72 <__aeabi_ddiv+0x1a6>
 8000b34:	4642      	mov	r2, r8
 8000b36:	00d1      	lsls	r1, r2, #3
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	0412      	lsls	r2, r2, #16
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	4651      	mov	r1, sl
 8000b40:	0f49      	lsrs	r1, r1, #29
 8000b42:	4311      	orrs	r1, r2
 8000b44:	468b      	mov	fp, r1
 8000b46:	4981      	ldr	r1, [pc, #516]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b48:	4652      	mov	r2, sl
 8000b4a:	468c      	mov	ip, r1
 8000b4c:	9900      	ldr	r1, [sp, #0]
 8000b4e:	4463      	add	r3, ip
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	002b      	movs	r3, r5
 8000b5a:	4063      	eors	r3, r4
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	2e0f      	cmp	r6, #15
 8000b60:	d900      	bls.n	8000b64 <__aeabi_ddiv+0x98>
 8000b62:	e105      	b.n	8000d70 <__aeabi_ddiv+0x2a4>
 8000b64:	4b7a      	ldr	r3, [pc, #488]	; (8000d50 <__aeabi_ddiv+0x284>)
 8000b66:	00b6      	lsls	r6, r6, #2
 8000b68:	599b      	ldr	r3, [r3, r6]
 8000b6a:	469f      	mov	pc, r3
 8000b6c:	465b      	mov	r3, fp
 8000b6e:	4333      	orrs	r3, r6
 8000b70:	4699      	mov	r9, r3
 8000b72:	d000      	beq.n	8000b76 <__aeabi_ddiv+0xaa>
 8000b74:	e0b8      	b.n	8000ce8 <__aeabi_ddiv+0x21c>
 8000b76:	2302      	movs	r3, #2
 8000b78:	2608      	movs	r6, #8
 8000b7a:	2700      	movs	r7, #0
 8000b7c:	9000      	str	r0, [sp, #0]
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	e7ca      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000b82:	46cb      	mov	fp, r9
 8000b84:	003a      	movs	r2, r7
 8000b86:	9902      	ldr	r1, [sp, #8]
 8000b88:	9501      	str	r5, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	2902      	cmp	r1, #2
 8000b90:	d027      	beq.n	8000be2 <__aeabi_ddiv+0x116>
 8000b92:	2903      	cmp	r1, #3
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0xcc>
 8000b96:	e280      	b.n	800109a <__aeabi_ddiv+0x5ce>
 8000b98:	2901      	cmp	r1, #1
 8000b9a:	d044      	beq.n	8000c26 <__aeabi_ddiv+0x15a>
 8000b9c:	496d      	ldr	r1, [pc, #436]	; (8000d54 <__aeabi_ddiv+0x288>)
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	4463      	add	r3, ip
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	dd38      	ble.n	8000c1c <__aeabi_ddiv+0x150>
 8000baa:	0753      	lsls	r3, r2, #29
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000bae:	e213      	b.n	8000fd8 <__aeabi_ddiv+0x50c>
 8000bb0:	08d2      	lsrs	r2, r2, #3
 8000bb2:	465b      	mov	r3, fp
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	d509      	bpl.n	8000bcc <__aeabi_ddiv+0x100>
 8000bb8:	4659      	mov	r1, fp
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <__aeabi_ddiv+0x28c>)
 8000bbc:	4019      	ands	r1, r3
 8000bbe:	468b      	mov	fp, r1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	00c9      	lsls	r1, r1, #3
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	9b00      	ldr	r3, [sp, #0]
 8000bc8:	4463      	add	r3, ip
 8000bca:	001c      	movs	r4, r3
 8000bcc:	4b63      	ldr	r3, [pc, #396]	; (8000d5c <__aeabi_ddiv+0x290>)
 8000bce:	429c      	cmp	r4, r3
 8000bd0:	dc07      	bgt.n	8000be2 <__aeabi_ddiv+0x116>
 8000bd2:	465b      	mov	r3, fp
 8000bd4:	0564      	lsls	r4, r4, #21
 8000bd6:	075f      	lsls	r7, r3, #29
 8000bd8:	025b      	lsls	r3, r3, #9
 8000bda:	4317      	orrs	r7, r2
 8000bdc:	0b1b      	lsrs	r3, r3, #12
 8000bde:	0d62      	lsrs	r2, r4, #21
 8000be0:	e002      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000be2:	2300      	movs	r3, #0
 8000be4:	2700      	movs	r7, #0
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	031b      	lsls	r3, r3, #12
 8000bec:	0b1c      	lsrs	r4, r3, #12
 8000bee:	0d0b      	lsrs	r3, r1, #20
 8000bf0:	051b      	lsls	r3, r3, #20
 8000bf2:	4323      	orrs	r3, r4
 8000bf4:	0514      	lsls	r4, r2, #20
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <__aeabi_ddiv+0x294>)
 8000bf8:	0038      	movs	r0, r7
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	4653      	mov	r3, sl
 8000c00:	0064      	lsls	r4, r4, #1
 8000c02:	07db      	lsls	r3, r3, #31
 8000c04:	0864      	lsrs	r4, r4, #1
 8000c06:	431c      	orrs	r4, r3
 8000c08:	0021      	movs	r1, r4
 8000c0a:	b005      	add	sp, #20
 8000c0c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c0e:	4690      	mov	r8, r2
 8000c10:	4699      	mov	r9, r3
 8000c12:	46a2      	mov	sl, r4
 8000c14:	46ab      	mov	fp, r5
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	1b1b      	subs	r3, r3, r4
 8000c20:	2b38      	cmp	r3, #56	; 0x38
 8000c22:	dc00      	bgt.n	8000c26 <__aeabi_ddiv+0x15a>
 8000c24:	e1ad      	b.n	8000f82 <__aeabi_ddiv+0x4b6>
 8000c26:	2200      	movs	r2, #0
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2700      	movs	r7, #0
 8000c2c:	e7dc      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000c2e:	465b      	mov	r3, fp
 8000c30:	4333      	orrs	r3, r6
 8000c32:	4699      	mov	r9, r3
 8000c34:	d05e      	beq.n	8000cf4 <__aeabi_ddiv+0x228>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_ddiv+0x170>
 8000c3a:	e18a      	b.n	8000f52 <__aeabi_ddiv+0x486>
 8000c3c:	0030      	movs	r0, r6
 8000c3e:	f001 f9c7 	bl	8001fd0 <__clzsi2>
 8000c42:	0003      	movs	r3, r0
 8000c44:	3b0b      	subs	r3, #11
 8000c46:	2b1c      	cmp	r3, #28
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_ddiv+0x180>
 8000c4a:	e17b      	b.n	8000f44 <__aeabi_ddiv+0x478>
 8000c4c:	221d      	movs	r2, #29
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	465a      	mov	r2, fp
 8000c52:	0001      	movs	r1, r0
 8000c54:	40da      	lsrs	r2, r3
 8000c56:	3908      	subs	r1, #8
 8000c58:	408e      	lsls	r6, r1
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	465f      	mov	r7, fp
 8000c5e:	4333      	orrs	r3, r6
 8000c60:	4699      	mov	r9, r3
 8000c62:	408f      	lsls	r7, r1
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <__aeabi_ddiv+0x298>)
 8000c66:	2600      	movs	r6, #0
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	e752      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000c72:	4641      	mov	r1, r8
 8000c74:	4653      	mov	r3, sl
 8000c76:	430b      	orrs	r3, r1
 8000c78:	493b      	ldr	r1, [pc, #236]	; (8000d68 <__aeabi_ddiv+0x29c>)
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	4463      	add	r3, ip
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	465b      	mov	r3, fp
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d13b      	bne.n	8000d02 <__aeabi_ddiv+0x236>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	431e      	orrs	r6, r3
 8000c90:	2102      	movs	r1, #2
 8000c92:	e761      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000c94:	4643      	mov	r3, r8
 8000c96:	4313      	orrs	r3, r2
 8000c98:	469b      	mov	fp, r3
 8000c9a:	d037      	beq.n	8000d0c <__aeabi_ddiv+0x240>
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x1d8>
 8000ca2:	e162      	b.n	8000f6a <__aeabi_ddiv+0x49e>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	f001 f993 	bl	8001fd0 <__clzsi2>
 8000caa:	0003      	movs	r3, r0
 8000cac:	3b0b      	subs	r3, #11
 8000cae:	2b1c      	cmp	r3, #28
 8000cb0:	dd00      	ble.n	8000cb4 <__aeabi_ddiv+0x1e8>
 8000cb2:	e153      	b.n	8000f5c <__aeabi_ddiv+0x490>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	3a08      	subs	r2, #8
 8000cba:	4091      	lsls	r1, r2
 8000cbc:	4688      	mov	r8, r1
 8000cbe:	211d      	movs	r1, #29
 8000cc0:	1acb      	subs	r3, r1, r3
 8000cc2:	4651      	mov	r1, sl
 8000cc4:	40d9      	lsrs	r1, r3
 8000cc6:	000b      	movs	r3, r1
 8000cc8:	4641      	mov	r1, r8
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	469b      	mov	fp, r3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	9b00      	ldr	r3, [sp, #0]
 8000cd6:	4925      	ldr	r1, [pc, #148]	; (8000d6c <__aeabi_ddiv+0x2a0>)
 8000cd8:	469c      	mov	ip, r3
 8000cda:	4460      	add	r0, ip
 8000cdc:	0003      	movs	r3, r0
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4463      	add	r3, ip
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e737      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	46b1      	mov	r9, r6
 8000cec:	9000      	str	r0, [sp, #0]
 8000cee:	260c      	movs	r6, #12
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	e711      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	2604      	movs	r6, #4
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	e70a      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000d02:	2303      	movs	r3, #3
 8000d04:	46c3      	mov	fp, r8
 8000d06:	431e      	orrs	r6, r3
 8000d08:	2103      	movs	r1, #3
 8000d0a:	e725      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	2101      	movs	r1, #1
 8000d14:	e720      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d16:	2300      	movs	r3, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	031b      	lsls	r3, r3, #12
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d22:	e761      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	4649      	mov	r1, r9
 8000d28:	031b      	lsls	r3, r3, #12
 8000d2a:	4219      	tst	r1, r3
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x264>
 8000d2e:	e0e2      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d30:	4659      	mov	r1, fp
 8000d32:	4219      	tst	r1, r3
 8000d34:	d000      	beq.n	8000d38 <__aeabi_ddiv+0x26c>
 8000d36:	e0de      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	031b      	lsls	r3, r3, #12
 8000d3c:	0017      	movs	r7, r2
 8000d3e:	0b1b      	lsrs	r3, r3, #12
 8000d40:	46a2      	mov	sl, r4
 8000d42:	4a01      	ldr	r2, [pc, #4]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d44:	e750      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	000007ff 	.word	0x000007ff
 8000d4c:	fffffc01 	.word	0xfffffc01
 8000d50:	08006aa8 	.word	0x08006aa8
 8000d54:	000003ff 	.word	0x000003ff
 8000d58:	feffffff 	.word	0xfeffffff
 8000d5c:	000007fe 	.word	0x000007fe
 8000d60:	800fffff 	.word	0x800fffff
 8000d64:	fffffc0d 	.word	0xfffffc0d
 8000d68:	fffff801 	.word	0xfffff801
 8000d6c:	000003f3 	.word	0x000003f3
 8000d70:	45d9      	cmp	r9, fp
 8000d72:	d900      	bls.n	8000d76 <__aeabi_ddiv+0x2aa>
 8000d74:	e0cb      	b.n	8000f0e <__aeabi_ddiv+0x442>
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000d78:	e0c6      	b.n	8000f08 <__aeabi_ddiv+0x43c>
 8000d7a:	003c      	movs	r4, r7
 8000d7c:	4648      	mov	r0, r9
 8000d7e:	2700      	movs	r7, #0
 8000d80:	9b00      	ldr	r3, [sp, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	465b      	mov	r3, fp
 8000d88:	0e16      	lsrs	r6, r2, #24
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	0213      	lsls	r3, r2, #8
 8000d90:	4698      	mov	r8, r3
 8000d92:	0433      	lsls	r3, r6, #16
 8000d94:	0c1b      	lsrs	r3, r3, #16
 8000d96:	4699      	mov	r9, r3
 8000d98:	0c31      	lsrs	r1, r6, #16
 8000d9a:	9101      	str	r1, [sp, #4]
 8000d9c:	f7ff fa4c 	bl	8000238 <__aeabi_uidivmod>
 8000da0:	464a      	mov	r2, r9
 8000da2:	4342      	muls	r2, r0
 8000da4:	040b      	lsls	r3, r1, #16
 8000da6:	0c21      	lsrs	r1, r4, #16
 8000da8:	0005      	movs	r5, r0
 8000daa:	4319      	orrs	r1, r3
 8000dac:	428a      	cmp	r2, r1
 8000dae:	d907      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db0:	1989      	adds	r1, r1, r6
 8000db2:	3d01      	subs	r5, #1
 8000db4:	428e      	cmp	r6, r1
 8000db6:	d803      	bhi.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db8:	428a      	cmp	r2, r1
 8000dba:	d901      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000dbc:	1e85      	subs	r5, r0, #2
 8000dbe:	1989      	adds	r1, r1, r6
 8000dc0:	1a88      	subs	r0, r1, r2
 8000dc2:	9901      	ldr	r1, [sp, #4]
 8000dc4:	f7ff fa38 	bl	8000238 <__aeabi_uidivmod>
 8000dc8:	0409      	lsls	r1, r1, #16
 8000dca:	468c      	mov	ip, r1
 8000dcc:	464a      	mov	r2, r9
 8000dce:	0421      	lsls	r1, r4, #16
 8000dd0:	4664      	mov	r4, ip
 8000dd2:	4342      	muls	r2, r0
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	4321      	orrs	r1, r4
 8000dda:	428a      	cmp	r2, r1
 8000ddc:	d904      	bls.n	8000de8 <__aeabi_ddiv+0x31c>
 8000dde:	1989      	adds	r1, r1, r6
 8000de0:	3b01      	subs	r3, #1
 8000de2:	428e      	cmp	r6, r1
 8000de4:	d800      	bhi.n	8000de8 <__aeabi_ddiv+0x31c>
 8000de6:	e0f1      	b.n	8000fcc <__aeabi_ddiv+0x500>
 8000de8:	042d      	lsls	r5, r5, #16
 8000dea:	431d      	orrs	r5, r3
 8000dec:	46ab      	mov	fp, r5
 8000dee:	4643      	mov	r3, r8
 8000df0:	1a89      	subs	r1, r1, r2
 8000df2:	4642      	mov	r2, r8
 8000df4:	0c28      	lsrs	r0, r5, #16
 8000df6:	0412      	lsls	r2, r2, #16
 8000df8:	0c1d      	lsrs	r5, r3, #16
 8000dfa:	465b      	mov	r3, fp
 8000dfc:	0c14      	lsrs	r4, r2, #16
 8000dfe:	0022      	movs	r2, r4
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	435a      	muls	r2, r3
 8000e06:	9403      	str	r4, [sp, #12]
 8000e08:	436b      	muls	r3, r5
 8000e0a:	4344      	muls	r4, r0
 8000e0c:	9502      	str	r5, [sp, #8]
 8000e0e:	4368      	muls	r0, r5
 8000e10:	191b      	adds	r3, r3, r4
 8000e12:	0c15      	lsrs	r5, r2, #16
 8000e14:	18eb      	adds	r3, r5, r3
 8000e16:	429c      	cmp	r4, r3
 8000e18:	d903      	bls.n	8000e22 <__aeabi_ddiv+0x356>
 8000e1a:	2480      	movs	r4, #128	; 0x80
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	46a4      	mov	ip, r4
 8000e20:	4460      	add	r0, ip
 8000e22:	0c1c      	lsrs	r4, r3, #16
 8000e24:	0415      	lsls	r5, r2, #16
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	0c2d      	lsrs	r5, r5, #16
 8000e2a:	1820      	adds	r0, r4, r0
 8000e2c:	195d      	adds	r5, r3, r5
 8000e2e:	4281      	cmp	r1, r0
 8000e30:	d377      	bcc.n	8000f22 <__aeabi_ddiv+0x456>
 8000e32:	d073      	beq.n	8000f1c <__aeabi_ddiv+0x450>
 8000e34:	1a0c      	subs	r4, r1, r0
 8000e36:	4aa2      	ldr	r2, [pc, #648]	; (80010c0 <__aeabi_ddiv+0x5f4>)
 8000e38:	1b7d      	subs	r5, r7, r5
 8000e3a:	42af      	cmp	r7, r5
 8000e3c:	41bf      	sbcs	r7, r7
 8000e3e:	4694      	mov	ip, r2
 8000e40:	9b00      	ldr	r3, [sp, #0]
 8000e42:	427f      	negs	r7, r7
 8000e44:	4463      	add	r3, ip
 8000e46:	1be0      	subs	r0, r4, r7
 8000e48:	001c      	movs	r4, r3
 8000e4a:	4286      	cmp	r6, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0x384>
 8000e4e:	e0db      	b.n	8001008 <__aeabi_ddiv+0x53c>
 8000e50:	9901      	ldr	r1, [sp, #4]
 8000e52:	f7ff f9f1 	bl	8000238 <__aeabi_uidivmod>
 8000e56:	464a      	mov	r2, r9
 8000e58:	4342      	muls	r2, r0
 8000e5a:	040b      	lsls	r3, r1, #16
 8000e5c:	0c29      	lsrs	r1, r5, #16
 8000e5e:	0007      	movs	r7, r0
 8000e60:	4319      	orrs	r1, r3
 8000e62:	428a      	cmp	r2, r1
 8000e64:	d907      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e66:	1989      	adds	r1, r1, r6
 8000e68:	3f01      	subs	r7, #1
 8000e6a:	428e      	cmp	r6, r1
 8000e6c:	d803      	bhi.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d901      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e72:	1e87      	subs	r7, r0, #2
 8000e74:	1989      	adds	r1, r1, r6
 8000e76:	1a88      	subs	r0, r1, r2
 8000e78:	9901      	ldr	r1, [sp, #4]
 8000e7a:	f7ff f9dd 	bl	8000238 <__aeabi_uidivmod>
 8000e7e:	0409      	lsls	r1, r1, #16
 8000e80:	464a      	mov	r2, r9
 8000e82:	4689      	mov	r9, r1
 8000e84:	0429      	lsls	r1, r5, #16
 8000e86:	464d      	mov	r5, r9
 8000e88:	4342      	muls	r2, r0
 8000e8a:	0c09      	lsrs	r1, r1, #16
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	4329      	orrs	r1, r5
 8000e90:	428a      	cmp	r2, r1
 8000e92:	d907      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e94:	1989      	adds	r1, r1, r6
 8000e96:	3b01      	subs	r3, #1
 8000e98:	428e      	cmp	r6, r1
 8000e9a:	d803      	bhi.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d901      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000ea0:	1e83      	subs	r3, r0, #2
 8000ea2:	1989      	adds	r1, r1, r6
 8000ea4:	043f      	lsls	r7, r7, #16
 8000ea6:	1a89      	subs	r1, r1, r2
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	9f03      	ldr	r7, [sp, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	0038      	movs	r0, r7
 8000eb0:	0413      	lsls	r3, r2, #16
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	4358      	muls	r0, r3
 8000eb6:	4681      	mov	r9, r0
 8000eb8:	9802      	ldr	r0, [sp, #8]
 8000eba:	0c15      	lsrs	r5, r2, #16
 8000ebc:	436f      	muls	r7, r5
 8000ebe:	4343      	muls	r3, r0
 8000ec0:	4345      	muls	r5, r0
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	0c00      	lsrs	r0, r0, #16
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	19db      	adds	r3, r3, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	429f      	cmp	r7, r3
 8000ece:	d903      	bls.n	8000ed8 <__aeabi_ddiv+0x40c>
 8000ed0:	2080      	movs	r0, #128	; 0x80
 8000ed2:	0240      	lsls	r0, r0, #9
 8000ed4:	4684      	mov	ip, r0
 8000ed6:	4465      	add	r5, ip
 8000ed8:	4648      	mov	r0, r9
 8000eda:	0c1f      	lsrs	r7, r3, #16
 8000edc:	0400      	lsls	r0, r0, #16
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	0c00      	lsrs	r0, r0, #16
 8000ee2:	197d      	adds	r5, r7, r5
 8000ee4:	1818      	adds	r0, r3, r0
 8000ee6:	42a9      	cmp	r1, r5
 8000ee8:	d200      	bcs.n	8000eec <__aeabi_ddiv+0x420>
 8000eea:	e084      	b.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_ddiv+0x424>
 8000eee:	e07f      	b.n	8000ff0 <__aeabi_ddiv+0x524>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	e657      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	464a      	mov	r2, r9
 8000efa:	031b      	lsls	r3, r3, #12
 8000efc:	4313      	orrs	r3, r2
 8000efe:	031b      	lsls	r3, r3, #12
 8000f00:	0b1b      	lsrs	r3, r3, #12
 8000f02:	46aa      	mov	sl, r5
 8000f04:	4a6f      	ldr	r2, [pc, #444]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 8000f06:	e66f      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000f08:	42ba      	cmp	r2, r7
 8000f0a:	d900      	bls.n	8000f0e <__aeabi_ddiv+0x442>
 8000f0c:	e735      	b.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000f0e:	464b      	mov	r3, r9
 8000f10:	07dc      	lsls	r4, r3, #31
 8000f12:	0858      	lsrs	r0, r3, #1
 8000f14:	087b      	lsrs	r3, r7, #1
 8000f16:	431c      	orrs	r4, r3
 8000f18:	07ff      	lsls	r7, r7, #31
 8000f1a:	e734      	b.n	8000d86 <__aeabi_ddiv+0x2ba>
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	42af      	cmp	r7, r5
 8000f20:	d289      	bcs.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f22:	4447      	add	r7, r8
 8000f24:	4547      	cmp	r7, r8
 8000f26:	41a4      	sbcs	r4, r4
 8000f28:	465b      	mov	r3, fp
 8000f2a:	4264      	negs	r4, r4
 8000f2c:	19a4      	adds	r4, r4, r6
 8000f2e:	1864      	adds	r4, r4, r1
 8000f30:	3b01      	subs	r3, #1
 8000f32:	42a6      	cmp	r6, r4
 8000f34:	d21e      	bcs.n	8000f74 <__aeabi_ddiv+0x4a8>
 8000f36:	42a0      	cmp	r0, r4
 8000f38:	d86d      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f3c:	e0b6      	b.n	80010ac <__aeabi_ddiv+0x5e0>
 8000f3e:	1a24      	subs	r4, r4, r0
 8000f40:	469b      	mov	fp, r3
 8000f42:	e778      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f44:	0003      	movs	r3, r0
 8000f46:	465a      	mov	r2, fp
 8000f48:	3b28      	subs	r3, #40	; 0x28
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	2700      	movs	r7, #0
 8000f4e:	4691      	mov	r9, r2
 8000f50:	e688      	b.n	8000c64 <__aeabi_ddiv+0x198>
 8000f52:	4658      	mov	r0, fp
 8000f54:	f001 f83c 	bl	8001fd0 <__clzsi2>
 8000f58:	3020      	adds	r0, #32
 8000f5a:	e672      	b.n	8000c42 <__aeabi_ddiv+0x176>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	4652      	mov	r2, sl
 8000f60:	3b28      	subs	r3, #40	; 0x28
 8000f62:	409a      	lsls	r2, r3
 8000f64:	4693      	mov	fp, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	e6b4      	b.n	8000cd4 <__aeabi_ddiv+0x208>
 8000f6a:	4650      	mov	r0, sl
 8000f6c:	f001 f830 	bl	8001fd0 <__clzsi2>
 8000f70:	3020      	adds	r0, #32
 8000f72:	e69a      	b.n	8000caa <__aeabi_ddiv+0x1de>
 8000f74:	42a6      	cmp	r6, r4
 8000f76:	d1e2      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f78:	45b8      	cmp	r8, r7
 8000f7a:	d9dc      	bls.n	8000f36 <__aeabi_ddiv+0x46a>
 8000f7c:	1a34      	subs	r4, r6, r0
 8000f7e:	469b      	mov	fp, r3
 8000f80:	e759      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dc65      	bgt.n	8001052 <__aeabi_ddiv+0x586>
 8000f86:	4c50      	ldr	r4, [pc, #320]	; (80010c8 <__aeabi_ddiv+0x5fc>)
 8000f88:	9900      	ldr	r1, [sp, #0]
 8000f8a:	46a4      	mov	ip, r4
 8000f8c:	465c      	mov	r4, fp
 8000f8e:	4461      	add	r1, ip
 8000f90:	0008      	movs	r0, r1
 8000f92:	408c      	lsls	r4, r1
 8000f94:	0011      	movs	r1, r2
 8000f96:	4082      	lsls	r2, r0
 8000f98:	40d9      	lsrs	r1, r3
 8000f9a:	1e50      	subs	r0, r2, #1
 8000f9c:	4182      	sbcs	r2, r0
 8000f9e:	430c      	orrs	r4, r1
 8000fa0:	4314      	orrs	r4, r2
 8000fa2:	465a      	mov	r2, fp
 8000fa4:	40da      	lsrs	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	0762      	lsls	r2, r4, #29
 8000faa:	d009      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fac:	220f      	movs	r2, #15
 8000fae:	4022      	ands	r2, r4
 8000fb0:	2a04      	cmp	r2, #4
 8000fb2:	d005      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fb4:	0022      	movs	r2, r4
 8000fb6:	1d14      	adds	r4, r2, #4
 8000fb8:	4294      	cmp	r4, r2
 8000fba:	4189      	sbcs	r1, r1
 8000fbc:	4249      	negs	r1, r1
 8000fbe:	185b      	adds	r3, r3, r1
 8000fc0:	021a      	lsls	r2, r3, #8
 8000fc2:	d562      	bpl.n	800108a <__aeabi_ddiv+0x5be>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2700      	movs	r7, #0
 8000fca:	e60d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000fcc:	428a      	cmp	r2, r1
 8000fce:	d800      	bhi.n	8000fd2 <__aeabi_ddiv+0x506>
 8000fd0:	e70a      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd2:	1e83      	subs	r3, r0, #2
 8000fd4:	1989      	adds	r1, r1, r6
 8000fd6:	e707      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd8:	230f      	movs	r3, #15
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0x516>
 8000fe0:	e5e6      	b.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000fe2:	1d17      	adds	r7, r2, #4
 8000fe4:	4297      	cmp	r7, r2
 8000fe6:	4192      	sbcs	r2, r2
 8000fe8:	4253      	negs	r3, r2
 8000fea:	449b      	add	fp, r3
 8000fec:	08fa      	lsrs	r2, r7, #3
 8000fee:	e5e0      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000ff4:	e5d7      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ff6:	1871      	adds	r1, r6, r1
 8000ff8:	1e53      	subs	r3, r2, #1
 8000ffa:	42b1      	cmp	r1, r6
 8000ffc:	d327      	bcc.n	800104e <__aeabi_ddiv+0x582>
 8000ffe:	42a9      	cmp	r1, r5
 8001000:	d315      	bcc.n	800102e <__aeabi_ddiv+0x562>
 8001002:	d058      	beq.n	80010b6 <__aeabi_ddiv+0x5ea>
 8001004:	001a      	movs	r2, r3
 8001006:	e773      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001008:	2b00      	cmp	r3, #0
 800100a:	dc00      	bgt.n	800100e <__aeabi_ddiv+0x542>
 800100c:	e604      	b.n	8000c18 <__aeabi_ddiv+0x14c>
 800100e:	2301      	movs	r3, #1
 8001010:	2200      	movs	r2, #0
 8001012:	449b      	add	fp, r3
 8001014:	e5cd      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8001016:	2302      	movs	r3, #2
 8001018:	4447      	add	r7, r8
 800101a:	4547      	cmp	r7, r8
 800101c:	4189      	sbcs	r1, r1
 800101e:	425b      	negs	r3, r3
 8001020:	469c      	mov	ip, r3
 8001022:	4249      	negs	r1, r1
 8001024:	1989      	adds	r1, r1, r6
 8001026:	190c      	adds	r4, r1, r4
 8001028:	44e3      	add	fp, ip
 800102a:	1a24      	subs	r4, r4, r0
 800102c:	e703      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 800102e:	4643      	mov	r3, r8
 8001030:	005f      	lsls	r7, r3, #1
 8001032:	4547      	cmp	r7, r8
 8001034:	419b      	sbcs	r3, r3
 8001036:	46b8      	mov	r8, r7
 8001038:	425b      	negs	r3, r3
 800103a:	199e      	adds	r6, r3, r6
 800103c:	3a02      	subs	r2, #2
 800103e:	1989      	adds	r1, r1, r6
 8001040:	42a9      	cmp	r1, r5
 8001042:	d000      	beq.n	8001046 <__aeabi_ddiv+0x57a>
 8001044:	e754      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001046:	4540      	cmp	r0, r8
 8001048:	d000      	beq.n	800104c <__aeabi_ddiv+0x580>
 800104a:	e751      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 800104c:	e5ab      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 800104e:	001a      	movs	r2, r3
 8001050:	e7f6      	b.n	8001040 <__aeabi_ddiv+0x574>
 8001052:	211f      	movs	r1, #31
 8001054:	465f      	mov	r7, fp
 8001056:	4249      	negs	r1, r1
 8001058:	1b0c      	subs	r4, r1, r4
 800105a:	40e7      	lsrs	r7, r4
 800105c:	2b20      	cmp	r3, #32
 800105e:	d007      	beq.n	8001070 <__aeabi_ddiv+0x5a4>
 8001060:	491a      	ldr	r1, [pc, #104]	; (80010cc <__aeabi_ddiv+0x600>)
 8001062:	9b00      	ldr	r3, [sp, #0]
 8001064:	468c      	mov	ip, r1
 8001066:	4463      	add	r3, ip
 8001068:	0018      	movs	r0, r3
 800106a:	465b      	mov	r3, fp
 800106c:	4083      	lsls	r3, r0
 800106e:	431a      	orrs	r2, r3
 8001070:	1e50      	subs	r0, r2, #1
 8001072:	4182      	sbcs	r2, r0
 8001074:	433a      	orrs	r2, r7
 8001076:	2707      	movs	r7, #7
 8001078:	2300      	movs	r3, #0
 800107a:	4017      	ands	r7, r2
 800107c:	d009      	beq.n	8001092 <__aeabi_ddiv+0x5c6>
 800107e:	210f      	movs	r1, #15
 8001080:	2300      	movs	r3, #0
 8001082:	4011      	ands	r1, r2
 8001084:	0014      	movs	r4, r2
 8001086:	2904      	cmp	r1, #4
 8001088:	d195      	bne.n	8000fb6 <__aeabi_ddiv+0x4ea>
 800108a:	0022      	movs	r2, r4
 800108c:	075f      	lsls	r7, r3, #29
 800108e:	025b      	lsls	r3, r3, #9
 8001090:	0b1b      	lsrs	r3, r3, #12
 8001092:	08d2      	lsrs	r2, r2, #3
 8001094:	4317      	orrs	r7, r2
 8001096:	2200      	movs	r2, #0
 8001098:	e5a6      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	4659      	mov	r1, fp
 800109e:	031b      	lsls	r3, r3, #12
 80010a0:	430b      	orrs	r3, r1
 80010a2:	031b      	lsls	r3, r3, #12
 80010a4:	0017      	movs	r7, r2
 80010a6:	0b1b      	lsrs	r3, r3, #12
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 80010aa:	e59d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 80010ac:	42bd      	cmp	r5, r7
 80010ae:	d8b2      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 80010b0:	469b      	mov	fp, r3
 80010b2:	2400      	movs	r4, #0
 80010b4:	e6bf      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 80010b6:	4580      	cmp	r8, r0
 80010b8:	d3b9      	bcc.n	800102e <__aeabi_ddiv+0x562>
 80010ba:	001a      	movs	r2, r3
 80010bc:	e7c3      	b.n	8001046 <__aeabi_ddiv+0x57a>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	000003ff 	.word	0x000003ff
 80010c4:	000007ff 	.word	0x000007ff
 80010c8:	0000041e 	.word	0x0000041e
 80010cc:	0000043e 	.word	0x0000043e

080010d0 <__eqdf2>:
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	464f      	mov	r7, r9
 80010d4:	4646      	mov	r6, r8
 80010d6:	46d6      	mov	lr, sl
 80010d8:	4684      	mov	ip, r0
 80010da:	b5c0      	push	{r6, r7, lr}
 80010dc:	4680      	mov	r8, r0
 80010de:	4e19      	ldr	r6, [pc, #100]	; (8001144 <__eqdf2+0x74>)
 80010e0:	0318      	lsls	r0, r3, #12
 80010e2:	030f      	lsls	r7, r1, #12
 80010e4:	004d      	lsls	r5, r1, #1
 80010e6:	0b00      	lsrs	r0, r0, #12
 80010e8:	005c      	lsls	r4, r3, #1
 80010ea:	4682      	mov	sl, r0
 80010ec:	0b3f      	lsrs	r7, r7, #12
 80010ee:	0d6d      	lsrs	r5, r5, #21
 80010f0:	0fc9      	lsrs	r1, r1, #31
 80010f2:	4691      	mov	r9, r2
 80010f4:	0d64      	lsrs	r4, r4, #21
 80010f6:	0fdb      	lsrs	r3, r3, #31
 80010f8:	2001      	movs	r0, #1
 80010fa:	42b5      	cmp	r5, r6
 80010fc:	d00a      	beq.n	8001114 <__eqdf2+0x44>
 80010fe:	42b4      	cmp	r4, r6
 8001100:	d003      	beq.n	800110a <__eqdf2+0x3a>
 8001102:	42a5      	cmp	r5, r4
 8001104:	d101      	bne.n	800110a <__eqdf2+0x3a>
 8001106:	4557      	cmp	r7, sl
 8001108:	d00c      	beq.n	8001124 <__eqdf2+0x54>
 800110a:	bc1c      	pop	{r2, r3, r4}
 800110c:	4690      	mov	r8, r2
 800110e:	4699      	mov	r9, r3
 8001110:	46a2      	mov	sl, r4
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001114:	4666      	mov	r6, ip
 8001116:	433e      	orrs	r6, r7
 8001118:	d1f7      	bne.n	800110a <__eqdf2+0x3a>
 800111a:	42ac      	cmp	r4, r5
 800111c:	d1f5      	bne.n	800110a <__eqdf2+0x3a>
 800111e:	4654      	mov	r4, sl
 8001120:	4314      	orrs	r4, r2
 8001122:	d1f2      	bne.n	800110a <__eqdf2+0x3a>
 8001124:	2001      	movs	r0, #1
 8001126:	45c8      	cmp	r8, r9
 8001128:	d1ef      	bne.n	800110a <__eqdf2+0x3a>
 800112a:	4299      	cmp	r1, r3
 800112c:	d007      	beq.n	800113e <__eqdf2+0x6e>
 800112e:	2d00      	cmp	r5, #0
 8001130:	d1eb      	bne.n	800110a <__eqdf2+0x3a>
 8001132:	4663      	mov	r3, ip
 8001134:	431f      	orrs	r7, r3
 8001136:	0038      	movs	r0, r7
 8001138:	1e47      	subs	r7, r0, #1
 800113a:	41b8      	sbcs	r0, r7
 800113c:	e7e5      	b.n	800110a <__eqdf2+0x3a>
 800113e:	2000      	movs	r0, #0
 8001140:	e7e3      	b.n	800110a <__eqdf2+0x3a>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	000007ff 	.word	0x000007ff

08001148 <__gedf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464f      	mov	r7, r9
 800114c:	4646      	mov	r6, r8
 800114e:	46d6      	mov	lr, sl
 8001150:	004d      	lsls	r5, r1, #1
 8001152:	b5c0      	push	{r6, r7, lr}
 8001154:	030e      	lsls	r6, r1, #12
 8001156:	0fc9      	lsrs	r1, r1, #31
 8001158:	468a      	mov	sl, r1
 800115a:	492c      	ldr	r1, [pc, #176]	; (800120c <__gedf2+0xc4>)
 800115c:	031f      	lsls	r7, r3, #12
 800115e:	005c      	lsls	r4, r3, #1
 8001160:	4680      	mov	r8, r0
 8001162:	0b36      	lsrs	r6, r6, #12
 8001164:	0d6d      	lsrs	r5, r5, #21
 8001166:	4691      	mov	r9, r2
 8001168:	0b3f      	lsrs	r7, r7, #12
 800116a:	0d64      	lsrs	r4, r4, #21
 800116c:	0fdb      	lsrs	r3, r3, #31
 800116e:	428d      	cmp	r5, r1
 8001170:	d01e      	beq.n	80011b0 <__gedf2+0x68>
 8001172:	428c      	cmp	r4, r1
 8001174:	d016      	beq.n	80011a4 <__gedf2+0x5c>
 8001176:	2d00      	cmp	r5, #0
 8001178:	d11e      	bne.n	80011b8 <__gedf2+0x70>
 800117a:	4330      	orrs	r0, r6
 800117c:	4684      	mov	ip, r0
 800117e:	2c00      	cmp	r4, #0
 8001180:	d101      	bne.n	8001186 <__gedf2+0x3e>
 8001182:	433a      	orrs	r2, r7
 8001184:	d023      	beq.n	80011ce <__gedf2+0x86>
 8001186:	4662      	mov	r2, ip
 8001188:	2a00      	cmp	r2, #0
 800118a:	d01a      	beq.n	80011c2 <__gedf2+0x7a>
 800118c:	459a      	cmp	sl, r3
 800118e:	d029      	beq.n	80011e4 <__gedf2+0x9c>
 8001190:	4651      	mov	r1, sl
 8001192:	2002      	movs	r0, #2
 8001194:	3901      	subs	r1, #1
 8001196:	4008      	ands	r0, r1
 8001198:	3801      	subs	r0, #1
 800119a:	bc1c      	pop	{r2, r3, r4}
 800119c:	4690      	mov	r8, r2
 800119e:	4699      	mov	r9, r3
 80011a0:	46a2      	mov	sl, r4
 80011a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a4:	0039      	movs	r1, r7
 80011a6:	4311      	orrs	r1, r2
 80011a8:	d0e5      	beq.n	8001176 <__gedf2+0x2e>
 80011aa:	2002      	movs	r0, #2
 80011ac:	4240      	negs	r0, r0
 80011ae:	e7f4      	b.n	800119a <__gedf2+0x52>
 80011b0:	4330      	orrs	r0, r6
 80011b2:	d1fa      	bne.n	80011aa <__gedf2+0x62>
 80011b4:	42ac      	cmp	r4, r5
 80011b6:	d00f      	beq.n	80011d8 <__gedf2+0x90>
 80011b8:	2c00      	cmp	r4, #0
 80011ba:	d10f      	bne.n	80011dc <__gedf2+0x94>
 80011bc:	433a      	orrs	r2, r7
 80011be:	d0e7      	beq.n	8001190 <__gedf2+0x48>
 80011c0:	e00c      	b.n	80011dc <__gedf2+0x94>
 80011c2:	2201      	movs	r2, #1
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4393      	bics	r3, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	3001      	adds	r0, #1
 80011cc:	e7e5      	b.n	800119a <__gedf2+0x52>
 80011ce:	4663      	mov	r3, ip
 80011d0:	2000      	movs	r0, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0e1      	beq.n	800119a <__gedf2+0x52>
 80011d6:	e7db      	b.n	8001190 <__gedf2+0x48>
 80011d8:	433a      	orrs	r2, r7
 80011da:	d1e6      	bne.n	80011aa <__gedf2+0x62>
 80011dc:	459a      	cmp	sl, r3
 80011de:	d1d7      	bne.n	8001190 <__gedf2+0x48>
 80011e0:	42a5      	cmp	r5, r4
 80011e2:	dcd5      	bgt.n	8001190 <__gedf2+0x48>
 80011e4:	42a5      	cmp	r5, r4
 80011e6:	db05      	blt.n	80011f4 <__gedf2+0xac>
 80011e8:	42be      	cmp	r6, r7
 80011ea:	d8d1      	bhi.n	8001190 <__gedf2+0x48>
 80011ec:	d008      	beq.n	8001200 <__gedf2+0xb8>
 80011ee:	2000      	movs	r0, #0
 80011f0:	42be      	cmp	r6, r7
 80011f2:	d2d2      	bcs.n	800119a <__gedf2+0x52>
 80011f4:	4650      	mov	r0, sl
 80011f6:	2301      	movs	r3, #1
 80011f8:	3801      	subs	r0, #1
 80011fa:	4398      	bics	r0, r3
 80011fc:	3001      	adds	r0, #1
 80011fe:	e7cc      	b.n	800119a <__gedf2+0x52>
 8001200:	45c8      	cmp	r8, r9
 8001202:	d8c5      	bhi.n	8001190 <__gedf2+0x48>
 8001204:	2000      	movs	r0, #0
 8001206:	45c8      	cmp	r8, r9
 8001208:	d3f4      	bcc.n	80011f4 <__gedf2+0xac>
 800120a:	e7c6      	b.n	800119a <__gedf2+0x52>
 800120c:	000007ff 	.word	0x000007ff

08001210 <__ledf2>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	464f      	mov	r7, r9
 8001214:	4646      	mov	r6, r8
 8001216:	46d6      	mov	lr, sl
 8001218:	004d      	lsls	r5, r1, #1
 800121a:	b5c0      	push	{r6, r7, lr}
 800121c:	030e      	lsls	r6, r1, #12
 800121e:	0fc9      	lsrs	r1, r1, #31
 8001220:	468a      	mov	sl, r1
 8001222:	492e      	ldr	r1, [pc, #184]	; (80012dc <__ledf2+0xcc>)
 8001224:	031f      	lsls	r7, r3, #12
 8001226:	005c      	lsls	r4, r3, #1
 8001228:	4680      	mov	r8, r0
 800122a:	0b36      	lsrs	r6, r6, #12
 800122c:	0d6d      	lsrs	r5, r5, #21
 800122e:	4691      	mov	r9, r2
 8001230:	0b3f      	lsrs	r7, r7, #12
 8001232:	0d64      	lsrs	r4, r4, #21
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	428d      	cmp	r5, r1
 8001238:	d018      	beq.n	800126c <__ledf2+0x5c>
 800123a:	428c      	cmp	r4, r1
 800123c:	d011      	beq.n	8001262 <__ledf2+0x52>
 800123e:	2d00      	cmp	r5, #0
 8001240:	d118      	bne.n	8001274 <__ledf2+0x64>
 8001242:	4330      	orrs	r0, r6
 8001244:	4684      	mov	ip, r0
 8001246:	2c00      	cmp	r4, #0
 8001248:	d11e      	bne.n	8001288 <__ledf2+0x78>
 800124a:	433a      	orrs	r2, r7
 800124c:	d11c      	bne.n	8001288 <__ledf2+0x78>
 800124e:	4663      	mov	r3, ip
 8001250:	2000      	movs	r0, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d030      	beq.n	80012b8 <__ledf2+0xa8>
 8001256:	4651      	mov	r1, sl
 8001258:	2002      	movs	r0, #2
 800125a:	3901      	subs	r1, #1
 800125c:	4008      	ands	r0, r1
 800125e:	3801      	subs	r0, #1
 8001260:	e02a      	b.n	80012b8 <__ledf2+0xa8>
 8001262:	0039      	movs	r1, r7
 8001264:	4311      	orrs	r1, r2
 8001266:	d0ea      	beq.n	800123e <__ledf2+0x2e>
 8001268:	2002      	movs	r0, #2
 800126a:	e025      	b.n	80012b8 <__ledf2+0xa8>
 800126c:	4330      	orrs	r0, r6
 800126e:	d1fb      	bne.n	8001268 <__ledf2+0x58>
 8001270:	42ac      	cmp	r4, r5
 8001272:	d026      	beq.n	80012c2 <__ledf2+0xb2>
 8001274:	2c00      	cmp	r4, #0
 8001276:	d126      	bne.n	80012c6 <__ledf2+0xb6>
 8001278:	433a      	orrs	r2, r7
 800127a:	d124      	bne.n	80012c6 <__ledf2+0xb6>
 800127c:	4651      	mov	r1, sl
 800127e:	2002      	movs	r0, #2
 8001280:	3901      	subs	r1, #1
 8001282:	4008      	ands	r0, r1
 8001284:	3801      	subs	r0, #1
 8001286:	e017      	b.n	80012b8 <__ledf2+0xa8>
 8001288:	4662      	mov	r2, ip
 800128a:	2a00      	cmp	r2, #0
 800128c:	d00f      	beq.n	80012ae <__ledf2+0x9e>
 800128e:	459a      	cmp	sl, r3
 8001290:	d1e1      	bne.n	8001256 <__ledf2+0x46>
 8001292:	42a5      	cmp	r5, r4
 8001294:	db05      	blt.n	80012a2 <__ledf2+0x92>
 8001296:	42be      	cmp	r6, r7
 8001298:	d8dd      	bhi.n	8001256 <__ledf2+0x46>
 800129a:	d019      	beq.n	80012d0 <__ledf2+0xc0>
 800129c:	2000      	movs	r0, #0
 800129e:	42be      	cmp	r6, r7
 80012a0:	d20a      	bcs.n	80012b8 <__ledf2+0xa8>
 80012a2:	4650      	mov	r0, sl
 80012a4:	2301      	movs	r3, #1
 80012a6:	3801      	subs	r0, #1
 80012a8:	4398      	bics	r0, r3
 80012aa:	3001      	adds	r0, #1
 80012ac:	e004      	b.n	80012b8 <__ledf2+0xa8>
 80012ae:	2201      	movs	r2, #1
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4393      	bics	r3, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	3001      	adds	r0, #1
 80012b8:	bc1c      	pop	{r2, r3, r4}
 80012ba:	4690      	mov	r8, r2
 80012bc:	4699      	mov	r9, r3
 80012be:	46a2      	mov	sl, r4
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c2:	433a      	orrs	r2, r7
 80012c4:	d1d0      	bne.n	8001268 <__ledf2+0x58>
 80012c6:	459a      	cmp	sl, r3
 80012c8:	d1c5      	bne.n	8001256 <__ledf2+0x46>
 80012ca:	42a5      	cmp	r5, r4
 80012cc:	dcc3      	bgt.n	8001256 <__ledf2+0x46>
 80012ce:	e7e0      	b.n	8001292 <__ledf2+0x82>
 80012d0:	45c8      	cmp	r8, r9
 80012d2:	d8c0      	bhi.n	8001256 <__ledf2+0x46>
 80012d4:	2000      	movs	r0, #0
 80012d6:	45c8      	cmp	r8, r9
 80012d8:	d3e3      	bcc.n	80012a2 <__ledf2+0x92>
 80012da:	e7ed      	b.n	80012b8 <__ledf2+0xa8>
 80012dc:	000007ff 	.word	0x000007ff

080012e0 <__aeabi_dmul>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	4657      	mov	r7, sl
 80012e4:	46de      	mov	lr, fp
 80012e6:	464e      	mov	r6, r9
 80012e8:	4645      	mov	r5, r8
 80012ea:	b5e0      	push	{r5, r6, r7, lr}
 80012ec:	4683      	mov	fp, r0
 80012ee:	0006      	movs	r6, r0
 80012f0:	030f      	lsls	r7, r1, #12
 80012f2:	0048      	lsls	r0, r1, #1
 80012f4:	b087      	sub	sp, #28
 80012f6:	4692      	mov	sl, r2
 80012f8:	001d      	movs	r5, r3
 80012fa:	0b3f      	lsrs	r7, r7, #12
 80012fc:	0d40      	lsrs	r0, r0, #21
 80012fe:	0fcc      	lsrs	r4, r1, #31
 8001300:	2800      	cmp	r0, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dmul+0x26>
 8001304:	e06f      	b.n	80013e6 <__aeabi_dmul+0x106>
 8001306:	4bde      	ldr	r3, [pc, #888]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001308:	4298      	cmp	r0, r3
 800130a:	d038      	beq.n	800137e <__aeabi_dmul+0x9e>
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	00ff      	lsls	r7, r7, #3
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	431f      	orrs	r7, r3
 8001314:	0f73      	lsrs	r3, r6, #29
 8001316:	433b      	orrs	r3, r7
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	4bda      	ldr	r3, [pc, #872]	; (8001684 <__aeabi_dmul+0x3a4>)
 800131c:	2700      	movs	r7, #0
 800131e:	4699      	mov	r9, r3
 8001320:	2300      	movs	r3, #0
 8001322:	469b      	mov	fp, r3
 8001324:	00f6      	lsls	r6, r6, #3
 8001326:	4481      	add	r9, r0
 8001328:	032b      	lsls	r3, r5, #12
 800132a:	0069      	lsls	r1, r5, #1
 800132c:	0b1b      	lsrs	r3, r3, #12
 800132e:	4652      	mov	r2, sl
 8001330:	4698      	mov	r8, r3
 8001332:	0d49      	lsrs	r1, r1, #21
 8001334:	0fed      	lsrs	r5, r5, #31
 8001336:	2900      	cmp	r1, #0
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x5c>
 800133a:	e085      	b.n	8001448 <__aeabi_dmul+0x168>
 800133c:	4bd0      	ldr	r3, [pc, #832]	; (8001680 <__aeabi_dmul+0x3a0>)
 800133e:	4299      	cmp	r1, r3
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x64>
 8001342:	e073      	b.n	800142c <__aeabi_dmul+0x14c>
 8001344:	4643      	mov	r3, r8
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	4313      	orrs	r3, r2
 800134e:	4652      	mov	r2, sl
 8001350:	48cc      	ldr	r0, [pc, #816]	; (8001684 <__aeabi_dmul+0x3a4>)
 8001352:	0f52      	lsrs	r2, r2, #29
 8001354:	4684      	mov	ip, r0
 8001356:	4313      	orrs	r3, r2
 8001358:	4652      	mov	r2, sl
 800135a:	2000      	movs	r0, #0
 800135c:	4461      	add	r1, ip
 800135e:	00d2      	lsls	r2, r2, #3
 8001360:	4489      	add	r9, r1
 8001362:	0021      	movs	r1, r4
 8001364:	4069      	eors	r1, r5
 8001366:	9100      	str	r1, [sp, #0]
 8001368:	468c      	mov	ip, r1
 800136a:	2101      	movs	r1, #1
 800136c:	4449      	add	r1, r9
 800136e:	468a      	mov	sl, r1
 8001370:	2f0f      	cmp	r7, #15
 8001372:	d900      	bls.n	8001376 <__aeabi_dmul+0x96>
 8001374:	e090      	b.n	8001498 <__aeabi_dmul+0x1b8>
 8001376:	49c4      	ldr	r1, [pc, #784]	; (8001688 <__aeabi_dmul+0x3a8>)
 8001378:	00bf      	lsls	r7, r7, #2
 800137a:	59cf      	ldr	r7, [r1, r7]
 800137c:	46bf      	mov	pc, r7
 800137e:	465b      	mov	r3, fp
 8001380:	433b      	orrs	r3, r7
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	d000      	beq.n	8001388 <__aeabi_dmul+0xa8>
 8001386:	e16a      	b.n	800165e <__aeabi_dmul+0x37e>
 8001388:	2302      	movs	r3, #2
 800138a:	2708      	movs	r7, #8
 800138c:	2600      	movs	r6, #0
 800138e:	4681      	mov	r9, r0
 8001390:	469b      	mov	fp, r3
 8001392:	e7c9      	b.n	8001328 <__aeabi_dmul+0x48>
 8001394:	0032      	movs	r2, r6
 8001396:	4658      	mov	r0, fp
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	4661      	mov	r1, ip
 800139c:	9100      	str	r1, [sp, #0]
 800139e:	2802      	cmp	r0, #2
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dmul+0xc4>
 80013a2:	e075      	b.n	8001490 <__aeabi_dmul+0x1b0>
 80013a4:	2803      	cmp	r0, #3
 80013a6:	d100      	bne.n	80013aa <__aeabi_dmul+0xca>
 80013a8:	e1fe      	b.n	80017a8 <__aeabi_dmul+0x4c8>
 80013aa:	2801      	cmp	r0, #1
 80013ac:	d000      	beq.n	80013b0 <__aeabi_dmul+0xd0>
 80013ae:	e12c      	b.n	800160a <__aeabi_dmul+0x32a>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2700      	movs	r7, #0
 80013b4:	2600      	movs	r6, #0
 80013b6:	2500      	movs	r5, #0
 80013b8:	033f      	lsls	r7, r7, #12
 80013ba:	0d2a      	lsrs	r2, r5, #20
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	48b3      	ldr	r0, [pc, #716]	; (800168c <__aeabi_dmul+0x3ac>)
 80013c0:	0512      	lsls	r2, r2, #20
 80013c2:	433a      	orrs	r2, r7
 80013c4:	4002      	ands	r2, r0
 80013c6:	051b      	lsls	r3, r3, #20
 80013c8:	4313      	orrs	r3, r2
 80013ca:	9a00      	ldr	r2, [sp, #0]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	07d1      	lsls	r1, r2, #31
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	430b      	orrs	r3, r1
 80013d4:	0030      	movs	r0, r6
 80013d6:	0019      	movs	r1, r3
 80013d8:	b007      	add	sp, #28
 80013da:	bc3c      	pop	{r2, r3, r4, r5}
 80013dc:	4690      	mov	r8, r2
 80013de:	4699      	mov	r9, r3
 80013e0:	46a2      	mov	sl, r4
 80013e2:	46ab      	mov	fp, r5
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e6:	465b      	mov	r3, fp
 80013e8:	433b      	orrs	r3, r7
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dmul+0x110>
 80013ee:	e12f      	b.n	8001650 <__aeabi_dmul+0x370>
 80013f0:	2f00      	cmp	r7, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dmul+0x116>
 80013f4:	e1a5      	b.n	8001742 <__aeabi_dmul+0x462>
 80013f6:	0038      	movs	r0, r7
 80013f8:	f000 fdea 	bl	8001fd0 <__clzsi2>
 80013fc:	0003      	movs	r3, r0
 80013fe:	3b0b      	subs	r3, #11
 8001400:	2b1c      	cmp	r3, #28
 8001402:	dd00      	ble.n	8001406 <__aeabi_dmul+0x126>
 8001404:	e196      	b.n	8001734 <__aeabi_dmul+0x454>
 8001406:	221d      	movs	r2, #29
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	465a      	mov	r2, fp
 800140c:	0001      	movs	r1, r0
 800140e:	40da      	lsrs	r2, r3
 8001410:	465e      	mov	r6, fp
 8001412:	3908      	subs	r1, #8
 8001414:	408f      	lsls	r7, r1
 8001416:	0013      	movs	r3, r2
 8001418:	408e      	lsls	r6, r1
 800141a:	433b      	orrs	r3, r7
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	4b9c      	ldr	r3, [pc, #624]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001420:	2700      	movs	r7, #0
 8001422:	1a1b      	subs	r3, r3, r0
 8001424:	4699      	mov	r9, r3
 8001426:	2300      	movs	r3, #0
 8001428:	469b      	mov	fp, r3
 800142a:	e77d      	b.n	8001328 <__aeabi_dmul+0x48>
 800142c:	4641      	mov	r1, r8
 800142e:	4653      	mov	r3, sl
 8001430:	430b      	orrs	r3, r1
 8001432:	4993      	ldr	r1, [pc, #588]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001434:	468c      	mov	ip, r1
 8001436:	44e1      	add	r9, ip
 8001438:	2b00      	cmp	r3, #0
 800143a:	d000      	beq.n	800143e <__aeabi_dmul+0x15e>
 800143c:	e11a      	b.n	8001674 <__aeabi_dmul+0x394>
 800143e:	2202      	movs	r2, #2
 8001440:	2002      	movs	r0, #2
 8001442:	4317      	orrs	r7, r2
 8001444:	2200      	movs	r2, #0
 8001446:	e78c      	b.n	8001362 <__aeabi_dmul+0x82>
 8001448:	4313      	orrs	r3, r2
 800144a:	d100      	bne.n	800144e <__aeabi_dmul+0x16e>
 800144c:	e10d      	b.n	800166a <__aeabi_dmul+0x38a>
 800144e:	4643      	mov	r3, r8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x176>
 8001454:	e181      	b.n	800175a <__aeabi_dmul+0x47a>
 8001456:	4640      	mov	r0, r8
 8001458:	f000 fdba 	bl	8001fd0 <__clzsi2>
 800145c:	0002      	movs	r2, r0
 800145e:	3a0b      	subs	r2, #11
 8001460:	2a1c      	cmp	r2, #28
 8001462:	dd00      	ble.n	8001466 <__aeabi_dmul+0x186>
 8001464:	e172      	b.n	800174c <__aeabi_dmul+0x46c>
 8001466:	0001      	movs	r1, r0
 8001468:	4643      	mov	r3, r8
 800146a:	3908      	subs	r1, #8
 800146c:	408b      	lsls	r3, r1
 800146e:	4698      	mov	r8, r3
 8001470:	231d      	movs	r3, #29
 8001472:	1a9a      	subs	r2, r3, r2
 8001474:	4653      	mov	r3, sl
 8001476:	40d3      	lsrs	r3, r2
 8001478:	001a      	movs	r2, r3
 800147a:	4643      	mov	r3, r8
 800147c:	4313      	orrs	r3, r2
 800147e:	4652      	mov	r2, sl
 8001480:	408a      	lsls	r2, r1
 8001482:	4649      	mov	r1, r9
 8001484:	1a08      	subs	r0, r1, r0
 8001486:	4982      	ldr	r1, [pc, #520]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001488:	4689      	mov	r9, r1
 800148a:	4481      	add	r9, r0
 800148c:	2000      	movs	r0, #0
 800148e:	e768      	b.n	8001362 <__aeabi_dmul+0x82>
 8001490:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001492:	2700      	movs	r7, #0
 8001494:	2600      	movs	r6, #0
 8001496:	e78e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001498:	0c14      	lsrs	r4, r2, #16
 800149a:	0412      	lsls	r2, r2, #16
 800149c:	0c12      	lsrs	r2, r2, #16
 800149e:	0011      	movs	r1, r2
 80014a0:	0c37      	lsrs	r7, r6, #16
 80014a2:	0436      	lsls	r6, r6, #16
 80014a4:	0c35      	lsrs	r5, r6, #16
 80014a6:	4379      	muls	r1, r7
 80014a8:	0028      	movs	r0, r5
 80014aa:	468c      	mov	ip, r1
 80014ac:	002e      	movs	r6, r5
 80014ae:	4360      	muls	r0, r4
 80014b0:	4460      	add	r0, ip
 80014b2:	4683      	mov	fp, r0
 80014b4:	4356      	muls	r6, r2
 80014b6:	0021      	movs	r1, r4
 80014b8:	0c30      	lsrs	r0, r6, #16
 80014ba:	4680      	mov	r8, r0
 80014bc:	4658      	mov	r0, fp
 80014be:	4379      	muls	r1, r7
 80014c0:	4440      	add	r0, r8
 80014c2:	9102      	str	r1, [sp, #8]
 80014c4:	4584      	cmp	ip, r0
 80014c6:	d906      	bls.n	80014d6 <__aeabi_dmul+0x1f6>
 80014c8:	4688      	mov	r8, r1
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0249      	lsls	r1, r1, #9
 80014ce:	468c      	mov	ip, r1
 80014d0:	44e0      	add	r8, ip
 80014d2:	4641      	mov	r1, r8
 80014d4:	9102      	str	r1, [sp, #8]
 80014d6:	0436      	lsls	r6, r6, #16
 80014d8:	0c01      	lsrs	r1, r0, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0400      	lsls	r0, r0, #16
 80014de:	468b      	mov	fp, r1
 80014e0:	1981      	adds	r1, r0, r6
 80014e2:	0c1e      	lsrs	r6, r3, #16
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	9103      	str	r1, [sp, #12]
 80014ea:	0019      	movs	r1, r3
 80014ec:	4379      	muls	r1, r7
 80014ee:	468c      	mov	ip, r1
 80014f0:	0028      	movs	r0, r5
 80014f2:	4375      	muls	r5, r6
 80014f4:	4465      	add	r5, ip
 80014f6:	46a8      	mov	r8, r5
 80014f8:	4358      	muls	r0, r3
 80014fa:	0c05      	lsrs	r5, r0, #16
 80014fc:	4445      	add	r5, r8
 80014fe:	4377      	muls	r7, r6
 8001500:	42a9      	cmp	r1, r5
 8001502:	d903      	bls.n	800150c <__aeabi_dmul+0x22c>
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	468c      	mov	ip, r1
 800150a:	4467      	add	r7, ip
 800150c:	0c29      	lsrs	r1, r5, #16
 800150e:	468c      	mov	ip, r1
 8001510:	0039      	movs	r1, r7
 8001512:	0400      	lsls	r0, r0, #16
 8001514:	0c00      	lsrs	r0, r0, #16
 8001516:	042d      	lsls	r5, r5, #16
 8001518:	182d      	adds	r5, r5, r0
 800151a:	4461      	add	r1, ip
 800151c:	44ab      	add	fp, r5
 800151e:	9105      	str	r1, [sp, #20]
 8001520:	4659      	mov	r1, fp
 8001522:	9104      	str	r1, [sp, #16]
 8001524:	9901      	ldr	r1, [sp, #4]
 8001526:	040f      	lsls	r7, r1, #16
 8001528:	0c3f      	lsrs	r7, r7, #16
 800152a:	0c08      	lsrs	r0, r1, #16
 800152c:	0039      	movs	r1, r7
 800152e:	4351      	muls	r1, r2
 8001530:	4342      	muls	r2, r0
 8001532:	4690      	mov	r8, r2
 8001534:	0002      	movs	r2, r0
 8001536:	468c      	mov	ip, r1
 8001538:	0c09      	lsrs	r1, r1, #16
 800153a:	468b      	mov	fp, r1
 800153c:	4362      	muls	r2, r4
 800153e:	437c      	muls	r4, r7
 8001540:	4444      	add	r4, r8
 8001542:	445c      	add	r4, fp
 8001544:	45a0      	cmp	r8, r4
 8001546:	d903      	bls.n	8001550 <__aeabi_dmul+0x270>
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0249      	lsls	r1, r1, #9
 800154c:	4688      	mov	r8, r1
 800154e:	4442      	add	r2, r8
 8001550:	0c21      	lsrs	r1, r4, #16
 8001552:	4688      	mov	r8, r1
 8001554:	4661      	mov	r1, ip
 8001556:	0409      	lsls	r1, r1, #16
 8001558:	0c09      	lsrs	r1, r1, #16
 800155a:	468c      	mov	ip, r1
 800155c:	0039      	movs	r1, r7
 800155e:	4359      	muls	r1, r3
 8001560:	4343      	muls	r3, r0
 8001562:	4370      	muls	r0, r6
 8001564:	437e      	muls	r6, r7
 8001566:	0c0f      	lsrs	r7, r1, #16
 8001568:	18f6      	adds	r6, r6, r3
 800156a:	0424      	lsls	r4, r4, #16
 800156c:	19be      	adds	r6, r7, r6
 800156e:	4464      	add	r4, ip
 8001570:	4442      	add	r2, r8
 8001572:	468c      	mov	ip, r1
 8001574:	42b3      	cmp	r3, r6
 8001576:	d903      	bls.n	8001580 <__aeabi_dmul+0x2a0>
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	4698      	mov	r8, r3
 800157e:	4440      	add	r0, r8
 8001580:	9b02      	ldr	r3, [sp, #8]
 8001582:	4661      	mov	r1, ip
 8001584:	4698      	mov	r8, r3
 8001586:	9b04      	ldr	r3, [sp, #16]
 8001588:	0437      	lsls	r7, r6, #16
 800158a:	4443      	add	r3, r8
 800158c:	469b      	mov	fp, r3
 800158e:	45ab      	cmp	fp, r5
 8001590:	41ad      	sbcs	r5, r5
 8001592:	426b      	negs	r3, r5
 8001594:	040d      	lsls	r5, r1, #16
 8001596:	9905      	ldr	r1, [sp, #20]
 8001598:	0c2d      	lsrs	r5, r5, #16
 800159a:	468c      	mov	ip, r1
 800159c:	197f      	adds	r7, r7, r5
 800159e:	4467      	add	r7, ip
 80015a0:	18fd      	adds	r5, r7, r3
 80015a2:	46a8      	mov	r8, r5
 80015a4:	465d      	mov	r5, fp
 80015a6:	192d      	adds	r5, r5, r4
 80015a8:	42a5      	cmp	r5, r4
 80015aa:	41a4      	sbcs	r4, r4
 80015ac:	4693      	mov	fp, r2
 80015ae:	4264      	negs	r4, r4
 80015b0:	46a4      	mov	ip, r4
 80015b2:	44c3      	add	fp, r8
 80015b4:	44dc      	add	ip, fp
 80015b6:	428f      	cmp	r7, r1
 80015b8:	41bf      	sbcs	r7, r7
 80015ba:	4598      	cmp	r8, r3
 80015bc:	419b      	sbcs	r3, r3
 80015be:	4593      	cmp	fp, r2
 80015c0:	4192      	sbcs	r2, r2
 80015c2:	45a4      	cmp	ip, r4
 80015c4:	41a4      	sbcs	r4, r4
 80015c6:	425b      	negs	r3, r3
 80015c8:	427f      	negs	r7, r7
 80015ca:	431f      	orrs	r7, r3
 80015cc:	0c36      	lsrs	r6, r6, #16
 80015ce:	4252      	negs	r2, r2
 80015d0:	4264      	negs	r4, r4
 80015d2:	19bf      	adds	r7, r7, r6
 80015d4:	4322      	orrs	r2, r4
 80015d6:	18bf      	adds	r7, r7, r2
 80015d8:	4662      	mov	r2, ip
 80015da:	1838      	adds	r0, r7, r0
 80015dc:	0243      	lsls	r3, r0, #9
 80015de:	0dd2      	lsrs	r2, r2, #23
 80015e0:	9903      	ldr	r1, [sp, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	026a      	lsls	r2, r5, #9
 80015e6:	430a      	orrs	r2, r1
 80015e8:	1e50      	subs	r0, r2, #1
 80015ea:	4182      	sbcs	r2, r0
 80015ec:	4661      	mov	r1, ip
 80015ee:	0ded      	lsrs	r5, r5, #23
 80015f0:	432a      	orrs	r2, r5
 80015f2:	024e      	lsls	r6, r1, #9
 80015f4:	4332      	orrs	r2, r6
 80015f6:	01d9      	lsls	r1, r3, #7
 80015f8:	d400      	bmi.n	80015fc <__aeabi_dmul+0x31c>
 80015fa:	e0b3      	b.n	8001764 <__aeabi_dmul+0x484>
 80015fc:	2601      	movs	r6, #1
 80015fe:	0850      	lsrs	r0, r2, #1
 8001600:	4032      	ands	r2, r6
 8001602:	4302      	orrs	r2, r0
 8001604:	07de      	lsls	r6, r3, #31
 8001606:	4332      	orrs	r2, r6
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	4c22      	ldr	r4, [pc, #136]	; (8001694 <__aeabi_dmul+0x3b4>)
 800160c:	4454      	add	r4, sl
 800160e:	2c00      	cmp	r4, #0
 8001610:	dd62      	ble.n	80016d8 <__aeabi_dmul+0x3f8>
 8001612:	0751      	lsls	r1, r2, #29
 8001614:	d009      	beq.n	800162a <__aeabi_dmul+0x34a>
 8001616:	200f      	movs	r0, #15
 8001618:	4010      	ands	r0, r2
 800161a:	2804      	cmp	r0, #4
 800161c:	d005      	beq.n	800162a <__aeabi_dmul+0x34a>
 800161e:	1d10      	adds	r0, r2, #4
 8001620:	4290      	cmp	r0, r2
 8001622:	4192      	sbcs	r2, r2
 8001624:	4252      	negs	r2, r2
 8001626:	189b      	adds	r3, r3, r2
 8001628:	0002      	movs	r2, r0
 800162a:	01d9      	lsls	r1, r3, #7
 800162c:	d504      	bpl.n	8001638 <__aeabi_dmul+0x358>
 800162e:	2480      	movs	r4, #128	; 0x80
 8001630:	4819      	ldr	r0, [pc, #100]	; (8001698 <__aeabi_dmul+0x3b8>)
 8001632:	00e4      	lsls	r4, r4, #3
 8001634:	4003      	ands	r3, r0
 8001636:	4454      	add	r4, sl
 8001638:	4818      	ldr	r0, [pc, #96]	; (800169c <__aeabi_dmul+0x3bc>)
 800163a:	4284      	cmp	r4, r0
 800163c:	dd00      	ble.n	8001640 <__aeabi_dmul+0x360>
 800163e:	e727      	b.n	8001490 <__aeabi_dmul+0x1b0>
 8001640:	075e      	lsls	r6, r3, #29
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	08d2      	lsrs	r2, r2, #3
 8001646:	0b1f      	lsrs	r7, r3, #12
 8001648:	0563      	lsls	r3, r4, #21
 800164a:	4316      	orrs	r6, r2
 800164c:	0d5b      	lsrs	r3, r3, #21
 800164e:	e6b2      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001650:	2300      	movs	r3, #0
 8001652:	4699      	mov	r9, r3
 8001654:	3301      	adds	r3, #1
 8001656:	2704      	movs	r7, #4
 8001658:	2600      	movs	r6, #0
 800165a:	469b      	mov	fp, r3
 800165c:	e664      	b.n	8001328 <__aeabi_dmul+0x48>
 800165e:	2303      	movs	r3, #3
 8001660:	9701      	str	r7, [sp, #4]
 8001662:	4681      	mov	r9, r0
 8001664:	270c      	movs	r7, #12
 8001666:	469b      	mov	fp, r3
 8001668:	e65e      	b.n	8001328 <__aeabi_dmul+0x48>
 800166a:	2201      	movs	r2, #1
 800166c:	2001      	movs	r0, #1
 800166e:	4317      	orrs	r7, r2
 8001670:	2200      	movs	r2, #0
 8001672:	e676      	b.n	8001362 <__aeabi_dmul+0x82>
 8001674:	2303      	movs	r3, #3
 8001676:	2003      	movs	r0, #3
 8001678:	431f      	orrs	r7, r3
 800167a:	4643      	mov	r3, r8
 800167c:	e671      	b.n	8001362 <__aeabi_dmul+0x82>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	000007ff 	.word	0x000007ff
 8001684:	fffffc01 	.word	0xfffffc01
 8001688:	08006ae8 	.word	0x08006ae8
 800168c:	800fffff 	.word	0x800fffff
 8001690:	fffffc0d 	.word	0xfffffc0d
 8001694:	000003ff 	.word	0x000003ff
 8001698:	feffffff 	.word	0xfeffffff
 800169c:	000007fe 	.word	0x000007fe
 80016a0:	2300      	movs	r3, #0
 80016a2:	2780      	movs	r7, #128	; 0x80
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	033f      	lsls	r7, r7, #12
 80016a8:	2600      	movs	r6, #0
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016ac:	e683      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	0032      	movs	r2, r6
 80016b2:	46a4      	mov	ip, r4
 80016b4:	4658      	mov	r0, fp
 80016b6:	e670      	b.n	800139a <__aeabi_dmul+0xba>
 80016b8:	46ac      	mov	ip, r5
 80016ba:	e66e      	b.n	800139a <__aeabi_dmul+0xba>
 80016bc:	2780      	movs	r7, #128	; 0x80
 80016be:	9901      	ldr	r1, [sp, #4]
 80016c0:	033f      	lsls	r7, r7, #12
 80016c2:	4239      	tst	r1, r7
 80016c4:	d02d      	beq.n	8001722 <__aeabi_dmul+0x442>
 80016c6:	423b      	tst	r3, r7
 80016c8:	d12b      	bne.n	8001722 <__aeabi_dmul+0x442>
 80016ca:	431f      	orrs	r7, r3
 80016cc:	033f      	lsls	r7, r7, #12
 80016ce:	0b3f      	lsrs	r7, r7, #12
 80016d0:	9500      	str	r5, [sp, #0]
 80016d2:	0016      	movs	r6, r2
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016d6:	e66e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016d8:	2501      	movs	r5, #1
 80016da:	1b2d      	subs	r5, r5, r4
 80016dc:	2d38      	cmp	r5, #56	; 0x38
 80016de:	dd00      	ble.n	80016e2 <__aeabi_dmul+0x402>
 80016e0:	e666      	b.n	80013b0 <__aeabi_dmul+0xd0>
 80016e2:	2d1f      	cmp	r5, #31
 80016e4:	dc40      	bgt.n	8001768 <__aeabi_dmul+0x488>
 80016e6:	4835      	ldr	r0, [pc, #212]	; (80017bc <__aeabi_dmul+0x4dc>)
 80016e8:	001c      	movs	r4, r3
 80016ea:	4450      	add	r0, sl
 80016ec:	0016      	movs	r6, r2
 80016ee:	4082      	lsls	r2, r0
 80016f0:	4084      	lsls	r4, r0
 80016f2:	40ee      	lsrs	r6, r5
 80016f4:	1e50      	subs	r0, r2, #1
 80016f6:	4182      	sbcs	r2, r0
 80016f8:	4334      	orrs	r4, r6
 80016fa:	4314      	orrs	r4, r2
 80016fc:	40eb      	lsrs	r3, r5
 80016fe:	0762      	lsls	r2, r4, #29
 8001700:	d009      	beq.n	8001716 <__aeabi_dmul+0x436>
 8001702:	220f      	movs	r2, #15
 8001704:	4022      	ands	r2, r4
 8001706:	2a04      	cmp	r2, #4
 8001708:	d005      	beq.n	8001716 <__aeabi_dmul+0x436>
 800170a:	0022      	movs	r2, r4
 800170c:	1d14      	adds	r4, r2, #4
 800170e:	4294      	cmp	r4, r2
 8001710:	4180      	sbcs	r0, r0
 8001712:	4240      	negs	r0, r0
 8001714:	181b      	adds	r3, r3, r0
 8001716:	021a      	lsls	r2, r3, #8
 8001718:	d53e      	bpl.n	8001798 <__aeabi_dmul+0x4b8>
 800171a:	2301      	movs	r3, #1
 800171c:	2700      	movs	r7, #0
 800171e:	2600      	movs	r6, #0
 8001720:	e649      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001722:	2780      	movs	r7, #128	; 0x80
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	033f      	lsls	r7, r7, #12
 8001728:	431f      	orrs	r7, r3
 800172a:	033f      	lsls	r7, r7, #12
 800172c:	0b3f      	lsrs	r7, r7, #12
 800172e:	9400      	str	r4, [sp, #0]
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <__aeabi_dmul+0x4d8>)
 8001732:	e640      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001734:	0003      	movs	r3, r0
 8001736:	465a      	mov	r2, fp
 8001738:	3b28      	subs	r3, #40	; 0x28
 800173a:	409a      	lsls	r2, r3
 800173c:	2600      	movs	r6, #0
 800173e:	9201      	str	r2, [sp, #4]
 8001740:	e66d      	b.n	800141e <__aeabi_dmul+0x13e>
 8001742:	4658      	mov	r0, fp
 8001744:	f000 fc44 	bl	8001fd0 <__clzsi2>
 8001748:	3020      	adds	r0, #32
 800174a:	e657      	b.n	80013fc <__aeabi_dmul+0x11c>
 800174c:	0003      	movs	r3, r0
 800174e:	4652      	mov	r2, sl
 8001750:	3b28      	subs	r3, #40	; 0x28
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	e693      	b.n	8001482 <__aeabi_dmul+0x1a2>
 800175a:	4650      	mov	r0, sl
 800175c:	f000 fc38 	bl	8001fd0 <__clzsi2>
 8001760:	3020      	adds	r0, #32
 8001762:	e67b      	b.n	800145c <__aeabi_dmul+0x17c>
 8001764:	46ca      	mov	sl, r9
 8001766:	e750      	b.n	800160a <__aeabi_dmul+0x32a>
 8001768:	201f      	movs	r0, #31
 800176a:	001e      	movs	r6, r3
 800176c:	4240      	negs	r0, r0
 800176e:	1b04      	subs	r4, r0, r4
 8001770:	40e6      	lsrs	r6, r4
 8001772:	2d20      	cmp	r5, #32
 8001774:	d003      	beq.n	800177e <__aeabi_dmul+0x49e>
 8001776:	4c12      	ldr	r4, [pc, #72]	; (80017c0 <__aeabi_dmul+0x4e0>)
 8001778:	4454      	add	r4, sl
 800177a:	40a3      	lsls	r3, r4
 800177c:	431a      	orrs	r2, r3
 800177e:	1e50      	subs	r0, r2, #1
 8001780:	4182      	sbcs	r2, r0
 8001782:	4332      	orrs	r2, r6
 8001784:	2607      	movs	r6, #7
 8001786:	2700      	movs	r7, #0
 8001788:	4016      	ands	r6, r2
 800178a:	d009      	beq.n	80017a0 <__aeabi_dmul+0x4c0>
 800178c:	200f      	movs	r0, #15
 800178e:	2300      	movs	r3, #0
 8001790:	4010      	ands	r0, r2
 8001792:	0014      	movs	r4, r2
 8001794:	2804      	cmp	r0, #4
 8001796:	d1b9      	bne.n	800170c <__aeabi_dmul+0x42c>
 8001798:	0022      	movs	r2, r4
 800179a:	075e      	lsls	r6, r3, #29
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	0b1f      	lsrs	r7, r3, #12
 80017a0:	08d2      	lsrs	r2, r2, #3
 80017a2:	4316      	orrs	r6, r2
 80017a4:	2300      	movs	r3, #0
 80017a6:	e606      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017a8:	2780      	movs	r7, #128	; 0x80
 80017aa:	033f      	lsls	r7, r7, #12
 80017ac:	431f      	orrs	r7, r3
 80017ae:	033f      	lsls	r7, r7, #12
 80017b0:	0b3f      	lsrs	r7, r7, #12
 80017b2:	0016      	movs	r6, r2
 80017b4:	4b00      	ldr	r3, [pc, #0]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80017b6:	e5fe      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017b8:	000007ff 	.word	0x000007ff
 80017bc:	0000041e 	.word	0x0000041e
 80017c0:	0000043e 	.word	0x0000043e

080017c4 <__aeabi_dsub>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	000c      	movs	r4, r1
 80017d0:	0309      	lsls	r1, r1, #12
 80017d2:	b5e0      	push	{r5, r6, r7, lr}
 80017d4:	0a49      	lsrs	r1, r1, #9
 80017d6:	0f46      	lsrs	r6, r0, #29
 80017d8:	005f      	lsls	r7, r3, #1
 80017da:	4331      	orrs	r1, r6
 80017dc:	031e      	lsls	r6, r3, #12
 80017de:	0fdb      	lsrs	r3, r3, #31
 80017e0:	0a76      	lsrs	r6, r6, #9
 80017e2:	469b      	mov	fp, r3
 80017e4:	0f53      	lsrs	r3, r2, #29
 80017e6:	4333      	orrs	r3, r6
 80017e8:	4ec8      	ldr	r6, [pc, #800]	; (8001b0c <__aeabi_dsub+0x348>)
 80017ea:	0065      	lsls	r5, r4, #1
 80017ec:	00c0      	lsls	r0, r0, #3
 80017ee:	0fe4      	lsrs	r4, r4, #31
 80017f0:	00d2      	lsls	r2, r2, #3
 80017f2:	0d6d      	lsrs	r5, r5, #21
 80017f4:	46a2      	mov	sl, r4
 80017f6:	4681      	mov	r9, r0
 80017f8:	0d7f      	lsrs	r7, r7, #21
 80017fa:	469c      	mov	ip, r3
 80017fc:	4690      	mov	r8, r2
 80017fe:	42b7      	cmp	r7, r6
 8001800:	d100      	bne.n	8001804 <__aeabi_dsub+0x40>
 8001802:	e0b9      	b.n	8001978 <__aeabi_dsub+0x1b4>
 8001804:	465b      	mov	r3, fp
 8001806:	2601      	movs	r6, #1
 8001808:	4073      	eors	r3, r6
 800180a:	469b      	mov	fp, r3
 800180c:	1bee      	subs	r6, r5, r7
 800180e:	45a3      	cmp	fp, r4
 8001810:	d100      	bne.n	8001814 <__aeabi_dsub+0x50>
 8001812:	e083      	b.n	800191c <__aeabi_dsub+0x158>
 8001814:	2e00      	cmp	r6, #0
 8001816:	dd63      	ble.n	80018e0 <__aeabi_dsub+0x11c>
 8001818:	2f00      	cmp	r7, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dsub+0x5a>
 800181c:	e0b1      	b.n	8001982 <__aeabi_dsub+0x1be>
 800181e:	4663      	mov	r3, ip
 8001820:	4313      	orrs	r3, r2
 8001822:	d100      	bne.n	8001826 <__aeabi_dsub+0x62>
 8001824:	e123      	b.n	8001a6e <__aeabi_dsub+0x2aa>
 8001826:	1e73      	subs	r3, r6, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <__aeabi_dsub+0x6a>
 800182c:	e1ba      	b.n	8001ba4 <__aeabi_dsub+0x3e0>
 800182e:	1a86      	subs	r6, r0, r2
 8001830:	4663      	mov	r3, ip
 8001832:	42b0      	cmp	r0, r6
 8001834:	4180      	sbcs	r0, r0
 8001836:	2501      	movs	r5, #1
 8001838:	1ac9      	subs	r1, r1, r3
 800183a:	4240      	negs	r0, r0
 800183c:	1a09      	subs	r1, r1, r0
 800183e:	020b      	lsls	r3, r1, #8
 8001840:	d400      	bmi.n	8001844 <__aeabi_dsub+0x80>
 8001842:	e147      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001844:	0249      	lsls	r1, r1, #9
 8001846:	0a4b      	lsrs	r3, r1, #9
 8001848:	4698      	mov	r8, r3
 800184a:	4643      	mov	r3, r8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d100      	bne.n	8001852 <__aeabi_dsub+0x8e>
 8001850:	e189      	b.n	8001b66 <__aeabi_dsub+0x3a2>
 8001852:	4640      	mov	r0, r8
 8001854:	f000 fbbc 	bl	8001fd0 <__clzsi2>
 8001858:	0003      	movs	r3, r0
 800185a:	3b08      	subs	r3, #8
 800185c:	2b1f      	cmp	r3, #31
 800185e:	dd00      	ble.n	8001862 <__aeabi_dsub+0x9e>
 8001860:	e17c      	b.n	8001b5c <__aeabi_dsub+0x398>
 8001862:	2220      	movs	r2, #32
 8001864:	0030      	movs	r0, r6
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	4641      	mov	r1, r8
 800186a:	40d0      	lsrs	r0, r2
 800186c:	4099      	lsls	r1, r3
 800186e:	0002      	movs	r2, r0
 8001870:	409e      	lsls	r6, r3
 8001872:	430a      	orrs	r2, r1
 8001874:	429d      	cmp	r5, r3
 8001876:	dd00      	ble.n	800187a <__aeabi_dsub+0xb6>
 8001878:	e16a      	b.n	8001b50 <__aeabi_dsub+0x38c>
 800187a:	1b5d      	subs	r5, r3, r5
 800187c:	1c6b      	adds	r3, r5, #1
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dd00      	ble.n	8001884 <__aeabi_dsub+0xc0>
 8001882:	e194      	b.n	8001bae <__aeabi_dsub+0x3ea>
 8001884:	2120      	movs	r1, #32
 8001886:	0010      	movs	r0, r2
 8001888:	0035      	movs	r5, r6
 800188a:	1ac9      	subs	r1, r1, r3
 800188c:	408e      	lsls	r6, r1
 800188e:	40da      	lsrs	r2, r3
 8001890:	4088      	lsls	r0, r1
 8001892:	40dd      	lsrs	r5, r3
 8001894:	1e71      	subs	r1, r6, #1
 8001896:	418e      	sbcs	r6, r1
 8001898:	0011      	movs	r1, r2
 800189a:	2207      	movs	r2, #7
 800189c:	4328      	orrs	r0, r5
 800189e:	2500      	movs	r5, #0
 80018a0:	4306      	orrs	r6, r0
 80018a2:	4032      	ands	r2, r6
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d009      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018a8:	230f      	movs	r3, #15
 80018aa:	4033      	ands	r3, r6
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d005      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018b0:	1d33      	adds	r3, r6, #4
 80018b2:	42b3      	cmp	r3, r6
 80018b4:	41b6      	sbcs	r6, r6
 80018b6:	4276      	negs	r6, r6
 80018b8:	1989      	adds	r1, r1, r6
 80018ba:	001e      	movs	r6, r3
 80018bc:	020b      	lsls	r3, r1, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dsub+0xfe>
 80018c0:	e23d      	b.n	8001d3e <__aeabi_dsub+0x57a>
 80018c2:	1c6a      	adds	r2, r5, #1
 80018c4:	4b91      	ldr	r3, [pc, #580]	; (8001b0c <__aeabi_dsub+0x348>)
 80018c6:	0555      	lsls	r5, r2, #21
 80018c8:	0d6d      	lsrs	r5, r5, #21
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x10c>
 80018ce:	e119      	b.n	8001b04 <__aeabi_dsub+0x340>
 80018d0:	4a8f      	ldr	r2, [pc, #572]	; (8001b10 <__aeabi_dsub+0x34c>)
 80018d2:	08f6      	lsrs	r6, r6, #3
 80018d4:	400a      	ands	r2, r1
 80018d6:	0757      	lsls	r7, r2, #29
 80018d8:	0252      	lsls	r2, r2, #9
 80018da:	4337      	orrs	r7, r6
 80018dc:	0b12      	lsrs	r2, r2, #12
 80018de:	e09b      	b.n	8001a18 <__aeabi_dsub+0x254>
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dsub+0x122>
 80018e4:	e0c5      	b.n	8001a72 <__aeabi_dsub+0x2ae>
 80018e6:	1c6e      	adds	r6, r5, #1
 80018e8:	0576      	lsls	r6, r6, #21
 80018ea:	0d76      	lsrs	r6, r6, #21
 80018ec:	2e01      	cmp	r6, #1
 80018ee:	dc00      	bgt.n	80018f2 <__aeabi_dsub+0x12e>
 80018f0:	e148      	b.n	8001b84 <__aeabi_dsub+0x3c0>
 80018f2:	4667      	mov	r7, ip
 80018f4:	1a86      	subs	r6, r0, r2
 80018f6:	1bcb      	subs	r3, r1, r7
 80018f8:	42b0      	cmp	r0, r6
 80018fa:	41bf      	sbcs	r7, r7
 80018fc:	427f      	negs	r7, r7
 80018fe:	46b8      	mov	r8, r7
 8001900:	001f      	movs	r7, r3
 8001902:	4643      	mov	r3, r8
 8001904:	1aff      	subs	r7, r7, r3
 8001906:	003b      	movs	r3, r7
 8001908:	46b8      	mov	r8, r7
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	d500      	bpl.n	8001910 <__aeabi_dsub+0x14c>
 800190e:	e15f      	b.n	8001bd0 <__aeabi_dsub+0x40c>
 8001910:	4337      	orrs	r7, r6
 8001912:	d19a      	bne.n	800184a <__aeabi_dsub+0x86>
 8001914:	2200      	movs	r2, #0
 8001916:	2400      	movs	r4, #0
 8001918:	2500      	movs	r5, #0
 800191a:	e079      	b.n	8001a10 <__aeabi_dsub+0x24c>
 800191c:	2e00      	cmp	r6, #0
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dsub+0x15e>
 8001920:	e0fa      	b.n	8001b18 <__aeabi_dsub+0x354>
 8001922:	2f00      	cmp	r7, #0
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x164>
 8001926:	e08d      	b.n	8001a44 <__aeabi_dsub+0x280>
 8001928:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <__aeabi_dsub+0x348>)
 800192a:	429d      	cmp	r5, r3
 800192c:	d067      	beq.n	80019fe <__aeabi_dsub+0x23a>
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	4667      	mov	r7, ip
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	431f      	orrs	r7, r3
 8001936:	46bc      	mov	ip, r7
 8001938:	2e38      	cmp	r6, #56	; 0x38
 800193a:	dc00      	bgt.n	800193e <__aeabi_dsub+0x17a>
 800193c:	e152      	b.n	8001be4 <__aeabi_dsub+0x420>
 800193e:	4663      	mov	r3, ip
 8001940:	4313      	orrs	r3, r2
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	4193      	sbcs	r3, r2
 8001946:	181e      	adds	r6, r3, r0
 8001948:	4286      	cmp	r6, r0
 800194a:	4180      	sbcs	r0, r0
 800194c:	4240      	negs	r0, r0
 800194e:	1809      	adds	r1, r1, r0
 8001950:	020b      	lsls	r3, r1, #8
 8001952:	d400      	bmi.n	8001956 <__aeabi_dsub+0x192>
 8001954:	e0be      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <__aeabi_dsub+0x348>)
 8001958:	3501      	adds	r5, #1
 800195a:	429d      	cmp	r5, r3
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x19c>
 800195e:	e0d2      	b.n	8001b06 <__aeabi_dsub+0x342>
 8001960:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <__aeabi_dsub+0x34c>)
 8001962:	0873      	lsrs	r3, r6, #1
 8001964:	400a      	ands	r2, r1
 8001966:	2101      	movs	r1, #1
 8001968:	400e      	ands	r6, r1
 800196a:	431e      	orrs	r6, r3
 800196c:	0851      	lsrs	r1, r2, #1
 800196e:	07d3      	lsls	r3, r2, #31
 8001970:	2207      	movs	r2, #7
 8001972:	431e      	orrs	r6, r3
 8001974:	4032      	ands	r2, r6
 8001976:	e795      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001978:	001e      	movs	r6, r3
 800197a:	4316      	orrs	r6, r2
 800197c:	d000      	beq.n	8001980 <__aeabi_dsub+0x1bc>
 800197e:	e745      	b.n	800180c <__aeabi_dsub+0x48>
 8001980:	e740      	b.n	8001804 <__aeabi_dsub+0x40>
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <__aeabi_dsub+0x348>)
 8001984:	429d      	cmp	r5, r3
 8001986:	d03a      	beq.n	80019fe <__aeabi_dsub+0x23a>
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	4667      	mov	r7, ip
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431f      	orrs	r7, r3
 8001990:	46bc      	mov	ip, r7
 8001992:	2e38      	cmp	r6, #56	; 0x38
 8001994:	dd00      	ble.n	8001998 <__aeabi_dsub+0x1d4>
 8001996:	e0eb      	b.n	8001b70 <__aeabi_dsub+0x3ac>
 8001998:	2e1f      	cmp	r6, #31
 800199a:	dc00      	bgt.n	800199e <__aeabi_dsub+0x1da>
 800199c:	e13a      	b.n	8001c14 <__aeabi_dsub+0x450>
 800199e:	0033      	movs	r3, r6
 80019a0:	4667      	mov	r7, ip
 80019a2:	3b20      	subs	r3, #32
 80019a4:	40df      	lsrs	r7, r3
 80019a6:	003b      	movs	r3, r7
 80019a8:	2e20      	cmp	r6, #32
 80019aa:	d005      	beq.n	80019b8 <__aeabi_dsub+0x1f4>
 80019ac:	2740      	movs	r7, #64	; 0x40
 80019ae:	1bbf      	subs	r7, r7, r6
 80019b0:	4666      	mov	r6, ip
 80019b2:	40be      	lsls	r6, r7
 80019b4:	4332      	orrs	r2, r6
 80019b6:	4690      	mov	r8, r2
 80019b8:	4646      	mov	r6, r8
 80019ba:	1e72      	subs	r2, r6, #1
 80019bc:	4196      	sbcs	r6, r2
 80019be:	4333      	orrs	r3, r6
 80019c0:	e0da      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x204>
 80019c6:	e214      	b.n	8001df2 <__aeabi_dsub+0x62e>
 80019c8:	4663      	mov	r3, ip
 80019ca:	4313      	orrs	r3, r2
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x20c>
 80019ce:	e168      	b.n	8001ca2 <__aeabi_dsub+0x4de>
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	074e      	lsls	r6, r1, #29
 80019d4:	08c0      	lsrs	r0, r0, #3
 80019d6:	08c9      	lsrs	r1, r1, #3
 80019d8:	031b      	lsls	r3, r3, #12
 80019da:	4306      	orrs	r6, r0
 80019dc:	4219      	tst	r1, r3
 80019de:	d008      	beq.n	80019f2 <__aeabi_dsub+0x22e>
 80019e0:	4660      	mov	r0, ip
 80019e2:	08c0      	lsrs	r0, r0, #3
 80019e4:	4218      	tst	r0, r3
 80019e6:	d104      	bne.n	80019f2 <__aeabi_dsub+0x22e>
 80019e8:	4663      	mov	r3, ip
 80019ea:	0001      	movs	r1, r0
 80019ec:	08d2      	lsrs	r2, r2, #3
 80019ee:	075e      	lsls	r6, r3, #29
 80019f0:	4316      	orrs	r6, r2
 80019f2:	00f3      	lsls	r3, r6, #3
 80019f4:	4699      	mov	r9, r3
 80019f6:	00c9      	lsls	r1, r1, #3
 80019f8:	0f72      	lsrs	r2, r6, #29
 80019fa:	4d44      	ldr	r5, [pc, #272]	; (8001b0c <__aeabi_dsub+0x348>)
 80019fc:	4311      	orrs	r1, r2
 80019fe:	464b      	mov	r3, r9
 8001a00:	08de      	lsrs	r6, r3, #3
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a04:	074f      	lsls	r7, r1, #29
 8001a06:	4337      	orrs	r7, r6
 8001a08:	08ca      	lsrs	r2, r1, #3
 8001a0a:	429d      	cmp	r5, r3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x24c>
 8001a0e:	e06e      	b.n	8001aee <__aeabi_dsub+0x32a>
 8001a10:	0312      	lsls	r2, r2, #12
 8001a12:	056d      	lsls	r5, r5, #21
 8001a14:	0b12      	lsrs	r2, r2, #12
 8001a16:	0d6d      	lsrs	r5, r5, #21
 8001a18:	2100      	movs	r1, #0
 8001a1a:	0312      	lsls	r2, r2, #12
 8001a1c:	0b13      	lsrs	r3, r2, #12
 8001a1e:	0d0a      	lsrs	r2, r1, #20
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	431a      	orrs	r2, r3
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <__aeabi_dsub+0x350>)
 8001a26:	052d      	lsls	r5, r5, #20
 8001a28:	4013      	ands	r3, r2
 8001a2a:	432b      	orrs	r3, r5
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0038      	movs	r0, r7
 8001a36:	0019      	movs	r1, r3
 8001a38:	bc3c      	pop	{r2, r3, r4, r5}
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	46a2      	mov	sl, r4
 8001a40:	46ab      	mov	fp, r5
 8001a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a44:	4663      	mov	r3, ip
 8001a46:	4313      	orrs	r3, r2
 8001a48:	d011      	beq.n	8001a6e <__aeabi_dsub+0x2aa>
 8001a4a:	1e73      	subs	r3, r6, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d000      	beq.n	8001a52 <__aeabi_dsub+0x28e>
 8001a50:	e107      	b.n	8001c62 <__aeabi_dsub+0x49e>
 8001a52:	1886      	adds	r6, r0, r2
 8001a54:	4286      	cmp	r6, r0
 8001a56:	4180      	sbcs	r0, r0
 8001a58:	4461      	add	r1, ip
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	1809      	adds	r1, r1, r0
 8001a5e:	2501      	movs	r5, #1
 8001a60:	020b      	lsls	r3, r1, #8
 8001a62:	d537      	bpl.n	8001ad4 <__aeabi_dsub+0x310>
 8001a64:	2502      	movs	r5, #2
 8001a66:	e77b      	b.n	8001960 <__aeabi_dsub+0x19c>
 8001a68:	003e      	movs	r6, r7
 8001a6a:	4661      	mov	r1, ip
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	0035      	movs	r5, r6
 8001a70:	e7c5      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001a72:	465c      	mov	r4, fp
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	d000      	beq.n	8001a7a <__aeabi_dsub+0x2b6>
 8001a78:	e0e1      	b.n	8001c3e <__aeabi_dsub+0x47a>
 8001a7a:	000b      	movs	r3, r1
 8001a7c:	4303      	orrs	r3, r0
 8001a7e:	d0f3      	beq.n	8001a68 <__aeabi_dsub+0x2a4>
 8001a80:	1c73      	adds	r3, r6, #1
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x2c2>
 8001a84:	e1ac      	b.n	8001de0 <__aeabi_dsub+0x61c>
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a88:	429f      	cmp	r7, r3
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0x2ca>
 8001a8c:	e13a      	b.n	8001d04 <__aeabi_dsub+0x540>
 8001a8e:	43f3      	mvns	r3, r6
 8001a90:	2b38      	cmp	r3, #56	; 0x38
 8001a92:	dd00      	ble.n	8001a96 <__aeabi_dsub+0x2d2>
 8001a94:	e16f      	b.n	8001d76 <__aeabi_dsub+0x5b2>
 8001a96:	2b1f      	cmp	r3, #31
 8001a98:	dd00      	ble.n	8001a9c <__aeabi_dsub+0x2d8>
 8001a9a:	e18c      	b.n	8001db6 <__aeabi_dsub+0x5f2>
 8001a9c:	2520      	movs	r5, #32
 8001a9e:	000e      	movs	r6, r1
 8001aa0:	1aed      	subs	r5, r5, r3
 8001aa2:	40ae      	lsls	r6, r5
 8001aa4:	46b0      	mov	r8, r6
 8001aa6:	0006      	movs	r6, r0
 8001aa8:	46aa      	mov	sl, r5
 8001aaa:	40de      	lsrs	r6, r3
 8001aac:	4645      	mov	r5, r8
 8001aae:	4335      	orrs	r5, r6
 8001ab0:	002e      	movs	r6, r5
 8001ab2:	4655      	mov	r5, sl
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	40a8      	lsls	r0, r5
 8001ab8:	4663      	mov	r3, ip
 8001aba:	1e45      	subs	r5, r0, #1
 8001abc:	41a8      	sbcs	r0, r5
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	4330      	orrs	r0, r6
 8001ac4:	1a16      	subs	r6, r2, r0
 8001ac6:	42b2      	cmp	r2, r6
 8001ac8:	4192      	sbcs	r2, r2
 8001aca:	4663      	mov	r3, ip
 8001acc:	4252      	negs	r2, r2
 8001ace:	1a99      	subs	r1, r3, r2
 8001ad0:	003d      	movs	r5, r7
 8001ad2:	e6b4      	b.n	800183e <__aeabi_dsub+0x7a>
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	4032      	ands	r2, r6
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x31a>
 8001adc:	e6e4      	b.n	80018a8 <__aeabi_dsub+0xe4>
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <__aeabi_dsub+0x348>)
 8001ae0:	08f6      	lsrs	r6, r6, #3
 8001ae2:	074f      	lsls	r7, r1, #29
 8001ae4:	4337      	orrs	r7, r6
 8001ae6:	08ca      	lsrs	r2, r1, #3
 8001ae8:	429d      	cmp	r5, r3
 8001aea:	d000      	beq.n	8001aee <__aeabi_dsub+0x32a>
 8001aec:	e790      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001aee:	003b      	movs	r3, r7
 8001af0:	4313      	orrs	r3, r2
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x332>
 8001af4:	e1a6      	b.n	8001e44 <__aeabi_dsub+0x680>
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	031b      	lsls	r3, r3, #12
 8001afa:	431a      	orrs	r2, r3
 8001afc:	0312      	lsls	r2, r2, #12
 8001afe:	0b12      	lsrs	r2, r2, #12
 8001b00:	4d02      	ldr	r5, [pc, #8]	; (8001b0c <__aeabi_dsub+0x348>)
 8001b02:	e789      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b04:	0015      	movs	r5, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	2700      	movs	r7, #0
 8001b0a:	e785      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	ff7fffff 	.word	0xff7fffff
 8001b14:	800fffff 	.word	0x800fffff
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x35a>
 8001b1c:	e0c7      	b.n	8001cae <__aeabi_dsub+0x4ea>
 8001b1e:	1c6b      	adds	r3, r5, #1
 8001b20:	055e      	lsls	r6, r3, #21
 8001b22:	0d76      	lsrs	r6, r6, #21
 8001b24:	2e01      	cmp	r6, #1
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dsub+0x366>
 8001b28:	e0f0      	b.n	8001d0c <__aeabi_dsub+0x548>
 8001b2a:	4dc8      	ldr	r5, [pc, #800]	; (8001e4c <__aeabi_dsub+0x688>)
 8001b2c:	42ab      	cmp	r3, r5
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x36e>
 8001b30:	e0b9      	b.n	8001ca6 <__aeabi_dsub+0x4e2>
 8001b32:	1885      	adds	r5, r0, r2
 8001b34:	000a      	movs	r2, r1
 8001b36:	4285      	cmp	r5, r0
 8001b38:	4189      	sbcs	r1, r1
 8001b3a:	4462      	add	r2, ip
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	1851      	adds	r1, r2, r1
 8001b40:	2207      	movs	r2, #7
 8001b42:	07ce      	lsls	r6, r1, #31
 8001b44:	086d      	lsrs	r5, r5, #1
 8001b46:	432e      	orrs	r6, r5
 8001b48:	0849      	lsrs	r1, r1, #1
 8001b4a:	4032      	ands	r2, r6
 8001b4c:	001d      	movs	r5, r3
 8001b4e:	e6a9      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b50:	49bf      	ldr	r1, [pc, #764]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001b52:	1aed      	subs	r5, r5, r3
 8001b54:	4011      	ands	r1, r2
 8001b56:	2207      	movs	r2, #7
 8001b58:	4032      	ands	r2, r6
 8001b5a:	e6a3      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b5c:	0032      	movs	r2, r6
 8001b5e:	3828      	subs	r0, #40	; 0x28
 8001b60:	4082      	lsls	r2, r0
 8001b62:	2600      	movs	r6, #0
 8001b64:	e686      	b.n	8001874 <__aeabi_dsub+0xb0>
 8001b66:	0030      	movs	r0, r6
 8001b68:	f000 fa32 	bl	8001fd0 <__clzsi2>
 8001b6c:	3020      	adds	r0, #32
 8001b6e:	e673      	b.n	8001858 <__aeabi_dsub+0x94>
 8001b70:	4663      	mov	r3, ip
 8001b72:	4313      	orrs	r3, r2
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	4193      	sbcs	r3, r2
 8001b78:	1ac6      	subs	r6, r0, r3
 8001b7a:	42b0      	cmp	r0, r6
 8001b7c:	4180      	sbcs	r0, r0
 8001b7e:	4240      	negs	r0, r0
 8001b80:	1a09      	subs	r1, r1, r0
 8001b82:	e65c      	b.n	800183e <__aeabi_dsub+0x7a>
 8001b84:	000e      	movs	r6, r1
 8001b86:	4667      	mov	r7, ip
 8001b88:	4306      	orrs	r6, r0
 8001b8a:	4317      	orrs	r7, r2
 8001b8c:	2d00      	cmp	r5, #0
 8001b8e:	d15e      	bne.n	8001c4e <__aeabi_dsub+0x48a>
 8001b90:	2e00      	cmp	r6, #0
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x3d2>
 8001b94:	e0f3      	b.n	8001d7e <__aeabi_dsub+0x5ba>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x3d8>
 8001b9a:	e11e      	b.n	8001dda <__aeabi_dsub+0x616>
 8001b9c:	465c      	mov	r4, fp
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	4691      	mov	r9, r2
 8001ba2:	e72c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ba4:	4fa9      	ldr	r7, [pc, #676]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ba6:	42be      	cmp	r6, r7
 8001ba8:	d07b      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001baa:	001e      	movs	r6, r3
 8001bac:	e6f1      	b.n	8001992 <__aeabi_dsub+0x1ce>
 8001bae:	0010      	movs	r0, r2
 8001bb0:	3d1f      	subs	r5, #31
 8001bb2:	40e8      	lsrs	r0, r5
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d003      	beq.n	8001bc0 <__aeabi_dsub+0x3fc>
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	1acb      	subs	r3, r1, r3
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	4316      	orrs	r6, r2
 8001bc0:	1e73      	subs	r3, r6, #1
 8001bc2:	419e      	sbcs	r6, r3
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	4306      	orrs	r6, r0
 8001bc8:	4032      	ands	r2, r6
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2500      	movs	r5, #0
 8001bce:	e783      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001bd0:	1a16      	subs	r6, r2, r0
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	42b2      	cmp	r2, r6
 8001bd6:	4180      	sbcs	r0, r0
 8001bd8:	1a59      	subs	r1, r3, r1
 8001bda:	4240      	negs	r0, r0
 8001bdc:	1a0b      	subs	r3, r1, r0
 8001bde:	4698      	mov	r8, r3
 8001be0:	465c      	mov	r4, fp
 8001be2:	e632      	b.n	800184a <__aeabi_dsub+0x86>
 8001be4:	2e1f      	cmp	r6, #31
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dsub+0x426>
 8001be8:	e0ab      	b.n	8001d42 <__aeabi_dsub+0x57e>
 8001bea:	2720      	movs	r7, #32
 8001bec:	1bbb      	subs	r3, r7, r6
 8001bee:	469a      	mov	sl, r3
 8001bf0:	4663      	mov	r3, ip
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	40bb      	lsls	r3, r7
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	464f      	mov	r7, r9
 8001bfc:	40f3      	lsrs	r3, r6
 8001bfe:	431f      	orrs	r7, r3
 8001c00:	003b      	movs	r3, r7
 8001c02:	4657      	mov	r7, sl
 8001c04:	40ba      	lsls	r2, r7
 8001c06:	1e57      	subs	r7, r2, #1
 8001c08:	41ba      	sbcs	r2, r7
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4662      	mov	r2, ip
 8001c0e:	40f2      	lsrs	r2, r6
 8001c10:	1889      	adds	r1, r1, r2
 8001c12:	e698      	b.n	8001946 <__aeabi_dsub+0x182>
 8001c14:	2720      	movs	r7, #32
 8001c16:	1bbb      	subs	r3, r7, r6
 8001c18:	469a      	mov	sl, r3
 8001c1a:	4663      	mov	r3, ip
 8001c1c:	4657      	mov	r7, sl
 8001c1e:	40bb      	lsls	r3, r7
 8001c20:	4699      	mov	r9, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	464f      	mov	r7, r9
 8001c26:	40f3      	lsrs	r3, r6
 8001c28:	431f      	orrs	r7, r3
 8001c2a:	003b      	movs	r3, r7
 8001c2c:	4657      	mov	r7, sl
 8001c2e:	40ba      	lsls	r2, r7
 8001c30:	1e57      	subs	r7, r2, #1
 8001c32:	41ba      	sbcs	r2, r7
 8001c34:	4313      	orrs	r3, r2
 8001c36:	4662      	mov	r2, ip
 8001c38:	40f2      	lsrs	r2, r6
 8001c3a:	1a89      	subs	r1, r1, r2
 8001c3c:	e79c      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 8001c3e:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c40:	429f      	cmp	r7, r3
 8001c42:	d05f      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001c44:	2580      	movs	r5, #128	; 0x80
 8001c46:	042d      	lsls	r5, r5, #16
 8001c48:	4273      	negs	r3, r6
 8001c4a:	4329      	orrs	r1, r5
 8001c4c:	e720      	b.n	8001a90 <__aeabi_dsub+0x2cc>
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d10c      	bne.n	8001c6c <__aeabi_dsub+0x4a8>
 8001c52:	2f00      	cmp	r7, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x494>
 8001c56:	e0d0      	b.n	8001dfa <__aeabi_dsub+0x636>
 8001c58:	465c      	mov	r4, fp
 8001c5a:	4661      	mov	r1, ip
 8001c5c:	4691      	mov	r9, r2
 8001c5e:	4d7b      	ldr	r5, [pc, #492]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c60:	e6cd      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001c62:	4f7a      	ldr	r7, [pc, #488]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c64:	42be      	cmp	r6, r7
 8001c66:	d01c      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c68:	001e      	movs	r6, r3
 8001c6a:	e665      	b.n	8001938 <__aeabi_dsub+0x174>
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d018      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c70:	08c0      	lsrs	r0, r0, #3
 8001c72:	074e      	lsls	r6, r1, #29
 8001c74:	4306      	orrs	r6, r0
 8001c76:	2080      	movs	r0, #128	; 0x80
 8001c78:	08c9      	lsrs	r1, r1, #3
 8001c7a:	0300      	lsls	r0, r0, #12
 8001c7c:	4201      	tst	r1, r0
 8001c7e:	d008      	beq.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c80:	4663      	mov	r3, ip
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	4204      	tst	r4, r0
 8001c86:	d104      	bne.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c88:	0021      	movs	r1, r4
 8001c8a:	46da      	mov	sl, fp
 8001c8c:	08d2      	lsrs	r2, r2, #3
 8001c8e:	075e      	lsls	r6, r3, #29
 8001c90:	4316      	orrs	r6, r2
 8001c92:	00f3      	lsls	r3, r6, #3
 8001c94:	4699      	mov	r9, r3
 8001c96:	2401      	movs	r4, #1
 8001c98:	4653      	mov	r3, sl
 8001c9a:	00c9      	lsls	r1, r1, #3
 8001c9c:	0f72      	lsrs	r2, r6, #29
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	401c      	ands	r4, r3
 8001ca2:	4d6a      	ldr	r5, [pc, #424]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ca4:	e6ab      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ca6:	001d      	movs	r5, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2700      	movs	r7, #0
 8001cac:	e6b4      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	d159      	bne.n	8001d66 <__aeabi_dsub+0x5a2>
 8001cb2:	000b      	movs	r3, r1
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x4f6>
 8001cb8:	e6d6      	b.n	8001a68 <__aeabi_dsub+0x2a4>
 8001cba:	1c73      	adds	r3, r6, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x4fc>
 8001cbe:	e0b2      	b.n	8001e26 <__aeabi_dsub+0x662>
 8001cc0:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <__aeabi_dsub+0x688>)
 8001cc2:	429f      	cmp	r7, r3
 8001cc4:	d01e      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001cc6:	43f3      	mvns	r3, r6
 8001cc8:	2b38      	cmp	r3, #56	; 0x38
 8001cca:	dc6f      	bgt.n	8001dac <__aeabi_dsub+0x5e8>
 8001ccc:	2b1f      	cmp	r3, #31
 8001cce:	dd00      	ble.n	8001cd2 <__aeabi_dsub+0x50e>
 8001cd0:	e097      	b.n	8001e02 <__aeabi_dsub+0x63e>
 8001cd2:	2520      	movs	r5, #32
 8001cd4:	000e      	movs	r6, r1
 8001cd6:	1aed      	subs	r5, r5, r3
 8001cd8:	40ae      	lsls	r6, r5
 8001cda:	46b0      	mov	r8, r6
 8001cdc:	0006      	movs	r6, r0
 8001cde:	46aa      	mov	sl, r5
 8001ce0:	40de      	lsrs	r6, r3
 8001ce2:	4645      	mov	r5, r8
 8001ce4:	4335      	orrs	r5, r6
 8001ce6:	002e      	movs	r6, r5
 8001ce8:	4655      	mov	r5, sl
 8001cea:	40a8      	lsls	r0, r5
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	1e45      	subs	r5, r0, #1
 8001cf0:	41a8      	sbcs	r0, r5
 8001cf2:	448c      	add	ip, r1
 8001cf4:	4306      	orrs	r6, r0
 8001cf6:	18b6      	adds	r6, r6, r2
 8001cf8:	4296      	cmp	r6, r2
 8001cfa:	4192      	sbcs	r2, r2
 8001cfc:	4251      	negs	r1, r2
 8001cfe:	4461      	add	r1, ip
 8001d00:	003d      	movs	r5, r7
 8001d02:	e625      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001d04:	003d      	movs	r5, r7
 8001d06:	4661      	mov	r1, ip
 8001d08:	4691      	mov	r9, r2
 8001d0a:	e678      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	4303      	orrs	r3, r0
 8001d10:	2d00      	cmp	r5, #0
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x552>
 8001d14:	e655      	b.n	80019c2 <__aeabi_dsub+0x1fe>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f5      	beq.n	8001d06 <__aeabi_dsub+0x542>
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x55e>
 8001d20:	e66d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d22:	1886      	adds	r6, r0, r2
 8001d24:	4286      	cmp	r6, r0
 8001d26:	4180      	sbcs	r0, r0
 8001d28:	4461      	add	r1, ip
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	1809      	adds	r1, r1, r0
 8001d2e:	2200      	movs	r2, #0
 8001d30:	020b      	lsls	r3, r1, #8
 8001d32:	d400      	bmi.n	8001d36 <__aeabi_dsub+0x572>
 8001d34:	e6d0      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001d38:	3501      	adds	r5, #1
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	e5b2      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001d3e:	46b1      	mov	r9, r6
 8001d40:	e65d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d42:	0033      	movs	r3, r6
 8001d44:	4667      	mov	r7, ip
 8001d46:	3b20      	subs	r3, #32
 8001d48:	40df      	lsrs	r7, r3
 8001d4a:	003b      	movs	r3, r7
 8001d4c:	2e20      	cmp	r6, #32
 8001d4e:	d005      	beq.n	8001d5c <__aeabi_dsub+0x598>
 8001d50:	2740      	movs	r7, #64	; 0x40
 8001d52:	1bbf      	subs	r7, r7, r6
 8001d54:	4666      	mov	r6, ip
 8001d56:	40be      	lsls	r6, r7
 8001d58:	4332      	orrs	r2, r6
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	4646      	mov	r6, r8
 8001d5e:	1e72      	subs	r2, r6, #1
 8001d60:	4196      	sbcs	r6, r2
 8001d62:	4333      	orrs	r3, r6
 8001d64:	e5ef      	b.n	8001946 <__aeabi_dsub+0x182>
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <__aeabi_dsub+0x688>)
 8001d68:	429f      	cmp	r7, r3
 8001d6a:	d0cb      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001d6c:	2580      	movs	r5, #128	; 0x80
 8001d6e:	042d      	lsls	r5, r5, #16
 8001d70:	4273      	negs	r3, r6
 8001d72:	4329      	orrs	r1, r5
 8001d74:	e7a8      	b.n	8001cc8 <__aeabi_dsub+0x504>
 8001d76:	4308      	orrs	r0, r1
 8001d78:	1e41      	subs	r1, r0, #1
 8001d7a:	4188      	sbcs	r0, r1
 8001d7c:	e6a2      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x5c0>
 8001d82:	e63c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d84:	4663      	mov	r3, ip
 8001d86:	1a86      	subs	r6, r0, r2
 8001d88:	1acf      	subs	r7, r1, r3
 8001d8a:	42b0      	cmp	r0, r6
 8001d8c:	419b      	sbcs	r3, r3
 8001d8e:	425b      	negs	r3, r3
 8001d90:	1afb      	subs	r3, r7, r3
 8001d92:	4698      	mov	r8, r3
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	d54e      	bpl.n	8001e36 <__aeabi_dsub+0x672>
 8001d98:	1a16      	subs	r6, r2, r0
 8001d9a:	4663      	mov	r3, ip
 8001d9c:	42b2      	cmp	r2, r6
 8001d9e:	4192      	sbcs	r2, r2
 8001da0:	1a59      	subs	r1, r3, r1
 8001da2:	4252      	negs	r2, r2
 8001da4:	1a89      	subs	r1, r1, r2
 8001da6:	465c      	mov	r4, fp
 8001da8:	2200      	movs	r2, #0
 8001daa:	e57b      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001dac:	4301      	orrs	r1, r0
 8001dae:	000e      	movs	r6, r1
 8001db0:	1e71      	subs	r1, r6, #1
 8001db2:	418e      	sbcs	r6, r1
 8001db4:	e79f      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001db6:	001d      	movs	r5, r3
 8001db8:	000e      	movs	r6, r1
 8001dba:	3d20      	subs	r5, #32
 8001dbc:	40ee      	lsrs	r6, r5
 8001dbe:	46b0      	mov	r8, r6
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d004      	beq.n	8001dce <__aeabi_dsub+0x60a>
 8001dc4:	2540      	movs	r5, #64	; 0x40
 8001dc6:	1aeb      	subs	r3, r5, r3
 8001dc8:	4099      	lsls	r1, r3
 8001dca:	4308      	orrs	r0, r1
 8001dcc:	4681      	mov	r9, r0
 8001dce:	4648      	mov	r0, r9
 8001dd0:	4643      	mov	r3, r8
 8001dd2:	1e41      	subs	r1, r0, #1
 8001dd4:	4188      	sbcs	r0, r1
 8001dd6:	4318      	orrs	r0, r3
 8001dd8:	e674      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2400      	movs	r4, #0
 8001dde:	e617      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001de0:	1a16      	subs	r6, r2, r0
 8001de2:	4663      	mov	r3, ip
 8001de4:	42b2      	cmp	r2, r6
 8001de6:	4192      	sbcs	r2, r2
 8001de8:	1a59      	subs	r1, r3, r1
 8001dea:	4252      	negs	r2, r2
 8001dec:	1a89      	subs	r1, r1, r2
 8001dee:	003d      	movs	r5, r7
 8001df0:	e525      	b.n	800183e <__aeabi_dsub+0x7a>
 8001df2:	4661      	mov	r1, ip
 8001df4:	4691      	mov	r9, r2
 8001df6:	4d15      	ldr	r5, [pc, #84]	; (8001e4c <__aeabi_dsub+0x688>)
 8001df8:	e601      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	0312      	lsls	r2, r2, #12
 8001e00:	e679      	b.n	8001af6 <__aeabi_dsub+0x332>
 8001e02:	001d      	movs	r5, r3
 8001e04:	000e      	movs	r6, r1
 8001e06:	3d20      	subs	r5, #32
 8001e08:	40ee      	lsrs	r6, r5
 8001e0a:	46b0      	mov	r8, r6
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d004      	beq.n	8001e1a <__aeabi_dsub+0x656>
 8001e10:	2540      	movs	r5, #64	; 0x40
 8001e12:	1aeb      	subs	r3, r5, r3
 8001e14:	4099      	lsls	r1, r3
 8001e16:	4308      	orrs	r0, r1
 8001e18:	4681      	mov	r9, r0
 8001e1a:	464e      	mov	r6, r9
 8001e1c:	4643      	mov	r3, r8
 8001e1e:	1e71      	subs	r1, r6, #1
 8001e20:	418e      	sbcs	r6, r1
 8001e22:	431e      	orrs	r6, r3
 8001e24:	e767      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001e26:	1886      	adds	r6, r0, r2
 8001e28:	4296      	cmp	r6, r2
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	4461      	add	r1, ip
 8001e2e:	425b      	negs	r3, r3
 8001e30:	18c9      	adds	r1, r1, r3
 8001e32:	003d      	movs	r5, r7
 8001e34:	e58c      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001e36:	4647      	mov	r7, r8
 8001e38:	4337      	orrs	r7, r6
 8001e3a:	d0ce      	beq.n	8001dda <__aeabi_dsub+0x616>
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4641      	mov	r1, r8
 8001e40:	4032      	ands	r2, r6
 8001e42:	e649      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001e44:	2700      	movs	r7, #0
 8001e46:	003a      	movs	r2, r7
 8001e48:	e5e6      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	ff7fffff 	.word	0xff7fffff

08001e54 <__aeabi_dcmpun>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4e0c      	ldr	r6, [pc, #48]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e58:	030d      	lsls	r5, r1, #12
 8001e5a:	031c      	lsls	r4, r3, #12
 8001e5c:	0049      	lsls	r1, r1, #1
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	0b2d      	lsrs	r5, r5, #12
 8001e62:	0d49      	lsrs	r1, r1, #21
 8001e64:	0b24      	lsrs	r4, r4, #12
 8001e66:	0d5b      	lsrs	r3, r3, #21
 8001e68:	42b1      	cmp	r1, r6
 8001e6a:	d008      	beq.n	8001e7e <__aeabi_dcmpun+0x2a>
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d103      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e74:	4314      	orrs	r4, r2
 8001e76:	0020      	movs	r0, r4
 8001e78:	1e44      	subs	r4, r0, #1
 8001e7a:	41a0      	sbcs	r0, r4
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
 8001e7e:	4305      	orrs	r5, r0
 8001e80:	2001      	movs	r0, #1
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d1fa      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e86:	e7f1      	b.n	8001e6c <__aeabi_dcmpun+0x18>
 8001e88:	000007ff 	.word	0x000007ff

08001e8c <__aeabi_d2iz>:
 8001e8c:	b530      	push	{r4, r5, lr}
 8001e8e:	4d14      	ldr	r5, [pc, #80]	; (8001ee0 <__aeabi_d2iz+0x54>)
 8001e90:	030a      	lsls	r2, r1, #12
 8001e92:	004b      	lsls	r3, r1, #1
 8001e94:	0b12      	lsrs	r2, r2, #12
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	0fc9      	lsrs	r1, r1, #31
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	dd11      	ble.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ea0:	4c10      	ldr	r4, [pc, #64]	; (8001ee4 <__aeabi_d2iz+0x58>)
 8001ea2:	42a3      	cmp	r3, r4
 8001ea4:	dc10      	bgt.n	8001ec8 <__aeabi_d2iz+0x3c>
 8001ea6:	2480      	movs	r4, #128	; 0x80
 8001ea8:	0364      	lsls	r4, r4, #13
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	4c0e      	ldr	r4, [pc, #56]	; (8001ee8 <__aeabi_d2iz+0x5c>)
 8001eae:	1ae4      	subs	r4, r4, r3
 8001eb0:	2c1f      	cmp	r4, #31
 8001eb2:	dd0c      	ble.n	8001ece <__aeabi_d2iz+0x42>
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <__aeabi_d2iz+0x60>)
 8001eb6:	1ac3      	subs	r3, r0, r3
 8001eb8:	40da      	lsrs	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	425c      	negs	r4, r3
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ec2:	001c      	movs	r4, r3
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	bd30      	pop	{r4, r5, pc}
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <__aeabi_d2iz+0x64>)
 8001eca:	18cc      	adds	r4, r1, r3
 8001ecc:	e7fa      	b.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ece:	4d09      	ldr	r5, [pc, #36]	; (8001ef4 <__aeabi_d2iz+0x68>)
 8001ed0:	40e0      	lsrs	r0, r4
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	4463      	add	r3, ip
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	4303      	orrs	r3, r0
 8001edc:	e7ee      	b.n	8001ebc <__aeabi_d2iz+0x30>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000003fe 	.word	0x000003fe
 8001ee4:	0000041d 	.word	0x0000041d
 8001ee8:	00000433 	.word	0x00000433
 8001eec:	00000413 	.word	0x00000413
 8001ef0:	7fffffff 	.word	0x7fffffff
 8001ef4:	fffffbed 	.word	0xfffffbed

08001ef8 <__aeabi_i2d>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d02d      	beq.n	8001f5a <__aeabi_i2d+0x62>
 8001efe:	17c3      	asrs	r3, r0, #31
 8001f00:	18c5      	adds	r5, r0, r3
 8001f02:	405d      	eors	r5, r3
 8001f04:	0fc4      	lsrs	r4, r0, #31
 8001f06:	0028      	movs	r0, r5
 8001f08:	f000 f862 	bl	8001fd0 <__clzsi2>
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <__aeabi_i2d+0x6c>)
 8001f0e:	1a1b      	subs	r3, r3, r0
 8001f10:	055b      	lsls	r3, r3, #21
 8001f12:	0d5b      	lsrs	r3, r3, #21
 8001f14:	280a      	cmp	r0, #10
 8001f16:	dd15      	ble.n	8001f44 <__aeabi_i2d+0x4c>
 8001f18:	380b      	subs	r0, #11
 8001f1a:	4085      	lsls	r5, r0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	032d      	lsls	r5, r5, #12
 8001f20:	0b2d      	lsrs	r5, r5, #12
 8001f22:	2100      	movs	r1, #0
 8001f24:	0010      	movs	r0, r2
 8001f26:	032d      	lsls	r5, r5, #12
 8001f28:	0d0a      	lsrs	r2, r1, #20
 8001f2a:	0b2d      	lsrs	r5, r5, #12
 8001f2c:	0512      	lsls	r2, r2, #20
 8001f2e:	432a      	orrs	r2, r5
 8001f30:	4d0d      	ldr	r5, [pc, #52]	; (8001f68 <__aeabi_i2d+0x70>)
 8001f32:	051b      	lsls	r3, r3, #20
 8001f34:	402a      	ands	r2, r5
 8001f36:	4313      	orrs	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	07e4      	lsls	r4, r4, #31
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	0019      	movs	r1, r3
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	0002      	movs	r2, r0
 8001f46:	0029      	movs	r1, r5
 8001f48:	3215      	adds	r2, #21
 8001f4a:	4091      	lsls	r1, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	210b      	movs	r1, #11
 8001f50:	1a08      	subs	r0, r1, r0
 8001f52:	40c5      	lsrs	r5, r0
 8001f54:	032d      	lsls	r5, r5, #12
 8001f56:	0b2d      	lsrs	r5, r5, #12
 8001f58:	e7e3      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f5a:	2400      	movs	r4, #0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2500      	movs	r5, #0
 8001f60:	2200      	movs	r2, #0
 8001f62:	e7de      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f64:	0000041e 	.word	0x0000041e
 8001f68:	800fffff 	.word	0x800fffff

08001f6c <__aeabi_ui2d>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	1e04      	subs	r4, r0, #0
 8001f70:	d025      	beq.n	8001fbe <__aeabi_ui2d+0x52>
 8001f72:	f000 f82d 	bl	8001fd0 <__clzsi2>
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <__aeabi_ui2d+0x5c>)
 8001f78:	1a1b      	subs	r3, r3, r0
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	280a      	cmp	r0, #10
 8001f80:	dd12      	ble.n	8001fa8 <__aeabi_ui2d+0x3c>
 8001f82:	380b      	subs	r0, #11
 8001f84:	4084      	lsls	r4, r0
 8001f86:	2200      	movs	r2, #0
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	0010      	movs	r0, r2
 8001f90:	0324      	lsls	r4, r4, #12
 8001f92:	0d0a      	lsrs	r2, r1, #20
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	0512      	lsls	r2, r2, #20
 8001f98:	4322      	orrs	r2, r4
 8001f9a:	4c0c      	ldr	r4, [pc, #48]	; (8001fcc <__aeabi_ui2d+0x60>)
 8001f9c:	051b      	lsls	r3, r3, #20
 8001f9e:	4022      	ands	r2, r4
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	0859      	lsrs	r1, r3, #1
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	0002      	movs	r2, r0
 8001faa:	0021      	movs	r1, r4
 8001fac:	3215      	adds	r2, #21
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	210b      	movs	r1, #11
 8001fb4:	1a08      	subs	r0, r1, r0
 8001fb6:	40c4      	lsrs	r4, r0
 8001fb8:	0324      	lsls	r4, r4, #12
 8001fba:	0b24      	lsrs	r4, r4, #12
 8001fbc:	e7e6      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	e7e2      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	0000041e 	.word	0x0000041e
 8001fcc:	800fffff 	.word	0x800fffff

08001fd0 <__clzsi2>:
 8001fd0:	211c      	movs	r1, #28
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	4298      	cmp	r0, r3
 8001fd8:	d301      	bcc.n	8001fde <__clzsi2+0xe>
 8001fda:	0c00      	lsrs	r0, r0, #16
 8001fdc:	3910      	subs	r1, #16
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	4298      	cmp	r0, r3
 8001fe2:	d301      	bcc.n	8001fe8 <__clzsi2+0x18>
 8001fe4:	0a00      	lsrs	r0, r0, #8
 8001fe6:	3908      	subs	r1, #8
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	4298      	cmp	r0, r3
 8001fec:	d301      	bcc.n	8001ff2 <__clzsi2+0x22>
 8001fee:	0900      	lsrs	r0, r0, #4
 8001ff0:	3904      	subs	r1, #4
 8001ff2:	a202      	add	r2, pc, #8	; (adr r2, 8001ffc <__clzsi2+0x2c>)
 8001ff4:	5c10      	ldrb	r0, [r2, r0]
 8001ff6:	1840      	adds	r0, r0, r1
 8001ff8:	4770      	bx	lr
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	02020304 	.word	0x02020304
 8002000:	01010101 	.word	0x01010101
	...

0800200c <init_accel>:
#include "accel.h"

int init_accel(I2C_HandleTypeDef* i2c){
 800200c:	b5b0      	push	{r4, r5, r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af02      	add	r7, sp, #8
 8002012:	6078      	str	r0, [r7, #4]
	// Set output data rate to 50hz by writing to CTRL1 register
	// and turn on BDU
	uint8_t dat[2] = {0x20, 0x2F};
 8002014:	210c      	movs	r1, #12
 8002016:	187b      	adds	r3, r7, r1
 8002018:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <init_accel+0x88>)
 800201a:	8812      	ldrh	r2, [r2, #0]
 800201c:	801a      	strh	r2, [r3, #0]
	uint8_t buf = 0;
 800201e:	250b      	movs	r5, #11
 8002020:	197b      	adds	r3, r7, r5
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(i2c, ACC_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 8002026:	000c      	movs	r4, r1
 8002028:	187a      	adds	r2, r7, r1
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	2301      	movs	r3, #1
 800202e:	425b      	negs	r3, r3
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2302      	movs	r3, #2
 8002034:	213a      	movs	r1, #58	; 0x3a
 8002036:	f001 facf 	bl	80035d8 <HAL_I2C_Master_Transmit>
	// Set the full scale selection to +-4G, turn on auto increment reads
	dat[0] = 0x23;
 800203a:	0021      	movs	r1, r4
 800203c:	187b      	adds	r3, r7, r1
 800203e:	2223      	movs	r2, #35	; 0x23
 8002040:	701a      	strb	r2, [r3, #0]
	dat[1] = 0x24;
 8002042:	187b      	adds	r3, r7, r1
 8002044:	2224      	movs	r2, #36	; 0x24
 8002046:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(i2c, ACC_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 8002048:	000c      	movs	r4, r1
 800204a:	187a      	adds	r2, r7, r1
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	2301      	movs	r3, #1
 8002050:	425b      	negs	r3, r3
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2302      	movs	r3, #2
 8002056:	213a      	movs	r1, #58	; 0x3a
 8002058:	f001 fabe 	bl	80035d8 <HAL_I2C_Master_Transmit>

	// Read back the whoami register
	dat[0] = 0xF;
 800205c:	0021      	movs	r1, r4
 800205e:	187b      	adds	r3, r7, r1
 8002060:	220f      	movs	r2, #15
 8002062:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(i2c, ACC_ADDR_WR, &dat, 1, HAL_MAX_DELAY);
 8002064:	187a      	adds	r2, r7, r1
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	2301      	movs	r3, #1
 800206a:	425b      	negs	r3, r3
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	2301      	movs	r3, #1
 8002070:	213a      	movs	r1, #58	; 0x3a
 8002072:	f001 fab1 	bl	80035d8 <HAL_I2C_Master_Transmit>
	// Read the data back
	HAL_I2C_Master_Receive(i2c, ACC_ADDR_RD, &buf, 1, HAL_MAX_DELAY);
 8002076:	197a      	adds	r2, r7, r5
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	2301      	movs	r3, #1
 800207c:	425b      	negs	r3, r3
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2301      	movs	r3, #1
 8002082:	213b      	movs	r1, #59	; 0x3b
 8002084:	f001 fbb0 	bl	80037e8 <HAL_I2C_Master_Receive>
	return buf;
 8002088:	197b      	adds	r3, r7, r5
 800208a:	781b      	ldrb	r3, [r3, #0]
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	b004      	add	sp, #16
 8002092:	bdb0      	pop	{r4, r5, r7, pc}
 8002094:	08006a80 	.word	0x08006a80

08002098 <_get_16bit_reg>:

int16_t _get_16bit_reg(uint8_t start_addr, I2C_HandleTypeDef* i2c){
 8002098:	b5b0      	push	{r4, r5, r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af02      	add	r7, sp, #8
 800209e:	0002      	movs	r2, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	701a      	strb	r2, [r3, #0]
	uint8_t buf_l;
	uint8_t buf_h;
	// Get the lower bits from the register pair, write the address to the bus
	HAL_I2C_Master_Transmit(i2c, ACC_ADDR_WR, &start_addr, 1, HAL_MAX_DELAY);
 80020a6:	1dfa      	adds	r2, r7, #7
 80020a8:	6838      	ldr	r0, [r7, #0]
 80020aa:	2301      	movs	r3, #1
 80020ac:	425b      	negs	r3, r3
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2301      	movs	r3, #1
 80020b2:	213a      	movs	r1, #58	; 0x3a
 80020b4:	f001 fa90 	bl	80035d8 <HAL_I2C_Master_Transmit>
	// Read the data back
	HAL_I2C_Master_Receive(i2c, ACC_ADDR_RD, &buf_l, 1, HAL_MAX_DELAY);
 80020b8:	240f      	movs	r4, #15
 80020ba:	193a      	adds	r2, r7, r4
 80020bc:	6838      	ldr	r0, [r7, #0]
 80020be:	2301      	movs	r3, #1
 80020c0:	425b      	negs	r3, r3
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2301      	movs	r3, #1
 80020c6:	213b      	movs	r1, #59	; 0x3b
 80020c8:	f001 fb8e 	bl	80037e8 <HAL_I2C_Master_Receive>
	// Get the higher bits from the register pair, write the address to the bus
	start_addr = start_addr + 1;
 80020cc:	1dfb      	adds	r3, r7, #7
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	1dfb      	adds	r3, r7, #7
 80020d6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(i2c, ACC_ADDR_WR, &start_addr, 1, HAL_MAX_DELAY);
 80020d8:	1dfa      	adds	r2, r7, #7
 80020da:	6838      	ldr	r0, [r7, #0]
 80020dc:	2301      	movs	r3, #1
 80020de:	425b      	negs	r3, r3
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2301      	movs	r3, #1
 80020e4:	213a      	movs	r1, #58	; 0x3a
 80020e6:	f001 fa77 	bl	80035d8 <HAL_I2C_Master_Transmit>
	// Read the data back
	HAL_I2C_Master_Receive(i2c, ACC_ADDR_RD, &buf_h, 1, HAL_MAX_DELAY);
 80020ea:	250e      	movs	r5, #14
 80020ec:	197a      	adds	r2, r7, r5
 80020ee:	6838      	ldr	r0, [r7, #0]
 80020f0:	2301      	movs	r3, #1
 80020f2:	425b      	negs	r3, r3
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2301      	movs	r3, #1
 80020f8:	213b      	movs	r1, #59	; 0x3b
 80020fa:	f001 fb75 	bl	80037e8 <HAL_I2C_Master_Receive>
	// Return the formatted data
	return (buf_h << 8) | buf_l;
 80020fe:	197b      	adds	r3, r7, r5
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	b21a      	sxth	r2, r3
 8002106:	193b      	adds	r3, r7, r4
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b21b      	sxth	r3, r3
 800210c:	4313      	orrs	r3, r2
 800210e:	b21b      	sxth	r3, r3
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	b004      	add	sp, #16
 8002116:	bdb0      	pop	{r4, r5, r7, pc}

08002118 <get_x>:

int16_t get_x(I2C_HandleTypeDef* i2c){
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	return _get_16bit_reg(X_DATA_REG, i2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	0019      	movs	r1, r3
 8002124:	2028      	movs	r0, #40	; 0x28
 8002126:	f7ff ffb7 	bl	8002098 <_get_16bit_reg>
 800212a:	0003      	movs	r3, r0
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	b002      	add	sp, #8
 8002132:	bd80      	pop	{r7, pc}

08002134 <get_y>:

int16_t get_y(I2C_HandleTypeDef* i2c){
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	return _get_16bit_reg(Y_DATA_REG, i2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	0019      	movs	r1, r3
 8002140:	202a      	movs	r0, #42	; 0x2a
 8002142:	f7ff ffa9 	bl	8002098 <_get_16bit_reg>
 8002146:	0003      	movs	r3, r0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}

08002150 <get_z>:
int16_t get_z(I2C_HandleTypeDef* i2c){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	return _get_16bit_reg(Z_DATA_REG, i2c);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	0019      	movs	r1, r3
 800215c:	202c      	movs	r0, #44	; 0x2c
 800215e:	f7ff ff9b 	bl	8002098 <_get_16bit_reg>
 8002162:	0003      	movs	r3, r0
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}

0800216c <life>:
#include "conway.h"

int life(uint8_t x, uint8_t y){
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	0002      	movs	r2, r0
 8002174:	1dfb      	adds	r3, r7, #7
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	1dbb      	adds	r3, r7, #6
 800217a:	1c0a      	adds	r2, r1, #0
 800217c:	701a      	strb	r2, [r3, #0]
	uint8_t x_end;
	uint8_t y_end;

	uint8_t x_start;
	uint8_t y_start;
	uint8_t neighbors = 0;
 800217e:	230b      	movs	r3, #11
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
	// Set the bounds for looking for neighbors
	if(x == 0){
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10b      	bne.n	80021a6 <life+0x3a>
		x_start = x;
 800218e:	230d      	movs	r3, #13
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	1dfa      	adds	r2, r7, #7
 8002194:	7812      	ldrb	r2, [r2, #0]
 8002196:	701a      	strb	r2, [r3, #0]
		x_end = x + 1;
 8002198:	230f      	movs	r3, #15
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	1dfa      	adds	r2, r7, #7
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	3201      	adds	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e019      	b.n	80021da <life+0x6e>
	}
	else if(x == X_BND){
 80021a6:	1dfb      	adds	r3, r7, #7
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b07      	cmp	r3, #7
 80021ac:	d109      	bne.n	80021c2 <life+0x56>
		x_start = X_BND - 1;
 80021ae:	230d      	movs	r3, #13
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2206      	movs	r2, #6
 80021b4:	701a      	strb	r2, [r3, #0]
		x_end = x;
 80021b6:	230f      	movs	r3, #15
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	1dfa      	adds	r2, r7, #7
 80021bc:	7812      	ldrb	r2, [r2, #0]
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	e00b      	b.n	80021da <life+0x6e>
	}
	else{
		x_start = x - 1;
 80021c2:	230d      	movs	r3, #13
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	1dfa      	adds	r2, r7, #7
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	3a01      	subs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
		x_end = x + 1;
 80021ce:	230f      	movs	r3, #15
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	1dfa      	adds	r2, r7, #7
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	3201      	adds	r2, #1
 80021d8:	701a      	strb	r2, [r3, #0]
	}
	if(y == 0){
 80021da:	1dbb      	adds	r3, r7, #6
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10b      	bne.n	80021fa <life+0x8e>
		y_start = y;
 80021e2:	230c      	movs	r3, #12
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	1dba      	adds	r2, r7, #6
 80021e8:	7812      	ldrb	r2, [r2, #0]
 80021ea:	701a      	strb	r2, [r3, #0]
		y_end = y + 1;
 80021ec:	230e      	movs	r3, #14
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	1dba      	adds	r2, r7, #6
 80021f2:	7812      	ldrb	r2, [r2, #0]
 80021f4:	3201      	adds	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	e019      	b.n	800222e <life+0xc2>
	}
	else if(y == Y_BND){
 80021fa:	1dbb      	adds	r3, r7, #6
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b11      	cmp	r3, #17
 8002200:	d109      	bne.n	8002216 <life+0xaa>
		y_start = Y_BND - 1;
 8002202:	230c      	movs	r3, #12
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	2210      	movs	r2, #16
 8002208:	701a      	strb	r2, [r3, #0]
		y_end = y;
 800220a:	230e      	movs	r3, #14
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	1dba      	adds	r2, r7, #6
 8002210:	7812      	ldrb	r2, [r2, #0]
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	e00b      	b.n	800222e <life+0xc2>
	}
	else{
		y_start = y - 1;
 8002216:	230c      	movs	r3, #12
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	1dba      	adds	r2, r7, #6
 800221c:	7812      	ldrb	r2, [r2, #0]
 800221e:	3a01      	subs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
		y_end = y + 1;
 8002222:	230e      	movs	r3, #14
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	1dba      	adds	r2, r7, #6
 8002228:	7812      	ldrb	r2, [r2, #0]
 800222a:	3201      	adds	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
	}
	for(uint8_t y_index = y_start; y_index <= y_end; y_index++){
 800222e:	230a      	movs	r3, #10
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	220c      	movs	r2, #12
 8002234:	18ba      	adds	r2, r7, r2
 8002236:	7812      	ldrb	r2, [r2, #0]
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e03c      	b.n	80022b6 <life+0x14a>
		for(uint8_t x_index = x_start; x_index <= x_end; x_index++){
 800223c:	2309      	movs	r3, #9
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	220d      	movs	r2, #13
 8002242:	18ba      	adds	r2, r7, r2
 8002244:	7812      	ldrb	r2, [r2, #0]
 8002246:	701a      	strb	r2, [r3, #0]
 8002248:	e027      	b.n	800229a <life+0x12e>
			if((active_fbuf[y_index * MTX_WIDTH + x_index] != 0) &&
 800224a:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <life+0x208>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	220a      	movs	r2, #10
 8002250:	18ba      	adds	r2, r7, r2
 8002252:	7812      	ldrb	r2, [r2, #0]
 8002254:	00d1      	lsls	r1, r2, #3
 8002256:	2209      	movs	r2, #9
 8002258:	18ba      	adds	r2, r7, r2
 800225a:	7812      	ldrb	r2, [r2, #0]
 800225c:	188a      	adds	r2, r1, r2
 800225e:	189b      	adds	r3, r3, r2
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d013      	beq.n	800228e <life+0x122>
 8002266:	1dfa      	adds	r2, r7, #7
 8002268:	2309      	movs	r3, #9
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d106      	bne.n	8002282 <life+0x116>
					!((x == x_index) && (y == y_index))){
 8002274:	1dba      	adds	r2, r7, #6
 8002276:	230a      	movs	r3, #10
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	7812      	ldrb	r2, [r2, #0]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d005      	beq.n	800228e <life+0x122>
				neighbors++;
 8002282:	210b      	movs	r1, #11
 8002284:	187b      	adds	r3, r7, r1
 8002286:	781a      	ldrb	r2, [r3, #0]
 8002288:	187b      	adds	r3, r7, r1
 800228a:	3201      	adds	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
		for(uint8_t x_index = x_start; x_index <= x_end; x_index++){
 800228e:	2109      	movs	r1, #9
 8002290:	187b      	adds	r3, r7, r1
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	187b      	adds	r3, r7, r1
 8002296:	3201      	adds	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	2309      	movs	r3, #9
 800229c:	18fa      	adds	r2, r7, r3
 800229e:	230f      	movs	r3, #15
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	7812      	ldrb	r2, [r2, #0]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d9cf      	bls.n	800224a <life+0xde>
	for(uint8_t y_index = y_start; y_index <= y_end; y_index++){
 80022aa:	210a      	movs	r1, #10
 80022ac:	187b      	adds	r3, r7, r1
 80022ae:	781a      	ldrb	r2, [r3, #0]
 80022b0:	187b      	adds	r3, r7, r1
 80022b2:	3201      	adds	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	230a      	movs	r3, #10
 80022b8:	18fa      	adds	r2, r7, r3
 80022ba:	230e      	movs	r3, #14
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	7812      	ldrb	r2, [r2, #0]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d9ba      	bls.n	800223c <life+0xd0>
			}
		}
	}
	// Any cell with less than 2 neighbors dies of loneliness
	if(active_fbuf[y * MTX_WIDTH + x] != 0 && neighbors < 2){
 80022c6:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <life+0x208>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	1dba      	adds	r2, r7, #6
 80022cc:	7812      	ldrb	r2, [r2, #0]
 80022ce:	00d1      	lsls	r1, r2, #3
 80022d0:	1dfa      	adds	r2, r7, #7
 80022d2:	7812      	ldrb	r2, [r2, #0]
 80022d4:	188a      	adds	r2, r1, r2
 80022d6:	189b      	adds	r3, r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <life+0x180>
 80022de:	230b      	movs	r3, #11
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d801      	bhi.n	80022ec <life+0x180>
		return 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	e03e      	b.n	800236a <life+0x1fe>
	}
	// Any living cell with 2 or 3 neighbors lives on to the next generation
	else if((active_fbuf[y * MTX_WIDTH + x] != 0) && (neighbors == 2 || neighbors == 3)){
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <life+0x208>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	1dba      	adds	r2, r7, #6
 80022f2:	7812      	ldrb	r2, [r2, #0]
 80022f4:	00d1      	lsls	r1, r2, #3
 80022f6:	1dfa      	adds	r2, r7, #7
 80022f8:	7812      	ldrb	r2, [r2, #0]
 80022fa:	188a      	adds	r2, r1, r2
 80022fc:	189b      	adds	r3, r3, r2
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00b      	beq.n	800231c <life+0x1b0>
 8002304:	230b      	movs	r3, #11
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d004      	beq.n	8002318 <life+0x1ac>
 800230e:	230b      	movs	r3, #11
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d101      	bne.n	800231c <life+0x1b0>
		return 1;
 8002318:	2301      	movs	r3, #1
 800231a:	e026      	b.n	800236a <life+0x1fe>
	}
	// Any cell with more than 3 neighbors dies of overpopulation
	else if(active_fbuf[y * MTX_WIDTH + x] != 0 && neighbors > 3){
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <life+0x208>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	1dba      	adds	r2, r7, #6
 8002322:	7812      	ldrb	r2, [r2, #0]
 8002324:	00d1      	lsls	r1, r2, #3
 8002326:	1dfa      	adds	r2, r7, #7
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	188a      	adds	r2, r1, r2
 800232c:	189b      	adds	r3, r3, r2
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <life+0x1d6>
 8002334:	230b      	movs	r3, #11
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b03      	cmp	r3, #3
 800233c:	d901      	bls.n	8002342 <life+0x1d6>
		return 0;
 800233e:	2300      	movs	r3, #0
 8002340:	e013      	b.n	800236a <life+0x1fe>
	}
	// Any dead cell with exactly three neighbors is born
	else if(active_fbuf[y * MTX_WIDTH + x] == 0 && neighbors == 3){
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <life+0x208>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1dba      	adds	r2, r7, #6
 8002348:	7812      	ldrb	r2, [r2, #0]
 800234a:	00d1      	lsls	r1, r2, #3
 800234c:	1dfa      	adds	r2, r7, #7
 800234e:	7812      	ldrb	r2, [r2, #0]
 8002350:	188a      	adds	r2, r1, r2
 8002352:	189b      	adds	r3, r3, r2
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <life+0x1fc>
 800235a:	230b      	movs	r3, #11
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d101      	bne.n	8002368 <life+0x1fc>
		return 1;
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <life+0x1fe>
	}
	// MISRA
	else{
		return 0;
 8002368:	2300      	movs	r3, #0
	}

}
 800236a:	0018      	movs	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	b004      	add	sp, #16
 8002370:	bd80      	pop	{r7, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	20000324 	.word	0x20000324

08002378 <conway_demo>:

void conway_demo(I2C_HandleTypeDef* hi2c){
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	stop_conway = 0;
 8002380:	4b34      	ldr	r3, [pc, #208]	; (8002454 <conway_demo+0xdc>)
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
	// Seed Conway's game of life with a glider
	next_fbuf[0 * MTX_WIDTH + 1] = 0xFF;
 8002386:	4b34      	ldr	r3, [pc, #208]	; (8002458 <conway_demo+0xe0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3301      	adds	r3, #1
 800238c:	22ff      	movs	r2, #255	; 0xff
 800238e:	701a      	strb	r2, [r3, #0]
	next_fbuf[1 * MTX_WIDTH + 2] = 0xFF;
 8002390:	4b31      	ldr	r3, [pc, #196]	; (8002458 <conway_demo+0xe0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	330a      	adds	r3, #10
 8002396:	22ff      	movs	r2, #255	; 0xff
 8002398:	701a      	strb	r2, [r3, #0]
	next_fbuf[2 * MTX_WIDTH + 0] = 0xFF;
 800239a:	4b2f      	ldr	r3, [pc, #188]	; (8002458 <conway_demo+0xe0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3310      	adds	r3, #16
 80023a0:	22ff      	movs	r2, #255	; 0xff
 80023a2:	701a      	strb	r2, [r3, #0]
	next_fbuf[2 * MTX_WIDTH + 1] = 0xFF;
 80023a4:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <conway_demo+0xe0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3311      	adds	r3, #17
 80023aa:	22ff      	movs	r2, #255	; 0xff
 80023ac:	701a      	strb	r2, [r3, #0]
	next_fbuf[2 * MTX_WIDTH + 2] = 0xFF;
 80023ae:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <conway_demo+0xe0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3312      	adds	r3, #18
 80023b4:	22ff      	movs	r2, #255	; 0xff
 80023b6:	701a      	strb	r2, [r3, #0]
	update_fbuf(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	0018      	movs	r0, r3
 80023bc:	f000 fb5e 	bl	8002a7c <update_fbuf>
	while (!stop_conway){
 80023c0:	e03f      	b.n	8002442 <conway_demo+0xca>
		for(uint8_t y = 0; y < 18; y++){
 80023c2:	230f      	movs	r3, #15
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	e02e      	b.n	800242a <conway_demo+0xb2>
			for(uint8_t x = 0; x < 8; x++){
 80023cc:	230e      	movs	r3, #14
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e01e      	b.n	8002414 <conway_demo+0x9c>
				if(life(x, y)){
 80023d6:	230f      	movs	r3, #15
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	230e      	movs	r3, #14
 80023de:	18fb      	adds	r3, r7, r3
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	0011      	movs	r1, r2
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7ff fec1 	bl	800216c <life>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d00c      	beq.n	8002408 <conway_demo+0x90>
					next_fbuf[y * MTX_WIDTH + x] = 0xFF;
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <conway_demo+0xe0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	220f      	movs	r2, #15
 80023f4:	18ba      	adds	r2, r7, r2
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	00d1      	lsls	r1, r2, #3
 80023fa:	220e      	movs	r2, #14
 80023fc:	18ba      	adds	r2, r7, r2
 80023fe:	7812      	ldrb	r2, [r2, #0]
 8002400:	188a      	adds	r2, r1, r2
 8002402:	189b      	adds	r3, r3, r2
 8002404:	22ff      	movs	r2, #255	; 0xff
 8002406:	701a      	strb	r2, [r3, #0]
			for(uint8_t x = 0; x < 8; x++){
 8002408:	210e      	movs	r1, #14
 800240a:	187b      	adds	r3, r7, r1
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	187b      	adds	r3, r7, r1
 8002410:	3201      	adds	r2, #1
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	230e      	movs	r3, #14
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b07      	cmp	r3, #7
 800241c:	d9db      	bls.n	80023d6 <conway_demo+0x5e>
		for(uint8_t y = 0; y < 18; y++){
 800241e:	210f      	movs	r1, #15
 8002420:	187b      	adds	r3, r7, r1
 8002422:	781a      	ldrb	r2, [r3, #0]
 8002424:	187b      	adds	r3, r7, r1
 8002426:	3201      	adds	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	230f      	movs	r3, #15
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b11      	cmp	r3, #17
 8002432:	d9cb      	bls.n	80023cc <conway_demo+0x54>
				}
			}
		}
		HAL_Delay(100);
 8002434:	2064      	movs	r0, #100	; 0x64
 8002436:	f000 fde3 	bl	8003000 <HAL_Delay>
		update_fbuf(hi2c);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f000 fb1d 	bl	8002a7c <update_fbuf>
	while (!stop_conway){
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <conway_demo+0xdc>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ba      	beq.n	80023c2 <conway_demo+0x4a>
	}
}
 800244c:	46c0      	nop			; (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b004      	add	sp, #16
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000320 	.word	0x20000320
 8002458:	200003bc 	.word	0x200003bc

0800245c <doggo_demo>:
		0x00, 0xFF, 0xFF, 0xFF,
		0x00, 0x00, 0x00, 0xFF,
		0x00, 0x00, 0x00, 0xFF,
		0x00, 0x00, 0xFF, 0xFF,
};
int doggo_demo(I2C_HandleTypeDef* hi2c){
 800245c:	b5b0      	push	{r4, r5, r7, lr}
 800245e:	b08e      	sub	sp, #56	; 0x38
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	struct img left_dog_eye;
	left_dog_eye.bitmap = eye_bmp;
 8002464:	2128      	movs	r1, #40	; 0x28
 8002466:	187b      	adds	r3, r7, r1
 8002468:	4a78      	ldr	r2, [pc, #480]	; (800264c <doggo_demo+0x1f0>)
 800246a:	601a      	str	r2, [r3, #0]
	left_dog_eye.width = 6;
 800246c:	187b      	adds	r3, r7, r1
 800246e:	2206      	movs	r2, #6
 8002470:	711a      	strb	r2, [r3, #4]
	left_dog_eye.height = 7;
 8002472:	187b      	adds	r3, r7, r1
 8002474:	2207      	movs	r2, #7
 8002476:	715a      	strb	r2, [r3, #5]
	left_dog_eye.x = 0;
 8002478:	187b      	adds	r3, r7, r1
 800247a:	2200      	movs	r2, #0
 800247c:	719a      	strb	r2, [r3, #6]
	left_dog_eye.y = 0;
 800247e:	187b      	adds	r3, r7, r1
 8002480:	2200      	movs	r2, #0
 8002482:	71da      	strb	r2, [r3, #7]

	struct img right_dog_eye;
	right_dog_eye.bitmap = eye_bmp;
 8002484:	2120      	movs	r1, #32
 8002486:	187b      	adds	r3, r7, r1
 8002488:	4a70      	ldr	r2, [pc, #448]	; (800264c <doggo_demo+0x1f0>)
 800248a:	601a      	str	r2, [r3, #0]
	right_dog_eye.width = 6;
 800248c:	187b      	adds	r3, r7, r1
 800248e:	2206      	movs	r2, #6
 8002490:	711a      	strb	r2, [r3, #4]
	right_dog_eye.height = 7;
 8002492:	187b      	adds	r3, r7, r1
 8002494:	2207      	movs	r2, #7
 8002496:	715a      	strb	r2, [r3, #5]
	right_dog_eye.x = 0;
 8002498:	187b      	adds	r3, r7, r1
 800249a:	2200      	movs	r2, #0
 800249c:	719a      	strb	r2, [r3, #6]
	right_dog_eye.y = 9;
 800249e:	187b      	adds	r3, r7, r1
 80024a0:	2209      	movs	r2, #9
 80024a2:	71da      	strb	r2, [r3, #7]

	struct img left_dog_pupil;
	left_dog_pupil.bitmap = pupil_bmp;
 80024a4:	2118      	movs	r1, #24
 80024a6:	187b      	adds	r3, r7, r1
 80024a8:	4a69      	ldr	r2, [pc, #420]	; (8002650 <doggo_demo+0x1f4>)
 80024aa:	601a      	str	r2, [r3, #0]
	left_dog_pupil.width = 1;
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	2201      	movs	r2, #1
 80024b0:	711a      	strb	r2, [r3, #4]
	left_dog_pupil.height = 1;
 80024b2:	187b      	adds	r3, r7, r1
 80024b4:	2201      	movs	r2, #1
 80024b6:	715a      	strb	r2, [r3, #5]
	left_dog_pupil.x = 2;
 80024b8:	187b      	adds	r3, r7, r1
 80024ba:	2202      	movs	r2, #2
 80024bc:	719a      	strb	r2, [r3, #6]
	left_dog_pupil.y = 3;
 80024be:	187b      	adds	r3, r7, r1
 80024c0:	2203      	movs	r2, #3
 80024c2:	71da      	strb	r2, [r3, #7]

	struct img right_dog_pupil;
	right_dog_pupil.bitmap = pupil_bmp;
 80024c4:	2110      	movs	r1, #16
 80024c6:	187b      	adds	r3, r7, r1
 80024c8:	4a61      	ldr	r2, [pc, #388]	; (8002650 <doggo_demo+0x1f4>)
 80024ca:	601a      	str	r2, [r3, #0]
	right_dog_pupil.width = 1;
 80024cc:	187b      	adds	r3, r7, r1
 80024ce:	2201      	movs	r2, #1
 80024d0:	711a      	strb	r2, [r3, #4]
	right_dog_pupil.height = 1;
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	2201      	movs	r2, #1
 80024d6:	715a      	strb	r2, [r3, #5]
	right_dog_pupil.x = 2;
 80024d8:	187b      	adds	r3, r7, r1
 80024da:	2202      	movs	r2, #2
 80024dc:	719a      	strb	r2, [r3, #6]
	right_dog_pupil.y = 12;
 80024de:	187b      	adds	r3, r7, r1
 80024e0:	220c      	movs	r2, #12
 80024e2:	71da      	strb	r2, [r3, #7]

	struct img dog_mouth;
	dog_mouth.bitmap = mouth_bmp;
 80024e4:	2108      	movs	r1, #8
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	4a5a      	ldr	r2, [pc, #360]	; (8002654 <doggo_demo+0x1f8>)
 80024ea:	601a      	str	r2, [r3, #0]
	dog_mouth.width = 4;
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	2204      	movs	r2, #4
 80024f0:	711a      	strb	r2, [r3, #4]
	dog_mouth.height = 7;
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	2207      	movs	r2, #7
 80024f6:	715a      	strb	r2, [r3, #5]
	dog_mouth.x = 4;
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2204      	movs	r2, #4
 80024fc:	719a      	strb	r2, [r3, #6]
	dog_mouth.y = 5;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2205      	movs	r2, #5
 8002502:	71da      	strb	r2, [r3, #7]

	// Goes to +-8000 on its side
	int16_t x = 0;
 8002504:	2336      	movs	r3, #54	; 0x36
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	2200      	movs	r2, #0
 800250a:	801a      	strh	r2, [r3, #0]
	int16_t y = 0;
 800250c:	2334      	movs	r3, #52	; 0x34
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	2200      	movs	r2, #0
 8002512:	801a      	strh	r2, [r3, #0]
	int16_t z = 0;
 8002514:	2332      	movs	r3, #50	; 0x32
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	2200      	movs	r2, #0
 800251a:	801a      	strh	r2, [r3, #0]

	while(1){
		x = get_x(hi2c);
 800251c:	2336      	movs	r3, #54	; 0x36
 800251e:	18fc      	adds	r4, r7, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	0018      	movs	r0, r3
 8002524:	f7ff fdf8 	bl	8002118 <get_x>
 8002528:	0003      	movs	r3, r0
 800252a:	8023      	strh	r3, [r4, #0]
		y = get_y(hi2c);
 800252c:	2534      	movs	r5, #52	; 0x34
 800252e:	197c      	adds	r4, r7, r5
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	0018      	movs	r0, r3
 8002534:	f7ff fdfe 	bl	8002134 <get_y>
 8002538:	0003      	movs	r3, r0
 800253a:	8023      	strh	r3, [r4, #0]
		z = get_z(hi2c);
 800253c:	2332      	movs	r3, #50	; 0x32
 800253e:	18fc      	adds	r4, r7, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	0018      	movs	r0, r3
 8002544:	f7ff fe04 	bl	8002150 <get_z>
 8002548:	0003      	movs	r3, r0
 800254a:	8023      	strh	r3, [r4, #0]
		if(y > 4000){
 800254c:	197b      	adds	r3, r7, r5
 800254e:	2200      	movs	r2, #0
 8002550:	5e9a      	ldrsh	r2, [r3, r2]
 8002552:	23fa      	movs	r3, #250	; 0xfa
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	429a      	cmp	r2, r3
 8002558:	dd07      	ble.n	800256a <doggo_demo+0x10e>
			right_dog_pupil.y = 14;
 800255a:	2310      	movs	r3, #16
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	220e      	movs	r2, #14
 8002560:	71da      	strb	r2, [r3, #7]
			left_dog_pupil.y = 5;
 8002562:	2318      	movs	r3, #24
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2205      	movs	r2, #5
 8002568:	71da      	strb	r2, [r3, #7]
		}
		if(y < 4000 && y > 2000){
 800256a:	2334      	movs	r3, #52	; 0x34
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2200      	movs	r2, #0
 8002570:	5e9b      	ldrsh	r3, [r3, r2]
 8002572:	4a39      	ldr	r2, [pc, #228]	; (8002658 <doggo_demo+0x1fc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	dc0f      	bgt.n	8002598 <doggo_demo+0x13c>
 8002578:	2334      	movs	r3, #52	; 0x34
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2200      	movs	r2, #0
 800257e:	5e9a      	ldrsh	r2, [r3, r2]
 8002580:	23fa      	movs	r3, #250	; 0xfa
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	429a      	cmp	r2, r3
 8002586:	dd07      	ble.n	8002598 <doggo_demo+0x13c>
			right_dog_pupil.y = 13;
 8002588:	2310      	movs	r3, #16
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	220d      	movs	r2, #13
 800258e:	71da      	strb	r2, [r3, #7]
			left_dog_pupil.y = 4;
 8002590:	2318      	movs	r3, #24
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	2204      	movs	r2, #4
 8002596:	71da      	strb	r2, [r3, #7]
		}
		if(y < 2000 && y < -2000){
 8002598:	2334      	movs	r3, #52	; 0x34
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	2200      	movs	r2, #0
 800259e:	5e9b      	ldrsh	r3, [r3, r2]
 80025a0:	4a2e      	ldr	r2, [pc, #184]	; (800265c <doggo_demo+0x200>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	dc0e      	bgt.n	80025c4 <doggo_demo+0x168>
 80025a6:	2334      	movs	r3, #52	; 0x34
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	2200      	movs	r2, #0
 80025ac:	5e9b      	ldrsh	r3, [r3, r2]
 80025ae:	4a2c      	ldr	r2, [pc, #176]	; (8002660 <doggo_demo+0x204>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	da07      	bge.n	80025c4 <doggo_demo+0x168>
			right_dog_pupil.y = 12;
 80025b4:	2310      	movs	r3, #16
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	220c      	movs	r2, #12
 80025ba:	71da      	strb	r2, [r3, #7]
			left_dog_pupil.y = 3;
 80025bc:	2318      	movs	r3, #24
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	2203      	movs	r2, #3
 80025c2:	71da      	strb	r2, [r3, #7]
		}
		if(y < -2000 && y > -4000){
 80025c4:	2334      	movs	r3, #52	; 0x34
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	2200      	movs	r2, #0
 80025ca:	5e9b      	ldrsh	r3, [r3, r2]
 80025cc:	4a24      	ldr	r2, [pc, #144]	; (8002660 <doggo_demo+0x204>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	da0e      	bge.n	80025f0 <doggo_demo+0x194>
 80025d2:	2334      	movs	r3, #52	; 0x34
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	2200      	movs	r2, #0
 80025d8:	5e9b      	ldrsh	r3, [r3, r2]
 80025da:	4a22      	ldr	r2, [pc, #136]	; (8002664 <doggo_demo+0x208>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	db07      	blt.n	80025f0 <doggo_demo+0x194>
			right_dog_pupil.y = 11;
 80025e0:	2310      	movs	r3, #16
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	220b      	movs	r2, #11
 80025e6:	71da      	strb	r2, [r3, #7]
			left_dog_pupil.y = 2;
 80025e8:	2318      	movs	r3, #24
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	2202      	movs	r2, #2
 80025ee:	71da      	strb	r2, [r3, #7]
		}
		if(-4000 > y){
 80025f0:	2334      	movs	r3, #52	; 0x34
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	2200      	movs	r2, #0
 80025f6:	5e9b      	ldrsh	r3, [r3, r2]
 80025f8:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <doggo_demo+0x20c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	da07      	bge.n	800260e <doggo_demo+0x1b2>
			right_dog_pupil.y = 10;
 80025fe:	2310      	movs	r3, #16
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	220a      	movs	r2, #10
 8002604:	71da      	strb	r2, [r3, #7]
			left_dog_pupil.y = 21;
 8002606:	2318      	movs	r3, #24
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	2215      	movs	r2, #21
 800260c:	71da      	strb	r2, [r3, #7]
		}
		draw_image(&left_dog_eye);
 800260e:	2328      	movs	r3, #40	; 0x28
 8002610:	18fb      	adds	r3, r7, r3
 8002612:	0018      	movs	r0, r3
 8002614:	f000 f82a 	bl	800266c <draw_image>
		draw_image(&right_dog_eye);
 8002618:	2320      	movs	r3, #32
 800261a:	18fb      	adds	r3, r7, r3
 800261c:	0018      	movs	r0, r3
 800261e:	f000 f825 	bl	800266c <draw_image>
		draw_image(&left_dog_pupil);
 8002622:	2318      	movs	r3, #24
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	0018      	movs	r0, r3
 8002628:	f000 f820 	bl	800266c <draw_image>
		draw_image(&right_dog_pupil);
 800262c:	2310      	movs	r3, #16
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	0018      	movs	r0, r3
 8002632:	f000 f81b 	bl	800266c <draw_image>
		draw_image(&dog_mouth);
 8002636:	2308      	movs	r3, #8
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	0018      	movs	r0, r3
 800263c:	f000 f816 	bl	800266c <draw_image>
		update_fbuf(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	0018      	movs	r0, r3
 8002644:	f000 fa1a 	bl	8002a7c <update_fbuf>
		x = get_x(hi2c);
 8002648:	e768      	b.n	800251c <doggo_demo+0xc0>
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	08006b28 	.word	0x08006b28
 8002650:	08006b54 	.word	0x08006b54
 8002654:	08006b58 	.word	0x08006b58
 8002658:	00000f9f 	.word	0x00000f9f
 800265c:	000007cf 	.word	0x000007cf
 8002660:	fffff830 	.word	0xfffff830
 8002664:	fffff061 	.word	0xfffff061
 8002668:	fffff060 	.word	0xfffff060

0800266c <draw_image>:
#include "img.h"

void draw_image(struct img* image){
 800266c:	b5b0      	push	{r4, r5, r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	for(uint8_t y = 0; y < image->height; y++){
 8002674:	230f      	movs	r3, #15
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e036      	b.n	80026ec <draw_image+0x80>
		for(uint8_t x = 0; x < image->width; x++){
 800267e:	230e      	movs	r3, #14
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e024      	b.n	80026d2 <draw_image+0x66>
			next_fbuf[((y + image->y) * MTX_WIDTH) + (x + image->x)] =  image->bitmap[(y * image->width) + x];
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	200f      	movs	r0, #15
 800268e:	183a      	adds	r2, r7, r0
 8002690:	7812      	ldrb	r2, [r2, #0]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	7909      	ldrb	r1, [r1, #4]
 8002696:	4351      	muls	r1, r2
 8002698:	240e      	movs	r4, #14
 800269a:	193a      	adds	r2, r7, r4
 800269c:	7812      	ldrb	r2, [r2, #0]
 800269e:	188a      	adds	r2, r1, r2
 80026a0:	189a      	adds	r2, r3, r2
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <draw_image+0x98>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	1839      	adds	r1, r7, r0
 80026a8:	7809      	ldrb	r1, [r1, #0]
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	79c0      	ldrb	r0, [r0, #7]
 80026ae:	1809      	adds	r1, r1, r0
 80026b0:	00c8      	lsls	r0, r1, #3
 80026b2:	0025      	movs	r5, r4
 80026b4:	1939      	adds	r1, r7, r4
 80026b6:	7809      	ldrb	r1, [r1, #0]
 80026b8:	687c      	ldr	r4, [r7, #4]
 80026ba:	79a4      	ldrb	r4, [r4, #6]
 80026bc:	1909      	adds	r1, r1, r4
 80026be:	1841      	adds	r1, r0, r1
 80026c0:	185b      	adds	r3, r3, r1
 80026c2:	7812      	ldrb	r2, [r2, #0]
 80026c4:	701a      	strb	r2, [r3, #0]
		for(uint8_t x = 0; x < image->width; x++){
 80026c6:	002c      	movs	r4, r5
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	193b      	adds	r3, r7, r4
 80026ce:	3201      	adds	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	791b      	ldrb	r3, [r3, #4]
 80026d6:	220e      	movs	r2, #14
 80026d8:	18ba      	adds	r2, r7, r2
 80026da:	7812      	ldrb	r2, [r2, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d3d3      	bcc.n	8002688 <draw_image+0x1c>
	for(uint8_t y = 0; y < image->height; y++){
 80026e0:	210f      	movs	r1, #15
 80026e2:	187b      	adds	r3, r7, r1
 80026e4:	781a      	ldrb	r2, [r3, #0]
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	3201      	adds	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	795b      	ldrb	r3, [r3, #5]
 80026f0:	220f      	movs	r2, #15
 80026f2:	18ba      	adds	r2, r7, r2
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d3c1      	bcc.n	800267e <draw_image+0x12>
		}
	}
}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b004      	add	sp, #16
 8002700:	bdb0      	pop	{r4, r5, r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	200003bc 	.word	0x200003bc

08002708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800270c:	f000 fc48 	bl	8002fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002710:	f000 f818 	bl	8002744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002714:	f000 f8ae 	bl	8002874 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002718:	f000 f86c 	bl	80027f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  init_matrix(&hi2c1);
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <main+0x38>)
 800271e:	0018      	movs	r0, r3
 8002720:	f000 f92e 	bl	8002980 <init_matrix>
  init_accel(&hi2c1);
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <main+0x38>)
 8002726:	0018      	movs	r0, r3
 8002728:	f7ff fc70 	bl	800200c <init_accel>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  doggo_demo(&hi2c1);
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <main+0x38>)
 800272e:	0018      	movs	r0, r3
 8002730:	f7ff fe94 	bl	800245c <doggo_demo>
	  conway_demo(&hi2c1);
 8002734:	4b02      	ldr	r3, [pc, #8]	; (8002740 <main+0x38>)
 8002736:	0018      	movs	r0, r3
 8002738:	f7ff fe1e 	bl	8002378 <conway_demo>
	  doggo_demo(&hi2c1);
 800273c:	e7f6      	b.n	800272c <main+0x24>
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	200003f4 	.word	0x200003f4

08002744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b099      	sub	sp, #100	; 0x64
 8002748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800274a:	242c      	movs	r4, #44	; 0x2c
 800274c:	193b      	adds	r3, r7, r4
 800274e:	0018      	movs	r0, r3
 8002750:	2334      	movs	r3, #52	; 0x34
 8002752:	001a      	movs	r2, r3
 8002754:	2100      	movs	r1, #0
 8002756:	f002 fc26 	bl	8004fa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800275a:	231c      	movs	r3, #28
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	0018      	movs	r0, r3
 8002760:	2310      	movs	r3, #16
 8002762:	001a      	movs	r2, r3
 8002764:	2100      	movs	r1, #0
 8002766:	f002 fc1e 	bl	8004fa6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	0018      	movs	r0, r3
 800276e:	2318      	movs	r3, #24
 8002770:	001a      	movs	r2, r3
 8002772:	2100      	movs	r1, #0
 8002774:	f002 fc17 	bl	8004fa6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002778:	0021      	movs	r1, r4
 800277a:	187b      	adds	r3, r7, r1
 800277c:	2202      	movs	r2, #2
 800277e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002780:	187b      	adds	r3, r7, r1
 8002782:	2201      	movs	r2, #1
 8002784:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002786:	187b      	adds	r3, r7, r1
 8002788:	2210      	movs	r2, #16
 800278a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800278c:	187b      	adds	r3, r7, r1
 800278e:	2200      	movs	r2, #0
 8002790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002792:	187b      	adds	r3, r7, r1
 8002794:	0018      	movs	r0, r3
 8002796:	f001 fbab 	bl	8003ef0 <HAL_RCC_OscConfig>
 800279a:	1e03      	subs	r3, r0, #0
 800279c:	d001      	beq.n	80027a2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800279e:	f000 f8e9 	bl	8002974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027a2:	211c      	movs	r1, #28
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	2207      	movs	r2, #7
 80027a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027aa:	187b      	adds	r3, r7, r1
 80027ac:	2200      	movs	r2, #0
 80027ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	2100      	movs	r1, #0
 80027c0:	0018      	movs	r0, r3
 80027c2:	f001 ff1b 	bl	80045fc <HAL_RCC_ClockConfig>
 80027c6:	1e03      	subs	r3, r0, #0
 80027c8:	d001      	beq.n	80027ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80027ca:	f000 f8d3 	bl	8002974 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	2220      	movs	r2, #32
 80027d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	2200      	movs	r2, #0
 80027d8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	0018      	movs	r0, r3
 80027de:	f002 f8af 	bl	8004940 <HAL_RCCEx_PeriphCLKConfig>
 80027e2:	1e03      	subs	r3, r0, #0
 80027e4:	d001      	beq.n	80027ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80027e6:	f000 f8c5 	bl	8002974 <Error_Handler>
  }
}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b019      	add	sp, #100	; 0x64
 80027f0:	bd90      	pop	{r4, r7, pc}
	...

080027f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <MX_I2C1_Init+0x74>)
 80027fa:	4a1c      	ldr	r2, [pc, #112]	; (800286c <MX_I2C1_Init+0x78>)
 80027fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80027fe:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <MX_I2C1_Init+0x74>)
 8002800:	4a1b      	ldr	r2, [pc, #108]	; (8002870 <MX_I2C1_Init+0x7c>)
 8002802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002804:	4b18      	ldr	r3, [pc, #96]	; (8002868 <MX_I2C1_Init+0x74>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <MX_I2C1_Init+0x74>)
 800280c:	2201      	movs	r2, #1
 800280e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <MX_I2C1_Init+0x74>)
 8002812:	2200      	movs	r2, #0
 8002814:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <MX_I2C1_Init+0x74>)
 8002818:	2200      	movs	r2, #0
 800281a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <MX_I2C1_Init+0x74>)
 800281e:	2200      	movs	r2, #0
 8002820:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <MX_I2C1_Init+0x74>)
 8002824:	2200      	movs	r2, #0
 8002826:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <MX_I2C1_Init+0x74>)
 800282a:	2200      	movs	r2, #0
 800282c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <MX_I2C1_Init+0x74>)
 8002830:	0018      	movs	r0, r3
 8002832:	f000 fe3b 	bl	80034ac <HAL_I2C_Init>
 8002836:	1e03      	subs	r3, r0, #0
 8002838:	d001      	beq.n	800283e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800283a:	f000 f89b 	bl	8002974 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <MX_I2C1_Init+0x74>)
 8002840:	2100      	movs	r1, #0
 8002842:	0018      	movs	r0, r3
 8002844:	f001 fabc 	bl	8003dc0 <HAL_I2CEx_ConfigAnalogFilter>
 8002848:	1e03      	subs	r3, r0, #0
 800284a:	d001      	beq.n	8002850 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800284c:	f000 f892 	bl	8002974 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <MX_I2C1_Init+0x74>)
 8002852:	2100      	movs	r1, #0
 8002854:	0018      	movs	r0, r3
 8002856:	f001 faff 	bl	8003e58 <HAL_I2CEx_ConfigDigitalFilter>
 800285a:	1e03      	subs	r3, r0, #0
 800285c:	d001      	beq.n	8002862 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800285e:	f000 f889 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	200003f4 	.word	0x200003f4
 800286c:	40005400 	.word	0x40005400
 8002870:	2000090e 	.word	0x2000090e

08002874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287a:	240c      	movs	r4, #12
 800287c:	193b      	adds	r3, r7, r4
 800287e:	0018      	movs	r0, r3
 8002880:	2314      	movs	r3, #20
 8002882:	001a      	movs	r2, r3
 8002884:	2100      	movs	r1, #0
 8002886:	f002 fb8e 	bl	8004fa6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800288a:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <MX_GPIO_Init+0xd4>)
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	4b2e      	ldr	r3, [pc, #184]	; (8002948 <MX_GPIO_Init+0xd4>)
 8002890:	2180      	movs	r1, #128	; 0x80
 8002892:	03c9      	lsls	r1, r1, #15
 8002894:	430a      	orrs	r2, r1
 8002896:	615a      	str	r2, [r3, #20]
 8002898:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <MX_GPIO_Init+0xd4>)
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	03db      	lsls	r3, r3, #15
 80028a0:	4013      	ands	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a6:	4b28      	ldr	r3, [pc, #160]	; (8002948 <MX_GPIO_Init+0xd4>)
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	4b27      	ldr	r3, [pc, #156]	; (8002948 <MX_GPIO_Init+0xd4>)
 80028ac:	2180      	movs	r1, #128	; 0x80
 80028ae:	0289      	lsls	r1, r1, #10
 80028b0:	430a      	orrs	r2, r1
 80028b2:	615a      	str	r2, [r3, #20]
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <MX_GPIO_Init+0xd4>)
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	029b      	lsls	r3, r3, #10
 80028bc:	4013      	ands	r3, r2
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c2:	4b21      	ldr	r3, [pc, #132]	; (8002948 <MX_GPIO_Init+0xd4>)
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <MX_GPIO_Init+0xd4>)
 80028c8:	2180      	movs	r1, #128	; 0x80
 80028ca:	02c9      	lsls	r1, r1, #11
 80028cc:	430a      	orrs	r2, r1
 80028ce:	615a      	str	r2, [r3, #20]
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <MX_GPIO_Init+0xd4>)
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	02db      	lsls	r3, r3, #11
 80028d8:	4013      	ands	r3, r2
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80028de:	2390      	movs	r3, #144	; 0x90
 80028e0:	05db      	lsls	r3, r3, #23
 80028e2:	2200      	movs	r2, #0
 80028e4:	2101      	movs	r1, #1
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 fdc2 	bl	8003470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028ec:	193b      	adds	r3, r7, r4
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f2:	193b      	adds	r3, r7, r4
 80028f4:	2201      	movs	r2, #1
 80028f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	193b      	adds	r3, r7, r4
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fe:	193b      	adds	r3, r7, r4
 8002900:	2200      	movs	r2, #0
 8002902:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002904:	193a      	adds	r2, r7, r4
 8002906:	2390      	movs	r3, #144	; 0x90
 8002908:	05db      	lsls	r3, r3, #23
 800290a:	0011      	movs	r1, r2
 800290c:	0018      	movs	r0, r3
 800290e:	f000 fc47 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002912:	0021      	movs	r1, r4
 8002914:	187b      	adds	r3, r7, r1
 8002916:	4a0d      	ldr	r2, [pc, #52]	; (800294c <MX_GPIO_Init+0xd8>)
 8002918:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	187b      	adds	r3, r7, r1
 800291c:	2202      	movs	r2, #2
 800291e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	187b      	adds	r3, r7, r1
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002926:	187b      	adds	r3, r7, r1
 8002928:	2203      	movs	r2, #3
 800292a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800292c:	187b      	adds	r3, r7, r1
 800292e:	2201      	movs	r2, #1
 8002930:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002932:	187a      	adds	r2, r7, r1
 8002934:	2390      	movs	r3, #144	; 0x90
 8002936:	05db      	lsls	r3, r3, #23
 8002938:	0011      	movs	r1, r2
 800293a:	0018      	movs	r0, r3
 800293c:	f000 fc30 	bl	80031a0 <HAL_GPIO_Init>

}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b009      	add	sp, #36	; 0x24
 8002946:	bd90      	pop	{r4, r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	00008004 	.word	0x00008004

08002950 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a04      	ldr	r2, [pc, #16]	; (8002970 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002962:	f000 fb31 	bl	8002fc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	b002      	add	sp, #8
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	40012c00 	.word	0x40012c00

08002974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <init_matrix>:
#include <string.h>

uint8_t* active_fbuf;
uint8_t* next_fbuf;

int init_matrix(I2C_HandleTypeDef* i2c){
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b087      	sub	sp, #28
 8002984:	af02      	add	r7, sp, #8
 8002986:	6078      	str	r0, [r7, #4]
	// Set up the next and active fbuf pointers
	active_fbuf = fbuf0;
 8002988:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <init_matrix+0xe4>)
 800298a:	4a37      	ldr	r2, [pc, #220]	; (8002a68 <init_matrix+0xe8>)
 800298c:	601a      	str	r2, [r3, #0]
	next_fbuf = fbuf1;
 800298e:	4b37      	ldr	r3, [pc, #220]	; (8002a6c <init_matrix+0xec>)
 8002990:	4a37      	ldr	r2, [pc, #220]	; (8002a70 <init_matrix+0xf0>)
 8002992:	601a      	str	r2, [r3, #0]
	// Clear the frame buffers
	clear_fbuf();
 8002994:	f000 f95a 	bl	8002c4c <clear_fbuf>
	// Turn on the GPIO that controls the shutdown register for the matrix
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8002998:	2390      	movs	r3, #144	; 0x90
 800299a:	05db      	lsls	r3, r3, #23
 800299c:	2201      	movs	r2, #1
 800299e:	2101      	movs	r1, #1
 80029a0:	0018      	movs	r0, r3
 80029a2:	f000 fd65 	bl	8003470 <HAL_GPIO_WritePin>

	// Set command register to point to function register
	uint8_t dat[2] = {0xfd, 0x0b};
 80029a6:	210c      	movs	r1, #12
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	4a32      	ldr	r2, [pc, #200]	; (8002a74 <init_matrix+0xf4>)
 80029ac:	8812      	ldrh	r2, [r2, #0]
 80029ae:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 80029b0:	000c      	movs	r4, r1
 80029b2:	187a      	adds	r2, r7, r1
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	2301      	movs	r3, #1
 80029b8:	425b      	negs	r3, r3
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2302      	movs	r3, #2
 80029be:	21e8      	movs	r1, #232	; 0xe8
 80029c0:	f000 fe0a 	bl	80035d8 <HAL_I2C_Master_Transmit>

	// Bring matrix out of shutdown, write a 1 to shutdown register
	dat[0] = 0xa;
 80029c4:	0021      	movs	r1, r4
 80029c6:	187b      	adds	r3, r7, r1
 80029c8:	220a      	movs	r2, #10
 80029ca:	701a      	strb	r2, [r3, #0]
	dat[1] = 0x1;
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	2201      	movs	r2, #1
 80029d0:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 80029d2:	000c      	movs	r4, r1
 80029d4:	187a      	adds	r2, r7, r1
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	2301      	movs	r3, #1
 80029da:	425b      	negs	r3, r3
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	2302      	movs	r3, #2
 80029e0:	21e8      	movs	r1, #232	; 0xe8
 80029e2:	f000 fdf9 	bl	80035d8 <HAL_I2C_Master_Transmit>

	// Set command register to point to frame 1 register
	dat[0] = 0xfd;
 80029e6:	0021      	movs	r1, r4
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	22fd      	movs	r2, #253	; 0xfd
 80029ec:	701a      	strb	r2, [r3, #0]
	dat[1] = 0x00;
 80029ee:	187b      	adds	r3, r7, r1
 80029f0:	2200      	movs	r2, #0
 80029f2:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 80029f4:	187a      	adds	r2, r7, r1
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	2301      	movs	r3, #1
 80029fa:	425b      	negs	r3, r3
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2302      	movs	r3, #2
 8002a00:	21e8      	movs	r1, #232	; 0xe8
 8002a02:	f000 fde9 	bl	80035d8 <HAL_I2C_Master_Transmit>

	// Set all the LEDs to on
	for(uint8_t i = 0; i < 0x12; i++){
 8002a06:	230f      	movs	r3, #15
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	e016      	b.n	8002a3e <init_matrix+0xbe>
	  dat[0] = i;
 8002a10:	210c      	movs	r1, #12
 8002a12:	187b      	adds	r3, r7, r1
 8002a14:	240f      	movs	r4, #15
 8002a16:	193a      	adds	r2, r7, r4
 8002a18:	7812      	ldrb	r2, [r2, #0]
 8002a1a:	701a      	strb	r2, [r3, #0]
	  dat[1] = 0xFF;
 8002a1c:	187b      	adds	r3, r7, r1
 8002a1e:	22ff      	movs	r2, #255	; 0xff
 8002a20:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 8002a22:	187a      	adds	r2, r7, r1
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	2301      	movs	r3, #1
 8002a28:	425b      	negs	r3, r3
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	21e8      	movs	r1, #232	; 0xe8
 8002a30:	f000 fdd2 	bl	80035d8 <HAL_I2C_Master_Transmit>
	for(uint8_t i = 0; i < 0x12; i++){
 8002a34:	193b      	adds	r3, r7, r4
 8002a36:	781a      	ldrb	r2, [r3, #0]
 8002a38:	193b      	adds	r3, r7, r4
 8002a3a:	3201      	adds	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	230f      	movs	r3, #15
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b11      	cmp	r3, #17
 8002a46:	d9e3      	bls.n	8002a10 <init_matrix+0x90>
	}
	// Initialize the LEDs with the cleared frame buffer
	HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, send_fbuf, 145, HAL_MAX_DELAY);
 8002a48:	4a0b      	ldr	r2, [pc, #44]	; (8002a78 <init_matrix+0xf8>)
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	425b      	negs	r3, r3
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2391      	movs	r3, #145	; 0x91
 8002a54:	21e8      	movs	r1, #232	; 0xe8
 8002a56:	f000 fdbf 	bl	80035d8 <HAL_I2C_Master_Transmit>
	// Set the I2C as ready
	return MTX_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b005      	add	sp, #20
 8002a62:	bd90      	pop	{r4, r7, pc}
 8002a64:	20000324 	.word	0x20000324
 8002a68:	20000290 	.word	0x20000290
 8002a6c:	200003bc 	.word	0x200003bc
 8002a70:	20000200 	.word	0x20000200
 8002a74:	08006a84 	.word	0x08006a84
 8002a78:	20000328 	.word	0x20000328

08002a7c <update_fbuf>:

int update_fbuf(I2C_HandleTypeDef* i2c){
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	6078      	str	r0, [r7, #4]
	// Transform the fbuf so it gets displayed properly
	transform_fbuf();
 8002a84:	f000 f826 	bl	8002ad4 <transform_fbuf>
	// Send the new fbuf over to the matrix
	HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, send_fbuf, 145, HAL_MAX_DELAY);
 8002a88:	4a0f      	ldr	r2, [pc, #60]	; (8002ac8 <update_fbuf+0x4c>)
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	425b      	negs	r3, r3
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2391      	movs	r3, #145	; 0x91
 8002a94:	21e8      	movs	r1, #232	; 0xe8
 8002a96:	f000 fd9f 	bl	80035d8 <HAL_I2C_Master_Transmit>
	// Swap the next and active fbuf pointers
	uint8_t *tmp = next_fbuf;
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <update_fbuf+0x50>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]
	next_fbuf = active_fbuf;
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <update_fbuf+0x54>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <update_fbuf+0x50>)
 8002aa6:	601a      	str	r2, [r3, #0]
	active_fbuf = tmp;
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <update_fbuf+0x54>)
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	601a      	str	r2, [r3, #0]
	memset(next_fbuf, 0, 144);
 8002aae:	4b07      	ldr	r3, [pc, #28]	; (8002acc <update_fbuf+0x50>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2290      	movs	r2, #144	; 0x90
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f002 fa75 	bl	8004fa6 <memset>
	return MTX_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b004      	add	sp, #16
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	20000328 	.word	0x20000328
 8002acc:	200003bc 	.word	0x200003bc
 8002ad0:	20000324 	.word	0x20000324

08002ad4 <transform_fbuf>:

int transform_fbuf(){
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
	// Move the data in the fbuf around to handle the LED layout
	memcpy(send_fbuf + 1,   next_fbuf + 0 *  MTX_WIDTH, 8);
 8002ad8:	4849      	ldr	r0, [pc, #292]	; (8002c00 <transform_fbuf+0x12c>)
 8002ada:	4b4a      	ldr	r3, [pc, #296]	; (8002c04 <transform_fbuf+0x130>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2208      	movs	r2, #8
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	f002 fa57 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 17,  next_fbuf + 1 *  MTX_WIDTH, 8);
 8002ae6:	4848      	ldr	r0, [pc, #288]	; (8002c08 <transform_fbuf+0x134>)
 8002ae8:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <transform_fbuf+0x130>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3308      	adds	r3, #8
 8002aee:	2208      	movs	r2, #8
 8002af0:	0019      	movs	r1, r3
 8002af2:	f002 fa4f 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 33,  next_fbuf + 2 *  MTX_WIDTH, 8);
 8002af6:	4845      	ldr	r0, [pc, #276]	; (8002c0c <transform_fbuf+0x138>)
 8002af8:	4b42      	ldr	r3, [pc, #264]	; (8002c04 <transform_fbuf+0x130>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3310      	adds	r3, #16
 8002afe:	2208      	movs	r2, #8
 8002b00:	0019      	movs	r1, r3
 8002b02:	f002 fa47 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 49,  next_fbuf + 3 *  MTX_WIDTH, 8);
 8002b06:	4842      	ldr	r0, [pc, #264]	; (8002c10 <transform_fbuf+0x13c>)
 8002b08:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <transform_fbuf+0x130>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	2208      	movs	r2, #8
 8002b10:	0019      	movs	r1, r3
 8002b12:	f002 fa3f 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 65,  next_fbuf + 4 *  MTX_WIDTH, 8);
 8002b16:	483f      	ldr	r0, [pc, #252]	; (8002c14 <transform_fbuf+0x140>)
 8002b18:	4b3a      	ldr	r3, [pc, #232]	; (8002c04 <transform_fbuf+0x130>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3320      	adds	r3, #32
 8002b1e:	2208      	movs	r2, #8
 8002b20:	0019      	movs	r1, r3
 8002b22:	f002 fa37 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 81,  next_fbuf + 5 *  MTX_WIDTH, 8);
 8002b26:	483c      	ldr	r0, [pc, #240]	; (8002c18 <transform_fbuf+0x144>)
 8002b28:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <transform_fbuf+0x130>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3328      	adds	r3, #40	; 0x28
 8002b2e:	2208      	movs	r2, #8
 8002b30:	0019      	movs	r1, r3
 8002b32:	f002 fa2f 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 97,  next_fbuf + 6 *  MTX_WIDTH, 8);
 8002b36:	4839      	ldr	r0, [pc, #228]	; (8002c1c <transform_fbuf+0x148>)
 8002b38:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <transform_fbuf+0x130>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3330      	adds	r3, #48	; 0x30
 8002b3e:	2208      	movs	r2, #8
 8002b40:	0019      	movs	r1, r3
 8002b42:	f002 fa27 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 113, next_fbuf + 7 *  MTX_WIDTH, 8);
 8002b46:	4836      	ldr	r0, [pc, #216]	; (8002c20 <transform_fbuf+0x14c>)
 8002b48:	4b2e      	ldr	r3, [pc, #184]	; (8002c04 <transform_fbuf+0x130>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3338      	adds	r3, #56	; 0x38
 8002b4e:	2208      	movs	r2, #8
 8002b50:	0019      	movs	r1, r3
 8002b52:	f002 fa1f 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 129, next_fbuf + 8 *  MTX_WIDTH, 8);
 8002b56:	4833      	ldr	r0, [pc, #204]	; (8002c24 <transform_fbuf+0x150>)
 8002b58:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <transform_fbuf+0x130>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3340      	adds	r3, #64	; 0x40
 8002b5e:	2208      	movs	r2, #8
 8002b60:	0019      	movs	r1, r3
 8002b62:	f002 fa17 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 9,   next_fbuf + 9 *  MTX_WIDTH, 8);
 8002b66:	4830      	ldr	r0, [pc, #192]	; (8002c28 <transform_fbuf+0x154>)
 8002b68:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <transform_fbuf+0x130>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3348      	adds	r3, #72	; 0x48
 8002b6e:	2208      	movs	r2, #8
 8002b70:	0019      	movs	r1, r3
 8002b72:	f002 fa0f 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 25,  next_fbuf + 10 * MTX_WIDTH, 8);
 8002b76:	482d      	ldr	r0, [pc, #180]	; (8002c2c <transform_fbuf+0x158>)
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <transform_fbuf+0x130>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3350      	adds	r3, #80	; 0x50
 8002b7e:	2208      	movs	r2, #8
 8002b80:	0019      	movs	r1, r3
 8002b82:	f002 fa07 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 41,  next_fbuf + 11 * MTX_WIDTH, 8);
 8002b86:	482a      	ldr	r0, [pc, #168]	; (8002c30 <transform_fbuf+0x15c>)
 8002b88:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <transform_fbuf+0x130>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	3358      	adds	r3, #88	; 0x58
 8002b8e:	2208      	movs	r2, #8
 8002b90:	0019      	movs	r1, r3
 8002b92:	f002 f9ff 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 57,  next_fbuf + 12 * MTX_WIDTH, 8);
 8002b96:	4827      	ldr	r0, [pc, #156]	; (8002c34 <transform_fbuf+0x160>)
 8002b98:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <transform_fbuf+0x130>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3360      	adds	r3, #96	; 0x60
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	f002 f9f7 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 73,  next_fbuf + 13 * MTX_WIDTH, 8);
 8002ba6:	4824      	ldr	r0, [pc, #144]	; (8002c38 <transform_fbuf+0x164>)
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <transform_fbuf+0x130>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3368      	adds	r3, #104	; 0x68
 8002bae:	2208      	movs	r2, #8
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	f002 f9ef 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 89,  next_fbuf + 14 * MTX_WIDTH, 8);
 8002bb6:	4821      	ldr	r0, [pc, #132]	; (8002c3c <transform_fbuf+0x168>)
 8002bb8:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <transform_fbuf+0x130>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3370      	adds	r3, #112	; 0x70
 8002bbe:	2208      	movs	r2, #8
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	f002 f9e7 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 105, next_fbuf + 15 * MTX_WIDTH, 8);
 8002bc6:	481e      	ldr	r0, [pc, #120]	; (8002c40 <transform_fbuf+0x16c>)
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <transform_fbuf+0x130>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3378      	adds	r3, #120	; 0x78
 8002bce:	2208      	movs	r2, #8
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	f002 f9df 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 121, next_fbuf + 16 * MTX_WIDTH, 8);
 8002bd6:	481b      	ldr	r0, [pc, #108]	; (8002c44 <transform_fbuf+0x170>)
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <transform_fbuf+0x130>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3380      	adds	r3, #128	; 0x80
 8002bde:	2208      	movs	r2, #8
 8002be0:	0019      	movs	r1, r3
 8002be2:	f002 f9d7 	bl	8004f94 <memcpy>
	memcpy(send_fbuf + 137, next_fbuf + 17 * MTX_WIDTH, 8);
 8002be6:	4818      	ldr	r0, [pc, #96]	; (8002c48 <transform_fbuf+0x174>)
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <transform_fbuf+0x130>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3388      	adds	r3, #136	; 0x88
 8002bee:	2208      	movs	r2, #8
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	f002 f9cf 	bl	8004f94 <memcpy>
}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	20000329 	.word	0x20000329
 8002c04:	200003bc 	.word	0x200003bc
 8002c08:	20000339 	.word	0x20000339
 8002c0c:	20000349 	.word	0x20000349
 8002c10:	20000359 	.word	0x20000359
 8002c14:	20000369 	.word	0x20000369
 8002c18:	20000379 	.word	0x20000379
 8002c1c:	20000389 	.word	0x20000389
 8002c20:	20000399 	.word	0x20000399
 8002c24:	200003a9 	.word	0x200003a9
 8002c28:	20000331 	.word	0x20000331
 8002c2c:	20000341 	.word	0x20000341
 8002c30:	20000351 	.word	0x20000351
 8002c34:	20000361 	.word	0x20000361
 8002c38:	20000371 	.word	0x20000371
 8002c3c:	20000381 	.word	0x20000381
 8002c40:	20000391 	.word	0x20000391
 8002c44:	200003a1 	.word	0x200003a1
 8002c48:	200003b1 	.word	0x200003b1

08002c4c <clear_fbuf>:

int clear_fbuf(){
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
	// Clear the frame buffers that the matrix uses
	memset(fbuf0, 0, 144);
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <clear_fbuf+0x38>)
 8002c52:	2290      	movs	r2, #144	; 0x90
 8002c54:	2100      	movs	r1, #0
 8002c56:	0018      	movs	r0, r3
 8002c58:	f002 f9a5 	bl	8004fa6 <memset>
	memset(fbuf1, 0, 144);
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <clear_fbuf+0x3c>)
 8002c5e:	2290      	movs	r2, #144	; 0x90
 8002c60:	2100      	movs	r1, #0
 8002c62:	0018      	movs	r0, r3
 8002c64:	f002 f99f 	bl	8004fa6 <memset>
	memset(send_fbuf, 0, 145);
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <clear_fbuf+0x40>)
 8002c6a:	2291      	movs	r2, #145	; 0x91
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f002 f999 	bl	8004fa6 <memset>
	// Set the first address of the frame buffer to the address of the first
	// PWM register. This makes transmitting easier
	send_fbuf[0] = MTX_FBUF_ADDR;
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <clear_fbuf+0x40>)
 8002c76:	2224      	movs	r2, #36	; 0x24
 8002c78:	701a      	strb	r2, [r3, #0]
	return MTX_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	20000290 	.word	0x20000290
 8002c88:	20000200 	.word	0x20000200
 8002c8c:	20000328 	.word	0x20000328

08002c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <HAL_MspInit+0x44>)
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <HAL_MspInit+0x44>)
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	619a      	str	r2, [r3, #24]
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <HAL_MspInit+0x44>)
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4013      	ands	r3, r2
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_MspInit+0x44>)
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <HAL_MspInit+0x44>)
 8002cb4:	2180      	movs	r1, #128	; 0x80
 8002cb6:	0549      	lsls	r1, r1, #21
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	61da      	str	r2, [r3, #28]
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_MspInit+0x44>)
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	055b      	lsls	r3, r3, #21
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b002      	add	sp, #8
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b08b      	sub	sp, #44	; 0x2c
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	2314      	movs	r3, #20
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	2314      	movs	r3, #20
 8002ce8:	001a      	movs	r2, r3
 8002cea:	2100      	movs	r1, #0
 8002cec:	f002 f95b 	bl	8004fa6 <memset>
  if(hi2c->Instance==I2C1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a2f      	ldr	r2, [pc, #188]	; (8002db4 <HAL_I2C_MspInit+0xdc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d158      	bne.n	8002dac <HAL_I2C_MspInit+0xd4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <HAL_I2C_MspInit+0xe0>)
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	4b2e      	ldr	r3, [pc, #184]	; (8002db8 <HAL_I2C_MspInit+0xe0>)
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	0289      	lsls	r1, r1, #10
 8002d04:	430a      	orrs	r2, r1
 8002d06:	615a      	str	r2, [r3, #20]
 8002d08:	4b2b      	ldr	r3, [pc, #172]	; (8002db8 <HAL_I2C_MspInit+0xe0>)
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	029b      	lsls	r3, r3, #10
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d16:	4b28      	ldr	r3, [pc, #160]	; (8002db8 <HAL_I2C_MspInit+0xe0>)
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <HAL_I2C_MspInit+0xe0>)
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	02c9      	lsls	r1, r1, #11
 8002d20:	430a      	orrs	r2, r1
 8002d22:	615a      	str	r2, [r3, #20]
 8002d24:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <HAL_I2C_MspInit+0xe0>)
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	02db      	lsls	r3, r3, #11
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d32:	2114      	movs	r1, #20
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	2280      	movs	r2, #128	; 0x80
 8002d38:	00d2      	lsls	r2, r2, #3
 8002d3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d3c:	000c      	movs	r4, r1
 8002d3e:	193b      	adds	r3, r7, r4
 8002d40:	2212      	movs	r2, #18
 8002d42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d44:	193b      	adds	r3, r7, r4
 8002d46:	2201      	movs	r2, #1
 8002d48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	2204      	movs	r2, #4
 8002d54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d56:	193a      	adds	r2, r7, r4
 8002d58:	2390      	movs	r3, #144	; 0x90
 8002d5a:	05db      	lsls	r3, r3, #23
 8002d5c:	0011      	movs	r1, r2
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f000 fa1e 	bl	80031a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d64:	0021      	movs	r1, r4
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	2240      	movs	r2, #64	; 0x40
 8002d6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	2212      	movs	r2, #18
 8002d70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	2201      	movs	r2, #1
 8002d76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d78:	187b      	adds	r3, r7, r1
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	2201      	movs	r2, #1
 8002d82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <HAL_I2C_MspInit+0xe4>)
 8002d88:	0019      	movs	r1, r3
 8002d8a:	0010      	movs	r0, r2
 8002d8c:	f000 fa08 	bl	80031a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HAL_I2C_MspInit+0xe0>)
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <HAL_I2C_MspInit+0xe0>)
 8002d96:	2180      	movs	r1, #128	; 0x80
 8002d98:	0389      	lsls	r1, r1, #14
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	61da      	str	r2, [r3, #28]
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_I2C_MspInit+0xe0>)
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	039b      	lsls	r3, r3, #14
 8002da6:	4013      	ands	r3, r2
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b00b      	add	sp, #44	; 0x2c
 8002db2:	bd90      	pop	{r4, r7, pc}
 8002db4:	40005400 	.word	0x40005400
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	48000400 	.word	0x48000400

08002dc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	; 0x28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	200d      	movs	r0, #13
 8002dd8:	f000 f9bc 	bl	8003154 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 8002ddc:	200d      	movs	r0, #13
 8002dde:	f000 f9ce 	bl	800317e <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002de2:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <HAL_InitTick+0xa8>)
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_InitTick+0xa8>)
 8002de8:	2180      	movs	r1, #128	; 0x80
 8002dea:	0109      	lsls	r1, r1, #4
 8002dec:	430a      	orrs	r2, r1
 8002dee:	619a      	str	r2, [r3, #24]
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <HAL_InitTick+0xa8>)
 8002df2:	699a      	ldr	r2, [r3, #24]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dfe:	230c      	movs	r3, #12
 8002e00:	18fa      	adds	r2, r7, r3
 8002e02:	2310      	movs	r3, #16
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	0011      	movs	r1, r2
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f001 fd6f 	bl	80048ec <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e0e:	f001 fd57 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 8002e12:	0003      	movs	r3, r0
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	4914      	ldr	r1, [pc, #80]	; (8002e6c <HAL_InitTick+0xac>)
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f7fd f986 	bl	800012c <__udivsi3>
 8002e20:	0003      	movs	r3, r0
 8002e22:	3b01      	subs	r3, #1
 8002e24:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002e26:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_InitTick+0xb0>)
 8002e28:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <HAL_InitTick+0xb4>)
 8002e2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002e2c:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <HAL_InitTick+0xb0>)
 8002e2e:	4a12      	ldr	r2, [pc, #72]	; (8002e78 <HAL_InitTick+0xb8>)
 8002e30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <HAL_InitTick+0xb0>)
 8002e34:	6a3a      	ldr	r2, [r7, #32]
 8002e36:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8002e38:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <HAL_InitTick+0xb0>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <HAL_InitTick+0xb0>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <HAL_InitTick+0xb0>)
 8002e46:	0018      	movs	r0, r3
 8002e48:	f001 fe68 	bl	8004b1c <HAL_TIM_Base_Init>
 8002e4c:	1e03      	subs	r3, r0, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002e50:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <HAL_InitTick+0xb0>)
 8002e52:	0018      	movs	r0, r3
 8002e54:	f001 fe96 	bl	8004b84 <HAL_TIM_Base_Start_IT>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	e000      	b.n	8002e5e <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
}
 8002e5e:	0018      	movs	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b00a      	add	sp, #40	; 0x28
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	000f4240 	.word	0x000f4240
 8002e70:	20000440 	.word	0x20000440
 8002e74:	40012c00 	.word	0x40012c00
 8002e78:	000003e7 	.word	0x000003e7

08002e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <HardFault_Handler+0x4>

08002e8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f001 fe8e 	bl	8004bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002eac:	46c0      	nop			; (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	20000440 	.word	0x20000440

08002eb8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ec0:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <_sbrk+0x50>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <_sbrk+0x16>
		heap_end = &end;
 8002ec8:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <_sbrk+0x50>)
 8002eca:	4a10      	ldr	r2, [pc, #64]	; (8002f0c <_sbrk+0x54>)
 8002ecc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002ece:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <_sbrk+0x50>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <_sbrk+0x50>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	18d3      	adds	r3, r2, r3
 8002edc:	466a      	mov	r2, sp
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d907      	bls.n	8002ef2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002ee2:	f002 f82d 	bl	8004f40 <__errno>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	220c      	movs	r2, #12
 8002eea:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002eec:	2301      	movs	r3, #1
 8002eee:	425b      	negs	r3, r3
 8002ef0:	e006      	b.n	8002f00 <_sbrk+0x48>
	}

	heap_end += incr;
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <_sbrk+0x50>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	18d2      	adds	r2, r2, r3
 8002efa:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <_sbrk+0x50>)
 8002efc:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002efe:	68fb      	ldr	r3, [r7, #12]
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b004      	add	sp, #16
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	200001f4 	.word	0x200001f4
 8002f0c:	20000488 	.word	0x20000488

08002f10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f1c:	4813      	ldr	r0, [pc, #76]	; (8002f6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f1e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002f20:	4813      	ldr	r0, [pc, #76]	; (8002f70 <LoopForever+0x6>)
    LDR R1, [R0]
 8002f22:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002f24:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002f26:	4a13      	ldr	r2, [pc, #76]	; (8002f74 <LoopForever+0xa>)
    CMP R1, R2
 8002f28:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002f2a:	d105      	bne.n	8002f38 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002f2c:	4812      	ldr	r0, [pc, #72]	; (8002f78 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002f2e:	4913      	ldr	r1, [pc, #76]	; (8002f7c <LoopForever+0x12>)
    STR R1, [R0]
 8002f30:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002f32:	4813      	ldr	r0, [pc, #76]	; (8002f80 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002f34:	4913      	ldr	r1, [pc, #76]	; (8002f84 <LoopForever+0x1a>)
    STR R1, [R0]
 8002f36:	6001      	str	r1, [r0, #0]

08002f38 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f38:	4813      	ldr	r0, [pc, #76]	; (8002f88 <LoopForever+0x1e>)
  ldr r1, =_edata
 8002f3a:	4914      	ldr	r1, [pc, #80]	; (8002f8c <LoopForever+0x22>)
  ldr r2, =_sidata
 8002f3c:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <LoopForever+0x26>)
  movs r3, #0
 8002f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f40:	e002      	b.n	8002f48 <LoopCopyDataInit>

08002f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f46:	3304      	adds	r3, #4

08002f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f4c:	d3f9      	bcc.n	8002f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f4e:	4a11      	ldr	r2, [pc, #68]	; (8002f94 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002f50:	4c11      	ldr	r4, [pc, #68]	; (8002f98 <LoopForever+0x2e>)
  movs r3, #0
 8002f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f54:	e001      	b.n	8002f5a <LoopFillZerobss>

08002f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f58:	3204      	adds	r2, #4

08002f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f5c:	d3fb      	bcc.n	8002f56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002f5e:	f7ff ffd7 	bl	8002f10 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002f62:	f001 fff3 	bl	8004f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f66:	f7ff fbcf 	bl	8002708 <main>

08002f6a <LoopForever>:

LoopForever:
    b LoopForever
 8002f6a:	e7fe      	b.n	8002f6a <LoopForever>
  ldr   r0, =_estack
 8002f6c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002f70:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002f74:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002f78:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002f7c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002f80:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002f84:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f8c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002f90:	08006dc0 	.word	0x08006dc0
  ldr r2, =_sbss
 8002f94:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002f98:	20000488 	.word	0x20000488

08002f9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f9c:	e7fe      	b.n	8002f9c <ADC1_IRQHandler>
	...

08002fa0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fa4:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <HAL_Init+0x24>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_Init+0x24>)
 8002faa:	2110      	movs	r1, #16
 8002fac:	430a      	orrs	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f7ff ff05 	bl	8002dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb6:	f7ff fe6b 	bl	8002c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	40022000 	.word	0x40022000

08002fc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_IncTick+0x1c>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_IncTick+0x20>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	18d2      	adds	r2, r2, r3
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_IncTick+0x20>)
 8002fda:	601a      	str	r2, [r3, #0]
}
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	20000004 	.word	0x20000004
 8002fe8:	20000480 	.word	0x20000480

08002fec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff0:	4b02      	ldr	r3, [pc, #8]	; (8002ffc <HAL_GetTick+0x10>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	20000480 	.word	0x20000480

08003000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003008:	f7ff fff0 	bl	8002fec <HAL_GetTick>
 800300c:	0003      	movs	r3, r0
 800300e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3301      	adds	r3, #1
 8003018:	d005      	beq.n	8003026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <HAL_Delay+0x40>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	001a      	movs	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	189b      	adds	r3, r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	f7ff ffe0 	bl	8002fec <HAL_GetTick>
 800302c:	0002      	movs	r2, r0
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	429a      	cmp	r2, r3
 8003036:	d8f7      	bhi.n	8003028 <HAL_Delay+0x28>
  {
  }
}
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	46bd      	mov	sp, r7
 800303c:	b004      	add	sp, #16
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000004 	.word	0x20000004

08003044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	0002      	movs	r2, r0
 800304c:	1dfb      	adds	r3, r7, #7
 800304e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003050:	1dfb      	adds	r3, r7, #7
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b7f      	cmp	r3, #127	; 0x7f
 8003056:	d809      	bhi.n	800306c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003058:	1dfb      	adds	r3, r7, #7
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	001a      	movs	r2, r3
 800305e:	231f      	movs	r3, #31
 8003060:	401a      	ands	r2, r3
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <__NVIC_EnableIRQ+0x30>)
 8003064:	2101      	movs	r1, #1
 8003066:	4091      	lsls	r1, r2
 8003068:	000a      	movs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]
  }
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	b002      	add	sp, #8
 8003072:	bd80      	pop	{r7, pc}
 8003074:	e000e100 	.word	0xe000e100

08003078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	0002      	movs	r2, r0
 8003080:	6039      	str	r1, [r7, #0]
 8003082:	1dfb      	adds	r3, r7, #7
 8003084:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003086:	1dfb      	adds	r3, r7, #7
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b7f      	cmp	r3, #127	; 0x7f
 800308c:	d828      	bhi.n	80030e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800308e:	4a2f      	ldr	r2, [pc, #188]	; (800314c <__NVIC_SetPriority+0xd4>)
 8003090:	1dfb      	adds	r3, r7, #7
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	b25b      	sxtb	r3, r3
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	33c0      	adds	r3, #192	; 0xc0
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	589b      	ldr	r3, [r3, r2]
 800309e:	1dfa      	adds	r2, r7, #7
 80030a0:	7812      	ldrb	r2, [r2, #0]
 80030a2:	0011      	movs	r1, r2
 80030a4:	2203      	movs	r2, #3
 80030a6:	400a      	ands	r2, r1
 80030a8:	00d2      	lsls	r2, r2, #3
 80030aa:	21ff      	movs	r1, #255	; 0xff
 80030ac:	4091      	lsls	r1, r2
 80030ae:	000a      	movs	r2, r1
 80030b0:	43d2      	mvns	r2, r2
 80030b2:	401a      	ands	r2, r3
 80030b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	019b      	lsls	r3, r3, #6
 80030ba:	22ff      	movs	r2, #255	; 0xff
 80030bc:	401a      	ands	r2, r3
 80030be:	1dfb      	adds	r3, r7, #7
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	0018      	movs	r0, r3
 80030c4:	2303      	movs	r3, #3
 80030c6:	4003      	ands	r3, r0
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030cc:	481f      	ldr	r0, [pc, #124]	; (800314c <__NVIC_SetPriority+0xd4>)
 80030ce:	1dfb      	adds	r3, r7, #7
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b25b      	sxtb	r3, r3
 80030d4:	089b      	lsrs	r3, r3, #2
 80030d6:	430a      	orrs	r2, r1
 80030d8:	33c0      	adds	r3, #192	; 0xc0
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80030de:	e031      	b.n	8003144 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030e0:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <__NVIC_SetPriority+0xd8>)
 80030e2:	1dfb      	adds	r3, r7, #7
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	0019      	movs	r1, r3
 80030e8:	230f      	movs	r3, #15
 80030ea:	400b      	ands	r3, r1
 80030ec:	3b08      	subs	r3, #8
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	3306      	adds	r3, #6
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	18d3      	adds	r3, r2, r3
 80030f6:	3304      	adds	r3, #4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	1dfa      	adds	r2, r7, #7
 80030fc:	7812      	ldrb	r2, [r2, #0]
 80030fe:	0011      	movs	r1, r2
 8003100:	2203      	movs	r2, #3
 8003102:	400a      	ands	r2, r1
 8003104:	00d2      	lsls	r2, r2, #3
 8003106:	21ff      	movs	r1, #255	; 0xff
 8003108:	4091      	lsls	r1, r2
 800310a:	000a      	movs	r2, r1
 800310c:	43d2      	mvns	r2, r2
 800310e:	401a      	ands	r2, r3
 8003110:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	019b      	lsls	r3, r3, #6
 8003116:	22ff      	movs	r2, #255	; 0xff
 8003118:	401a      	ands	r2, r3
 800311a:	1dfb      	adds	r3, r7, #7
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	0018      	movs	r0, r3
 8003120:	2303      	movs	r3, #3
 8003122:	4003      	ands	r3, r0
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003128:	4809      	ldr	r0, [pc, #36]	; (8003150 <__NVIC_SetPriority+0xd8>)
 800312a:	1dfb      	adds	r3, r7, #7
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	001c      	movs	r4, r3
 8003130:	230f      	movs	r3, #15
 8003132:	4023      	ands	r3, r4
 8003134:	3b08      	subs	r3, #8
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	430a      	orrs	r2, r1
 800313a:	3306      	adds	r3, #6
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	18c3      	adds	r3, r0, r3
 8003140:	3304      	adds	r3, #4
 8003142:	601a      	str	r2, [r3, #0]
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b003      	add	sp, #12
 800314a:	bd90      	pop	{r4, r7, pc}
 800314c:	e000e100 	.word	0xe000e100
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	210f      	movs	r1, #15
 8003160:	187b      	adds	r3, r7, r1
 8003162:	1c02      	adds	r2, r0, #0
 8003164:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	187b      	adds	r3, r7, r1
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	b25b      	sxtb	r3, r3
 800316e:	0011      	movs	r1, r2
 8003170:	0018      	movs	r0, r3
 8003172:	f7ff ff81 	bl	8003078 <__NVIC_SetPriority>
}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	46bd      	mov	sp, r7
 800317a:	b004      	add	sp, #16
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	0002      	movs	r2, r0
 8003186:	1dfb      	adds	r3, r7, #7
 8003188:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800318a:	1dfb      	adds	r3, r7, #7
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	b25b      	sxtb	r3, r3
 8003190:	0018      	movs	r0, r3
 8003192:	f7ff ff57 	bl	8003044 <__NVIC_EnableIRQ>
}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b002      	add	sp, #8
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ae:	e149      	b.n	8003444 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2101      	movs	r1, #1
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4091      	lsls	r1, r2
 80031ba:	000a      	movs	r2, r1
 80031bc:	4013      	ands	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d100      	bne.n	80031c8 <HAL_GPIO_Init+0x28>
 80031c6:	e13a      	b.n	800343e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x38>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b12      	cmp	r3, #18
 80031d6:	d123      	bne.n	8003220 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	08da      	lsrs	r2, r3, #3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3208      	adds	r2, #8
 80031e0:	0092      	lsls	r2, r2, #2
 80031e2:	58d3      	ldr	r3, [r2, r3]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2207      	movs	r2, #7
 80031ea:	4013      	ands	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	220f      	movs	r2, #15
 80031f0:	409a      	lsls	r2, r3
 80031f2:	0013      	movs	r3, r2
 80031f4:	43da      	mvns	r2, r3
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2107      	movs	r1, #7
 8003204:	400b      	ands	r3, r1
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	409a      	lsls	r2, r3
 800320a:	0013      	movs	r3, r2
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	08da      	lsrs	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3208      	adds	r2, #8
 800321a:	0092      	lsls	r2, r2, #2
 800321c:	6939      	ldr	r1, [r7, #16]
 800321e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	409a      	lsls	r2, r3
 800322e:	0013      	movs	r3, r2
 8003230:	43da      	mvns	r2, r3
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2203      	movs	r2, #3
 800323e:	401a      	ands	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	409a      	lsls	r2, r3
 8003246:	0013      	movs	r3, r2
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d00b      	beq.n	8003274 <HAL_GPIO_Init+0xd4>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d007      	beq.n	8003274 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003268:	2b11      	cmp	r3, #17
 800326a:	d003      	beq.n	8003274 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b12      	cmp	r3, #18
 8003272:	d130      	bne.n	80032d6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	2203      	movs	r2, #3
 8003280:	409a      	lsls	r2, r3
 8003282:	0013      	movs	r3, r2
 8003284:	43da      	mvns	r2, r3
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	409a      	lsls	r2, r3
 8003296:	0013      	movs	r3, r2
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032aa:	2201      	movs	r2, #1
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	409a      	lsls	r2, r3
 80032b0:	0013      	movs	r3, r2
 80032b2:	43da      	mvns	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4013      	ands	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	2201      	movs	r2, #1
 80032c2:	401a      	ands	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	409a      	lsls	r2, r3
 80032c8:	0013      	movs	r3, r2
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	2203      	movs	r2, #3
 80032e2:	409a      	lsls	r2, r3
 80032e4:	0013      	movs	r3, r2
 80032e6:	43da      	mvns	r2, r3
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4013      	ands	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	409a      	lsls	r2, r3
 80032f8:	0013      	movs	r3, r2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	055b      	lsls	r3, r3, #21
 800330e:	4013      	ands	r3, r2
 8003310:	d100      	bne.n	8003314 <HAL_GPIO_Init+0x174>
 8003312:	e094      	b.n	800343e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003314:	4b51      	ldr	r3, [pc, #324]	; (800345c <HAL_GPIO_Init+0x2bc>)
 8003316:	699a      	ldr	r2, [r3, #24]
 8003318:	4b50      	ldr	r3, [pc, #320]	; (800345c <HAL_GPIO_Init+0x2bc>)
 800331a:	2101      	movs	r1, #1
 800331c:	430a      	orrs	r2, r1
 800331e:	619a      	str	r2, [r3, #24]
 8003320:	4b4e      	ldr	r3, [pc, #312]	; (800345c <HAL_GPIO_Init+0x2bc>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2201      	movs	r2, #1
 8003326:	4013      	ands	r3, r2
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800332c:	4a4c      	ldr	r2, [pc, #304]	; (8003460 <HAL_GPIO_Init+0x2c0>)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	3302      	adds	r3, #2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	589b      	ldr	r3, [r3, r2]
 8003338:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2203      	movs	r2, #3
 800333e:	4013      	ands	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	220f      	movs	r2, #15
 8003344:	409a      	lsls	r2, r3
 8003346:	0013      	movs	r3, r2
 8003348:	43da      	mvns	r2, r3
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	2390      	movs	r3, #144	; 0x90
 8003354:	05db      	lsls	r3, r3, #23
 8003356:	429a      	cmp	r2, r3
 8003358:	d00d      	beq.n	8003376 <HAL_GPIO_Init+0x1d6>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a41      	ldr	r2, [pc, #260]	; (8003464 <HAL_GPIO_Init+0x2c4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <HAL_GPIO_Init+0x1d2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a40      	ldr	r2, [pc, #256]	; (8003468 <HAL_GPIO_Init+0x2c8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_GPIO_Init+0x1ce>
 800336a:	2302      	movs	r3, #2
 800336c:	e004      	b.n	8003378 <HAL_GPIO_Init+0x1d8>
 800336e:	2305      	movs	r3, #5
 8003370:	e002      	b.n	8003378 <HAL_GPIO_Init+0x1d8>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_GPIO_Init+0x1d8>
 8003376:	2300      	movs	r3, #0
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	2103      	movs	r1, #3
 800337c:	400a      	ands	r2, r1
 800337e:	0092      	lsls	r2, r2, #2
 8003380:	4093      	lsls	r3, r2
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003388:	4935      	ldr	r1, [pc, #212]	; (8003460 <HAL_GPIO_Init+0x2c0>)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	089b      	lsrs	r3, r3, #2
 800338e:	3302      	adds	r3, #2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003396:	4b35      	ldr	r3, [pc, #212]	; (800346c <HAL_GPIO_Init+0x2cc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	43da      	mvns	r2, r3
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	025b      	lsls	r3, r3, #9
 80033ae:	4013      	ands	r3, r2
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033ba:	4b2c      	ldr	r3, [pc, #176]	; (800346c <HAL_GPIO_Init+0x2cc>)
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80033c0:	4b2a      	ldr	r3, [pc, #168]	; (800346c <HAL_GPIO_Init+0x2cc>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	43da      	mvns	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	029b      	lsls	r3, r3, #10
 80033d8:	4013      	ands	r3, r2
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033e4:	4b21      	ldr	r3, [pc, #132]	; (800346c <HAL_GPIO_Init+0x2cc>)
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ea:	4b20      	ldr	r3, [pc, #128]	; (800346c <HAL_GPIO_Init+0x2cc>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	43da      	mvns	r2, r3
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4013      	ands	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	035b      	lsls	r3, r3, #13
 8003402:	4013      	ands	r3, r2
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800340e:	4b17      	ldr	r3, [pc, #92]	; (800346c <HAL_GPIO_Init+0x2cc>)
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003414:	4b15      	ldr	r3, [pc, #84]	; (800346c <HAL_GPIO_Init+0x2cc>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	43da      	mvns	r2, r3
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4013      	ands	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	039b      	lsls	r3, r3, #14
 800342c:	4013      	ands	r3, r2
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <HAL_GPIO_Init+0x2cc>)
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	3301      	adds	r3, #1
 8003442:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	40da      	lsrs	r2, r3
 800344c:	1e13      	subs	r3, r2, #0
 800344e:	d000      	beq.n	8003452 <HAL_GPIO_Init+0x2b2>
 8003450:	e6ae      	b.n	80031b0 <HAL_GPIO_Init+0x10>
  } 
}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	46bd      	mov	sp, r7
 8003456:	b006      	add	sp, #24
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	40021000 	.word	0x40021000
 8003460:	40010000 	.word	0x40010000
 8003464:	48000400 	.word	0x48000400
 8003468:	48000800 	.word	0x48000800
 800346c:	40010400 	.word	0x40010400

08003470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	0008      	movs	r0, r1
 800347a:	0011      	movs	r1, r2
 800347c:	1cbb      	adds	r3, r7, #2
 800347e:	1c02      	adds	r2, r0, #0
 8003480:	801a      	strh	r2, [r3, #0]
 8003482:	1c7b      	adds	r3, r7, #1
 8003484:	1c0a      	adds	r2, r1, #0
 8003486:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003488:	1c7b      	adds	r3, r7, #1
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d004      	beq.n	800349a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003490:	1cbb      	adds	r3, r7, #2
 8003492:	881a      	ldrh	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003498:	e003      	b.n	80034a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800349a:	1cbb      	adds	r3, r7, #2
 800349c:	881a      	ldrh	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b002      	add	sp, #8
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e082      	b.n	80035c4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2241      	movs	r2, #65	; 0x41
 80034c2:	5c9b      	ldrb	r3, [r3, r2]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d107      	bne.n	80034da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2240      	movs	r2, #64	; 0x40
 80034ce:	2100      	movs	r1, #0
 80034d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	0018      	movs	r0, r3
 80034d6:	f7ff fbff 	bl	8002cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2241      	movs	r2, #65	; 0x41
 80034de:	2124      	movs	r1, #36	; 0x24
 80034e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2101      	movs	r1, #1
 80034ee:	438a      	bics	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4934      	ldr	r1, [pc, #208]	; (80035cc <HAL_I2C_Init+0x120>)
 80034fc:	400a      	ands	r2, r1
 80034fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4931      	ldr	r1, [pc, #196]	; (80035d0 <HAL_I2C_Init+0x124>)
 800350c:	400a      	ands	r2, r1
 800350e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d108      	bne.n	800352a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	0209      	lsls	r1, r1, #8
 8003524:	430a      	orrs	r2, r1
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	e007      	b.n	800353a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2184      	movs	r1, #132	; 0x84
 8003534:	0209      	lsls	r1, r1, #8
 8003536:	430a      	orrs	r2, r1
 8003538:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d104      	bne.n	800354c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2280      	movs	r2, #128	; 0x80
 8003548:	0112      	lsls	r2, r2, #4
 800354a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	491f      	ldr	r1, [pc, #124]	; (80035d4 <HAL_I2C_Init+0x128>)
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	491a      	ldr	r1, [pc, #104]	; (80035d0 <HAL_I2C_Init+0x124>)
 8003568:	400a      	ands	r2, r1
 800356a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	431a      	orrs	r2, r3
 8003576:	0011      	movs	r1, r2
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	021a      	lsls	r2, r3, #8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69d9      	ldr	r1, [r3, #28]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1a      	ldr	r2, [r3, #32]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2101      	movs	r1, #1
 80035a2:	430a      	orrs	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2241      	movs	r2, #65	; 0x41
 80035b0:	2120      	movs	r1, #32
 80035b2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2242      	movs	r2, #66	; 0x42
 80035be:	2100      	movs	r1, #0
 80035c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	0018      	movs	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	f0ffffff 	.word	0xf0ffffff
 80035d0:	ffff7fff 	.word	0xffff7fff
 80035d4:	02008000 	.word	0x02008000

080035d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d8:	b590      	push	{r4, r7, lr}
 80035da:	b089      	sub	sp, #36	; 0x24
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	0008      	movs	r0, r1
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	0019      	movs	r1, r3
 80035e6:	230a      	movs	r3, #10
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	1c02      	adds	r2, r0, #0
 80035ec:	801a      	strh	r2, [r3, #0]
 80035ee:	2308      	movs	r3, #8
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	1c0a      	adds	r2, r1, #0
 80035f4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2241      	movs	r2, #65	; 0x41
 80035fa:	5c9b      	ldrb	r3, [r3, r2]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d000      	beq.n	8003604 <HAL_I2C_Master_Transmit+0x2c>
 8003602:	e0e7      	b.n	80037d4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2240      	movs	r2, #64	; 0x40
 8003608:	5c9b      	ldrb	r3, [r3, r2]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_I2C_Master_Transmit+0x3a>
 800360e:	2302      	movs	r3, #2
 8003610:	e0e1      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1fe>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2240      	movs	r2, #64	; 0x40
 8003616:	2101      	movs	r1, #1
 8003618:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800361a:	f7ff fce7 	bl	8002fec <HAL_GetTick>
 800361e:	0003      	movs	r3, r0
 8003620:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	0219      	lsls	r1, r3, #8
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	2319      	movs	r3, #25
 800362e:	2201      	movs	r2, #1
 8003630:	f000 fa04 	bl	8003a3c <I2C_WaitOnFlagUntilTimeout>
 8003634:	1e03      	subs	r3, r0, #0
 8003636:	d001      	beq.n	800363c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0cc      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2241      	movs	r2, #65	; 0x41
 8003640:	2121      	movs	r1, #33	; 0x21
 8003642:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2242      	movs	r2, #66	; 0x42
 8003648:	2110      	movs	r1, #16
 800364a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2208      	movs	r2, #8
 800365c:	18ba      	adds	r2, r7, r2
 800365e:	8812      	ldrh	r2, [r2, #0]
 8003660:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2bff      	cmp	r3, #255	; 0xff
 8003670:	d911      	bls.n	8003696 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	22ff      	movs	r2, #255	; 0xff
 8003676:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	b2da      	uxtb	r2, r3
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	045c      	lsls	r4, r3, #17
 8003682:	230a      	movs	r3, #10
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	8819      	ldrh	r1, [r3, #0]
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	4b55      	ldr	r3, [pc, #340]	; (80037e0 <HAL_I2C_Master_Transmit+0x208>)
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	0023      	movs	r3, r4
 8003690:	f000 fb60 	bl	8003d54 <I2C_TransferConfig>
 8003694:	e075      	b.n	8003782 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	049c      	lsls	r4, r3, #18
 80036aa:	230a      	movs	r3, #10
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	8819      	ldrh	r1, [r3, #0]
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	4b4b      	ldr	r3, [pc, #300]	; (80037e0 <HAL_I2C_Master_Transmit+0x208>)
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	0023      	movs	r3, r4
 80036b8:	f000 fb4c 	bl	8003d54 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80036bc:	e061      	b.n	8003782 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	0018      	movs	r0, r3
 80036c6:	f000 f9f8 	bl	8003aba <I2C_WaitOnTXISFlagUntilTimeout>
 80036ca:	1e03      	subs	r3, r0, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e081      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	781a      	ldrb	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d03a      	beq.n	8003782 <HAL_I2C_Master_Transmit+0x1aa>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003710:	2b00      	cmp	r3, #0
 8003712:	d136      	bne.n	8003782 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	0013      	movs	r3, r2
 800371e:	2200      	movs	r2, #0
 8003720:	2180      	movs	r1, #128	; 0x80
 8003722:	f000 f98b 	bl	8003a3c <I2C_WaitOnFlagUntilTimeout>
 8003726:	1e03      	subs	r3, r0, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e053      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	2bff      	cmp	r3, #255	; 0xff
 8003736:	d911      	bls.n	800375c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	22ff      	movs	r2, #255	; 0xff
 800373c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003742:	b2da      	uxtb	r2, r3
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	045c      	lsls	r4, r3, #17
 8003748:	230a      	movs	r3, #10
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	8819      	ldrh	r1, [r3, #0]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	2300      	movs	r3, #0
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	0023      	movs	r3, r4
 8003756:	f000 fafd 	bl	8003d54 <I2C_TransferConfig>
 800375a:	e012      	b.n	8003782 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376a:	b2da      	uxtb	r2, r3
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	049c      	lsls	r4, r3, #18
 8003770:	230a      	movs	r3, #10
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	8819      	ldrh	r1, [r3, #0]
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	2300      	movs	r3, #0
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	0023      	movs	r3, r4
 800377e:	f000 fae9 	bl	8003d54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d198      	bne.n	80036be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	0018      	movs	r0, r3
 8003794:	f000 f9d0 	bl	8003b38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003798:	1e03      	subs	r3, r0, #0
 800379a:	d001      	beq.n	80037a0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e01a      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2220      	movs	r2, #32
 80037a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	490c      	ldr	r1, [pc, #48]	; (80037e4 <HAL_I2C_Master_Transmit+0x20c>)
 80037b4:	400a      	ands	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2241      	movs	r2, #65	; 0x41
 80037bc:	2120      	movs	r1, #32
 80037be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2242      	movs	r2, #66	; 0x42
 80037c4:	2100      	movs	r1, #0
 80037c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2240      	movs	r2, #64	; 0x40
 80037cc:	2100      	movs	r1, #0
 80037ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e000      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
  }
}
 80037d6:	0018      	movs	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	b007      	add	sp, #28
 80037dc:	bd90      	pop	{r4, r7, pc}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	80002000 	.word	0x80002000
 80037e4:	fe00e800 	.word	0xfe00e800

080037e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b089      	sub	sp, #36	; 0x24
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	0008      	movs	r0, r1
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	0019      	movs	r1, r3
 80037f6:	230a      	movs	r3, #10
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	1c02      	adds	r2, r0, #0
 80037fc:	801a      	strh	r2, [r3, #0]
 80037fe:	2308      	movs	r3, #8
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	1c0a      	adds	r2, r1, #0
 8003804:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2241      	movs	r2, #65	; 0x41
 800380a:	5c9b      	ldrb	r3, [r3, r2]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b20      	cmp	r3, #32
 8003810:	d000      	beq.n	8003814 <HAL_I2C_Master_Receive+0x2c>
 8003812:	e0e8      	b.n	80039e6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2240      	movs	r2, #64	; 0x40
 8003818:	5c9b      	ldrb	r3, [r3, r2]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_I2C_Master_Receive+0x3a>
 800381e:	2302      	movs	r3, #2
 8003820:	e0e2      	b.n	80039e8 <HAL_I2C_Master_Receive+0x200>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2240      	movs	r2, #64	; 0x40
 8003826:	2101      	movs	r1, #1
 8003828:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800382a:	f7ff fbdf 	bl	8002fec <HAL_GetTick>
 800382e:	0003      	movs	r3, r0
 8003830:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	0219      	lsls	r1, r3, #8
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	2319      	movs	r3, #25
 800383e:	2201      	movs	r2, #1
 8003840:	f000 f8fc 	bl	8003a3c <I2C_WaitOnFlagUntilTimeout>
 8003844:	1e03      	subs	r3, r0, #0
 8003846:	d001      	beq.n	800384c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0cd      	b.n	80039e8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2241      	movs	r2, #65	; 0x41
 8003850:	2122      	movs	r1, #34	; 0x22
 8003852:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2242      	movs	r2, #66	; 0x42
 8003858:	2110      	movs	r1, #16
 800385a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2208      	movs	r2, #8
 800386c:	18ba      	adds	r2, r7, r2
 800386e:	8812      	ldrh	r2, [r2, #0]
 8003870:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2bff      	cmp	r3, #255	; 0xff
 8003880:	d911      	bls.n	80038a6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	22ff      	movs	r2, #255	; 0xff
 8003886:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	b2da      	uxtb	r2, r3
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	045c      	lsls	r4, r3, #17
 8003892:	230a      	movs	r3, #10
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	8819      	ldrh	r1, [r3, #0]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	4b55      	ldr	r3, [pc, #340]	; (80039f0 <HAL_I2C_Master_Receive+0x208>)
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	0023      	movs	r3, r4
 80038a0:	f000 fa58 	bl	8003d54 <I2C_TransferConfig>
 80038a4:	e076      	b.n	8003994 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	049c      	lsls	r4, r3, #18
 80038ba:	230a      	movs	r3, #10
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	8819      	ldrh	r1, [r3, #0]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	4b4b      	ldr	r3, [pc, #300]	; (80039f0 <HAL_I2C_Master_Receive+0x208>)
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	0023      	movs	r3, r4
 80038c8:	f000 fa44 	bl	8003d54 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80038cc:	e062      	b.n	8003994 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f000 f96b 	bl	8003bb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038da:	1e03      	subs	r3, r0, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e082      	b.n	80039e8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d03a      	beq.n	8003994 <HAL_I2C_Master_Receive+0x1ac>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003922:	2b00      	cmp	r3, #0
 8003924:	d136      	bne.n	8003994 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	0013      	movs	r3, r2
 8003930:	2200      	movs	r2, #0
 8003932:	2180      	movs	r1, #128	; 0x80
 8003934:	f000 f882 	bl	8003a3c <I2C_WaitOnFlagUntilTimeout>
 8003938:	1e03      	subs	r3, r0, #0
 800393a:	d001      	beq.n	8003940 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e053      	b.n	80039e8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	2bff      	cmp	r3, #255	; 0xff
 8003948:	d911      	bls.n	800396e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	22ff      	movs	r2, #255	; 0xff
 800394e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003954:	b2da      	uxtb	r2, r3
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	045c      	lsls	r4, r3, #17
 800395a:	230a      	movs	r3, #10
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	8819      	ldrh	r1, [r3, #0]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	2300      	movs	r3, #0
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	0023      	movs	r3, r4
 8003968:	f000 f9f4 	bl	8003d54 <I2C_TransferConfig>
 800396c:	e012      	b.n	8003994 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397c:	b2da      	uxtb	r2, r3
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	049c      	lsls	r4, r3, #18
 8003982:	230a      	movs	r3, #10
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	8819      	ldrh	r1, [r3, #0]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	2300      	movs	r3, #0
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	0023      	movs	r3, r4
 8003990:	f000 f9e0 	bl	8003d54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d197      	bne.n	80038ce <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 f8c7 	bl	8003b38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039aa:	1e03      	subs	r3, r0, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e01a      	b.n	80039e8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2220      	movs	r2, #32
 80039b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	490b      	ldr	r1, [pc, #44]	; (80039f4 <HAL_I2C_Master_Receive+0x20c>)
 80039c6:	400a      	ands	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2241      	movs	r2, #65	; 0x41
 80039ce:	2120      	movs	r1, #32
 80039d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2242      	movs	r2, #66	; 0x42
 80039d6:	2100      	movs	r1, #0
 80039d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2240      	movs	r2, #64	; 0x40
 80039de:	2100      	movs	r1, #0
 80039e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e000      	b.n	80039e8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80039e6:	2302      	movs	r3, #2
  }
}
 80039e8:	0018      	movs	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b007      	add	sp, #28
 80039ee:	bd90      	pop	{r4, r7, pc}
 80039f0:	80002400 	.word	0x80002400
 80039f4:	fe00e800 	.word	0xfe00e800

080039f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2202      	movs	r2, #2
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d103      	bne.n	8003a16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d007      	beq.n	8003a34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2101      	movs	r1, #1
 8003a30:	430a      	orrs	r2, r1
 8003a32:	619a      	str	r2, [r3, #24]
  }
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b002      	add	sp, #8
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	1dfb      	adds	r3, r7, #7
 8003a4a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a4c:	e021      	b.n	8003a92 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	3301      	adds	r3, #1
 8003a52:	d01e      	beq.n	8003a92 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a54:	f7ff faca 	bl	8002fec <HAL_GetTick>
 8003a58:	0002      	movs	r2, r0
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d302      	bcc.n	8003a6a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d113      	bne.n	8003a92 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	2220      	movs	r2, #32
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2241      	movs	r2, #65	; 0x41
 8003a7a:	2120      	movs	r1, #32
 8003a7c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2242      	movs	r2, #66	; 0x42
 8003a82:	2100      	movs	r1, #0
 8003a84:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2240      	movs	r2, #64	; 0x40
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e00f      	b.n	8003ab2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	425a      	negs	r2, r3
 8003aa2:	4153      	adcs	r3, r2
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	001a      	movs	r2, r3
 8003aa8:	1dfb      	adds	r3, r7, #7
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d0ce      	beq.n	8003a4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b004      	add	sp, #16
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ac6:	e02b      	b.n	8003b20 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f000 f8da 	bl	8003c88 <I2C_IsAcknowledgeFailed>
 8003ad4:	1e03      	subs	r3, r0, #0
 8003ad6:	d001      	beq.n	8003adc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e029      	b.n	8003b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	d01e      	beq.n	8003b20 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae2:	f7ff fa83 	bl	8002fec <HAL_GetTick>
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d302      	bcc.n	8003af8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d113      	bne.n	8003b20 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	2220      	movs	r2, #32
 8003afe:	431a      	orrs	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2241      	movs	r2, #65	; 0x41
 8003b08:	2120      	movs	r1, #32
 8003b0a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2242      	movs	r2, #66	; 0x42
 8003b10:	2100      	movs	r1, #0
 8003b12:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2240      	movs	r2, #64	; 0x40
 8003b18:	2100      	movs	r1, #0
 8003b1a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e007      	b.n	8003b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	2202      	movs	r2, #2
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d1cc      	bne.n	8003ac8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b004      	add	sp, #16
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b44:	e028      	b.n	8003b98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f000 f89b 	bl	8003c88 <I2C_IsAcknowledgeFailed>
 8003b52:	1e03      	subs	r3, r0, #0
 8003b54:	d001      	beq.n	8003b5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e026      	b.n	8003ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5a:	f7ff fa47 	bl	8002fec <HAL_GetTick>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d302      	bcc.n	8003b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d113      	bne.n	8003b98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	2220      	movs	r2, #32
 8003b76:	431a      	orrs	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2241      	movs	r2, #65	; 0x41
 8003b80:	2120      	movs	r1, #32
 8003b82:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2242      	movs	r2, #66	; 0x42
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2240      	movs	r2, #64	; 0x40
 8003b90:	2100      	movs	r1, #0
 8003b92:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e007      	b.n	8003ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d1cf      	bne.n	8003b46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b004      	add	sp, #16
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bbc:	e055      	b.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f000 f85f 	bl	8003c88 <I2C_IsAcknowledgeFailed>
 8003bca:	1e03      	subs	r3, r0, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e053      	b.n	8003c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d129      	bne.n	8003c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2204      	movs	r2, #4
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d105      	bne.n	8003bfa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e03f      	b.n	8003c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	491d      	ldr	r1, [pc, #116]	; (8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003c0e:	400a      	ands	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2241      	movs	r2, #65	; 0x41
 8003c1c:	2120      	movs	r1, #32
 8003c1e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2242      	movs	r2, #66	; 0x42
 8003c24:	2100      	movs	r1, #0
 8003c26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2240      	movs	r2, #64	; 0x40
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e022      	b.n	8003c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c34:	f7ff f9da 	bl	8002fec <HAL_GetTick>
 8003c38:	0002      	movs	r2, r0
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d302      	bcc.n	8003c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	2220      	movs	r2, #32
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2241      	movs	r2, #65	; 0x41
 8003c5a:	2120      	movs	r1, #32
 8003c5c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2240      	movs	r2, #64	; 0x40
 8003c62:	2100      	movs	r1, #0
 8003c64:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e007      	b.n	8003c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	2204      	movs	r2, #4
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d1a2      	bne.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b004      	add	sp, #16
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	fe00e800 	.word	0xfe00e800

08003c88 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2210      	movs	r2, #16
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b10      	cmp	r3, #16
 8003ca0:	d151      	bne.n	8003d46 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ca2:	e021      	b.n	8003ce8 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	d01e      	beq.n	8003ce8 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003caa:	f7ff f99f 	bl	8002fec <HAL_GetTick>
 8003cae:	0002      	movs	r2, r0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d302      	bcc.n	8003cc0 <I2C_IsAcknowledgeFailed+0x38>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d113      	bne.n	8003ce8 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2241      	movs	r2, #65	; 0x41
 8003cd0:	2120      	movs	r1, #32
 8003cd2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2242      	movs	r2, #66	; 0x42
 8003cd8:	2100      	movs	r1, #0
 8003cda:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2240      	movs	r2, #64	; 0x40
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e02f      	b.n	8003d48 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d1d6      	bne.n	8003ca4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2220      	movs	r2, #32
 8003d04:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7ff fe75 	bl	80039f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	490d      	ldr	r1, [pc, #52]	; (8003d50 <I2C_IsAcknowledgeFailed+0xc8>)
 8003d1a:	400a      	ands	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	2204      	movs	r2, #4
 8003d24:	431a      	orrs	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2241      	movs	r2, #65	; 0x41
 8003d2e:	2120      	movs	r1, #32
 8003d30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2242      	movs	r2, #66	; 0x42
 8003d36:	2100      	movs	r1, #0
 8003d38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2240      	movs	r2, #64	; 0x40
 8003d3e:	2100      	movs	r1, #0
 8003d40:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	0018      	movs	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b004      	add	sp, #16
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	fe00e800 	.word	0xfe00e800

08003d54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	0008      	movs	r0, r1
 8003d5e:	0011      	movs	r1, r2
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	240a      	movs	r4, #10
 8003d64:	193b      	adds	r3, r7, r4
 8003d66:	1c02      	adds	r2, r0, #0
 8003d68:	801a      	strh	r2, [r3, #0]
 8003d6a:	2009      	movs	r0, #9
 8003d6c:	183b      	adds	r3, r7, r0
 8003d6e:	1c0a      	adds	r2, r1, #0
 8003d70:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	6a3a      	ldr	r2, [r7, #32]
 8003d7a:	0d51      	lsrs	r1, r2, #21
 8003d7c:	2280      	movs	r2, #128	; 0x80
 8003d7e:	00d2      	lsls	r2, r2, #3
 8003d80:	400a      	ands	r2, r1
 8003d82:	490e      	ldr	r1, [pc, #56]	; (8003dbc <I2C_TransferConfig+0x68>)
 8003d84:	430a      	orrs	r2, r1
 8003d86:	43d2      	mvns	r2, r2
 8003d88:	401a      	ands	r2, r3
 8003d8a:	0011      	movs	r1, r2
 8003d8c:	193b      	adds	r3, r7, r4
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	059b      	lsls	r3, r3, #22
 8003d92:	0d9a      	lsrs	r2, r3, #22
 8003d94:	183b      	adds	r3, r7, r0
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	0418      	lsls	r0, r3, #16
 8003d9a:	23ff      	movs	r3, #255	; 0xff
 8003d9c:	041b      	lsls	r3, r3, #16
 8003d9e:	4003      	ands	r3, r0
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	431a      	orrs	r2, r3
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b005      	add	sp, #20
 8003db8:	bd90      	pop	{r4, r7, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	03ff63ff 	.word	0x03ff63ff

08003dc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2241      	movs	r2, #65	; 0x41
 8003dce:	5c9b      	ldrb	r3, [r3, r2]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d138      	bne.n	8003e48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2240      	movs	r2, #64	; 0x40
 8003dda:	5c9b      	ldrb	r3, [r3, r2]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e032      	b.n	8003e4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2240      	movs	r2, #64	; 0x40
 8003de8:	2101      	movs	r1, #1
 8003dea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2241      	movs	r2, #65	; 0x41
 8003df0:	2124      	movs	r1, #36	; 0x24
 8003df2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2101      	movs	r1, #1
 8003e00:	438a      	bics	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4911      	ldr	r1, [pc, #68]	; (8003e54 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003e10:	400a      	ands	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6819      	ldr	r1, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2101      	movs	r1, #1
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2241      	movs	r2, #65	; 0x41
 8003e38:	2120      	movs	r1, #32
 8003e3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2240      	movs	r2, #64	; 0x40
 8003e40:	2100      	movs	r1, #0
 8003e42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e000      	b.n	8003e4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
  }
}
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b002      	add	sp, #8
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	ffffefff 	.word	0xffffefff

08003e58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2241      	movs	r2, #65	; 0x41
 8003e66:	5c9b      	ldrb	r3, [r3, r2]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b20      	cmp	r3, #32
 8003e6c:	d139      	bne.n	8003ee2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2240      	movs	r2, #64	; 0x40
 8003e72:	5c9b      	ldrb	r3, [r3, r2]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e033      	b.n	8003ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2240      	movs	r2, #64	; 0x40
 8003e80:	2101      	movs	r1, #1
 8003e82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2241      	movs	r2, #65	; 0x41
 8003e88:	2124      	movs	r1, #36	; 0x24
 8003e8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2101      	movs	r1, #1
 8003e98:	438a      	bics	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a11      	ldr	r2, [pc, #68]	; (8003eec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2101      	movs	r1, #1
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2241      	movs	r2, #65	; 0x41
 8003ed2:	2120      	movs	r1, #32
 8003ed4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2240      	movs	r2, #64	; 0x40
 8003eda:	2100      	movs	r1, #0
 8003edc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e000      	b.n	8003ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ee2:	2302      	movs	r3, #2
  }
}
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b004      	add	sp, #16
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	fffff0ff 	.word	0xfffff0ff

08003ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f000 fb76 	bl	80045f0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d100      	bne.n	8003f10 <HAL_RCC_OscConfig+0x20>
 8003f0e:	e08e      	b.n	800402e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f10:	4bc5      	ldr	r3, [pc, #788]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	220c      	movs	r2, #12
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d00e      	beq.n	8003f3a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f1c:	4bc2      	ldr	r3, [pc, #776]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	220c      	movs	r2, #12
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d117      	bne.n	8003f58 <HAL_RCC_OscConfig+0x68>
 8003f28:	4bbf      	ldr	r3, [pc, #764]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	23c0      	movs	r3, #192	; 0xc0
 8003f2e:	025b      	lsls	r3, r3, #9
 8003f30:	401a      	ands	r2, r3
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	025b      	lsls	r3, r3, #9
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d10e      	bne.n	8003f58 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f3a:	4bbb      	ldr	r3, [pc, #748]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	029b      	lsls	r3, r3, #10
 8003f42:	4013      	ands	r3, r2
 8003f44:	d100      	bne.n	8003f48 <HAL_RCC_OscConfig+0x58>
 8003f46:	e071      	b.n	800402c <HAL_RCC_OscConfig+0x13c>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d000      	beq.n	8003f52 <HAL_RCC_OscConfig+0x62>
 8003f50:	e06c      	b.n	800402c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f000 fb4c 	bl	80045f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_OscConfig+0x80>
 8003f60:	4bb1      	ldr	r3, [pc, #708]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4bb0      	ldr	r3, [pc, #704]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003f66:	2180      	movs	r1, #128	; 0x80
 8003f68:	0249      	lsls	r1, r1, #9
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	e02f      	b.n	8003fd0 <HAL_RCC_OscConfig+0xe0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10c      	bne.n	8003f92 <HAL_RCC_OscConfig+0xa2>
 8003f78:	4bab      	ldr	r3, [pc, #684]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4baa      	ldr	r3, [pc, #680]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003f7e:	49ab      	ldr	r1, [pc, #684]	; (800422c <HAL_RCC_OscConfig+0x33c>)
 8003f80:	400a      	ands	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	4ba8      	ldr	r3, [pc, #672]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4ba7      	ldr	r3, [pc, #668]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003f8a:	49a9      	ldr	r1, [pc, #676]	; (8004230 <HAL_RCC_OscConfig+0x340>)
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e01e      	b.n	8003fd0 <HAL_RCC_OscConfig+0xe0>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d10e      	bne.n	8003fb8 <HAL_RCC_OscConfig+0xc8>
 8003f9a:	4ba3      	ldr	r3, [pc, #652]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4ba2      	ldr	r3, [pc, #648]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003fa0:	2180      	movs	r1, #128	; 0x80
 8003fa2:	02c9      	lsls	r1, r1, #11
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	4b9f      	ldr	r3, [pc, #636]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4b9e      	ldr	r3, [pc, #632]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003fae:	2180      	movs	r1, #128	; 0x80
 8003fb0:	0249      	lsls	r1, r1, #9
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e00b      	b.n	8003fd0 <HAL_RCC_OscConfig+0xe0>
 8003fb8:	4b9b      	ldr	r3, [pc, #620]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b9a      	ldr	r3, [pc, #616]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003fbe:	499b      	ldr	r1, [pc, #620]	; (800422c <HAL_RCC_OscConfig+0x33c>)
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	4b98      	ldr	r3, [pc, #608]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4b97      	ldr	r3, [pc, #604]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003fca:	4999      	ldr	r1, [pc, #612]	; (8004230 <HAL_RCC_OscConfig+0x340>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d014      	beq.n	8004002 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd8:	f7ff f808 	bl	8002fec <HAL_GetTick>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe2:	f7ff f803 	bl	8002fec <HAL_GetTick>
 8003fe6:	0002      	movs	r2, r0
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b64      	cmp	r3, #100	; 0x64
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e2fd      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff4:	4b8c      	ldr	r3, [pc, #560]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	029b      	lsls	r3, r3, #10
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d0f0      	beq.n	8003fe2 <HAL_RCC_OscConfig+0xf2>
 8004000:	e015      	b.n	800402e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004002:	f7fe fff3 	bl	8002fec <HAL_GetTick>
 8004006:	0003      	movs	r3, r0
 8004008:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800400c:	f7fe ffee 	bl	8002fec <HAL_GetTick>
 8004010:	0002      	movs	r2, r0
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	; 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e2e8      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401e:	4b82      	ldr	r3, [pc, #520]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	029b      	lsls	r3, r3, #10
 8004026:	4013      	ands	r3, r2
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x11c>
 800402a:	e000      	b.n	800402e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800402c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2202      	movs	r2, #2
 8004034:	4013      	ands	r3, r2
 8004036:	d100      	bne.n	800403a <HAL_RCC_OscConfig+0x14a>
 8004038:	e06c      	b.n	8004114 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800403a:	4b7b      	ldr	r3, [pc, #492]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	220c      	movs	r2, #12
 8004040:	4013      	ands	r3, r2
 8004042:	d00e      	beq.n	8004062 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004044:	4b78      	ldr	r3, [pc, #480]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	220c      	movs	r2, #12
 800404a:	4013      	ands	r3, r2
 800404c:	2b08      	cmp	r3, #8
 800404e:	d11f      	bne.n	8004090 <HAL_RCC_OscConfig+0x1a0>
 8004050:	4b75      	ldr	r3, [pc, #468]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	23c0      	movs	r3, #192	; 0xc0
 8004056:	025b      	lsls	r3, r3, #9
 8004058:	401a      	ands	r2, r3
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	429a      	cmp	r2, r3
 8004060:	d116      	bne.n	8004090 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	4b71      	ldr	r3, [pc, #452]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2202      	movs	r2, #2
 8004068:	4013      	ands	r3, r2
 800406a:	d005      	beq.n	8004078 <HAL_RCC_OscConfig+0x188>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d001      	beq.n	8004078 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e2bb      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004078:	4b6b      	ldr	r3, [pc, #428]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	22f8      	movs	r2, #248	; 0xf8
 800407e:	4393      	bics	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	00da      	lsls	r2, r3, #3
 8004088:	4b67      	ldr	r3, [pc, #412]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 800408a:	430a      	orrs	r2, r1
 800408c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408e:	e041      	b.n	8004114 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d024      	beq.n	80040e2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004098:	4b63      	ldr	r3, [pc, #396]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b62      	ldr	r3, [pc, #392]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 800409e:	2101      	movs	r1, #1
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fe ffa2 	bl	8002fec <HAL_GetTick>
 80040a8:	0003      	movs	r3, r0
 80040aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ae:	f7fe ff9d 	bl	8002fec <HAL_GetTick>
 80040b2:	0002      	movs	r2, r0
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e297      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c0:	4b59      	ldr	r3, [pc, #356]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2202      	movs	r2, #2
 80040c6:	4013      	ands	r3, r2
 80040c8:	d0f1      	beq.n	80040ae <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ca:	4b57      	ldr	r3, [pc, #348]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	22f8      	movs	r2, #248	; 0xf8
 80040d0:	4393      	bics	r3, r2
 80040d2:	0019      	movs	r1, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	00da      	lsls	r2, r3, #3
 80040da:	4b53      	ldr	r3, [pc, #332]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 80040dc:	430a      	orrs	r2, r1
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	e018      	b.n	8004114 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e2:	4b51      	ldr	r3, [pc, #324]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	4b50      	ldr	r3, [pc, #320]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 80040e8:	2101      	movs	r1, #1
 80040ea:	438a      	bics	r2, r1
 80040ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ee:	f7fe ff7d 	bl	8002fec <HAL_GetTick>
 80040f2:	0003      	movs	r3, r0
 80040f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f8:	f7fe ff78 	bl	8002fec <HAL_GetTick>
 80040fc:	0002      	movs	r2, r0
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e272      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410a:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2202      	movs	r2, #2
 8004110:	4013      	ands	r3, r2
 8004112:	d1f1      	bne.n	80040f8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2208      	movs	r2, #8
 800411a:	4013      	ands	r3, r2
 800411c:	d036      	beq.n	800418c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d019      	beq.n	800415a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004126:	4b40      	ldr	r3, [pc, #256]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8004128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800412a:	4b3f      	ldr	r3, [pc, #252]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 800412c:	2101      	movs	r1, #1
 800412e:	430a      	orrs	r2, r1
 8004130:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004132:	f7fe ff5b 	bl	8002fec <HAL_GetTick>
 8004136:	0003      	movs	r3, r0
 8004138:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800413c:	f7fe ff56 	bl	8002fec <HAL_GetTick>
 8004140:	0002      	movs	r2, r0
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e250      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414e:	4b36      	ldr	r3, [pc, #216]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	2202      	movs	r2, #2
 8004154:	4013      	ands	r3, r2
 8004156:	d0f1      	beq.n	800413c <HAL_RCC_OscConfig+0x24c>
 8004158:	e018      	b.n	800418c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800415a:	4b33      	ldr	r3, [pc, #204]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 800415c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800415e:	4b32      	ldr	r3, [pc, #200]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8004160:	2101      	movs	r1, #1
 8004162:	438a      	bics	r2, r1
 8004164:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004166:	f7fe ff41 	bl	8002fec <HAL_GetTick>
 800416a:	0003      	movs	r3, r0
 800416c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004170:	f7fe ff3c 	bl	8002fec <HAL_GetTick>
 8004174:	0002      	movs	r2, r0
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e236      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004182:	4b29      	ldr	r3, [pc, #164]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	2202      	movs	r2, #2
 8004188:	4013      	ands	r3, r2
 800418a:	d1f1      	bne.n	8004170 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2204      	movs	r2, #4
 8004192:	4013      	ands	r3, r2
 8004194:	d100      	bne.n	8004198 <HAL_RCC_OscConfig+0x2a8>
 8004196:	e0b5      	b.n	8004304 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004198:	231f      	movs	r3, #31
 800419a:	18fb      	adds	r3, r7, r3
 800419c:	2200      	movs	r2, #0
 800419e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a0:	4b21      	ldr	r3, [pc, #132]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 80041a2:	69da      	ldr	r2, [r3, #28]
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	055b      	lsls	r3, r3, #21
 80041a8:	4013      	ands	r3, r2
 80041aa:	d111      	bne.n	80041d0 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ac:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 80041ae:	69da      	ldr	r2, [r3, #28]
 80041b0:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 80041b2:	2180      	movs	r1, #128	; 0x80
 80041b4:	0549      	lsls	r1, r1, #21
 80041b6:	430a      	orrs	r2, r1
 80041b8:	61da      	str	r2, [r3, #28]
 80041ba:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	2380      	movs	r3, #128	; 0x80
 80041c0:	055b      	lsls	r3, r3, #21
 80041c2:	4013      	ands	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041c8:	231f      	movs	r3, #31
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	2201      	movs	r2, #1
 80041ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d0:	4b18      	ldr	r3, [pc, #96]	; (8004234 <HAL_RCC_OscConfig+0x344>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4013      	ands	r3, r2
 80041da:	d11a      	bne.n	8004212 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041dc:	4b15      	ldr	r3, [pc, #84]	; (8004234 <HAL_RCC_OscConfig+0x344>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4b14      	ldr	r3, [pc, #80]	; (8004234 <HAL_RCC_OscConfig+0x344>)
 80041e2:	2180      	movs	r1, #128	; 0x80
 80041e4:	0049      	lsls	r1, r1, #1
 80041e6:	430a      	orrs	r2, r1
 80041e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ea:	f7fe feff 	bl	8002fec <HAL_GetTick>
 80041ee:	0003      	movs	r3, r0
 80041f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f4:	f7fe fefa 	bl	8002fec <HAL_GetTick>
 80041f8:	0002      	movs	r2, r0
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b64      	cmp	r3, #100	; 0x64
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e1f4      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004206:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_RCC_OscConfig+0x344>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	2380      	movs	r3, #128	; 0x80
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	4013      	ands	r3, r2
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d10e      	bne.n	8004238 <HAL_RCC_OscConfig+0x348>
 800421a:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 800421c:	6a1a      	ldr	r2, [r3, #32]
 800421e:	4b02      	ldr	r3, [pc, #8]	; (8004228 <HAL_RCC_OscConfig+0x338>)
 8004220:	2101      	movs	r1, #1
 8004222:	430a      	orrs	r2, r1
 8004224:	621a      	str	r2, [r3, #32]
 8004226:	e035      	b.n	8004294 <HAL_RCC_OscConfig+0x3a4>
 8004228:	40021000 	.word	0x40021000
 800422c:	fffeffff 	.word	0xfffeffff
 8004230:	fffbffff 	.word	0xfffbffff
 8004234:	40007000 	.word	0x40007000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10c      	bne.n	800425a <HAL_RCC_OscConfig+0x36a>
 8004240:	4bca      	ldr	r3, [pc, #808]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004242:	6a1a      	ldr	r2, [r3, #32]
 8004244:	4bc9      	ldr	r3, [pc, #804]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004246:	2101      	movs	r1, #1
 8004248:	438a      	bics	r2, r1
 800424a:	621a      	str	r2, [r3, #32]
 800424c:	4bc7      	ldr	r3, [pc, #796]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 800424e:	6a1a      	ldr	r2, [r3, #32]
 8004250:	4bc6      	ldr	r3, [pc, #792]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004252:	2104      	movs	r1, #4
 8004254:	438a      	bics	r2, r1
 8004256:	621a      	str	r2, [r3, #32]
 8004258:	e01c      	b.n	8004294 <HAL_RCC_OscConfig+0x3a4>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b05      	cmp	r3, #5
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0x38c>
 8004262:	4bc2      	ldr	r3, [pc, #776]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004264:	6a1a      	ldr	r2, [r3, #32]
 8004266:	4bc1      	ldr	r3, [pc, #772]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004268:	2104      	movs	r1, #4
 800426a:	430a      	orrs	r2, r1
 800426c:	621a      	str	r2, [r3, #32]
 800426e:	4bbf      	ldr	r3, [pc, #764]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004270:	6a1a      	ldr	r2, [r3, #32]
 8004272:	4bbe      	ldr	r3, [pc, #760]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004274:	2101      	movs	r1, #1
 8004276:	430a      	orrs	r2, r1
 8004278:	621a      	str	r2, [r3, #32]
 800427a:	e00b      	b.n	8004294 <HAL_RCC_OscConfig+0x3a4>
 800427c:	4bbb      	ldr	r3, [pc, #748]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 800427e:	6a1a      	ldr	r2, [r3, #32]
 8004280:	4bba      	ldr	r3, [pc, #744]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004282:	2101      	movs	r1, #1
 8004284:	438a      	bics	r2, r1
 8004286:	621a      	str	r2, [r3, #32]
 8004288:	4bb8      	ldr	r3, [pc, #736]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 800428a:	6a1a      	ldr	r2, [r3, #32]
 800428c:	4bb7      	ldr	r3, [pc, #732]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 800428e:	2104      	movs	r1, #4
 8004290:	438a      	bics	r2, r1
 8004292:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d014      	beq.n	80042c6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429c:	f7fe fea6 	bl	8002fec <HAL_GetTick>
 80042a0:	0003      	movs	r3, r0
 80042a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a4:	e009      	b.n	80042ba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a6:	f7fe fea1 	bl	8002fec <HAL_GetTick>
 80042aa:	0002      	movs	r2, r0
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	4aaf      	ldr	r2, [pc, #700]	; (8004570 <HAL_RCC_OscConfig+0x680>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e19a      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ba:	4bac      	ldr	r3, [pc, #688]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	2202      	movs	r2, #2
 80042c0:	4013      	ands	r3, r2
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCC_OscConfig+0x3b6>
 80042c4:	e013      	b.n	80042ee <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c6:	f7fe fe91 	bl	8002fec <HAL_GetTick>
 80042ca:	0003      	movs	r3, r0
 80042cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ce:	e009      	b.n	80042e4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d0:	f7fe fe8c 	bl	8002fec <HAL_GetTick>
 80042d4:	0002      	movs	r2, r0
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	4aa5      	ldr	r2, [pc, #660]	; (8004570 <HAL_RCC_OscConfig+0x680>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e185      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e4:	4ba1      	ldr	r3, [pc, #644]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	2202      	movs	r2, #2
 80042ea:	4013      	ands	r3, r2
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042ee:	231f      	movs	r3, #31
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d105      	bne.n	8004304 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f8:	4b9c      	ldr	r3, [pc, #624]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	4b9b      	ldr	r3, [pc, #620]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80042fe:	499d      	ldr	r1, [pc, #628]	; (8004574 <HAL_RCC_OscConfig+0x684>)
 8004300:	400a      	ands	r2, r1
 8004302:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2210      	movs	r2, #16
 800430a:	4013      	ands	r3, r2
 800430c:	d063      	beq.n	80043d6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d12a      	bne.n	800436c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004316:	4b95      	ldr	r3, [pc, #596]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800431a:	4b94      	ldr	r3, [pc, #592]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 800431c:	2104      	movs	r1, #4
 800431e:	430a      	orrs	r2, r1
 8004320:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004322:	4b92      	ldr	r3, [pc, #584]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004326:	4b91      	ldr	r3, [pc, #580]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004328:	2101      	movs	r1, #1
 800432a:	430a      	orrs	r2, r1
 800432c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800432e:	f7fe fe5d 	bl	8002fec <HAL_GetTick>
 8004332:	0003      	movs	r3, r0
 8004334:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004338:	f7fe fe58 	bl	8002fec <HAL_GetTick>
 800433c:	0002      	movs	r2, r0
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e152      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800434a:	4b88      	ldr	r3, [pc, #544]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434e:	2202      	movs	r2, #2
 8004350:	4013      	ands	r3, r2
 8004352:	d0f1      	beq.n	8004338 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004354:	4b85      	ldr	r3, [pc, #532]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004358:	22f8      	movs	r2, #248	; 0xf8
 800435a:	4393      	bics	r3, r2
 800435c:	0019      	movs	r1, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	00da      	lsls	r2, r3, #3
 8004364:	4b81      	ldr	r3, [pc, #516]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004366:	430a      	orrs	r2, r1
 8004368:	635a      	str	r2, [r3, #52]	; 0x34
 800436a:	e034      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	3305      	adds	r3, #5
 8004372:	d111      	bne.n	8004398 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004374:	4b7d      	ldr	r3, [pc, #500]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004378:	4b7c      	ldr	r3, [pc, #496]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 800437a:	2104      	movs	r1, #4
 800437c:	438a      	bics	r2, r1
 800437e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004380:	4b7a      	ldr	r3, [pc, #488]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004384:	22f8      	movs	r2, #248	; 0xf8
 8004386:	4393      	bics	r3, r2
 8004388:	0019      	movs	r1, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	00da      	lsls	r2, r3, #3
 8004390:	4b76      	ldr	r3, [pc, #472]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004392:	430a      	orrs	r2, r1
 8004394:	635a      	str	r2, [r3, #52]	; 0x34
 8004396:	e01e      	b.n	80043d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004398:	4b74      	ldr	r3, [pc, #464]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 800439a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800439c:	4b73      	ldr	r3, [pc, #460]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 800439e:	2104      	movs	r1, #4
 80043a0:	430a      	orrs	r2, r1
 80043a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80043a4:	4b71      	ldr	r3, [pc, #452]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80043a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043a8:	4b70      	ldr	r3, [pc, #448]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80043aa:	2101      	movs	r1, #1
 80043ac:	438a      	bics	r2, r1
 80043ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b0:	f7fe fe1c 	bl	8002fec <HAL_GetTick>
 80043b4:	0003      	movs	r3, r0
 80043b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80043ba:	f7fe fe17 	bl	8002fec <HAL_GetTick>
 80043be:	0002      	movs	r2, r0
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e111      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80043cc:	4b67      	ldr	r3, [pc, #412]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80043ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d0:	2202      	movs	r2, #2
 80043d2:	4013      	ands	r3, r2
 80043d4:	d1f1      	bne.n	80043ba <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2220      	movs	r2, #32
 80043dc:	4013      	ands	r3, r2
 80043de:	d05c      	beq.n	800449a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80043e0:	4b62      	ldr	r3, [pc, #392]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	220c      	movs	r2, #12
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b0c      	cmp	r3, #12
 80043ea:	d00e      	beq.n	800440a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80043ec:	4b5f      	ldr	r3, [pc, #380]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	220c      	movs	r2, #12
 80043f2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d114      	bne.n	8004422 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80043f8:	4b5c      	ldr	r3, [pc, #368]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	23c0      	movs	r3, #192	; 0xc0
 80043fe:	025b      	lsls	r3, r3, #9
 8004400:	401a      	ands	r2, r3
 8004402:	23c0      	movs	r3, #192	; 0xc0
 8004404:	025b      	lsls	r3, r3, #9
 8004406:	429a      	cmp	r2, r3
 8004408:	d10b      	bne.n	8004422 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800440a:	4b58      	ldr	r3, [pc, #352]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 800440c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	025b      	lsls	r3, r3, #9
 8004412:	4013      	ands	r3, r2
 8004414:	d040      	beq.n	8004498 <HAL_RCC_OscConfig+0x5a8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d03c      	beq.n	8004498 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e0e6      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01b      	beq.n	8004462 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800442a:	4b50      	ldr	r3, [pc, #320]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 800442c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800442e:	4b4f      	ldr	r3, [pc, #316]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004430:	2180      	movs	r1, #128	; 0x80
 8004432:	0249      	lsls	r1, r1, #9
 8004434:	430a      	orrs	r2, r1
 8004436:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fe fdd8 	bl	8002fec <HAL_GetTick>
 800443c:	0003      	movs	r3, r0
 800443e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004442:	f7fe fdd3 	bl	8002fec <HAL_GetTick>
 8004446:	0002      	movs	r2, r0
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e0cd      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004454:	4b45      	ldr	r3, [pc, #276]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	025b      	lsls	r3, r3, #9
 800445c:	4013      	ands	r3, r2
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x552>
 8004460:	e01b      	b.n	800449a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004462:	4b42      	ldr	r3, [pc, #264]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004466:	4b41      	ldr	r3, [pc, #260]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004468:	4943      	ldr	r1, [pc, #268]	; (8004578 <HAL_RCC_OscConfig+0x688>)
 800446a:	400a      	ands	r2, r1
 800446c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446e:	f7fe fdbd 	bl	8002fec <HAL_GetTick>
 8004472:	0003      	movs	r3, r0
 8004474:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004478:	f7fe fdb8 	bl	8002fec <HAL_GetTick>
 800447c:	0002      	movs	r2, r0
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e0b2      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800448a:	4b38      	ldr	r3, [pc, #224]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 800448c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800448e:	2380      	movs	r3, #128	; 0x80
 8004490:	025b      	lsls	r3, r3, #9
 8004492:	4013      	ands	r3, r2
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x588>
 8004496:	e000      	b.n	800449a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004498:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d100      	bne.n	80044a4 <HAL_RCC_OscConfig+0x5b4>
 80044a2:	e0a4      	b.n	80045ee <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044a4:	4b31      	ldr	r3, [pc, #196]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	220c      	movs	r2, #12
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d100      	bne.n	80044b2 <HAL_RCC_OscConfig+0x5c2>
 80044b0:	e078      	b.n	80045a4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d14c      	bne.n	8004554 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	4b2c      	ldr	r3, [pc, #176]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4b2b      	ldr	r3, [pc, #172]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80044c0:	492e      	ldr	r1, [pc, #184]	; (800457c <HAL_RCC_OscConfig+0x68c>)
 80044c2:	400a      	ands	r2, r1
 80044c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c6:	f7fe fd91 	bl	8002fec <HAL_GetTick>
 80044ca:	0003      	movs	r3, r0
 80044cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d0:	f7fe fd8c 	bl	8002fec <HAL_GetTick>
 80044d4:	0002      	movs	r2, r0
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e086      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044e2:	4b22      	ldr	r3, [pc, #136]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	2380      	movs	r3, #128	; 0x80
 80044e8:	049b      	lsls	r3, r3, #18
 80044ea:	4013      	ands	r3, r2
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ee:	4b1f      	ldr	r3, [pc, #124]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	220f      	movs	r2, #15
 80044f4:	4393      	bics	r3, r2
 80044f6:	0019      	movs	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 80044fe:	430a      	orrs	r2, r1
 8004500:	62da      	str	r2, [r3, #44]	; 0x2c
 8004502:	4b1a      	ldr	r3, [pc, #104]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	4a1e      	ldr	r2, [pc, #120]	; (8004580 <HAL_RCC_OscConfig+0x690>)
 8004508:	4013      	ands	r3, r2
 800450a:	0019      	movs	r1, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	431a      	orrs	r2, r3
 8004516:	4b15      	ldr	r3, [pc, #84]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004518:	430a      	orrs	r2, r1
 800451a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800451c:	4b13      	ldr	r3, [pc, #76]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4b12      	ldr	r3, [pc, #72]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004522:	2180      	movs	r1, #128	; 0x80
 8004524:	0449      	lsls	r1, r1, #17
 8004526:	430a      	orrs	r2, r1
 8004528:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452a:	f7fe fd5f 	bl	8002fec <HAL_GetTick>
 800452e:	0003      	movs	r3, r0
 8004530:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004534:	f7fe fd5a 	bl	8002fec <HAL_GetTick>
 8004538:	0002      	movs	r2, r0
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e054      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	2380      	movs	r3, #128	; 0x80
 800454c:	049b      	lsls	r3, r3, #18
 800454e:	4013      	ands	r3, r2
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x644>
 8004552:	e04c      	b.n	80045ee <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4b04      	ldr	r3, [pc, #16]	; (800456c <HAL_RCC_OscConfig+0x67c>)
 800455a:	4908      	ldr	r1, [pc, #32]	; (800457c <HAL_RCC_OscConfig+0x68c>)
 800455c:	400a      	ands	r2, r1
 800455e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004560:	f7fe fd44 	bl	8002fec <HAL_GetTick>
 8004564:	0003      	movs	r3, r0
 8004566:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004568:	e015      	b.n	8004596 <HAL_RCC_OscConfig+0x6a6>
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	40021000 	.word	0x40021000
 8004570:	00001388 	.word	0x00001388
 8004574:	efffffff 	.word	0xefffffff
 8004578:	fffeffff 	.word	0xfffeffff
 800457c:	feffffff 	.word	0xfeffffff
 8004580:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004584:	f7fe fd32 	bl	8002fec <HAL_GetTick>
 8004588:	0002      	movs	r2, r0
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e02c      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004596:	4b18      	ldr	r3, [pc, #96]	; (80045f8 <HAL_RCC_OscConfig+0x708>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	049b      	lsls	r3, r3, #18
 800459e:	4013      	ands	r3, r2
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x694>
 80045a2:	e024      	b.n	80045ee <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e01f      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80045b0:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <HAL_RCC_OscConfig+0x708>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80045b6:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <HAL_RCC_OscConfig+0x708>)
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	23c0      	movs	r3, #192	; 0xc0
 80045c0:	025b      	lsls	r3, r3, #9
 80045c2:	401a      	ands	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d10e      	bne.n	80045ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	220f      	movs	r2, #15
 80045d0:	401a      	ands	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	23f0      	movs	r3, #240	; 0xf0
 80045de:	039b      	lsls	r3, r3, #14
 80045e0:	401a      	ands	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d001      	beq.n	80045ee <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	0018      	movs	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b008      	add	sp, #32
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40021000 	.word	0x40021000

080045fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0bf      	b.n	8004790 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004610:	4b61      	ldr	r3, [pc, #388]	; (8004798 <HAL_RCC_ClockConfig+0x19c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2201      	movs	r2, #1
 8004616:	4013      	ands	r3, r2
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d911      	bls.n	8004642 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461e:	4b5e      	ldr	r3, [pc, #376]	; (8004798 <HAL_RCC_ClockConfig+0x19c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2201      	movs	r2, #1
 8004624:	4393      	bics	r3, r2
 8004626:	0019      	movs	r1, r3
 8004628:	4b5b      	ldr	r3, [pc, #364]	; (8004798 <HAL_RCC_ClockConfig+0x19c>)
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004630:	4b59      	ldr	r3, [pc, #356]	; (8004798 <HAL_RCC_ClockConfig+0x19c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2201      	movs	r2, #1
 8004636:	4013      	ands	r3, r2
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d001      	beq.n	8004642 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e0a6      	b.n	8004790 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2202      	movs	r2, #2
 8004648:	4013      	ands	r3, r2
 800464a:	d015      	beq.n	8004678 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2204      	movs	r2, #4
 8004652:	4013      	ands	r3, r2
 8004654:	d006      	beq.n	8004664 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004656:	4b51      	ldr	r3, [pc, #324]	; (800479c <HAL_RCC_ClockConfig+0x1a0>)
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	4b50      	ldr	r3, [pc, #320]	; (800479c <HAL_RCC_ClockConfig+0x1a0>)
 800465c:	21e0      	movs	r1, #224	; 0xe0
 800465e:	00c9      	lsls	r1, r1, #3
 8004660:	430a      	orrs	r2, r1
 8004662:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004664:	4b4d      	ldr	r3, [pc, #308]	; (800479c <HAL_RCC_ClockConfig+0x1a0>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	22f0      	movs	r2, #240	; 0xf0
 800466a:	4393      	bics	r3, r2
 800466c:	0019      	movs	r1, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	4b4a      	ldr	r3, [pc, #296]	; (800479c <HAL_RCC_ClockConfig+0x1a0>)
 8004674:	430a      	orrs	r2, r1
 8004676:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2201      	movs	r2, #1
 800467e:	4013      	ands	r3, r2
 8004680:	d04c      	beq.n	800471c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d107      	bne.n	800469a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468a:	4b44      	ldr	r3, [pc, #272]	; (800479c <HAL_RCC_ClockConfig+0x1a0>)
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	029b      	lsls	r3, r3, #10
 8004692:	4013      	ands	r3, r2
 8004694:	d120      	bne.n	80046d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e07a      	b.n	8004790 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a2:	4b3e      	ldr	r3, [pc, #248]	; (800479c <HAL_RCC_ClockConfig+0x1a0>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	2380      	movs	r3, #128	; 0x80
 80046a8:	049b      	lsls	r3, r3, #18
 80046aa:	4013      	ands	r3, r2
 80046ac:	d114      	bne.n	80046d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e06e      	b.n	8004790 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d107      	bne.n	80046ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80046ba:	4b38      	ldr	r3, [pc, #224]	; (800479c <HAL_RCC_ClockConfig+0x1a0>)
 80046bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046be:	2380      	movs	r3, #128	; 0x80
 80046c0:	025b      	lsls	r3, r3, #9
 80046c2:	4013      	ands	r3, r2
 80046c4:	d108      	bne.n	80046d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e062      	b.n	8004790 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ca:	4b34      	ldr	r3, [pc, #208]	; (800479c <HAL_RCC_ClockConfig+0x1a0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2202      	movs	r2, #2
 80046d0:	4013      	ands	r3, r2
 80046d2:	d101      	bne.n	80046d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e05b      	b.n	8004790 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046d8:	4b30      	ldr	r3, [pc, #192]	; (800479c <HAL_RCC_ClockConfig+0x1a0>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2203      	movs	r2, #3
 80046de:	4393      	bics	r3, r2
 80046e0:	0019      	movs	r1, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	4b2d      	ldr	r3, [pc, #180]	; (800479c <HAL_RCC_ClockConfig+0x1a0>)
 80046e8:	430a      	orrs	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046ec:	f7fe fc7e 	bl	8002fec <HAL_GetTick>
 80046f0:	0003      	movs	r3, r0
 80046f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f4:	e009      	b.n	800470a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f6:	f7fe fc79 	bl	8002fec <HAL_GetTick>
 80046fa:	0002      	movs	r2, r0
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	4a27      	ldr	r2, [pc, #156]	; (80047a0 <HAL_RCC_ClockConfig+0x1a4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e042      	b.n	8004790 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_RCC_ClockConfig+0x1a0>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	220c      	movs	r2, #12
 8004710:	401a      	ands	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	429a      	cmp	r2, r3
 800471a:	d1ec      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800471c:	4b1e      	ldr	r3, [pc, #120]	; (8004798 <HAL_RCC_ClockConfig+0x19c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2201      	movs	r2, #1
 8004722:	4013      	ands	r3, r2
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d211      	bcs.n	800474e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472a:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <HAL_RCC_ClockConfig+0x19c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2201      	movs	r2, #1
 8004730:	4393      	bics	r3, r2
 8004732:	0019      	movs	r1, r3
 8004734:	4b18      	ldr	r3, [pc, #96]	; (8004798 <HAL_RCC_ClockConfig+0x19c>)
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473c:	4b16      	ldr	r3, [pc, #88]	; (8004798 <HAL_RCC_ClockConfig+0x19c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2201      	movs	r2, #1
 8004742:	4013      	ands	r3, r2
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d001      	beq.n	800474e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e020      	b.n	8004790 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2204      	movs	r2, #4
 8004754:	4013      	ands	r3, r2
 8004756:	d009      	beq.n	800476c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004758:	4b10      	ldr	r3, [pc, #64]	; (800479c <HAL_RCC_ClockConfig+0x1a0>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4a11      	ldr	r2, [pc, #68]	; (80047a4 <HAL_RCC_ClockConfig+0x1a8>)
 800475e:	4013      	ands	r3, r2
 8004760:	0019      	movs	r1, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <HAL_RCC_ClockConfig+0x1a0>)
 8004768:	430a      	orrs	r2, r1
 800476a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800476c:	f000 f820 	bl	80047b0 <HAL_RCC_GetSysClockFreq>
 8004770:	0001      	movs	r1, r0
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <HAL_RCC_ClockConfig+0x1a0>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	091b      	lsrs	r3, r3, #4
 8004778:	220f      	movs	r2, #15
 800477a:	4013      	ands	r3, r2
 800477c:	4a0a      	ldr	r2, [pc, #40]	; (80047a8 <HAL_RCC_ClockConfig+0x1ac>)
 800477e:	5cd3      	ldrb	r3, [r2, r3]
 8004780:	000a      	movs	r2, r1
 8004782:	40da      	lsrs	r2, r3
 8004784:	4b09      	ldr	r3, [pc, #36]	; (80047ac <HAL_RCC_ClockConfig+0x1b0>)
 8004786:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004788:	2000      	movs	r0, #0
 800478a:	f7fe fb19 	bl	8002dc0 <HAL_InitTick>
  
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	0018      	movs	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	b004      	add	sp, #16
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40022000 	.word	0x40022000
 800479c:	40021000 	.word	0x40021000
 80047a0:	00001388 	.word	0x00001388
 80047a4:	fffff8ff 	.word	0xfffff8ff
 80047a8:	08006b74 	.word	0x08006b74
 80047ac:	20000000 	.word	0x20000000

080047b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b0:	b590      	push	{r4, r7, lr}
 80047b2:	b08f      	sub	sp, #60	; 0x3c
 80047b4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80047b6:	2314      	movs	r3, #20
 80047b8:	18fb      	adds	r3, r7, r3
 80047ba:	4a37      	ldr	r2, [pc, #220]	; (8004898 <HAL_RCC_GetSysClockFreq+0xe8>)
 80047bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80047be:	c313      	stmia	r3!, {r0, r1, r4}
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80047c4:	1d3b      	adds	r3, r7, #4
 80047c6:	4a35      	ldr	r2, [pc, #212]	; (800489c <HAL_RCC_GetSysClockFreq+0xec>)
 80047c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80047ca:	c313      	stmia	r3!, {r0, r1, r4}
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d4:	2300      	movs	r3, #0
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d8:	2300      	movs	r3, #0
 80047da:	637b      	str	r3, [r7, #52]	; 0x34
 80047dc:	2300      	movs	r3, #0
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80047e4:	4b2e      	ldr	r3, [pc, #184]	; (80048a0 <HAL_RCC_GetSysClockFreq+0xf0>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	220c      	movs	r2, #12
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d006      	beq.n	8004802 <HAL_RCC_GetSysClockFreq+0x52>
 80047f4:	2b0c      	cmp	r3, #12
 80047f6:	d043      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0xd0>
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d144      	bne.n	8004886 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047fc:	4b29      	ldr	r3, [pc, #164]	; (80048a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80047fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004800:	e044      	b.n	800488c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004804:	0c9b      	lsrs	r3, r3, #18
 8004806:	220f      	movs	r2, #15
 8004808:	4013      	ands	r3, r2
 800480a:	2214      	movs	r2, #20
 800480c:	18ba      	adds	r2, r7, r2
 800480e:	5cd3      	ldrb	r3, [r2, r3]
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004812:	4b23      	ldr	r3, [pc, #140]	; (80048a0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	220f      	movs	r2, #15
 8004818:	4013      	ands	r3, r2
 800481a:	1d3a      	adds	r2, r7, #4
 800481c:	5cd3      	ldrb	r3, [r2, r3]
 800481e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004822:	23c0      	movs	r3, #192	; 0xc0
 8004824:	025b      	lsls	r3, r3, #9
 8004826:	401a      	ands	r2, r3
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	025b      	lsls	r3, r3, #9
 800482c:	429a      	cmp	r2, r3
 800482e:	d109      	bne.n	8004844 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004832:	481c      	ldr	r0, [pc, #112]	; (80048a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004834:	f7fb fc7a 	bl	800012c <__udivsi3>
 8004838:	0003      	movs	r3, r0
 800483a:	001a      	movs	r2, r3
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	4353      	muls	r3, r2
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
 8004842:	e01a      	b.n	800487a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004846:	23c0      	movs	r3, #192	; 0xc0
 8004848:	025b      	lsls	r3, r3, #9
 800484a:	401a      	ands	r2, r3
 800484c:	23c0      	movs	r3, #192	; 0xc0
 800484e:	025b      	lsls	r3, r3, #9
 8004850:	429a      	cmp	r2, r3
 8004852:	d109      	bne.n	8004868 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004856:	4814      	ldr	r0, [pc, #80]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004858:	f7fb fc68 	bl	800012c <__udivsi3>
 800485c:	0003      	movs	r3, r0
 800485e:	001a      	movs	r2, r3
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	4353      	muls	r3, r2
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
 8004866:	e008      	b.n	800487a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800486a:	480e      	ldr	r0, [pc, #56]	; (80048a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800486c:	f7fb fc5e 	bl	800012c <__udivsi3>
 8004870:	0003      	movs	r3, r0
 8004872:	001a      	movs	r2, r3
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	4353      	muls	r3, r2
 8004878:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800487a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800487e:	e005      	b.n	800488c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004882:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004884:	e002      	b.n	800488c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004886:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004888:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800488a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800488e:	0018      	movs	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	b00f      	add	sp, #60	; 0x3c
 8004894:	bd90      	pop	{r4, r7, pc}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	08006a88 	.word	0x08006a88
 800489c:	08006a98 	.word	0x08006a98
 80048a0:	40021000 	.word	0x40021000
 80048a4:	007a1200 	.word	0x007a1200
 80048a8:	02dc6c00 	.word	0x02dc6c00

080048ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b0:	4b02      	ldr	r3, [pc, #8]	; (80048bc <HAL_RCC_GetHCLKFreq+0x10>)
 80048b2:	681b      	ldr	r3, [r3, #0]
}
 80048b4:	0018      	movs	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	20000000 	.word	0x20000000

080048c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80048c4:	f7ff fff2 	bl	80048ac <HAL_RCC_GetHCLKFreq>
 80048c8:	0001      	movs	r1, r0
 80048ca:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	0a1b      	lsrs	r3, r3, #8
 80048d0:	2207      	movs	r2, #7
 80048d2:	4013      	ands	r3, r2
 80048d4:	4a04      	ldr	r2, [pc, #16]	; (80048e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048d6:	5cd3      	ldrb	r3, [r2, r3]
 80048d8:	40d9      	lsrs	r1, r3
 80048da:	000b      	movs	r3, r1
}    
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	40021000 	.word	0x40021000
 80048e8:	08006b84 	.word	0x08006b84

080048ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2207      	movs	r2, #7
 80048fa:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048fc:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <HAL_RCC_GetClockConfig+0x4c>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2203      	movs	r2, #3
 8004902:	401a      	ands	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004908:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <HAL_RCC_GetClockConfig+0x4c>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	22f0      	movs	r2, #240	; 0xf0
 800490e:	401a      	ands	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004914:	4b08      	ldr	r3, [pc, #32]	; (8004938 <HAL_RCC_GetClockConfig+0x4c>)
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	23e0      	movs	r3, #224	; 0xe0
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	401a      	ands	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8004922:	4b06      	ldr	r3, [pc, #24]	; (800493c <HAL_RCC_GetClockConfig+0x50>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2201      	movs	r2, #1
 8004928:	401a      	ands	r2, r3
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	601a      	str	r2, [r3, #0]
}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	46bd      	mov	sp, r7
 8004932:	b002      	add	sp, #8
 8004934:	bd80      	pop	{r7, pc}
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	40021000 	.word	0x40021000
 800493c:	40022000 	.word	0x40022000

08004940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	2380      	movs	r3, #128	; 0x80
 8004956:	025b      	lsls	r3, r3, #9
 8004958:	4013      	ands	r3, r2
 800495a:	d100      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800495c:	e08f      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800495e:	2317      	movs	r3, #23
 8004960:	18fb      	adds	r3, r7, r3
 8004962:	2200      	movs	r2, #0
 8004964:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004966:	4b67      	ldr	r3, [pc, #412]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	055b      	lsls	r3, r3, #21
 800496e:	4013      	ands	r3, r2
 8004970:	d111      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004972:	4b64      	ldr	r3, [pc, #400]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004974:	69da      	ldr	r2, [r3, #28]
 8004976:	4b63      	ldr	r3, [pc, #396]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004978:	2180      	movs	r1, #128	; 0x80
 800497a:	0549      	lsls	r1, r1, #21
 800497c:	430a      	orrs	r2, r1
 800497e:	61da      	str	r2, [r3, #28]
 8004980:	4b60      	ldr	r3, [pc, #384]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	055b      	lsls	r3, r3, #21
 8004988:	4013      	ands	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800498e:	2317      	movs	r3, #23
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	2201      	movs	r2, #1
 8004994:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004996:	4b5c      	ldr	r3, [pc, #368]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	4013      	ands	r3, r2
 80049a0:	d11a      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049a2:	4b59      	ldr	r3, [pc, #356]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4b58      	ldr	r3, [pc, #352]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80049a8:	2180      	movs	r1, #128	; 0x80
 80049aa:	0049      	lsls	r1, r1, #1
 80049ac:	430a      	orrs	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b0:	f7fe fb1c 	bl	8002fec <HAL_GetTick>
 80049b4:	0003      	movs	r3, r0
 80049b6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b8:	e008      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ba:	f7fe fb17 	bl	8002fec <HAL_GetTick>
 80049be:	0002      	movs	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b64      	cmp	r3, #100	; 0x64
 80049c6:	d901      	bls.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e097      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049cc:	4b4e      	ldr	r3, [pc, #312]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	4013      	ands	r3, r2
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049d8:	4b4a      	ldr	r3, [pc, #296]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80049da:	6a1a      	ldr	r2, [r3, #32]
 80049dc:	23c0      	movs	r3, #192	; 0xc0
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4013      	ands	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d034      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	23c0      	movs	r3, #192	; 0xc0
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4013      	ands	r3, r2
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d02c      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049fa:	4b42      	ldr	r3, [pc, #264]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	4a43      	ldr	r2, [pc, #268]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a04:	4b3f      	ldr	r3, [pc, #252]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004a06:	6a1a      	ldr	r2, [r3, #32]
 8004a08:	4b3e      	ldr	r3, [pc, #248]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004a0a:	2180      	movs	r1, #128	; 0x80
 8004a0c:	0249      	lsls	r1, r1, #9
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a12:	4b3c      	ldr	r3, [pc, #240]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004a14:	6a1a      	ldr	r2, [r3, #32]
 8004a16:	4b3b      	ldr	r3, [pc, #236]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004a18:	493d      	ldr	r1, [pc, #244]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1a:	400a      	ands	r2, r1
 8004a1c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a1e:	4b39      	ldr	r3, [pc, #228]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fe fade 	bl	8002fec <HAL_GetTick>
 8004a30:	0003      	movs	r3, r0
 8004a32:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a34:	e009      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a36:	f7fe fad9 	bl	8002fec <HAL_GetTick>
 8004a3a:	0002      	movs	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	4a34      	ldr	r2, [pc, #208]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e058      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4a:	4b2e      	ldr	r3, [pc, #184]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	4013      	ands	r3, r2
 8004a52:	d0f0      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a54:	4b2b      	ldr	r3, [pc, #172]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	0019      	movs	r1, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	4b28      	ldr	r3, [pc, #160]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004a64:	430a      	orrs	r2, r1
 8004a66:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a68:	2317      	movs	r3, #23
 8004a6a:	18fb      	adds	r3, r7, r3
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d105      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a72:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004a74:	69da      	ldr	r2, [r3, #28]
 8004a76:	4b23      	ldr	r3, [pc, #140]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004a78:	4927      	ldr	r1, [pc, #156]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a7a:	400a      	ands	r2, r1
 8004a7c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2201      	movs	r2, #1
 8004a84:	4013      	ands	r3, r2
 8004a86:	d009      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a88:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	2203      	movs	r2, #3
 8004a8e:	4393      	bics	r3, r2
 8004a90:	0019      	movs	r1, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d009      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004aa6:	4b17      	ldr	r3, [pc, #92]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	2210      	movs	r2, #16
 8004aac:	4393      	bics	r3, r2
 8004aae:	0019      	movs	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	029b      	lsls	r3, r3, #10
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	2280      	movs	r2, #128	; 0x80
 8004acc:	4393      	bics	r3, r2
 8004ace:	0019      	movs	r1, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	695a      	ldr	r2, [r3, #20]
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	2380      	movs	r3, #128	; 0x80
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d009      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ae6:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	2240      	movs	r2, #64	; 0x40
 8004aec:	4393      	bics	r3, r2
 8004aee:	0019      	movs	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	4b03      	ldr	r3, [pc, #12]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004af6:	430a      	orrs	r2, r1
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	0018      	movs	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	b006      	add	sp, #24
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40021000 	.word	0x40021000
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	fffffcff 	.word	0xfffffcff
 8004b10:	fffeffff 	.word	0xfffeffff
 8004b14:	00001388 	.word	0x00001388
 8004b18:	efffffff 	.word	0xefffffff

08004b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e01e      	b.n	8004b6c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	223d      	movs	r2, #61	; 0x3d
 8004b32:	5c9b      	ldrb	r3, [r3, r2]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d107      	bne.n	8004b4a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	223c      	movs	r2, #60	; 0x3c
 8004b3e:	2100      	movs	r1, #0
 8004b40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	0018      	movs	r0, r3
 8004b46:	f000 f815 	bl	8004b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	223d      	movs	r2, #61	; 0x3d
 8004b4e:	2102      	movs	r1, #2
 8004b50:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	0019      	movs	r1, r3
 8004b5c:	0010      	movs	r0, r2
 8004b5e:	f000 f969 	bl	8004e34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	223d      	movs	r2, #61	; 0x3d
 8004b66:	2101      	movs	r1, #1
 8004b68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b002      	add	sp, #8
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b7c:	46c0      	nop			; (mov r8, r8)
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	b002      	add	sp, #8
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2101      	movs	r1, #1
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2207      	movs	r2, #7
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b06      	cmp	r3, #6
 8004bac:	d007      	beq.n	8004bbe <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2101      	movs	r1, #1
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b004      	add	sp, #16
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	4013      	ands	r3, r2
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d124      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2202      	movs	r2, #2
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d11d      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	4252      	negs	r2, r2
 8004bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	2203      	movs	r2, #3
 8004c04:	4013      	ands	r3, r2
 8004c06:	d004      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 f8fa 	bl	8004e04 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e007      	b.n	8004c22 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	0018      	movs	r0, r3
 8004c16:	f000 f8ed 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f000 f8f9 	bl	8004e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2204      	movs	r2, #4
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d125      	bne.n	8004c82 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	4013      	ands	r3, r2
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d11e      	bne.n	8004c82 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2205      	movs	r2, #5
 8004c4a:	4252      	negs	r2, r2
 8004c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2202      	movs	r2, #2
 8004c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	23c0      	movs	r3, #192	; 0xc0
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f000 f8cd 	bl	8004e04 <HAL_TIM_IC_CaptureCallback>
 8004c6a:	e007      	b.n	8004c7c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f000 f8c0 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	0018      	movs	r0, r3
 8004c78:	f000 f8cc 	bl	8004e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d124      	bne.n	8004cda <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	2208      	movs	r2, #8
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d11d      	bne.n	8004cda <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2209      	movs	r2, #9
 8004ca4:	4252      	negs	r2, r2
 8004ca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2204      	movs	r2, #4
 8004cac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f000 f8a1 	bl	8004e04 <HAL_TIM_IC_CaptureCallback>
 8004cc2:	e007      	b.n	8004cd4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f000 f894 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f000 f8a0 	bl	8004e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2210      	movs	r2, #16
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b10      	cmp	r3, #16
 8004ce6:	d125      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	2210      	movs	r2, #16
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	d11e      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2211      	movs	r2, #17
 8004cfc:	4252      	negs	r2, r2
 8004cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2208      	movs	r2, #8
 8004d04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	23c0      	movs	r3, #192	; 0xc0
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4013      	ands	r3, r2
 8004d12:	d004      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	0018      	movs	r0, r3
 8004d18:	f000 f874 	bl	8004e04 <HAL_TIM_IC_CaptureCallback>
 8004d1c:	e007      	b.n	8004d2e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	0018      	movs	r0, r3
 8004d22:	f000 f867 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f000 f873 	bl	8004e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d10f      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d108      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2202      	movs	r2, #2
 8004d56:	4252      	negs	r2, r2
 8004d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f7fd fdf7 	bl	8002950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	2280      	movs	r2, #128	; 0x80
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2b80      	cmp	r3, #128	; 0x80
 8004d6e:	d10f      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2280      	movs	r2, #128	; 0x80
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b80      	cmp	r3, #128	; 0x80
 8004d7c:	d108      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2281      	movs	r2, #129	; 0x81
 8004d84:	4252      	negs	r2, r2
 8004d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f000 f8d0 	bl	8004f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2240      	movs	r2, #64	; 0x40
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b40      	cmp	r3, #64	; 0x40
 8004d9c:	d10f      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2240      	movs	r2, #64	; 0x40
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b40      	cmp	r3, #64	; 0x40
 8004daa:	d108      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2241      	movs	r2, #65	; 0x41
 8004db2:	4252      	negs	r2, r2
 8004db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	0018      	movs	r0, r3
 8004dba:	f000 f833 	bl	8004e24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d10f      	bne.n	8004dec <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d108      	bne.n	8004dec <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2221      	movs	r2, #33	; 0x21
 8004de0:	4252      	negs	r2, r2
 8004de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	0018      	movs	r0, r3
 8004de8:	f000 f89a 	bl	8004f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dec:	46c0      	nop			; (mov r8, r8)
 8004dee:	46bd      	mov	sp, r7
 8004df0:	b002      	add	sp, #8
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dfc:	46c0      	nop			; (mov r8, r8)
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b002      	add	sp, #8
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b002      	add	sp, #8
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e1c:	46c0      	nop			; (mov r8, r8)
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	b002      	add	sp, #8
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e2c:	46c0      	nop			; (mov r8, r8)
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b002      	add	sp, #8
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a30      	ldr	r2, [pc, #192]	; (8004f08 <TIM_Base_SetConfig+0xd4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d008      	beq.n	8004e5e <TIM_Base_SetConfig+0x2a>
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	2380      	movs	r3, #128	; 0x80
 8004e50:	05db      	lsls	r3, r3, #23
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d003      	beq.n	8004e5e <TIM_Base_SetConfig+0x2a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2c      	ldr	r2, [pc, #176]	; (8004f0c <TIM_Base_SetConfig+0xd8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2270      	movs	r2, #112	; 0x70
 8004e62:	4393      	bics	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a25      	ldr	r2, [pc, #148]	; (8004f08 <TIM_Base_SetConfig+0xd4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d014      	beq.n	8004ea2 <TIM_Base_SetConfig+0x6e>
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	2380      	movs	r3, #128	; 0x80
 8004e7c:	05db      	lsls	r3, r3, #23
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d00f      	beq.n	8004ea2 <TIM_Base_SetConfig+0x6e>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a21      	ldr	r2, [pc, #132]	; (8004f0c <TIM_Base_SetConfig+0xd8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <TIM_Base_SetConfig+0x6e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a20      	ldr	r2, [pc, #128]	; (8004f10 <TIM_Base_SetConfig+0xdc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <TIM_Base_SetConfig+0x6e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1f      	ldr	r2, [pc, #124]	; (8004f14 <TIM_Base_SetConfig+0xe0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <TIM_Base_SetConfig+0x6e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <TIM_Base_SetConfig+0xe4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d108      	bne.n	8004eb4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <TIM_Base_SetConfig+0xe8>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2280      	movs	r2, #128	; 0x80
 8004eb8:	4393      	bics	r3, r2
 8004eba:	001a      	movs	r2, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a0a      	ldr	r2, [pc, #40]	; (8004f08 <TIM_Base_SetConfig+0xd4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d007      	beq.n	8004ef2 <TIM_Base_SetConfig+0xbe>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a0b      	ldr	r2, [pc, #44]	; (8004f14 <TIM_Base_SetConfig+0xe0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d003      	beq.n	8004ef2 <TIM_Base_SetConfig+0xbe>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <TIM_Base_SetConfig+0xe4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d103      	bne.n	8004efa <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	615a      	str	r2, [r3, #20]
}
 8004f00:	46c0      	nop			; (mov r8, r8)
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b004      	add	sp, #16
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40002000 	.word	0x40002000
 8004f14:	40014400 	.word	0x40014400
 8004f18:	40014800 	.word	0x40014800
 8004f1c:	fffffcff 	.word	0xfffffcff

08004f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f28:	46c0      	nop			; (mov r8, r8)
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	b002      	add	sp, #8
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f38:	46c0      	nop			; (mov r8, r8)
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	b002      	add	sp, #8
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <__errno>:
 8004f40:	4b01      	ldr	r3, [pc, #4]	; (8004f48 <__errno+0x8>)
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	4770      	bx	lr
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	20000008 	.word	0x20000008

08004f4c <__libc_init_array>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	2600      	movs	r6, #0
 8004f50:	4d0c      	ldr	r5, [pc, #48]	; (8004f84 <__libc_init_array+0x38>)
 8004f52:	4c0d      	ldr	r4, [pc, #52]	; (8004f88 <__libc_init_array+0x3c>)
 8004f54:	1b64      	subs	r4, r4, r5
 8004f56:	10a4      	asrs	r4, r4, #2
 8004f58:	42a6      	cmp	r6, r4
 8004f5a:	d109      	bne.n	8004f70 <__libc_init_array+0x24>
 8004f5c:	2600      	movs	r6, #0
 8004f5e:	f001 fd81 	bl	8006a64 <_init>
 8004f62:	4d0a      	ldr	r5, [pc, #40]	; (8004f8c <__libc_init_array+0x40>)
 8004f64:	4c0a      	ldr	r4, [pc, #40]	; (8004f90 <__libc_init_array+0x44>)
 8004f66:	1b64      	subs	r4, r4, r5
 8004f68:	10a4      	asrs	r4, r4, #2
 8004f6a:	42a6      	cmp	r6, r4
 8004f6c:	d105      	bne.n	8004f7a <__libc_init_array+0x2e>
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	00b3      	lsls	r3, r6, #2
 8004f72:	58eb      	ldr	r3, [r5, r3]
 8004f74:	4798      	blx	r3
 8004f76:	3601      	adds	r6, #1
 8004f78:	e7ee      	b.n	8004f58 <__libc_init_array+0xc>
 8004f7a:	00b3      	lsls	r3, r6, #2
 8004f7c:	58eb      	ldr	r3, [r5, r3]
 8004f7e:	4798      	blx	r3
 8004f80:	3601      	adds	r6, #1
 8004f82:	e7f2      	b.n	8004f6a <__libc_init_array+0x1e>
 8004f84:	08006db8 	.word	0x08006db8
 8004f88:	08006db8 	.word	0x08006db8
 8004f8c:	08006db8 	.word	0x08006db8
 8004f90:	08006dbc 	.word	0x08006dbc

08004f94 <memcpy>:
 8004f94:	2300      	movs	r3, #0
 8004f96:	b510      	push	{r4, lr}
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d100      	bne.n	8004f9e <memcpy+0xa>
 8004f9c:	bd10      	pop	{r4, pc}
 8004f9e:	5ccc      	ldrb	r4, [r1, r3]
 8004fa0:	54c4      	strb	r4, [r0, r3]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	e7f8      	b.n	8004f98 <memcpy+0x4>

08004fa6 <memset>:
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	1812      	adds	r2, r2, r0
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d100      	bne.n	8004fb0 <memset+0xa>
 8004fae:	4770      	bx	lr
 8004fb0:	7019      	strb	r1, [r3, #0]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	e7f9      	b.n	8004faa <memset+0x4>

08004fb6 <__cvt>:
 8004fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fb8:	b08b      	sub	sp, #44	; 0x2c
 8004fba:	0014      	movs	r4, r2
 8004fbc:	1e1d      	subs	r5, r3, #0
 8004fbe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004fc0:	da53      	bge.n	800506a <__cvt+0xb4>
 8004fc2:	2480      	movs	r4, #128	; 0x80
 8004fc4:	0624      	lsls	r4, r4, #24
 8004fc6:	191b      	adds	r3, r3, r4
 8004fc8:	001d      	movs	r5, r3
 8004fca:	0014      	movs	r4, r2
 8004fcc:	232d      	movs	r3, #45	; 0x2d
 8004fce:	700b      	strb	r3, [r1, #0]
 8004fd0:	2320      	movs	r3, #32
 8004fd2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	439e      	bics	r6, r3
 8004fd8:	2e46      	cmp	r6, #70	; 0x46
 8004fda:	d007      	beq.n	8004fec <__cvt+0x36>
 8004fdc:	0033      	movs	r3, r6
 8004fde:	3b45      	subs	r3, #69	; 0x45
 8004fe0:	4259      	negs	r1, r3
 8004fe2:	414b      	adcs	r3, r1
 8004fe4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004fe6:	3a01      	subs	r2, #1
 8004fe8:	18cb      	adds	r3, r1, r3
 8004fea:	9310      	str	r3, [sp, #64]	; 0x40
 8004fec:	ab09      	add	r3, sp, #36	; 0x24
 8004fee:	9304      	str	r3, [sp, #16]
 8004ff0:	ab08      	add	r3, sp, #32
 8004ff2:	9303      	str	r3, [sp, #12]
 8004ff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ff6:	9200      	str	r2, [sp, #0]
 8004ff8:	9302      	str	r3, [sp, #8]
 8004ffa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ffc:	0022      	movs	r2, r4
 8004ffe:	9301      	str	r3, [sp, #4]
 8005000:	002b      	movs	r3, r5
 8005002:	f000 fbb5 	bl	8005770 <_dtoa_r>
 8005006:	0007      	movs	r7, r0
 8005008:	2e47      	cmp	r6, #71	; 0x47
 800500a:	d102      	bne.n	8005012 <__cvt+0x5c>
 800500c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800500e:	07db      	lsls	r3, r3, #31
 8005010:	d524      	bpl.n	800505c <__cvt+0xa6>
 8005012:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	9307      	str	r3, [sp, #28]
 8005018:	2e46      	cmp	r6, #70	; 0x46
 800501a:	d114      	bne.n	8005046 <__cvt+0x90>
 800501c:	783b      	ldrb	r3, [r7, #0]
 800501e:	2b30      	cmp	r3, #48	; 0x30
 8005020:	d10c      	bne.n	800503c <__cvt+0x86>
 8005022:	2200      	movs	r2, #0
 8005024:	2300      	movs	r3, #0
 8005026:	0020      	movs	r0, r4
 8005028:	0029      	movs	r1, r5
 800502a:	f7fb fa05 	bl	8000438 <__aeabi_dcmpeq>
 800502e:	2800      	cmp	r0, #0
 8005030:	d104      	bne.n	800503c <__cvt+0x86>
 8005032:	2301      	movs	r3, #1
 8005034:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800503e:	9a07      	ldr	r2, [sp, #28]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	18d3      	adds	r3, r2, r3
 8005044:	9307      	str	r3, [sp, #28]
 8005046:	2200      	movs	r2, #0
 8005048:	2300      	movs	r3, #0
 800504a:	0020      	movs	r0, r4
 800504c:	0029      	movs	r1, r5
 800504e:	f7fb f9f3 	bl	8000438 <__aeabi_dcmpeq>
 8005052:	2230      	movs	r2, #48	; 0x30
 8005054:	2800      	cmp	r0, #0
 8005056:	d00d      	beq.n	8005074 <__cvt+0xbe>
 8005058:	9b07      	ldr	r3, [sp, #28]
 800505a:	9309      	str	r3, [sp, #36]	; 0x24
 800505c:	0038      	movs	r0, r7
 800505e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005060:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005062:	1bdb      	subs	r3, r3, r7
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	b00b      	add	sp, #44	; 0x2c
 8005068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800506a:	2300      	movs	r3, #0
 800506c:	e7af      	b.n	8004fce <__cvt+0x18>
 800506e:	1c59      	adds	r1, r3, #1
 8005070:	9109      	str	r1, [sp, #36]	; 0x24
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005076:	9907      	ldr	r1, [sp, #28]
 8005078:	428b      	cmp	r3, r1
 800507a:	d3f8      	bcc.n	800506e <__cvt+0xb8>
 800507c:	e7ee      	b.n	800505c <__cvt+0xa6>

0800507e <__exponent>:
 800507e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005080:	1c83      	adds	r3, r0, #2
 8005082:	b085      	sub	sp, #20
 8005084:	9301      	str	r3, [sp, #4]
 8005086:	0006      	movs	r6, r0
 8005088:	000c      	movs	r4, r1
 800508a:	7002      	strb	r2, [r0, #0]
 800508c:	232b      	movs	r3, #43	; 0x2b
 800508e:	2900      	cmp	r1, #0
 8005090:	da01      	bge.n	8005096 <__exponent+0x18>
 8005092:	232d      	movs	r3, #45	; 0x2d
 8005094:	424c      	negs	r4, r1
 8005096:	7073      	strb	r3, [r6, #1]
 8005098:	2c09      	cmp	r4, #9
 800509a:	dd22      	ble.n	80050e2 <__exponent+0x64>
 800509c:	ab02      	add	r3, sp, #8
 800509e:	1ddd      	adds	r5, r3, #7
 80050a0:	0020      	movs	r0, r4
 80050a2:	210a      	movs	r1, #10
 80050a4:	f7fb f9b2 	bl	800040c <__aeabi_idivmod>
 80050a8:	1e6f      	subs	r7, r5, #1
 80050aa:	3130      	adds	r1, #48	; 0x30
 80050ac:	7039      	strb	r1, [r7, #0]
 80050ae:	0020      	movs	r0, r4
 80050b0:	210a      	movs	r1, #10
 80050b2:	f7fb f8c5 	bl	8000240 <__divsi3>
 80050b6:	0004      	movs	r4, r0
 80050b8:	2809      	cmp	r0, #9
 80050ba:	dc0b      	bgt.n	80050d4 <__exponent+0x56>
 80050bc:	3d02      	subs	r5, #2
 80050be:	3430      	adds	r4, #48	; 0x30
 80050c0:	9b01      	ldr	r3, [sp, #4]
 80050c2:	702c      	strb	r4, [r5, #0]
 80050c4:	aa02      	add	r2, sp, #8
 80050c6:	3207      	adds	r2, #7
 80050c8:	0018      	movs	r0, r3
 80050ca:	42aa      	cmp	r2, r5
 80050cc:	d804      	bhi.n	80050d8 <__exponent+0x5a>
 80050ce:	1b80      	subs	r0, r0, r6
 80050d0:	b005      	add	sp, #20
 80050d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d4:	003d      	movs	r5, r7
 80050d6:	e7e3      	b.n	80050a0 <__exponent+0x22>
 80050d8:	782a      	ldrb	r2, [r5, #0]
 80050da:	3501      	adds	r5, #1
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	3301      	adds	r3, #1
 80050e0:	e7f0      	b.n	80050c4 <__exponent+0x46>
 80050e2:	2330      	movs	r3, #48	; 0x30
 80050e4:	18e4      	adds	r4, r4, r3
 80050e6:	70b3      	strb	r3, [r6, #2]
 80050e8:	1d30      	adds	r0, r6, #4
 80050ea:	70f4      	strb	r4, [r6, #3]
 80050ec:	e7ef      	b.n	80050ce <__exponent+0x50>
	...

080050f0 <_printf_float>:
 80050f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050f2:	b095      	sub	sp, #84	; 0x54
 80050f4:	000c      	movs	r4, r1
 80050f6:	920a      	str	r2, [sp, #40]	; 0x28
 80050f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80050fa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80050fc:	9009      	str	r0, [sp, #36]	; 0x24
 80050fe:	f001 f917 	bl	8006330 <_localeconv_r>
 8005102:	6803      	ldr	r3, [r0, #0]
 8005104:	0018      	movs	r0, r3
 8005106:	930c      	str	r3, [sp, #48]	; 0x30
 8005108:	f7fa fffe 	bl	8000108 <strlen>
 800510c:	2300      	movs	r3, #0
 800510e:	9312      	str	r3, [sp, #72]	; 0x48
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	900e      	str	r0, [sp, #56]	; 0x38
 8005114:	930d      	str	r3, [sp, #52]	; 0x34
 8005116:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005118:	7e27      	ldrb	r7, [r4, #24]
 800511a:	682b      	ldr	r3, [r5, #0]
 800511c:	2207      	movs	r2, #7
 800511e:	05c9      	lsls	r1, r1, #23
 8005120:	d545      	bpl.n	80051ae <_printf_float+0xbe>
 8005122:	189b      	adds	r3, r3, r2
 8005124:	4393      	bics	r3, r2
 8005126:	001a      	movs	r2, r3
 8005128:	3208      	adds	r2, #8
 800512a:	602a      	str	r2, [r5, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	64a2      	str	r2, [r4, #72]	; 0x48
 8005132:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005134:	2201      	movs	r2, #1
 8005136:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005138:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800513a:	006b      	lsls	r3, r5, #1
 800513c:	085b      	lsrs	r3, r3, #1
 800513e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005140:	4252      	negs	r2, r2
 8005142:	4bac      	ldr	r3, [pc, #688]	; (80053f4 <_printf_float+0x304>)
 8005144:	0030      	movs	r0, r6
 8005146:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005148:	f7fc fe84 	bl	8001e54 <__aeabi_dcmpun>
 800514c:	2800      	cmp	r0, #0
 800514e:	d130      	bne.n	80051b2 <_printf_float+0xc2>
 8005150:	2201      	movs	r2, #1
 8005152:	4ba8      	ldr	r3, [pc, #672]	; (80053f4 <_printf_float+0x304>)
 8005154:	4252      	negs	r2, r2
 8005156:	0030      	movs	r0, r6
 8005158:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800515a:	f7fb f97d 	bl	8000458 <__aeabi_dcmple>
 800515e:	2800      	cmp	r0, #0
 8005160:	d127      	bne.n	80051b2 <_printf_float+0xc2>
 8005162:	2200      	movs	r2, #0
 8005164:	2300      	movs	r3, #0
 8005166:	0030      	movs	r0, r6
 8005168:	0029      	movs	r1, r5
 800516a:	f7fb f96b 	bl	8000444 <__aeabi_dcmplt>
 800516e:	2800      	cmp	r0, #0
 8005170:	d003      	beq.n	800517a <_printf_float+0x8a>
 8005172:	0023      	movs	r3, r4
 8005174:	222d      	movs	r2, #45	; 0x2d
 8005176:	3343      	adds	r3, #67	; 0x43
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	4d9f      	ldr	r5, [pc, #636]	; (80053f8 <_printf_float+0x308>)
 800517c:	2f47      	cmp	r7, #71	; 0x47
 800517e:	d800      	bhi.n	8005182 <_printf_float+0x92>
 8005180:	4d9e      	ldr	r5, [pc, #632]	; (80053fc <_printf_float+0x30c>)
 8005182:	2303      	movs	r3, #3
 8005184:	2600      	movs	r6, #0
 8005186:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005188:	6123      	str	r3, [r4, #16]
 800518a:	3301      	adds	r3, #1
 800518c:	439a      	bics	r2, r3
 800518e:	6022      	str	r2, [r4, #0]
 8005190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005192:	aa13      	add	r2, sp, #76	; 0x4c
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	0021      	movs	r1, r4
 8005198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800519a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800519c:	f000 f9f4 	bl	8005588 <_printf_common>
 80051a0:	1c43      	adds	r3, r0, #1
 80051a2:	d000      	beq.n	80051a6 <_printf_float+0xb6>
 80051a4:	e093      	b.n	80052ce <_printf_float+0x1de>
 80051a6:	2001      	movs	r0, #1
 80051a8:	4240      	negs	r0, r0
 80051aa:	b015      	add	sp, #84	; 0x54
 80051ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ae:	3307      	adds	r3, #7
 80051b0:	e7b8      	b.n	8005124 <_printf_float+0x34>
 80051b2:	0032      	movs	r2, r6
 80051b4:	002b      	movs	r3, r5
 80051b6:	0030      	movs	r0, r6
 80051b8:	0029      	movs	r1, r5
 80051ba:	f7fc fe4b 	bl	8001e54 <__aeabi_dcmpun>
 80051be:	2800      	cmp	r0, #0
 80051c0:	d004      	beq.n	80051cc <_printf_float+0xdc>
 80051c2:	4d8f      	ldr	r5, [pc, #572]	; (8005400 <_printf_float+0x310>)
 80051c4:	2f47      	cmp	r7, #71	; 0x47
 80051c6:	d8dc      	bhi.n	8005182 <_printf_float+0x92>
 80051c8:	4d8e      	ldr	r5, [pc, #568]	; (8005404 <_printf_float+0x314>)
 80051ca:	e7da      	b.n	8005182 <_printf_float+0x92>
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051d0:	6862      	ldr	r2, [r4, #4]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	430b      	orrs	r3, r1
 80051d6:	1c51      	adds	r1, r2, #1
 80051d8:	d143      	bne.n	8005262 <_printf_float+0x172>
 80051da:	3207      	adds	r2, #7
 80051dc:	6062      	str	r2, [r4, #4]
 80051de:	aa12      	add	r2, sp, #72	; 0x48
 80051e0:	2100      	movs	r1, #0
 80051e2:	9205      	str	r2, [sp, #20]
 80051e4:	aa11      	add	r2, sp, #68	; 0x44
 80051e6:	9203      	str	r2, [sp, #12]
 80051e8:	2223      	movs	r2, #35	; 0x23
 80051ea:	6023      	str	r3, [r4, #0]
 80051ec:	9106      	str	r1, [sp, #24]
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	a908      	add	r1, sp, #32
 80051f2:	6863      	ldr	r3, [r4, #4]
 80051f4:	1852      	adds	r2, r2, r1
 80051f6:	9202      	str	r2, [sp, #8]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	0032      	movs	r2, r6
 80051fc:	002b      	movs	r3, r5
 80051fe:	9704      	str	r7, [sp, #16]
 8005200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005202:	f7ff fed8 	bl	8004fb6 <__cvt>
 8005206:	2320      	movs	r3, #32
 8005208:	003a      	movs	r2, r7
 800520a:	0005      	movs	r5, r0
 800520c:	439a      	bics	r2, r3
 800520e:	2a47      	cmp	r2, #71	; 0x47
 8005210:	d107      	bne.n	8005222 <_printf_float+0x132>
 8005212:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005214:	1cda      	adds	r2, r3, #3
 8005216:	db02      	blt.n	800521e <_printf_float+0x12e>
 8005218:	6862      	ldr	r2, [r4, #4]
 800521a:	4293      	cmp	r3, r2
 800521c:	dd45      	ble.n	80052aa <_printf_float+0x1ba>
 800521e:	3f02      	subs	r7, #2
 8005220:	b2ff      	uxtb	r7, r7
 8005222:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005224:	2f65      	cmp	r7, #101	; 0x65
 8005226:	d825      	bhi.n	8005274 <_printf_float+0x184>
 8005228:	0020      	movs	r0, r4
 800522a:	3901      	subs	r1, #1
 800522c:	003a      	movs	r2, r7
 800522e:	3050      	adds	r0, #80	; 0x50
 8005230:	9111      	str	r1, [sp, #68]	; 0x44
 8005232:	f7ff ff24 	bl	800507e <__exponent>
 8005236:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005238:	0006      	movs	r6, r0
 800523a:	1813      	adds	r3, r2, r0
 800523c:	6123      	str	r3, [r4, #16]
 800523e:	2a01      	cmp	r2, #1
 8005240:	dc02      	bgt.n	8005248 <_printf_float+0x158>
 8005242:	6822      	ldr	r2, [r4, #0]
 8005244:	07d2      	lsls	r2, r2, #31
 8005246:	d501      	bpl.n	800524c <_printf_float+0x15c>
 8005248:	3301      	adds	r3, #1
 800524a:	6123      	str	r3, [r4, #16]
 800524c:	2323      	movs	r3, #35	; 0x23
 800524e:	aa08      	add	r2, sp, #32
 8005250:	189b      	adds	r3, r3, r2
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d09b      	beq.n	8005190 <_printf_float+0xa0>
 8005258:	0023      	movs	r3, r4
 800525a:	222d      	movs	r2, #45	; 0x2d
 800525c:	3343      	adds	r3, #67	; 0x43
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	e796      	b.n	8005190 <_printf_float+0xa0>
 8005262:	2f67      	cmp	r7, #103	; 0x67
 8005264:	d100      	bne.n	8005268 <_printf_float+0x178>
 8005266:	e176      	b.n	8005556 <_printf_float+0x466>
 8005268:	2f47      	cmp	r7, #71	; 0x47
 800526a:	d1b8      	bne.n	80051de <_printf_float+0xee>
 800526c:	2a00      	cmp	r2, #0
 800526e:	d1b6      	bne.n	80051de <_printf_float+0xee>
 8005270:	2201      	movs	r2, #1
 8005272:	e7b3      	b.n	80051dc <_printf_float+0xec>
 8005274:	2f66      	cmp	r7, #102	; 0x66
 8005276:	d119      	bne.n	80052ac <_printf_float+0x1bc>
 8005278:	6863      	ldr	r3, [r4, #4]
 800527a:	2900      	cmp	r1, #0
 800527c:	dd0c      	ble.n	8005298 <_printf_float+0x1a8>
 800527e:	6121      	str	r1, [r4, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d102      	bne.n	800528a <_printf_float+0x19a>
 8005284:	6822      	ldr	r2, [r4, #0]
 8005286:	07d2      	lsls	r2, r2, #31
 8005288:	d502      	bpl.n	8005290 <_printf_float+0x1a0>
 800528a:	3301      	adds	r3, #1
 800528c:	185b      	adds	r3, r3, r1
 800528e:	6123      	str	r3, [r4, #16]
 8005290:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005292:	2600      	movs	r6, #0
 8005294:	65a3      	str	r3, [r4, #88]	; 0x58
 8005296:	e7d9      	b.n	800524c <_printf_float+0x15c>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d103      	bne.n	80052a4 <_printf_float+0x1b4>
 800529c:	2201      	movs	r2, #1
 800529e:	6821      	ldr	r1, [r4, #0]
 80052a0:	4211      	tst	r1, r2
 80052a2:	d000      	beq.n	80052a6 <_printf_float+0x1b6>
 80052a4:	1c9a      	adds	r2, r3, #2
 80052a6:	6122      	str	r2, [r4, #16]
 80052a8:	e7f2      	b.n	8005290 <_printf_float+0x1a0>
 80052aa:	2767      	movs	r7, #103	; 0x67
 80052ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052b0:	4293      	cmp	r3, r2
 80052b2:	db05      	blt.n	80052c0 <_printf_float+0x1d0>
 80052b4:	6822      	ldr	r2, [r4, #0]
 80052b6:	6123      	str	r3, [r4, #16]
 80052b8:	07d2      	lsls	r2, r2, #31
 80052ba:	d5e9      	bpl.n	8005290 <_printf_float+0x1a0>
 80052bc:	3301      	adds	r3, #1
 80052be:	e7e6      	b.n	800528e <_printf_float+0x19e>
 80052c0:	2101      	movs	r1, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	dc01      	bgt.n	80052ca <_printf_float+0x1da>
 80052c6:	1849      	adds	r1, r1, r1
 80052c8:	1ac9      	subs	r1, r1, r3
 80052ca:	1852      	adds	r2, r2, r1
 80052cc:	e7eb      	b.n	80052a6 <_printf_float+0x1b6>
 80052ce:	6822      	ldr	r2, [r4, #0]
 80052d0:	0553      	lsls	r3, r2, #21
 80052d2:	d408      	bmi.n	80052e6 <_printf_float+0x1f6>
 80052d4:	6923      	ldr	r3, [r4, #16]
 80052d6:	002a      	movs	r2, r5
 80052d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80052da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80052de:	47a8      	blx	r5
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d129      	bne.n	8005338 <_printf_float+0x248>
 80052e4:	e75f      	b.n	80051a6 <_printf_float+0xb6>
 80052e6:	2f65      	cmp	r7, #101	; 0x65
 80052e8:	d800      	bhi.n	80052ec <_printf_float+0x1fc>
 80052ea:	e0e0      	b.n	80054ae <_printf_float+0x3be>
 80052ec:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80052ee:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80052f0:	2200      	movs	r2, #0
 80052f2:	2300      	movs	r3, #0
 80052f4:	f7fb f8a0 	bl	8000438 <__aeabi_dcmpeq>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d034      	beq.n	8005366 <_printf_float+0x276>
 80052fc:	2301      	movs	r3, #1
 80052fe:	4a42      	ldr	r2, [pc, #264]	; (8005408 <_printf_float+0x318>)
 8005300:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005302:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005304:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005306:	47a8      	blx	r5
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d100      	bne.n	800530e <_printf_float+0x21e>
 800530c:	e74b      	b.n	80051a6 <_printf_float+0xb6>
 800530e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005310:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005312:	4293      	cmp	r3, r2
 8005314:	db02      	blt.n	800531c <_printf_float+0x22c>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	07db      	lsls	r3, r3, #31
 800531a:	d50d      	bpl.n	8005338 <_printf_float+0x248>
 800531c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800531e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005322:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005326:	47a8      	blx	r5
 8005328:	2500      	movs	r5, #0
 800532a:	1c43      	adds	r3, r0, #1
 800532c:	d100      	bne.n	8005330 <_printf_float+0x240>
 800532e:	e73a      	b.n	80051a6 <_printf_float+0xb6>
 8005330:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005332:	3b01      	subs	r3, #1
 8005334:	42ab      	cmp	r3, r5
 8005336:	dc0a      	bgt.n	800534e <_printf_float+0x25e>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	079b      	lsls	r3, r3, #30
 800533c:	d500      	bpl.n	8005340 <_printf_float+0x250>
 800533e:	e108      	b.n	8005552 <_printf_float+0x462>
 8005340:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005342:	68e0      	ldr	r0, [r4, #12]
 8005344:	4298      	cmp	r0, r3
 8005346:	db00      	blt.n	800534a <_printf_float+0x25a>
 8005348:	e72f      	b.n	80051aa <_printf_float+0xba>
 800534a:	0018      	movs	r0, r3
 800534c:	e72d      	b.n	80051aa <_printf_float+0xba>
 800534e:	0022      	movs	r2, r4
 8005350:	2301      	movs	r3, #1
 8005352:	321a      	adds	r2, #26
 8005354:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005356:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005358:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800535a:	47b0      	blx	r6
 800535c:	1c43      	adds	r3, r0, #1
 800535e:	d100      	bne.n	8005362 <_printf_float+0x272>
 8005360:	e721      	b.n	80051a6 <_printf_float+0xb6>
 8005362:	3501      	adds	r5, #1
 8005364:	e7e4      	b.n	8005330 <_printf_float+0x240>
 8005366:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005368:	2b00      	cmp	r3, #0
 800536a:	dc2d      	bgt.n	80053c8 <_printf_float+0x2d8>
 800536c:	2301      	movs	r3, #1
 800536e:	4a26      	ldr	r2, [pc, #152]	; (8005408 <_printf_float+0x318>)
 8005370:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005372:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005374:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005376:	47b0      	blx	r6
 8005378:	1c43      	adds	r3, r0, #1
 800537a:	d100      	bne.n	800537e <_printf_float+0x28e>
 800537c:	e713      	b.n	80051a6 <_printf_float+0xb6>
 800537e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005380:	2b00      	cmp	r3, #0
 8005382:	d105      	bne.n	8005390 <_printf_float+0x2a0>
 8005384:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005386:	2b00      	cmp	r3, #0
 8005388:	d102      	bne.n	8005390 <_printf_float+0x2a0>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	07db      	lsls	r3, r3, #31
 800538e:	d5d3      	bpl.n	8005338 <_printf_float+0x248>
 8005390:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005394:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005396:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800539a:	47b0      	blx	r6
 800539c:	2600      	movs	r6, #0
 800539e:	1c43      	adds	r3, r0, #1
 80053a0:	d100      	bne.n	80053a4 <_printf_float+0x2b4>
 80053a2:	e700      	b.n	80051a6 <_printf_float+0xb6>
 80053a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053a6:	425b      	negs	r3, r3
 80053a8:	42b3      	cmp	r3, r6
 80053aa:	dc01      	bgt.n	80053b0 <_printf_float+0x2c0>
 80053ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053ae:	e792      	b.n	80052d6 <_printf_float+0x1e6>
 80053b0:	0022      	movs	r2, r4
 80053b2:	2301      	movs	r3, #1
 80053b4:	321a      	adds	r2, #26
 80053b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053ba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80053bc:	47b8      	blx	r7
 80053be:	1c43      	adds	r3, r0, #1
 80053c0:	d100      	bne.n	80053c4 <_printf_float+0x2d4>
 80053c2:	e6f0      	b.n	80051a6 <_printf_float+0xb6>
 80053c4:	3601      	adds	r6, #1
 80053c6:	e7ed      	b.n	80053a4 <_printf_float+0x2b4>
 80053c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053ca:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80053cc:	429f      	cmp	r7, r3
 80053ce:	dd00      	ble.n	80053d2 <_printf_float+0x2e2>
 80053d0:	001f      	movs	r7, r3
 80053d2:	2f00      	cmp	r7, #0
 80053d4:	dd08      	ble.n	80053e8 <_printf_float+0x2f8>
 80053d6:	003b      	movs	r3, r7
 80053d8:	002a      	movs	r2, r5
 80053da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053de:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80053e0:	47b0      	blx	r6
 80053e2:	1c43      	adds	r3, r0, #1
 80053e4:	d100      	bne.n	80053e8 <_printf_float+0x2f8>
 80053e6:	e6de      	b.n	80051a6 <_printf_float+0xb6>
 80053e8:	2300      	movs	r3, #0
 80053ea:	930d      	str	r3, [sp, #52]	; 0x34
 80053ec:	43fb      	mvns	r3, r7
 80053ee:	17db      	asrs	r3, r3, #31
 80053f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80053f2:	e018      	b.n	8005426 <_printf_float+0x336>
 80053f4:	7fefffff 	.word	0x7fefffff
 80053f8:	08006b90 	.word	0x08006b90
 80053fc:	08006b8c 	.word	0x08006b8c
 8005400:	08006b98 	.word	0x08006b98
 8005404:	08006b94 	.word	0x08006b94
 8005408:	08006b9c 	.word	0x08006b9c
 800540c:	0022      	movs	r2, r4
 800540e:	2301      	movs	r3, #1
 8005410:	321a      	adds	r2, #26
 8005412:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005416:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005418:	47b0      	blx	r6
 800541a:	1c43      	adds	r3, r0, #1
 800541c:	d100      	bne.n	8005420 <_printf_float+0x330>
 800541e:	e6c2      	b.n	80051a6 <_printf_float+0xb6>
 8005420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005422:	3301      	adds	r3, #1
 8005424:	930d      	str	r3, [sp, #52]	; 0x34
 8005426:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005428:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800542a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800542c:	403b      	ands	r3, r7
 800542e:	1af3      	subs	r3, r6, r3
 8005430:	4293      	cmp	r3, r2
 8005432:	dceb      	bgt.n	800540c <_printf_float+0x31c>
 8005434:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005436:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005438:	19ad      	adds	r5, r5, r6
 800543a:	4293      	cmp	r3, r2
 800543c:	db10      	blt.n	8005460 <_printf_float+0x370>
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	07db      	lsls	r3, r3, #31
 8005442:	d40d      	bmi.n	8005460 <_printf_float+0x370>
 8005444:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8005446:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005448:	1bbe      	subs	r6, r7, r6
 800544a:	1aff      	subs	r7, r7, r3
 800544c:	42b7      	cmp	r7, r6
 800544e:	dd00      	ble.n	8005452 <_printf_float+0x362>
 8005450:	0037      	movs	r7, r6
 8005452:	2f00      	cmp	r7, #0
 8005454:	dc0d      	bgt.n	8005472 <_printf_float+0x382>
 8005456:	43fe      	mvns	r6, r7
 8005458:	17f3      	asrs	r3, r6, #31
 800545a:	2500      	movs	r5, #0
 800545c:	930c      	str	r3, [sp, #48]	; 0x30
 800545e:	e01c      	b.n	800549a <_printf_float+0x3aa>
 8005460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005462:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005464:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005466:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005468:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800546a:	47b8      	blx	r7
 800546c:	1c43      	adds	r3, r0, #1
 800546e:	d1e9      	bne.n	8005444 <_printf_float+0x354>
 8005470:	e699      	b.n	80051a6 <_printf_float+0xb6>
 8005472:	003b      	movs	r3, r7
 8005474:	002a      	movs	r2, r5
 8005476:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800547a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800547c:	47a8      	blx	r5
 800547e:	1c43      	adds	r3, r0, #1
 8005480:	d1e9      	bne.n	8005456 <_printf_float+0x366>
 8005482:	e690      	b.n	80051a6 <_printf_float+0xb6>
 8005484:	0022      	movs	r2, r4
 8005486:	2301      	movs	r3, #1
 8005488:	321a      	adds	r2, #26
 800548a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800548c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800548e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005490:	47b0      	blx	r6
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	d100      	bne.n	8005498 <_printf_float+0x3a8>
 8005496:	e686      	b.n	80051a6 <_printf_float+0xb6>
 8005498:	3501      	adds	r5, #1
 800549a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800549c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800549e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	003a      	movs	r2, r7
 80054a4:	400a      	ands	r2, r1
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	42ab      	cmp	r3, r5
 80054aa:	dceb      	bgt.n	8005484 <_printf_float+0x394>
 80054ac:	e744      	b.n	8005338 <_printf_float+0x248>
 80054ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	dc02      	bgt.n	80054ba <_printf_float+0x3ca>
 80054b4:	2301      	movs	r3, #1
 80054b6:	421a      	tst	r2, r3
 80054b8:	d032      	beq.n	8005520 <_printf_float+0x430>
 80054ba:	2301      	movs	r3, #1
 80054bc:	002a      	movs	r2, r5
 80054be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054c2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80054c4:	47b8      	blx	r7
 80054c6:	1c43      	adds	r3, r0, #1
 80054c8:	d100      	bne.n	80054cc <_printf_float+0x3dc>
 80054ca:	e66c      	b.n	80051a6 <_printf_float+0xb6>
 80054cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054d4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80054d6:	3501      	adds	r5, #1
 80054d8:	47b8      	blx	r7
 80054da:	1c43      	adds	r3, r0, #1
 80054dc:	d100      	bne.n	80054e0 <_printf_float+0x3f0>
 80054de:	e662      	b.n	80051a6 <_printf_float+0xb6>
 80054e0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80054e2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80054e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054e6:	2200      	movs	r2, #0
 80054e8:	1e5f      	subs	r7, r3, #1
 80054ea:	2300      	movs	r3, #0
 80054ec:	f7fa ffa4 	bl	8000438 <__aeabi_dcmpeq>
 80054f0:	003b      	movs	r3, r7
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d014      	beq.n	8005520 <_printf_float+0x430>
 80054f6:	2500      	movs	r5, #0
 80054f8:	e00a      	b.n	8005510 <_printf_float+0x420>
 80054fa:	0022      	movs	r2, r4
 80054fc:	2301      	movs	r3, #1
 80054fe:	321a      	adds	r2, #26
 8005500:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005502:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005504:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005506:	47b8      	blx	r7
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	d100      	bne.n	800550e <_printf_float+0x41e>
 800550c:	e64b      	b.n	80051a6 <_printf_float+0xb6>
 800550e:	3501      	adds	r5, #1
 8005510:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005512:	3b01      	subs	r3, #1
 8005514:	42ab      	cmp	r3, r5
 8005516:	dcf0      	bgt.n	80054fa <_printf_float+0x40a>
 8005518:	0022      	movs	r2, r4
 800551a:	0033      	movs	r3, r6
 800551c:	3250      	adds	r2, #80	; 0x50
 800551e:	e6db      	b.n	80052d8 <_printf_float+0x1e8>
 8005520:	002a      	movs	r2, r5
 8005522:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005526:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005528:	47a8      	blx	r5
 800552a:	1c43      	adds	r3, r0, #1
 800552c:	d1f4      	bne.n	8005518 <_printf_float+0x428>
 800552e:	e63a      	b.n	80051a6 <_printf_float+0xb6>
 8005530:	0022      	movs	r2, r4
 8005532:	2301      	movs	r3, #1
 8005534:	3219      	adds	r2, #25
 8005536:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800553a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800553c:	47b0      	blx	r6
 800553e:	1c43      	adds	r3, r0, #1
 8005540:	d100      	bne.n	8005544 <_printf_float+0x454>
 8005542:	e630      	b.n	80051a6 <_printf_float+0xb6>
 8005544:	3501      	adds	r5, #1
 8005546:	68e3      	ldr	r3, [r4, #12]
 8005548:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	42ab      	cmp	r3, r5
 800554e:	dcef      	bgt.n	8005530 <_printf_float+0x440>
 8005550:	e6f6      	b.n	8005340 <_printf_float+0x250>
 8005552:	2500      	movs	r5, #0
 8005554:	e7f7      	b.n	8005546 <_printf_float+0x456>
 8005556:	2a00      	cmp	r2, #0
 8005558:	d100      	bne.n	800555c <_printf_float+0x46c>
 800555a:	e689      	b.n	8005270 <_printf_float+0x180>
 800555c:	2100      	movs	r1, #0
 800555e:	9106      	str	r1, [sp, #24]
 8005560:	a912      	add	r1, sp, #72	; 0x48
 8005562:	9105      	str	r1, [sp, #20]
 8005564:	a911      	add	r1, sp, #68	; 0x44
 8005566:	9103      	str	r1, [sp, #12]
 8005568:	2123      	movs	r1, #35	; 0x23
 800556a:	a808      	add	r0, sp, #32
 800556c:	1809      	adds	r1, r1, r0
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	9200      	str	r2, [sp, #0]
 8005574:	002b      	movs	r3, r5
 8005576:	9704      	str	r7, [sp, #16]
 8005578:	9102      	str	r1, [sp, #8]
 800557a:	0032      	movs	r2, r6
 800557c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800557e:	f7ff fd1a 	bl	8004fb6 <__cvt>
 8005582:	0005      	movs	r5, r0
 8005584:	e645      	b.n	8005212 <_printf_float+0x122>
 8005586:	46c0      	nop			; (mov r8, r8)

08005588 <_printf_common>:
 8005588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800558a:	0015      	movs	r5, r2
 800558c:	9301      	str	r3, [sp, #4]
 800558e:	688a      	ldr	r2, [r1, #8]
 8005590:	690b      	ldr	r3, [r1, #16]
 8005592:	9000      	str	r0, [sp, #0]
 8005594:	000c      	movs	r4, r1
 8005596:	4293      	cmp	r3, r2
 8005598:	da00      	bge.n	800559c <_printf_common+0x14>
 800559a:	0013      	movs	r3, r2
 800559c:	0022      	movs	r2, r4
 800559e:	602b      	str	r3, [r5, #0]
 80055a0:	3243      	adds	r2, #67	; 0x43
 80055a2:	7812      	ldrb	r2, [r2, #0]
 80055a4:	2a00      	cmp	r2, #0
 80055a6:	d001      	beq.n	80055ac <_printf_common+0x24>
 80055a8:	3301      	adds	r3, #1
 80055aa:	602b      	str	r3, [r5, #0]
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	069b      	lsls	r3, r3, #26
 80055b0:	d502      	bpl.n	80055b8 <_printf_common+0x30>
 80055b2:	682b      	ldr	r3, [r5, #0]
 80055b4:	3302      	adds	r3, #2
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	2706      	movs	r7, #6
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	401f      	ands	r7, r3
 80055be:	d027      	beq.n	8005610 <_printf_common+0x88>
 80055c0:	0023      	movs	r3, r4
 80055c2:	3343      	adds	r3, #67	; 0x43
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	1e5a      	subs	r2, r3, #1
 80055c8:	4193      	sbcs	r3, r2
 80055ca:	6822      	ldr	r2, [r4, #0]
 80055cc:	0692      	lsls	r2, r2, #26
 80055ce:	d430      	bmi.n	8005632 <_printf_common+0xaa>
 80055d0:	0022      	movs	r2, r4
 80055d2:	9901      	ldr	r1, [sp, #4]
 80055d4:	3243      	adds	r2, #67	; 0x43
 80055d6:	9800      	ldr	r0, [sp, #0]
 80055d8:	9e08      	ldr	r6, [sp, #32]
 80055da:	47b0      	blx	r6
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d025      	beq.n	800562c <_printf_common+0xa4>
 80055e0:	2306      	movs	r3, #6
 80055e2:	6820      	ldr	r0, [r4, #0]
 80055e4:	682a      	ldr	r2, [r5, #0]
 80055e6:	68e1      	ldr	r1, [r4, #12]
 80055e8:	4003      	ands	r3, r0
 80055ea:	2500      	movs	r5, #0
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d103      	bne.n	80055f8 <_printf_common+0x70>
 80055f0:	1a8d      	subs	r5, r1, r2
 80055f2:	43eb      	mvns	r3, r5
 80055f4:	17db      	asrs	r3, r3, #31
 80055f6:	401d      	ands	r5, r3
 80055f8:	68a3      	ldr	r3, [r4, #8]
 80055fa:	6922      	ldr	r2, [r4, #16]
 80055fc:	4293      	cmp	r3, r2
 80055fe:	dd01      	ble.n	8005604 <_printf_common+0x7c>
 8005600:	1a9b      	subs	r3, r3, r2
 8005602:	18ed      	adds	r5, r5, r3
 8005604:	2700      	movs	r7, #0
 8005606:	42bd      	cmp	r5, r7
 8005608:	d120      	bne.n	800564c <_printf_common+0xc4>
 800560a:	2000      	movs	r0, #0
 800560c:	e010      	b.n	8005630 <_printf_common+0xa8>
 800560e:	3701      	adds	r7, #1
 8005610:	68e3      	ldr	r3, [r4, #12]
 8005612:	682a      	ldr	r2, [r5, #0]
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	42bb      	cmp	r3, r7
 8005618:	ddd2      	ble.n	80055c0 <_printf_common+0x38>
 800561a:	0022      	movs	r2, r4
 800561c:	2301      	movs	r3, #1
 800561e:	3219      	adds	r2, #25
 8005620:	9901      	ldr	r1, [sp, #4]
 8005622:	9800      	ldr	r0, [sp, #0]
 8005624:	9e08      	ldr	r6, [sp, #32]
 8005626:	47b0      	blx	r6
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d1f0      	bne.n	800560e <_printf_common+0x86>
 800562c:	2001      	movs	r0, #1
 800562e:	4240      	negs	r0, r0
 8005630:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005632:	2030      	movs	r0, #48	; 0x30
 8005634:	18e1      	adds	r1, r4, r3
 8005636:	3143      	adds	r1, #67	; 0x43
 8005638:	7008      	strb	r0, [r1, #0]
 800563a:	0021      	movs	r1, r4
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	3145      	adds	r1, #69	; 0x45
 8005640:	7809      	ldrb	r1, [r1, #0]
 8005642:	18a2      	adds	r2, r4, r2
 8005644:	3243      	adds	r2, #67	; 0x43
 8005646:	3302      	adds	r3, #2
 8005648:	7011      	strb	r1, [r2, #0]
 800564a:	e7c1      	b.n	80055d0 <_printf_common+0x48>
 800564c:	0022      	movs	r2, r4
 800564e:	2301      	movs	r3, #1
 8005650:	321a      	adds	r2, #26
 8005652:	9901      	ldr	r1, [sp, #4]
 8005654:	9800      	ldr	r0, [sp, #0]
 8005656:	9e08      	ldr	r6, [sp, #32]
 8005658:	47b0      	blx	r6
 800565a:	1c43      	adds	r3, r0, #1
 800565c:	d0e6      	beq.n	800562c <_printf_common+0xa4>
 800565e:	3701      	adds	r7, #1
 8005660:	e7d1      	b.n	8005606 <_printf_common+0x7e>

08005662 <quorem>:
 8005662:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005664:	6903      	ldr	r3, [r0, #16]
 8005666:	690c      	ldr	r4, [r1, #16]
 8005668:	b089      	sub	sp, #36	; 0x24
 800566a:	0007      	movs	r7, r0
 800566c:	9105      	str	r1, [sp, #20]
 800566e:	2600      	movs	r6, #0
 8005670:	42a3      	cmp	r3, r4
 8005672:	db65      	blt.n	8005740 <quorem+0xde>
 8005674:	000b      	movs	r3, r1
 8005676:	3c01      	subs	r4, #1
 8005678:	3314      	adds	r3, #20
 800567a:	00a5      	lsls	r5, r4, #2
 800567c:	9303      	str	r3, [sp, #12]
 800567e:	195b      	adds	r3, r3, r5
 8005680:	9304      	str	r3, [sp, #16]
 8005682:	0003      	movs	r3, r0
 8005684:	3314      	adds	r3, #20
 8005686:	9302      	str	r3, [sp, #8]
 8005688:	195d      	adds	r5, r3, r5
 800568a:	9b04      	ldr	r3, [sp, #16]
 800568c:	6828      	ldr	r0, [r5, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	1c59      	adds	r1, r3, #1
 8005692:	9301      	str	r3, [sp, #4]
 8005694:	f7fa fd4a 	bl	800012c <__udivsi3>
 8005698:	9001      	str	r0, [sp, #4]
 800569a:	42b0      	cmp	r0, r6
 800569c:	d029      	beq.n	80056f2 <quorem+0x90>
 800569e:	9b03      	ldr	r3, [sp, #12]
 80056a0:	9802      	ldr	r0, [sp, #8]
 80056a2:	469c      	mov	ip, r3
 80056a4:	9606      	str	r6, [sp, #24]
 80056a6:	4662      	mov	r2, ip
 80056a8:	ca08      	ldmia	r2!, {r3}
 80056aa:	4694      	mov	ip, r2
 80056ac:	9a01      	ldr	r2, [sp, #4]
 80056ae:	b299      	uxth	r1, r3
 80056b0:	4351      	muls	r1, r2
 80056b2:	0c1b      	lsrs	r3, r3, #16
 80056b4:	4353      	muls	r3, r2
 80056b6:	1989      	adds	r1, r1, r6
 80056b8:	0c0a      	lsrs	r2, r1, #16
 80056ba:	189b      	adds	r3, r3, r2
 80056bc:	9307      	str	r3, [sp, #28]
 80056be:	0c1e      	lsrs	r6, r3, #16
 80056c0:	6803      	ldr	r3, [r0, #0]
 80056c2:	b289      	uxth	r1, r1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	9b06      	ldr	r3, [sp, #24]
 80056c8:	18d2      	adds	r2, r2, r3
 80056ca:	6803      	ldr	r3, [r0, #0]
 80056cc:	1a52      	subs	r2, r2, r1
 80056ce:	0c19      	lsrs	r1, r3, #16
 80056d0:	466b      	mov	r3, sp
 80056d2:	8b9b      	ldrh	r3, [r3, #28]
 80056d4:	1acb      	subs	r3, r1, r3
 80056d6:	1411      	asrs	r1, r2, #16
 80056d8:	185b      	adds	r3, r3, r1
 80056da:	1419      	asrs	r1, r3, #16
 80056dc:	b292      	uxth	r2, r2
 80056de:	041b      	lsls	r3, r3, #16
 80056e0:	431a      	orrs	r2, r3
 80056e2:	9b04      	ldr	r3, [sp, #16]
 80056e4:	9106      	str	r1, [sp, #24]
 80056e6:	c004      	stmia	r0!, {r2}
 80056e8:	4563      	cmp	r3, ip
 80056ea:	d2dc      	bcs.n	80056a6 <quorem+0x44>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d02d      	beq.n	800574e <quorem+0xec>
 80056f2:	9905      	ldr	r1, [sp, #20]
 80056f4:	0038      	movs	r0, r7
 80056f6:	f001 f845 	bl	8006784 <__mcmp>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	db1f      	blt.n	800573e <quorem+0xdc>
 80056fe:	2500      	movs	r5, #0
 8005700:	9b01      	ldr	r3, [sp, #4]
 8005702:	9802      	ldr	r0, [sp, #8]
 8005704:	3301      	adds	r3, #1
 8005706:	9903      	ldr	r1, [sp, #12]
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	6802      	ldr	r2, [r0, #0]
 800570c:	c908      	ldmia	r1!, {r3}
 800570e:	b292      	uxth	r2, r2
 8005710:	1955      	adds	r5, r2, r5
 8005712:	b29a      	uxth	r2, r3
 8005714:	1aaa      	subs	r2, r5, r2
 8005716:	6805      	ldr	r5, [r0, #0]
 8005718:	0c1b      	lsrs	r3, r3, #16
 800571a:	0c2d      	lsrs	r5, r5, #16
 800571c:	1aeb      	subs	r3, r5, r3
 800571e:	1415      	asrs	r5, r2, #16
 8005720:	195b      	adds	r3, r3, r5
 8005722:	141d      	asrs	r5, r3, #16
 8005724:	b292      	uxth	r2, r2
 8005726:	041b      	lsls	r3, r3, #16
 8005728:	4313      	orrs	r3, r2
 800572a:	c008      	stmia	r0!, {r3}
 800572c:	9b04      	ldr	r3, [sp, #16]
 800572e:	428b      	cmp	r3, r1
 8005730:	d2eb      	bcs.n	800570a <quorem+0xa8>
 8005732:	9a02      	ldr	r2, [sp, #8]
 8005734:	00a3      	lsls	r3, r4, #2
 8005736:	18d3      	adds	r3, r2, r3
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	2a00      	cmp	r2, #0
 800573c:	d011      	beq.n	8005762 <quorem+0x100>
 800573e:	9e01      	ldr	r6, [sp, #4]
 8005740:	0030      	movs	r0, r6
 8005742:	b009      	add	sp, #36	; 0x24
 8005744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005746:	682b      	ldr	r3, [r5, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d104      	bne.n	8005756 <quorem+0xf4>
 800574c:	3c01      	subs	r4, #1
 800574e:	9b02      	ldr	r3, [sp, #8]
 8005750:	3d04      	subs	r5, #4
 8005752:	42ab      	cmp	r3, r5
 8005754:	d3f7      	bcc.n	8005746 <quorem+0xe4>
 8005756:	613c      	str	r4, [r7, #16]
 8005758:	e7cb      	b.n	80056f2 <quorem+0x90>
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	2a00      	cmp	r2, #0
 800575e:	d104      	bne.n	800576a <quorem+0x108>
 8005760:	3c01      	subs	r4, #1
 8005762:	9a02      	ldr	r2, [sp, #8]
 8005764:	3b04      	subs	r3, #4
 8005766:	429a      	cmp	r2, r3
 8005768:	d3f7      	bcc.n	800575a <quorem+0xf8>
 800576a:	613c      	str	r4, [r7, #16]
 800576c:	e7e7      	b.n	800573e <quorem+0xdc>
	...

08005770 <_dtoa_r>:
 8005770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005772:	0016      	movs	r6, r2
 8005774:	001f      	movs	r7, r3
 8005776:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005778:	b09b      	sub	sp, #108	; 0x6c
 800577a:	9002      	str	r0, [sp, #8]
 800577c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800577e:	9606      	str	r6, [sp, #24]
 8005780:	9707      	str	r7, [sp, #28]
 8005782:	2c00      	cmp	r4, #0
 8005784:	d108      	bne.n	8005798 <_dtoa_r+0x28>
 8005786:	2010      	movs	r0, #16
 8005788:	f000 fdde 	bl	8006348 <malloc>
 800578c:	9b02      	ldr	r3, [sp, #8]
 800578e:	6258      	str	r0, [r3, #36]	; 0x24
 8005790:	6044      	str	r4, [r0, #4]
 8005792:	6084      	str	r4, [r0, #8]
 8005794:	6004      	str	r4, [r0, #0]
 8005796:	60c4      	str	r4, [r0, #12]
 8005798:	9b02      	ldr	r3, [sp, #8]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	6819      	ldr	r1, [r3, #0]
 800579e:	2900      	cmp	r1, #0
 80057a0:	d00b      	beq.n	80057ba <_dtoa_r+0x4a>
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	2301      	movs	r3, #1
 80057a6:	4093      	lsls	r3, r2
 80057a8:	604a      	str	r2, [r1, #4]
 80057aa:	608b      	str	r3, [r1, #8]
 80057ac:	9802      	ldr	r0, [sp, #8]
 80057ae:	f000 fe0d 	bl	80063cc <_Bfree>
 80057b2:	2200      	movs	r2, #0
 80057b4:	9b02      	ldr	r3, [sp, #8]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	2f00      	cmp	r7, #0
 80057bc:	da20      	bge.n	8005800 <_dtoa_r+0x90>
 80057be:	2301      	movs	r3, #1
 80057c0:	602b      	str	r3, [r5, #0]
 80057c2:	007b      	lsls	r3, r7, #1
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	9307      	str	r3, [sp, #28]
 80057c8:	9c07      	ldr	r4, [sp, #28]
 80057ca:	4bb2      	ldr	r3, [pc, #712]	; (8005a94 <_dtoa_r+0x324>)
 80057cc:	0022      	movs	r2, r4
 80057ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80057d0:	401a      	ands	r2, r3
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d117      	bne.n	8005806 <_dtoa_r+0x96>
 80057d6:	4bb0      	ldr	r3, [pc, #704]	; (8005a98 <_dtoa_r+0x328>)
 80057d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	9b06      	ldr	r3, [sp, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <_dtoa_r+0x7a>
 80057e2:	0324      	lsls	r4, r4, #12
 80057e4:	d101      	bne.n	80057ea <_dtoa_r+0x7a>
 80057e6:	f000 fd87 	bl	80062f8 <_dtoa_r+0xb88>
 80057ea:	4bac      	ldr	r3, [pc, #688]	; (8005a9c <_dtoa_r+0x32c>)
 80057ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80057ee:	9308      	str	r3, [sp, #32]
 80057f0:	2a00      	cmp	r2, #0
 80057f2:	d002      	beq.n	80057fa <_dtoa_r+0x8a>
 80057f4:	4baa      	ldr	r3, [pc, #680]	; (8005aa0 <_dtoa_r+0x330>)
 80057f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	9808      	ldr	r0, [sp, #32]
 80057fc:	b01b      	add	sp, #108	; 0x6c
 80057fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005800:	2300      	movs	r3, #0
 8005802:	602b      	str	r3, [r5, #0]
 8005804:	e7e0      	b.n	80057c8 <_dtoa_r+0x58>
 8005806:	9e06      	ldr	r6, [sp, #24]
 8005808:	9f07      	ldr	r7, [sp, #28]
 800580a:	2200      	movs	r2, #0
 800580c:	2300      	movs	r3, #0
 800580e:	0030      	movs	r0, r6
 8005810:	0039      	movs	r1, r7
 8005812:	f7fa fe11 	bl	8000438 <__aeabi_dcmpeq>
 8005816:	1e05      	subs	r5, r0, #0
 8005818:	d00b      	beq.n	8005832 <_dtoa_r+0xc2>
 800581a:	2301      	movs	r3, #1
 800581c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	4ba0      	ldr	r3, [pc, #640]	; (8005aa4 <_dtoa_r+0x334>)
 8005822:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005824:	9308      	str	r3, [sp, #32]
 8005826:	2a00      	cmp	r2, #0
 8005828:	d0e7      	beq.n	80057fa <_dtoa_r+0x8a>
 800582a:	4a9f      	ldr	r2, [pc, #636]	; (8005aa8 <_dtoa_r+0x338>)
 800582c:	9924      	ldr	r1, [sp, #144]	; 0x90
 800582e:	600a      	str	r2, [r1, #0]
 8005830:	e7e3      	b.n	80057fa <_dtoa_r+0x8a>
 8005832:	ab18      	add	r3, sp, #96	; 0x60
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	ab19      	add	r3, sp, #100	; 0x64
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	0032      	movs	r2, r6
 800583c:	003b      	movs	r3, r7
 800583e:	9802      	ldr	r0, [sp, #8]
 8005840:	f001 f81e 	bl	8006880 <__d2b>
 8005844:	0063      	lsls	r3, r4, #1
 8005846:	9003      	str	r0, [sp, #12]
 8005848:	0d5b      	lsrs	r3, r3, #21
 800584a:	d074      	beq.n	8005936 <_dtoa_r+0x1c6>
 800584c:	033a      	lsls	r2, r7, #12
 800584e:	4c97      	ldr	r4, [pc, #604]	; (8005aac <_dtoa_r+0x33c>)
 8005850:	0b12      	lsrs	r2, r2, #12
 8005852:	4314      	orrs	r4, r2
 8005854:	0021      	movs	r1, r4
 8005856:	4a96      	ldr	r2, [pc, #600]	; (8005ab0 <_dtoa_r+0x340>)
 8005858:	0030      	movs	r0, r6
 800585a:	9516      	str	r5, [sp, #88]	; 0x58
 800585c:	189e      	adds	r6, r3, r2
 800585e:	2200      	movs	r2, #0
 8005860:	4b94      	ldr	r3, [pc, #592]	; (8005ab4 <_dtoa_r+0x344>)
 8005862:	f7fb ffaf 	bl	80017c4 <__aeabi_dsub>
 8005866:	4a94      	ldr	r2, [pc, #592]	; (8005ab8 <_dtoa_r+0x348>)
 8005868:	4b94      	ldr	r3, [pc, #592]	; (8005abc <_dtoa_r+0x34c>)
 800586a:	f7fb fd39 	bl	80012e0 <__aeabi_dmul>
 800586e:	4a94      	ldr	r2, [pc, #592]	; (8005ac0 <_dtoa_r+0x350>)
 8005870:	4b94      	ldr	r3, [pc, #592]	; (8005ac4 <_dtoa_r+0x354>)
 8005872:	f7fa fe0f 	bl	8000494 <__aeabi_dadd>
 8005876:	0004      	movs	r4, r0
 8005878:	0030      	movs	r0, r6
 800587a:	000d      	movs	r5, r1
 800587c:	f7fc fb3c 	bl	8001ef8 <__aeabi_i2d>
 8005880:	4a91      	ldr	r2, [pc, #580]	; (8005ac8 <_dtoa_r+0x358>)
 8005882:	4b92      	ldr	r3, [pc, #584]	; (8005acc <_dtoa_r+0x35c>)
 8005884:	f7fb fd2c 	bl	80012e0 <__aeabi_dmul>
 8005888:	0002      	movs	r2, r0
 800588a:	000b      	movs	r3, r1
 800588c:	0020      	movs	r0, r4
 800588e:	0029      	movs	r1, r5
 8005890:	f7fa fe00 	bl	8000494 <__aeabi_dadd>
 8005894:	0004      	movs	r4, r0
 8005896:	000d      	movs	r5, r1
 8005898:	f7fc faf8 	bl	8001e8c <__aeabi_d2iz>
 800589c:	2200      	movs	r2, #0
 800589e:	0007      	movs	r7, r0
 80058a0:	2300      	movs	r3, #0
 80058a2:	0020      	movs	r0, r4
 80058a4:	0029      	movs	r1, r5
 80058a6:	f7fa fdcd 	bl	8000444 <__aeabi_dcmplt>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d009      	beq.n	80058c2 <_dtoa_r+0x152>
 80058ae:	0038      	movs	r0, r7
 80058b0:	f7fc fb22 	bl	8001ef8 <__aeabi_i2d>
 80058b4:	002b      	movs	r3, r5
 80058b6:	0022      	movs	r2, r4
 80058b8:	f7fa fdbe 	bl	8000438 <__aeabi_dcmpeq>
 80058bc:	4243      	negs	r3, r0
 80058be:	4158      	adcs	r0, r3
 80058c0:	1a3f      	subs	r7, r7, r0
 80058c2:	2301      	movs	r3, #1
 80058c4:	9314      	str	r3, [sp, #80]	; 0x50
 80058c6:	2f16      	cmp	r7, #22
 80058c8:	d80d      	bhi.n	80058e6 <_dtoa_r+0x176>
 80058ca:	4981      	ldr	r1, [pc, #516]	; (8005ad0 <_dtoa_r+0x360>)
 80058cc:	00fb      	lsls	r3, r7, #3
 80058ce:	18c9      	adds	r1, r1, r3
 80058d0:	6808      	ldr	r0, [r1, #0]
 80058d2:	6849      	ldr	r1, [r1, #4]
 80058d4:	9a06      	ldr	r2, [sp, #24]
 80058d6:	9b07      	ldr	r3, [sp, #28]
 80058d8:	f7fa fdc8 	bl	800046c <__aeabi_dcmpgt>
 80058dc:	2800      	cmp	r0, #0
 80058de:	d046      	beq.n	800596e <_dtoa_r+0x1fe>
 80058e0:	2300      	movs	r3, #0
 80058e2:	3f01      	subs	r7, #1
 80058e4:	9314      	str	r3, [sp, #80]	; 0x50
 80058e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80058e8:	1b9e      	subs	r6, r3, r6
 80058ea:	2300      	movs	r3, #0
 80058ec:	930a      	str	r3, [sp, #40]	; 0x28
 80058ee:	0033      	movs	r3, r6
 80058f0:	3b01      	subs	r3, #1
 80058f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80058f4:	d504      	bpl.n	8005900 <_dtoa_r+0x190>
 80058f6:	2301      	movs	r3, #1
 80058f8:	1b9b      	subs	r3, r3, r6
 80058fa:	930a      	str	r3, [sp, #40]	; 0x28
 80058fc:	2300      	movs	r3, #0
 80058fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005900:	2f00      	cmp	r7, #0
 8005902:	db36      	blt.n	8005972 <_dtoa_r+0x202>
 8005904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005906:	9711      	str	r7, [sp, #68]	; 0x44
 8005908:	19db      	adds	r3, r3, r7
 800590a:	930b      	str	r3, [sp, #44]	; 0x2c
 800590c:	2300      	movs	r3, #0
 800590e:	9304      	str	r3, [sp, #16]
 8005910:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005912:	2401      	movs	r4, #1
 8005914:	2b09      	cmp	r3, #9
 8005916:	d900      	bls.n	800591a <_dtoa_r+0x1aa>
 8005918:	e084      	b.n	8005a24 <_dtoa_r+0x2b4>
 800591a:	2b05      	cmp	r3, #5
 800591c:	dd02      	ble.n	8005924 <_dtoa_r+0x1b4>
 800591e:	2400      	movs	r4, #0
 8005920:	3b04      	subs	r3, #4
 8005922:	9320      	str	r3, [sp, #128]	; 0x80
 8005924:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005926:	1e98      	subs	r0, r3, #2
 8005928:	2803      	cmp	r0, #3
 800592a:	d900      	bls.n	800592e <_dtoa_r+0x1be>
 800592c:	e084      	b.n	8005a38 <_dtoa_r+0x2c8>
 800592e:	f7fa fbf3 	bl	8000118 <__gnu_thumb1_case_uqi>
 8005932:	7775      	.short	0x7775
 8005934:	6a28      	.short	0x6a28
 8005936:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005938:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800593a:	189e      	adds	r6, r3, r2
 800593c:	4b65      	ldr	r3, [pc, #404]	; (8005ad4 <_dtoa_r+0x364>)
 800593e:	18f2      	adds	r2, r6, r3
 8005940:	2a20      	cmp	r2, #32
 8005942:	dd0f      	ble.n	8005964 <_dtoa_r+0x1f4>
 8005944:	2340      	movs	r3, #64	; 0x40
 8005946:	1a9b      	subs	r3, r3, r2
 8005948:	409c      	lsls	r4, r3
 800594a:	4b63      	ldr	r3, [pc, #396]	; (8005ad8 <_dtoa_r+0x368>)
 800594c:	9806      	ldr	r0, [sp, #24]
 800594e:	18f3      	adds	r3, r6, r3
 8005950:	40d8      	lsrs	r0, r3
 8005952:	4320      	orrs	r0, r4
 8005954:	f7fc fb0a 	bl	8001f6c <__aeabi_ui2d>
 8005958:	2301      	movs	r3, #1
 800595a:	4c60      	ldr	r4, [pc, #384]	; (8005adc <_dtoa_r+0x36c>)
 800595c:	3e01      	subs	r6, #1
 800595e:	1909      	adds	r1, r1, r4
 8005960:	9316      	str	r3, [sp, #88]	; 0x58
 8005962:	e77c      	b.n	800585e <_dtoa_r+0xee>
 8005964:	2320      	movs	r3, #32
 8005966:	9806      	ldr	r0, [sp, #24]
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	4098      	lsls	r0, r3
 800596c:	e7f2      	b.n	8005954 <_dtoa_r+0x1e4>
 800596e:	9014      	str	r0, [sp, #80]	; 0x50
 8005970:	e7b9      	b.n	80058e6 <_dtoa_r+0x176>
 8005972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005974:	1bdb      	subs	r3, r3, r7
 8005976:	930a      	str	r3, [sp, #40]	; 0x28
 8005978:	427b      	negs	r3, r7
 800597a:	9304      	str	r3, [sp, #16]
 800597c:	2300      	movs	r3, #0
 800597e:	9311      	str	r3, [sp, #68]	; 0x44
 8005980:	e7c6      	b.n	8005910 <_dtoa_r+0x1a0>
 8005982:	2301      	movs	r3, #1
 8005984:	930d      	str	r3, [sp, #52]	; 0x34
 8005986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005988:	2b00      	cmp	r3, #0
 800598a:	dd59      	ble.n	8005a40 <_dtoa_r+0x2d0>
 800598c:	930c      	str	r3, [sp, #48]	; 0x30
 800598e:	9309      	str	r3, [sp, #36]	; 0x24
 8005990:	9a02      	ldr	r2, [sp, #8]
 8005992:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8005994:	2200      	movs	r2, #0
 8005996:	606a      	str	r2, [r5, #4]
 8005998:	3204      	adds	r2, #4
 800599a:	0010      	movs	r0, r2
 800599c:	3014      	adds	r0, #20
 800599e:	6869      	ldr	r1, [r5, #4]
 80059a0:	4298      	cmp	r0, r3
 80059a2:	d952      	bls.n	8005a4a <_dtoa_r+0x2da>
 80059a4:	9802      	ldr	r0, [sp, #8]
 80059a6:	f000 fcd9 	bl	800635c <_Balloc>
 80059aa:	9b02      	ldr	r3, [sp, #8]
 80059ac:	6028      	str	r0, [r5, #0]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	9308      	str	r3, [sp, #32]
 80059b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b6:	2b0e      	cmp	r3, #14
 80059b8:	d900      	bls.n	80059bc <_dtoa_r+0x24c>
 80059ba:	e10a      	b.n	8005bd2 <_dtoa_r+0x462>
 80059bc:	2c00      	cmp	r4, #0
 80059be:	d100      	bne.n	80059c2 <_dtoa_r+0x252>
 80059c0:	e107      	b.n	8005bd2 <_dtoa_r+0x462>
 80059c2:	9b06      	ldr	r3, [sp, #24]
 80059c4:	9c07      	ldr	r4, [sp, #28]
 80059c6:	9312      	str	r3, [sp, #72]	; 0x48
 80059c8:	9413      	str	r4, [sp, #76]	; 0x4c
 80059ca:	2f00      	cmp	r7, #0
 80059cc:	dc00      	bgt.n	80059d0 <_dtoa_r+0x260>
 80059ce:	e089      	b.n	8005ae4 <_dtoa_r+0x374>
 80059d0:	210f      	movs	r1, #15
 80059d2:	003a      	movs	r2, r7
 80059d4:	4b3e      	ldr	r3, [pc, #248]	; (8005ad0 <_dtoa_r+0x360>)
 80059d6:	400a      	ands	r2, r1
 80059d8:	00d2      	lsls	r2, r2, #3
 80059da:	189b      	adds	r3, r3, r2
 80059dc:	681d      	ldr	r5, [r3, #0]
 80059de:	685e      	ldr	r6, [r3, #4]
 80059e0:	2302      	movs	r3, #2
 80059e2:	113c      	asrs	r4, r7, #4
 80059e4:	930e      	str	r3, [sp, #56]	; 0x38
 80059e6:	06e3      	lsls	r3, r4, #27
 80059e8:	d50b      	bpl.n	8005a02 <_dtoa_r+0x292>
 80059ea:	4b3d      	ldr	r3, [pc, #244]	; (8005ae0 <_dtoa_r+0x370>)
 80059ec:	400c      	ands	r4, r1
 80059ee:	6a1a      	ldr	r2, [r3, #32]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80059f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80059f6:	f7fb f869 	bl	8000acc <__aeabi_ddiv>
 80059fa:	2303      	movs	r3, #3
 80059fc:	9006      	str	r0, [sp, #24]
 80059fe:	9107      	str	r1, [sp, #28]
 8005a00:	930e      	str	r3, [sp, #56]	; 0x38
 8005a02:	2300      	movs	r3, #0
 8005a04:	e03a      	b.n	8005a7c <_dtoa_r+0x30c>
 8005a06:	2301      	movs	r3, #1
 8005a08:	930d      	str	r3, [sp, #52]	; 0x34
 8005a0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	930c      	str	r3, [sp, #48]	; 0x30
 8005a10:	3301      	adds	r3, #1
 8005a12:	9309      	str	r3, [sp, #36]	; 0x24
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	dcbb      	bgt.n	8005990 <_dtoa_r+0x220>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e7b9      	b.n	8005990 <_dtoa_r+0x220>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e7b1      	b.n	8005984 <_dtoa_r+0x214>
 8005a20:	2300      	movs	r3, #0
 8005a22:	e7f1      	b.n	8005a08 <_dtoa_r+0x298>
 8005a24:	2300      	movs	r3, #0
 8005a26:	940d      	str	r4, [sp, #52]	; 0x34
 8005a28:	9320      	str	r3, [sp, #128]	; 0x80
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	930c      	str	r3, [sp, #48]	; 0x30
 8005a30:	9309      	str	r3, [sp, #36]	; 0x24
 8005a32:	3313      	adds	r3, #19
 8005a34:	9221      	str	r2, [sp, #132]	; 0x84
 8005a36:	e7ab      	b.n	8005990 <_dtoa_r+0x220>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	930d      	str	r3, [sp, #52]	; 0x34
 8005a3c:	3b02      	subs	r3, #2
 8005a3e:	e7f5      	b.n	8005a2c <_dtoa_r+0x2bc>
 8005a40:	2301      	movs	r3, #1
 8005a42:	930c      	str	r3, [sp, #48]	; 0x30
 8005a44:	9309      	str	r3, [sp, #36]	; 0x24
 8005a46:	001a      	movs	r2, r3
 8005a48:	e7f4      	b.n	8005a34 <_dtoa_r+0x2c4>
 8005a4a:	3101      	adds	r1, #1
 8005a4c:	6069      	str	r1, [r5, #4]
 8005a4e:	0052      	lsls	r2, r2, #1
 8005a50:	e7a3      	b.n	800599a <_dtoa_r+0x22a>
 8005a52:	2301      	movs	r3, #1
 8005a54:	421c      	tst	r4, r3
 8005a56:	d00e      	beq.n	8005a76 <_dtoa_r+0x306>
 8005a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a5a:	4a21      	ldr	r2, [pc, #132]	; (8005ae0 <_dtoa_r+0x370>)
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	930e      	str	r3, [sp, #56]	; 0x38
 8005a60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a62:	0028      	movs	r0, r5
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	189b      	adds	r3, r3, r2
 8005a68:	0031      	movs	r1, r6
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f7fb fc37 	bl	80012e0 <__aeabi_dmul>
 8005a72:	0005      	movs	r5, r0
 8005a74:	000e      	movs	r6, r1
 8005a76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a78:	1064      	asrs	r4, r4, #1
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	9310      	str	r3, [sp, #64]	; 0x40
 8005a7e:	2c00      	cmp	r4, #0
 8005a80:	d1e7      	bne.n	8005a52 <_dtoa_r+0x2e2>
 8005a82:	9806      	ldr	r0, [sp, #24]
 8005a84:	9907      	ldr	r1, [sp, #28]
 8005a86:	002a      	movs	r2, r5
 8005a88:	0033      	movs	r3, r6
 8005a8a:	f7fb f81f 	bl	8000acc <__aeabi_ddiv>
 8005a8e:	9006      	str	r0, [sp, #24]
 8005a90:	9107      	str	r1, [sp, #28]
 8005a92:	e042      	b.n	8005b1a <_dtoa_r+0x3aa>
 8005a94:	7ff00000 	.word	0x7ff00000
 8005a98:	0000270f 	.word	0x0000270f
 8005a9c:	08006ba7 	.word	0x08006ba7
 8005aa0:	08006baa 	.word	0x08006baa
 8005aa4:	08006b9c 	.word	0x08006b9c
 8005aa8:	08006b9d 	.word	0x08006b9d
 8005aac:	3ff00000 	.word	0x3ff00000
 8005ab0:	fffffc01 	.word	0xfffffc01
 8005ab4:	3ff80000 	.word	0x3ff80000
 8005ab8:	636f4361 	.word	0x636f4361
 8005abc:	3fd287a7 	.word	0x3fd287a7
 8005ac0:	8b60c8b3 	.word	0x8b60c8b3
 8005ac4:	3fc68a28 	.word	0x3fc68a28
 8005ac8:	509f79fb 	.word	0x509f79fb
 8005acc:	3fd34413 	.word	0x3fd34413
 8005ad0:	08006bd8 	.word	0x08006bd8
 8005ad4:	00000432 	.word	0x00000432
 8005ad8:	00000412 	.word	0x00000412
 8005adc:	fe100000 	.word	0xfe100000
 8005ae0:	08006bb0 	.word	0x08006bb0
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	930e      	str	r3, [sp, #56]	; 0x38
 8005ae8:	2f00      	cmp	r7, #0
 8005aea:	d016      	beq.n	8005b1a <_dtoa_r+0x3aa>
 8005aec:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005aee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005af0:	427c      	negs	r4, r7
 8005af2:	330d      	adds	r3, #13
 8005af4:	4023      	ands	r3, r4
 8005af6:	4ace      	ldr	r2, [pc, #824]	; (8005e30 <_dtoa_r+0x6c0>)
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	18d3      	adds	r3, r2, r3
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f7fb fbee 	bl	80012e0 <__aeabi_dmul>
 8005b04:	2300      	movs	r3, #0
 8005b06:	2601      	movs	r6, #1
 8005b08:	001d      	movs	r5, r3
 8005b0a:	9006      	str	r0, [sp, #24]
 8005b0c:	9107      	str	r1, [sp, #28]
 8005b0e:	1124      	asrs	r4, r4, #4
 8005b10:	2c00      	cmp	r4, #0
 8005b12:	d000      	beq.n	8005b16 <_dtoa_r+0x3a6>
 8005b14:	e08c      	b.n	8005c30 <_dtoa_r+0x4c0>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1b9      	bne.n	8005a8e <_dtoa_r+0x31e>
 8005b1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d100      	bne.n	8005b22 <_dtoa_r+0x3b2>
 8005b20:	e096      	b.n	8005c50 <_dtoa_r+0x4e0>
 8005b22:	9c06      	ldr	r4, [sp, #24]
 8005b24:	9d07      	ldr	r5, [sp, #28]
 8005b26:	2200      	movs	r2, #0
 8005b28:	4bc2      	ldr	r3, [pc, #776]	; (8005e34 <_dtoa_r+0x6c4>)
 8005b2a:	0020      	movs	r0, r4
 8005b2c:	0029      	movs	r1, r5
 8005b2e:	f7fa fc89 	bl	8000444 <__aeabi_dcmplt>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	d100      	bne.n	8005b38 <_dtoa_r+0x3c8>
 8005b36:	e08b      	b.n	8005c50 <_dtoa_r+0x4e0>
 8005b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d100      	bne.n	8005b40 <_dtoa_r+0x3d0>
 8005b3e:	e087      	b.n	8005c50 <_dtoa_r+0x4e0>
 8005b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	dd41      	ble.n	8005bca <_dtoa_r+0x45a>
 8005b46:	4bbc      	ldr	r3, [pc, #752]	; (8005e38 <_dtoa_r+0x6c8>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	0020      	movs	r0, r4
 8005b4c:	0029      	movs	r1, r5
 8005b4e:	f7fb fbc7 	bl	80012e0 <__aeabi_dmul>
 8005b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b54:	9006      	str	r0, [sp, #24]
 8005b56:	9107      	str	r1, [sp, #28]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	930e      	str	r3, [sp, #56]	; 0x38
 8005b5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b5e:	1e7e      	subs	r6, r7, #1
 8005b60:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005b62:	9310      	str	r3, [sp, #64]	; 0x40
 8005b64:	f7fc f9c8 	bl	8001ef8 <__aeabi_i2d>
 8005b68:	9a06      	ldr	r2, [sp, #24]
 8005b6a:	9b07      	ldr	r3, [sp, #28]
 8005b6c:	f7fb fbb8 	bl	80012e0 <__aeabi_dmul>
 8005b70:	2200      	movs	r2, #0
 8005b72:	4bb2      	ldr	r3, [pc, #712]	; (8005e3c <_dtoa_r+0x6cc>)
 8005b74:	f7fa fc8e 	bl	8000494 <__aeabi_dadd>
 8005b78:	4ab1      	ldr	r2, [pc, #708]	; (8005e40 <_dtoa_r+0x6d0>)
 8005b7a:	900e      	str	r0, [sp, #56]	; 0x38
 8005b7c:	910f      	str	r1, [sp, #60]	; 0x3c
 8005b7e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005b80:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005b82:	4694      	mov	ip, r2
 8005b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b86:	4463      	add	r3, ip
 8005b88:	9315      	str	r3, [sp, #84]	; 0x54
 8005b8a:	001d      	movs	r5, r3
 8005b8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d161      	bne.n	8005c56 <_dtoa_r+0x4e6>
 8005b92:	9806      	ldr	r0, [sp, #24]
 8005b94:	9907      	ldr	r1, [sp, #28]
 8005b96:	2200      	movs	r2, #0
 8005b98:	4baa      	ldr	r3, [pc, #680]	; (8005e44 <_dtoa_r+0x6d4>)
 8005b9a:	f7fb fe13 	bl	80017c4 <__aeabi_dsub>
 8005b9e:	0022      	movs	r2, r4
 8005ba0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ba2:	9006      	str	r0, [sp, #24]
 8005ba4:	9107      	str	r1, [sp, #28]
 8005ba6:	f7fa fc61 	bl	800046c <__aeabi_dcmpgt>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d000      	beq.n	8005bb0 <_dtoa_r+0x440>
 8005bae:	e2a8      	b.n	8006102 <_dtoa_r+0x992>
 8005bb0:	48a5      	ldr	r0, [pc, #660]	; (8005e48 <_dtoa_r+0x6d8>)
 8005bb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005bb4:	4684      	mov	ip, r0
 8005bb6:	4461      	add	r1, ip
 8005bb8:	000b      	movs	r3, r1
 8005bba:	9806      	ldr	r0, [sp, #24]
 8005bbc:	9907      	ldr	r1, [sp, #28]
 8005bbe:	0022      	movs	r2, r4
 8005bc0:	f7fa fc40 	bl	8000444 <__aeabi_dcmplt>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d000      	beq.n	8005bca <_dtoa_r+0x45a>
 8005bc8:	e295      	b.n	80060f6 <_dtoa_r+0x986>
 8005bca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bcc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005bce:	9306      	str	r3, [sp, #24]
 8005bd0:	9407      	str	r4, [sp, #28]
 8005bd2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	da00      	bge.n	8005bda <_dtoa_r+0x46a>
 8005bd8:	e15c      	b.n	8005e94 <_dtoa_r+0x724>
 8005bda:	2f0e      	cmp	r7, #14
 8005bdc:	dd00      	ble.n	8005be0 <_dtoa_r+0x470>
 8005bde:	e159      	b.n	8005e94 <_dtoa_r+0x724>
 8005be0:	4b93      	ldr	r3, [pc, #588]	; (8005e30 <_dtoa_r+0x6c0>)
 8005be2:	00fa      	lsls	r2, r7, #3
 8005be4:	189b      	adds	r3, r3, r2
 8005be6:	685c      	ldr	r4, [r3, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	9304      	str	r3, [sp, #16]
 8005bec:	9405      	str	r4, [sp, #20]
 8005bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	db00      	blt.n	8005bf6 <_dtoa_r+0x486>
 8005bf4:	e0d8      	b.n	8005da8 <_dtoa_r+0x638>
 8005bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	dd00      	ble.n	8005bfe <_dtoa_r+0x48e>
 8005bfc:	e0d4      	b.n	8005da8 <_dtoa_r+0x638>
 8005bfe:	d000      	beq.n	8005c02 <_dtoa_r+0x492>
 8005c00:	e27d      	b.n	80060fe <_dtoa_r+0x98e>
 8005c02:	9804      	ldr	r0, [sp, #16]
 8005c04:	9905      	ldr	r1, [sp, #20]
 8005c06:	2200      	movs	r2, #0
 8005c08:	4b8e      	ldr	r3, [pc, #568]	; (8005e44 <_dtoa_r+0x6d4>)
 8005c0a:	f7fb fb69 	bl	80012e0 <__aeabi_dmul>
 8005c0e:	9a06      	ldr	r2, [sp, #24]
 8005c10:	9b07      	ldr	r3, [sp, #28]
 8005c12:	f7fa fc35 	bl	8000480 <__aeabi_dcmpge>
 8005c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c18:	9304      	str	r3, [sp, #16]
 8005c1a:	001e      	movs	r6, r3
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	d000      	beq.n	8005c22 <_dtoa_r+0x4b2>
 8005c20:	e24f      	b.n	80060c2 <_dtoa_r+0x952>
 8005c22:	9b08      	ldr	r3, [sp, #32]
 8005c24:	9a08      	ldr	r2, [sp, #32]
 8005c26:	1c5d      	adds	r5, r3, #1
 8005c28:	2331      	movs	r3, #49	; 0x31
 8005c2a:	3701      	adds	r7, #1
 8005c2c:	7013      	strb	r3, [r2, #0]
 8005c2e:	e24b      	b.n	80060c8 <_dtoa_r+0x958>
 8005c30:	4234      	tst	r4, r6
 8005c32:	d00a      	beq.n	8005c4a <_dtoa_r+0x4da>
 8005c34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c36:	4a85      	ldr	r2, [pc, #532]	; (8005e4c <_dtoa_r+0x6dc>)
 8005c38:	3301      	adds	r3, #1
 8005c3a:	930e      	str	r3, [sp, #56]	; 0x38
 8005c3c:	00eb      	lsls	r3, r5, #3
 8005c3e:	189b      	adds	r3, r3, r2
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f7fb fb4c 	bl	80012e0 <__aeabi_dmul>
 8005c48:	0033      	movs	r3, r6
 8005c4a:	1064      	asrs	r4, r4, #1
 8005c4c:	3501      	adds	r5, #1
 8005c4e:	e75f      	b.n	8005b10 <_dtoa_r+0x3a0>
 8005c50:	003e      	movs	r6, r7
 8005c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c54:	e784      	b.n	8005b60 <_dtoa_r+0x3f0>
 8005c56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c5a:	1e5a      	subs	r2, r3, #1
 8005c5c:	4b74      	ldr	r3, [pc, #464]	; (8005e30 <_dtoa_r+0x6c0>)
 8005c5e:	00d2      	lsls	r2, r2, #3
 8005c60:	189b      	adds	r3, r3, r2
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2900      	cmp	r1, #0
 8005c68:	d049      	beq.n	8005cfe <_dtoa_r+0x58e>
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	4978      	ldr	r1, [pc, #480]	; (8005e50 <_dtoa_r+0x6e0>)
 8005c6e:	f7fa ff2d 	bl	8000acc <__aeabi_ddiv>
 8005c72:	002b      	movs	r3, r5
 8005c74:	0022      	movs	r2, r4
 8005c76:	f7fb fda5 	bl	80017c4 <__aeabi_dsub>
 8005c7a:	9b08      	ldr	r3, [sp, #32]
 8005c7c:	900e      	str	r0, [sp, #56]	; 0x38
 8005c7e:	910f      	str	r1, [sp, #60]	; 0x3c
 8005c80:	9315      	str	r3, [sp, #84]	; 0x54
 8005c82:	9806      	ldr	r0, [sp, #24]
 8005c84:	9907      	ldr	r1, [sp, #28]
 8005c86:	f7fc f901 	bl	8001e8c <__aeabi_d2iz>
 8005c8a:	0004      	movs	r4, r0
 8005c8c:	f7fc f934 	bl	8001ef8 <__aeabi_i2d>
 8005c90:	0002      	movs	r2, r0
 8005c92:	000b      	movs	r3, r1
 8005c94:	9806      	ldr	r0, [sp, #24]
 8005c96:	9907      	ldr	r1, [sp, #28]
 8005c98:	f7fb fd94 	bl	80017c4 <__aeabi_dsub>
 8005c9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c9e:	3430      	adds	r4, #48	; 0x30
 8005ca0:	1c5d      	adds	r5, r3, #1
 8005ca2:	701c      	strb	r4, [r3, #0]
 8005ca4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ca8:	9006      	str	r0, [sp, #24]
 8005caa:	9107      	str	r1, [sp, #28]
 8005cac:	f7fa fbca 	bl	8000444 <__aeabi_dcmplt>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d16c      	bne.n	8005d8e <_dtoa_r+0x61e>
 8005cb4:	9a06      	ldr	r2, [sp, #24]
 8005cb6:	9b07      	ldr	r3, [sp, #28]
 8005cb8:	2000      	movs	r0, #0
 8005cba:	495e      	ldr	r1, [pc, #376]	; (8005e34 <_dtoa_r+0x6c4>)
 8005cbc:	f7fb fd82 	bl	80017c4 <__aeabi_dsub>
 8005cc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cc4:	f7fa fbbe 	bl	8000444 <__aeabi_dcmplt>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d000      	beq.n	8005cce <_dtoa_r+0x55e>
 8005ccc:	e0c3      	b.n	8005e56 <_dtoa_r+0x6e6>
 8005cce:	9b08      	ldr	r3, [sp, #32]
 8005cd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005cd2:	1aeb      	subs	r3, r5, r3
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	dc00      	bgt.n	8005cda <_dtoa_r+0x56a>
 8005cd8:	e777      	b.n	8005bca <_dtoa_r+0x45a>
 8005cda:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005cdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cde:	2200      	movs	r2, #0
 8005ce0:	4b55      	ldr	r3, [pc, #340]	; (8005e38 <_dtoa_r+0x6c8>)
 8005ce2:	f7fb fafd 	bl	80012e0 <__aeabi_dmul>
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	900e      	str	r0, [sp, #56]	; 0x38
 8005cea:	910f      	str	r1, [sp, #60]	; 0x3c
 8005cec:	9806      	ldr	r0, [sp, #24]
 8005cee:	9907      	ldr	r1, [sp, #28]
 8005cf0:	4b51      	ldr	r3, [pc, #324]	; (8005e38 <_dtoa_r+0x6c8>)
 8005cf2:	f7fb faf5 	bl	80012e0 <__aeabi_dmul>
 8005cf6:	9515      	str	r5, [sp, #84]	; 0x54
 8005cf8:	9006      	str	r0, [sp, #24]
 8005cfa:	9107      	str	r1, [sp, #28]
 8005cfc:	e7c1      	b.n	8005c82 <_dtoa_r+0x512>
 8005cfe:	0020      	movs	r0, r4
 8005d00:	0029      	movs	r1, r5
 8005d02:	f7fb faed 	bl	80012e0 <__aeabi_dmul>
 8005d06:	9c08      	ldr	r4, [sp, #32]
 8005d08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d0a:	0023      	movs	r3, r4
 8005d0c:	4694      	mov	ip, r2
 8005d0e:	900e      	str	r0, [sp, #56]	; 0x38
 8005d10:	910f      	str	r1, [sp, #60]	; 0x3c
 8005d12:	4463      	add	r3, ip
 8005d14:	9315      	str	r3, [sp, #84]	; 0x54
 8005d16:	9806      	ldr	r0, [sp, #24]
 8005d18:	9907      	ldr	r1, [sp, #28]
 8005d1a:	f7fc f8b7 	bl	8001e8c <__aeabi_d2iz>
 8005d1e:	0005      	movs	r5, r0
 8005d20:	f7fc f8ea 	bl	8001ef8 <__aeabi_i2d>
 8005d24:	000b      	movs	r3, r1
 8005d26:	0002      	movs	r2, r0
 8005d28:	9806      	ldr	r0, [sp, #24]
 8005d2a:	9907      	ldr	r1, [sp, #28]
 8005d2c:	f7fb fd4a 	bl	80017c4 <__aeabi_dsub>
 8005d30:	3530      	adds	r5, #48	; 0x30
 8005d32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d34:	7025      	strb	r5, [r4, #0]
 8005d36:	3401      	adds	r4, #1
 8005d38:	9006      	str	r0, [sp, #24]
 8005d3a:	9107      	str	r1, [sp, #28]
 8005d3c:	42a3      	cmp	r3, r4
 8005d3e:	d12a      	bne.n	8005d96 <_dtoa_r+0x626>
 8005d40:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005d42:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d44:	9a08      	ldr	r2, [sp, #32]
 8005d46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d48:	4694      	mov	ip, r2
 8005d4a:	4463      	add	r3, ip
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	001d      	movs	r5, r3
 8005d50:	4b3f      	ldr	r3, [pc, #252]	; (8005e50 <_dtoa_r+0x6e0>)
 8005d52:	f7fa fb9f 	bl	8000494 <__aeabi_dadd>
 8005d56:	0002      	movs	r2, r0
 8005d58:	000b      	movs	r3, r1
 8005d5a:	9806      	ldr	r0, [sp, #24]
 8005d5c:	9907      	ldr	r1, [sp, #28]
 8005d5e:	f7fa fb85 	bl	800046c <__aeabi_dcmpgt>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d000      	beq.n	8005d68 <_dtoa_r+0x5f8>
 8005d66:	e076      	b.n	8005e56 <_dtoa_r+0x6e6>
 8005d68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	4938      	ldr	r1, [pc, #224]	; (8005e50 <_dtoa_r+0x6e0>)
 8005d70:	f7fb fd28 	bl	80017c4 <__aeabi_dsub>
 8005d74:	0002      	movs	r2, r0
 8005d76:	000b      	movs	r3, r1
 8005d78:	9806      	ldr	r0, [sp, #24]
 8005d7a:	9907      	ldr	r1, [sp, #28]
 8005d7c:	f7fa fb62 	bl	8000444 <__aeabi_dcmplt>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d100      	bne.n	8005d86 <_dtoa_r+0x616>
 8005d84:	e721      	b.n	8005bca <_dtoa_r+0x45a>
 8005d86:	1e6b      	subs	r3, r5, #1
 8005d88:	781a      	ldrb	r2, [r3, #0]
 8005d8a:	2a30      	cmp	r2, #48	; 0x30
 8005d8c:	d001      	beq.n	8005d92 <_dtoa_r+0x622>
 8005d8e:	0037      	movs	r7, r6
 8005d90:	e03f      	b.n	8005e12 <_dtoa_r+0x6a2>
 8005d92:	001d      	movs	r5, r3
 8005d94:	e7f7      	b.n	8005d86 <_dtoa_r+0x616>
 8005d96:	9806      	ldr	r0, [sp, #24]
 8005d98:	9907      	ldr	r1, [sp, #28]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	4b26      	ldr	r3, [pc, #152]	; (8005e38 <_dtoa_r+0x6c8>)
 8005d9e:	f7fb fa9f 	bl	80012e0 <__aeabi_dmul>
 8005da2:	9006      	str	r0, [sp, #24]
 8005da4:	9107      	str	r1, [sp, #28]
 8005da6:	e7b6      	b.n	8005d16 <_dtoa_r+0x5a6>
 8005da8:	9e08      	ldr	r6, [sp, #32]
 8005daa:	9a04      	ldr	r2, [sp, #16]
 8005dac:	9b05      	ldr	r3, [sp, #20]
 8005dae:	9806      	ldr	r0, [sp, #24]
 8005db0:	9907      	ldr	r1, [sp, #28]
 8005db2:	f7fa fe8b 	bl	8000acc <__aeabi_ddiv>
 8005db6:	f7fc f869 	bl	8001e8c <__aeabi_d2iz>
 8005dba:	0004      	movs	r4, r0
 8005dbc:	f7fc f89c 	bl	8001ef8 <__aeabi_i2d>
 8005dc0:	9a04      	ldr	r2, [sp, #16]
 8005dc2:	9b05      	ldr	r3, [sp, #20]
 8005dc4:	f7fb fa8c 	bl	80012e0 <__aeabi_dmul>
 8005dc8:	0002      	movs	r2, r0
 8005dca:	000b      	movs	r3, r1
 8005dcc:	9806      	ldr	r0, [sp, #24]
 8005dce:	9907      	ldr	r1, [sp, #28]
 8005dd0:	f7fb fcf8 	bl	80017c4 <__aeabi_dsub>
 8005dd4:	0023      	movs	r3, r4
 8005dd6:	3330      	adds	r3, #48	; 0x30
 8005dd8:	7033      	strb	r3, [r6, #0]
 8005dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ddc:	9b08      	ldr	r3, [sp, #32]
 8005dde:	1c75      	adds	r5, r6, #1
 8005de0:	1aeb      	subs	r3, r5, r3
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d148      	bne.n	8005e78 <_dtoa_r+0x708>
 8005de6:	0002      	movs	r2, r0
 8005de8:	000b      	movs	r3, r1
 8005dea:	f7fa fb53 	bl	8000494 <__aeabi_dadd>
 8005dee:	9a04      	ldr	r2, [sp, #16]
 8005df0:	9b05      	ldr	r3, [sp, #20]
 8005df2:	9006      	str	r0, [sp, #24]
 8005df4:	9107      	str	r1, [sp, #28]
 8005df6:	f7fa fb39 	bl	800046c <__aeabi_dcmpgt>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d12a      	bne.n	8005e54 <_dtoa_r+0x6e4>
 8005dfe:	9a04      	ldr	r2, [sp, #16]
 8005e00:	9b05      	ldr	r3, [sp, #20]
 8005e02:	9806      	ldr	r0, [sp, #24]
 8005e04:	9907      	ldr	r1, [sp, #28]
 8005e06:	f7fa fb17 	bl	8000438 <__aeabi_dcmpeq>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d001      	beq.n	8005e12 <_dtoa_r+0x6a2>
 8005e0e:	07e3      	lsls	r3, r4, #31
 8005e10:	d420      	bmi.n	8005e54 <_dtoa_r+0x6e4>
 8005e12:	9903      	ldr	r1, [sp, #12]
 8005e14:	9802      	ldr	r0, [sp, #8]
 8005e16:	f000 fad9 	bl	80063cc <_Bfree>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	702b      	strb	r3, [r5, #0]
 8005e1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e20:	3701      	adds	r7, #1
 8005e22:	601f      	str	r7, [r3, #0]
 8005e24:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d100      	bne.n	8005e2c <_dtoa_r+0x6bc>
 8005e2a:	e4e6      	b.n	80057fa <_dtoa_r+0x8a>
 8005e2c:	601d      	str	r5, [r3, #0]
 8005e2e:	e4e4      	b.n	80057fa <_dtoa_r+0x8a>
 8005e30:	08006bd8 	.word	0x08006bd8
 8005e34:	3ff00000 	.word	0x3ff00000
 8005e38:	40240000 	.word	0x40240000
 8005e3c:	401c0000 	.word	0x401c0000
 8005e40:	fcc00000 	.word	0xfcc00000
 8005e44:	40140000 	.word	0x40140000
 8005e48:	7cc00000 	.word	0x7cc00000
 8005e4c:	08006bb0 	.word	0x08006bb0
 8005e50:	3fe00000 	.word	0x3fe00000
 8005e54:	003e      	movs	r6, r7
 8005e56:	1e6b      	subs	r3, r5, #1
 8005e58:	781a      	ldrb	r2, [r3, #0]
 8005e5a:	2a39      	cmp	r2, #57	; 0x39
 8005e5c:	d106      	bne.n	8005e6c <_dtoa_r+0x6fc>
 8005e5e:	9a08      	ldr	r2, [sp, #32]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d107      	bne.n	8005e74 <_dtoa_r+0x704>
 8005e64:	2330      	movs	r3, #48	; 0x30
 8005e66:	7013      	strb	r3, [r2, #0]
 8005e68:	0013      	movs	r3, r2
 8005e6a:	3601      	adds	r6, #1
 8005e6c:	781a      	ldrb	r2, [r3, #0]
 8005e6e:	3201      	adds	r2, #1
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e78c      	b.n	8005d8e <_dtoa_r+0x61e>
 8005e74:	001d      	movs	r5, r3
 8005e76:	e7ee      	b.n	8005e56 <_dtoa_r+0x6e6>
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4ba4      	ldr	r3, [pc, #656]	; (800610c <_dtoa_r+0x99c>)
 8005e7c:	f7fb fa30 	bl	80012e0 <__aeabi_dmul>
 8005e80:	2200      	movs	r2, #0
 8005e82:	2300      	movs	r3, #0
 8005e84:	9006      	str	r0, [sp, #24]
 8005e86:	9107      	str	r1, [sp, #28]
 8005e88:	002e      	movs	r6, r5
 8005e8a:	f7fa fad5 	bl	8000438 <__aeabi_dcmpeq>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d08b      	beq.n	8005daa <_dtoa_r+0x63a>
 8005e92:	e7be      	b.n	8005e12 <_dtoa_r+0x6a2>
 8005e94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e96:	2a00      	cmp	r2, #0
 8005e98:	d100      	bne.n	8005e9c <_dtoa_r+0x72c>
 8005e9a:	e0da      	b.n	8006052 <_dtoa_r+0x8e2>
 8005e9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e9e:	2a01      	cmp	r2, #1
 8005ea0:	dd00      	ble.n	8005ea4 <_dtoa_r+0x734>
 8005ea2:	e0bd      	b.n	8006020 <_dtoa_r+0x8b0>
 8005ea4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005ea6:	2a00      	cmp	r2, #0
 8005ea8:	d100      	bne.n	8005eac <_dtoa_r+0x73c>
 8005eaa:	e0b5      	b.n	8006018 <_dtoa_r+0x8a8>
 8005eac:	4a98      	ldr	r2, [pc, #608]	; (8006110 <_dtoa_r+0x9a0>)
 8005eae:	189b      	adds	r3, r3, r2
 8005eb0:	9d04      	ldr	r5, [sp, #16]
 8005eb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005eb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	18d2      	adds	r2, r2, r3
 8005eba:	920a      	str	r2, [sp, #40]	; 0x28
 8005ebc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ebe:	9802      	ldr	r0, [sp, #8]
 8005ec0:	18d3      	adds	r3, r2, r3
 8005ec2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ec4:	f000 fb22 	bl	800650c <__i2b>
 8005ec8:	0006      	movs	r6, r0
 8005eca:	2c00      	cmp	r4, #0
 8005ecc:	dd0e      	ble.n	8005eec <_dtoa_r+0x77c>
 8005ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	dd0b      	ble.n	8005eec <_dtoa_r+0x77c>
 8005ed4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ed6:	0023      	movs	r3, r4
 8005ed8:	4294      	cmp	r4, r2
 8005eda:	dd00      	ble.n	8005ede <_dtoa_r+0x76e>
 8005edc:	0013      	movs	r3, r2
 8005ede:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ee0:	1ae4      	subs	r4, r4, r3
 8005ee2:	1ad2      	subs	r2, r2, r3
 8005ee4:	920a      	str	r2, [sp, #40]	; 0x28
 8005ee6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eec:	9b04      	ldr	r3, [sp, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d01f      	beq.n	8005f32 <_dtoa_r+0x7c2>
 8005ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d100      	bne.n	8005efa <_dtoa_r+0x78a>
 8005ef8:	e0af      	b.n	800605a <_dtoa_r+0x8ea>
 8005efa:	2d00      	cmp	r5, #0
 8005efc:	d011      	beq.n	8005f22 <_dtoa_r+0x7b2>
 8005efe:	0031      	movs	r1, r6
 8005f00:	002a      	movs	r2, r5
 8005f02:	9802      	ldr	r0, [sp, #8]
 8005f04:	f000 fb9a 	bl	800663c <__pow5mult>
 8005f08:	9a03      	ldr	r2, [sp, #12]
 8005f0a:	0001      	movs	r1, r0
 8005f0c:	0006      	movs	r6, r0
 8005f0e:	9802      	ldr	r0, [sp, #8]
 8005f10:	f000 fb05 	bl	800651e <__multiply>
 8005f14:	9903      	ldr	r1, [sp, #12]
 8005f16:	9010      	str	r0, [sp, #64]	; 0x40
 8005f18:	9802      	ldr	r0, [sp, #8]
 8005f1a:	f000 fa57 	bl	80063cc <_Bfree>
 8005f1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f20:	9303      	str	r3, [sp, #12]
 8005f22:	9b04      	ldr	r3, [sp, #16]
 8005f24:	1b5a      	subs	r2, r3, r5
 8005f26:	d004      	beq.n	8005f32 <_dtoa_r+0x7c2>
 8005f28:	9903      	ldr	r1, [sp, #12]
 8005f2a:	9802      	ldr	r0, [sp, #8]
 8005f2c:	f000 fb86 	bl	800663c <__pow5mult>
 8005f30:	9003      	str	r0, [sp, #12]
 8005f32:	2101      	movs	r1, #1
 8005f34:	9802      	ldr	r0, [sp, #8]
 8005f36:	f000 fae9 	bl	800650c <__i2b>
 8005f3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f3c:	9004      	str	r0, [sp, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d100      	bne.n	8005f44 <_dtoa_r+0x7d4>
 8005f42:	e1e3      	b.n	800630c <_dtoa_r+0xb9c>
 8005f44:	001a      	movs	r2, r3
 8005f46:	0001      	movs	r1, r0
 8005f48:	9802      	ldr	r0, [sp, #8]
 8005f4a:	f000 fb77 	bl	800663c <__pow5mult>
 8005f4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f50:	9004      	str	r0, [sp, #16]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	dd00      	ble.n	8005f58 <_dtoa_r+0x7e8>
 8005f56:	e082      	b.n	800605e <_dtoa_r+0x8ee>
 8005f58:	2500      	movs	r5, #0
 8005f5a:	9b06      	ldr	r3, [sp, #24]
 8005f5c:	42ab      	cmp	r3, r5
 8005f5e:	d10e      	bne.n	8005f7e <_dtoa_r+0x80e>
 8005f60:	9b07      	ldr	r3, [sp, #28]
 8005f62:	031b      	lsls	r3, r3, #12
 8005f64:	42ab      	cmp	r3, r5
 8005f66:	d10a      	bne.n	8005f7e <_dtoa_r+0x80e>
 8005f68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f6a:	9a07      	ldr	r2, [sp, #28]
 8005f6c:	4213      	tst	r3, r2
 8005f6e:	d006      	beq.n	8005f7e <_dtoa_r+0x80e>
 8005f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f72:	3501      	adds	r5, #1
 8005f74:	3301      	adds	r3, #1
 8005f76:	930a      	str	r3, [sp, #40]	; 0x28
 8005f78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f80:	2001      	movs	r0, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d16c      	bne.n	8006060 <_dtoa_r+0x8f0>
 8005f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f88:	1818      	adds	r0, r3, r0
 8005f8a:	231f      	movs	r3, #31
 8005f8c:	4018      	ands	r0, r3
 8005f8e:	d07e      	beq.n	800608e <_dtoa_r+0x91e>
 8005f90:	3301      	adds	r3, #1
 8005f92:	1a1b      	subs	r3, r3, r0
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	dd70      	ble.n	800607a <_dtoa_r+0x90a>
 8005f98:	231c      	movs	r3, #28
 8005f9a:	1a18      	subs	r0, r3, r0
 8005f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f9e:	1824      	adds	r4, r4, r0
 8005fa0:	181b      	adds	r3, r3, r0
 8005fa2:	930a      	str	r3, [sp, #40]	; 0x28
 8005fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fa6:	181b      	adds	r3, r3, r0
 8005fa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	dd05      	ble.n	8005fbc <_dtoa_r+0x84c>
 8005fb0:	001a      	movs	r2, r3
 8005fb2:	9903      	ldr	r1, [sp, #12]
 8005fb4:	9802      	ldr	r0, [sp, #8]
 8005fb6:	f000 fb93 	bl	80066e0 <__lshift>
 8005fba:	9003      	str	r0, [sp, #12]
 8005fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	dd05      	ble.n	8005fce <_dtoa_r+0x85e>
 8005fc2:	001a      	movs	r2, r3
 8005fc4:	9904      	ldr	r1, [sp, #16]
 8005fc6:	9802      	ldr	r0, [sp, #8]
 8005fc8:	f000 fb8a 	bl	80066e0 <__lshift>
 8005fcc:	9004      	str	r0, [sp, #16]
 8005fce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d05e      	beq.n	8006092 <_dtoa_r+0x922>
 8005fd4:	9904      	ldr	r1, [sp, #16]
 8005fd6:	9803      	ldr	r0, [sp, #12]
 8005fd8:	f000 fbd4 	bl	8006784 <__mcmp>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	da58      	bge.n	8006092 <_dtoa_r+0x922>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	220a      	movs	r2, #10
 8005fe4:	9903      	ldr	r1, [sp, #12]
 8005fe6:	9802      	ldr	r0, [sp, #8]
 8005fe8:	f000 fa09 	bl	80063fe <__multadd>
 8005fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fee:	3f01      	subs	r7, #1
 8005ff0:	9003      	str	r0, [sp, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d100      	bne.n	8005ff8 <_dtoa_r+0x888>
 8005ff6:	e190      	b.n	800631a <_dtoa_r+0xbaa>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	0031      	movs	r1, r6
 8005ffc:	220a      	movs	r2, #10
 8005ffe:	9802      	ldr	r0, [sp, #8]
 8006000:	f000 f9fd 	bl	80063fe <__multadd>
 8006004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006006:	0006      	movs	r6, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	dd00      	ble.n	800600e <_dtoa_r+0x89e>
 800600c:	e088      	b.n	8006120 <_dtoa_r+0x9b0>
 800600e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006010:	2b02      	cmp	r3, #2
 8006012:	dc00      	bgt.n	8006016 <_dtoa_r+0x8a6>
 8006014:	e084      	b.n	8006120 <_dtoa_r+0x9b0>
 8006016:	e044      	b.n	80060a2 <_dtoa_r+0x932>
 8006018:	2336      	movs	r3, #54	; 0x36
 800601a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800601c:	1a9b      	subs	r3, r3, r2
 800601e:	e747      	b.n	8005eb0 <_dtoa_r+0x740>
 8006020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006022:	1e5d      	subs	r5, r3, #1
 8006024:	9b04      	ldr	r3, [sp, #16]
 8006026:	42ab      	cmp	r3, r5
 8006028:	db08      	blt.n	800603c <_dtoa_r+0x8cc>
 800602a:	1b5d      	subs	r5, r3, r5
 800602c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800602e:	2b00      	cmp	r3, #0
 8006030:	da0c      	bge.n	800604c <_dtoa_r+0x8dc>
 8006032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006036:	1a9c      	subs	r4, r3, r2
 8006038:	2300      	movs	r3, #0
 800603a:	e73b      	b.n	8005eb4 <_dtoa_r+0x744>
 800603c:	9b04      	ldr	r3, [sp, #16]
 800603e:	9504      	str	r5, [sp, #16]
 8006040:	1aea      	subs	r2, r5, r3
 8006042:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006044:	2500      	movs	r5, #0
 8006046:	189b      	adds	r3, r3, r2
 8006048:	9311      	str	r3, [sp, #68]	; 0x44
 800604a:	e7ef      	b.n	800602c <_dtoa_r+0x8bc>
 800604c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800604e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006050:	e730      	b.n	8005eb4 <_dtoa_r+0x744>
 8006052:	9d04      	ldr	r5, [sp, #16]
 8006054:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006056:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006058:	e737      	b.n	8005eca <_dtoa_r+0x75a>
 800605a:	9a04      	ldr	r2, [sp, #16]
 800605c:	e764      	b.n	8005f28 <_dtoa_r+0x7b8>
 800605e:	2500      	movs	r5, #0
 8006060:	9b04      	ldr	r3, [sp, #16]
 8006062:	9a04      	ldr	r2, [sp, #16]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	9310      	str	r3, [sp, #64]	; 0x40
 8006068:	3303      	adds	r3, #3
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	18d3      	adds	r3, r2, r3
 800606e:	6858      	ldr	r0, [r3, #4]
 8006070:	f000 fa03 	bl	800647a <__hi0bits>
 8006074:	2320      	movs	r3, #32
 8006076:	1a18      	subs	r0, r3, r0
 8006078:	e785      	b.n	8005f86 <_dtoa_r+0x816>
 800607a:	2b04      	cmp	r3, #4
 800607c:	d095      	beq.n	8005faa <_dtoa_r+0x83a>
 800607e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006080:	331c      	adds	r3, #28
 8006082:	18d2      	adds	r2, r2, r3
 8006084:	920a      	str	r2, [sp, #40]	; 0x28
 8006086:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006088:	18e4      	adds	r4, r4, r3
 800608a:	18d3      	adds	r3, r2, r3
 800608c:	e78c      	b.n	8005fa8 <_dtoa_r+0x838>
 800608e:	0003      	movs	r3, r0
 8006090:	e7f5      	b.n	800607e <_dtoa_r+0x90e>
 8006092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006094:	2b00      	cmp	r3, #0
 8006096:	dc3d      	bgt.n	8006114 <_dtoa_r+0x9a4>
 8006098:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800609a:	2b02      	cmp	r3, #2
 800609c:	dd3a      	ble.n	8006114 <_dtoa_r+0x9a4>
 800609e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a0:	930c      	str	r3, [sp, #48]	; 0x30
 80060a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10c      	bne.n	80060c2 <_dtoa_r+0x952>
 80060a8:	9904      	ldr	r1, [sp, #16]
 80060aa:	2205      	movs	r2, #5
 80060ac:	9802      	ldr	r0, [sp, #8]
 80060ae:	f000 f9a6 	bl	80063fe <__multadd>
 80060b2:	9004      	str	r0, [sp, #16]
 80060b4:	0001      	movs	r1, r0
 80060b6:	9803      	ldr	r0, [sp, #12]
 80060b8:	f000 fb64 	bl	8006784 <__mcmp>
 80060bc:	2800      	cmp	r0, #0
 80060be:	dd00      	ble.n	80060c2 <_dtoa_r+0x952>
 80060c0:	e5af      	b.n	8005c22 <_dtoa_r+0x4b2>
 80060c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060c4:	9d08      	ldr	r5, [sp, #32]
 80060c6:	43df      	mvns	r7, r3
 80060c8:	2300      	movs	r3, #0
 80060ca:	9309      	str	r3, [sp, #36]	; 0x24
 80060cc:	9904      	ldr	r1, [sp, #16]
 80060ce:	9802      	ldr	r0, [sp, #8]
 80060d0:	f000 f97c 	bl	80063cc <_Bfree>
 80060d4:	2e00      	cmp	r6, #0
 80060d6:	d100      	bne.n	80060da <_dtoa_r+0x96a>
 80060d8:	e69b      	b.n	8005e12 <_dtoa_r+0x6a2>
 80060da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <_dtoa_r+0x97c>
 80060e0:	42b3      	cmp	r3, r6
 80060e2:	d003      	beq.n	80060ec <_dtoa_r+0x97c>
 80060e4:	0019      	movs	r1, r3
 80060e6:	9802      	ldr	r0, [sp, #8]
 80060e8:	f000 f970 	bl	80063cc <_Bfree>
 80060ec:	0031      	movs	r1, r6
 80060ee:	9802      	ldr	r0, [sp, #8]
 80060f0:	f000 f96c 	bl	80063cc <_Bfree>
 80060f4:	e68d      	b.n	8005e12 <_dtoa_r+0x6a2>
 80060f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060f8:	9304      	str	r3, [sp, #16]
 80060fa:	001e      	movs	r6, r3
 80060fc:	e7e1      	b.n	80060c2 <_dtoa_r+0x952>
 80060fe:	2300      	movs	r3, #0
 8006100:	e7fa      	b.n	80060f8 <_dtoa_r+0x988>
 8006102:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006104:	0037      	movs	r7, r6
 8006106:	9304      	str	r3, [sp, #16]
 8006108:	001e      	movs	r6, r3
 800610a:	e58a      	b.n	8005c22 <_dtoa_r+0x4b2>
 800610c:	40240000 	.word	0x40240000
 8006110:	00000433 	.word	0x00000433
 8006114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006116:	2b00      	cmp	r3, #0
 8006118:	d100      	bne.n	800611c <_dtoa_r+0x9ac>
 800611a:	e0b2      	b.n	8006282 <_dtoa_r+0xb12>
 800611c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800611e:	930c      	str	r3, [sp, #48]	; 0x30
 8006120:	2c00      	cmp	r4, #0
 8006122:	dd05      	ble.n	8006130 <_dtoa_r+0x9c0>
 8006124:	0031      	movs	r1, r6
 8006126:	0022      	movs	r2, r4
 8006128:	9802      	ldr	r0, [sp, #8]
 800612a:	f000 fad9 	bl	80066e0 <__lshift>
 800612e:	0006      	movs	r6, r0
 8006130:	0030      	movs	r0, r6
 8006132:	2d00      	cmp	r5, #0
 8006134:	d011      	beq.n	800615a <_dtoa_r+0x9ea>
 8006136:	6871      	ldr	r1, [r6, #4]
 8006138:	9802      	ldr	r0, [sp, #8]
 800613a:	f000 f90f 	bl	800635c <_Balloc>
 800613e:	0031      	movs	r1, r6
 8006140:	0004      	movs	r4, r0
 8006142:	6933      	ldr	r3, [r6, #16]
 8006144:	310c      	adds	r1, #12
 8006146:	1c9a      	adds	r2, r3, #2
 8006148:	0092      	lsls	r2, r2, #2
 800614a:	300c      	adds	r0, #12
 800614c:	f7fe ff22 	bl	8004f94 <memcpy>
 8006150:	2201      	movs	r2, #1
 8006152:	0021      	movs	r1, r4
 8006154:	9802      	ldr	r0, [sp, #8]
 8006156:	f000 fac3 	bl	80066e0 <__lshift>
 800615a:	9609      	str	r6, [sp, #36]	; 0x24
 800615c:	0006      	movs	r6, r0
 800615e:	9b08      	ldr	r3, [sp, #32]
 8006160:	930a      	str	r3, [sp, #40]	; 0x28
 8006162:	9904      	ldr	r1, [sp, #16]
 8006164:	9803      	ldr	r0, [sp, #12]
 8006166:	f7ff fa7c 	bl	8005662 <quorem>
 800616a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800616c:	900d      	str	r0, [sp, #52]	; 0x34
 800616e:	0004      	movs	r4, r0
 8006170:	9803      	ldr	r0, [sp, #12]
 8006172:	f000 fb07 	bl	8006784 <__mcmp>
 8006176:	0032      	movs	r2, r6
 8006178:	9010      	str	r0, [sp, #64]	; 0x40
 800617a:	9904      	ldr	r1, [sp, #16]
 800617c:	9802      	ldr	r0, [sp, #8]
 800617e:	f000 fb1b 	bl	80067b8 <__mdiff>
 8006182:	2301      	movs	r3, #1
 8006184:	930b      	str	r3, [sp, #44]	; 0x2c
 8006186:	68c3      	ldr	r3, [r0, #12]
 8006188:	3430      	adds	r4, #48	; 0x30
 800618a:	0005      	movs	r5, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d104      	bne.n	800619a <_dtoa_r+0xa2a>
 8006190:	0001      	movs	r1, r0
 8006192:	9803      	ldr	r0, [sp, #12]
 8006194:	f000 faf6 	bl	8006784 <__mcmp>
 8006198:	900b      	str	r0, [sp, #44]	; 0x2c
 800619a:	0029      	movs	r1, r5
 800619c:	9802      	ldr	r0, [sp, #8]
 800619e:	f000 f915 	bl	80063cc <_Bfree>
 80061a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80061a6:	4313      	orrs	r3, r2
 80061a8:	d10e      	bne.n	80061c8 <_dtoa_r+0xa58>
 80061aa:	9a06      	ldr	r2, [sp, #24]
 80061ac:	3301      	adds	r3, #1
 80061ae:	4213      	tst	r3, r2
 80061b0:	d10a      	bne.n	80061c8 <_dtoa_r+0xa58>
 80061b2:	2c39      	cmp	r4, #57	; 0x39
 80061b4:	d026      	beq.n	8006204 <_dtoa_r+0xa94>
 80061b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	dd01      	ble.n	80061c0 <_dtoa_r+0xa50>
 80061bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80061be:	3431      	adds	r4, #49	; 0x31
 80061c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061c2:	1c5d      	adds	r5, r3, #1
 80061c4:	701c      	strb	r4, [r3, #0]
 80061c6:	e781      	b.n	80060cc <_dtoa_r+0x95c>
 80061c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	db07      	blt.n	80061de <_dtoa_r+0xa6e>
 80061ce:	001d      	movs	r5, r3
 80061d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80061d2:	431d      	orrs	r5, r3
 80061d4:	d122      	bne.n	800621c <_dtoa_r+0xaac>
 80061d6:	2301      	movs	r3, #1
 80061d8:	9a06      	ldr	r2, [sp, #24]
 80061da:	4213      	tst	r3, r2
 80061dc:	d11e      	bne.n	800621c <_dtoa_r+0xaac>
 80061de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	dded      	ble.n	80061c0 <_dtoa_r+0xa50>
 80061e4:	9903      	ldr	r1, [sp, #12]
 80061e6:	2201      	movs	r2, #1
 80061e8:	9802      	ldr	r0, [sp, #8]
 80061ea:	f000 fa79 	bl	80066e0 <__lshift>
 80061ee:	9904      	ldr	r1, [sp, #16]
 80061f0:	9003      	str	r0, [sp, #12]
 80061f2:	f000 fac7 	bl	8006784 <__mcmp>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	dc02      	bgt.n	8006200 <_dtoa_r+0xa90>
 80061fa:	d1e1      	bne.n	80061c0 <_dtoa_r+0xa50>
 80061fc:	07e3      	lsls	r3, r4, #31
 80061fe:	d5df      	bpl.n	80061c0 <_dtoa_r+0xa50>
 8006200:	2c39      	cmp	r4, #57	; 0x39
 8006202:	d1db      	bne.n	80061bc <_dtoa_r+0xa4c>
 8006204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006208:	1c5d      	adds	r5, r3, #1
 800620a:	2339      	movs	r3, #57	; 0x39
 800620c:	7013      	strb	r3, [r2, #0]
 800620e:	1e6b      	subs	r3, r5, #1
 8006210:	781a      	ldrb	r2, [r3, #0]
 8006212:	2a39      	cmp	r2, #57	; 0x39
 8006214:	d067      	beq.n	80062e6 <_dtoa_r+0xb76>
 8006216:	3201      	adds	r2, #1
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	e757      	b.n	80060cc <_dtoa_r+0x95c>
 800621c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800621e:	1c5d      	adds	r5, r3, #1
 8006220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006222:	2b00      	cmp	r3, #0
 8006224:	dd04      	ble.n	8006230 <_dtoa_r+0xac0>
 8006226:	2c39      	cmp	r4, #57	; 0x39
 8006228:	d0ec      	beq.n	8006204 <_dtoa_r+0xa94>
 800622a:	3401      	adds	r4, #1
 800622c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800622e:	e7c9      	b.n	80061c4 <_dtoa_r+0xa54>
 8006230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006232:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006234:	701c      	strb	r4, [r3, #0]
 8006236:	9b08      	ldr	r3, [sp, #32]
 8006238:	1aeb      	subs	r3, r5, r3
 800623a:	4293      	cmp	r3, r2
 800623c:	d03e      	beq.n	80062bc <_dtoa_r+0xb4c>
 800623e:	2300      	movs	r3, #0
 8006240:	220a      	movs	r2, #10
 8006242:	9903      	ldr	r1, [sp, #12]
 8006244:	9802      	ldr	r0, [sp, #8]
 8006246:	f000 f8da 	bl	80063fe <__multadd>
 800624a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800624c:	9003      	str	r0, [sp, #12]
 800624e:	42b3      	cmp	r3, r6
 8006250:	d109      	bne.n	8006266 <_dtoa_r+0xaf6>
 8006252:	2300      	movs	r3, #0
 8006254:	220a      	movs	r2, #10
 8006256:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006258:	9802      	ldr	r0, [sp, #8]
 800625a:	f000 f8d0 	bl	80063fe <__multadd>
 800625e:	9009      	str	r0, [sp, #36]	; 0x24
 8006260:	0006      	movs	r6, r0
 8006262:	950a      	str	r5, [sp, #40]	; 0x28
 8006264:	e77d      	b.n	8006162 <_dtoa_r+0x9f2>
 8006266:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006268:	2300      	movs	r3, #0
 800626a:	220a      	movs	r2, #10
 800626c:	9802      	ldr	r0, [sp, #8]
 800626e:	f000 f8c6 	bl	80063fe <__multadd>
 8006272:	2300      	movs	r3, #0
 8006274:	9009      	str	r0, [sp, #36]	; 0x24
 8006276:	220a      	movs	r2, #10
 8006278:	0031      	movs	r1, r6
 800627a:	9802      	ldr	r0, [sp, #8]
 800627c:	f000 f8bf 	bl	80063fe <__multadd>
 8006280:	e7ee      	b.n	8006260 <_dtoa_r+0xaf0>
 8006282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006284:	930c      	str	r3, [sp, #48]	; 0x30
 8006286:	9b08      	ldr	r3, [sp, #32]
 8006288:	9306      	str	r3, [sp, #24]
 800628a:	9904      	ldr	r1, [sp, #16]
 800628c:	9803      	ldr	r0, [sp, #12]
 800628e:	f7ff f9e8 	bl	8005662 <quorem>
 8006292:	9b06      	ldr	r3, [sp, #24]
 8006294:	3030      	adds	r0, #48	; 0x30
 8006296:	1c5d      	adds	r5, r3, #1
 8006298:	7018      	strb	r0, [r3, #0]
 800629a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800629c:	9b08      	ldr	r3, [sp, #32]
 800629e:	0004      	movs	r4, r0
 80062a0:	1aeb      	subs	r3, r5, r3
 80062a2:	429a      	cmp	r2, r3
 80062a4:	dd08      	ble.n	80062b8 <_dtoa_r+0xb48>
 80062a6:	2300      	movs	r3, #0
 80062a8:	220a      	movs	r2, #10
 80062aa:	9903      	ldr	r1, [sp, #12]
 80062ac:	9802      	ldr	r0, [sp, #8]
 80062ae:	f000 f8a6 	bl	80063fe <__multadd>
 80062b2:	9506      	str	r5, [sp, #24]
 80062b4:	9003      	str	r0, [sp, #12]
 80062b6:	e7e8      	b.n	800628a <_dtoa_r+0xb1a>
 80062b8:	2300      	movs	r3, #0
 80062ba:	9309      	str	r3, [sp, #36]	; 0x24
 80062bc:	9903      	ldr	r1, [sp, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	9802      	ldr	r0, [sp, #8]
 80062c2:	f000 fa0d 	bl	80066e0 <__lshift>
 80062c6:	9904      	ldr	r1, [sp, #16]
 80062c8:	9003      	str	r0, [sp, #12]
 80062ca:	f000 fa5b 	bl	8006784 <__mcmp>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	dc9d      	bgt.n	800620e <_dtoa_r+0xa9e>
 80062d2:	d101      	bne.n	80062d8 <_dtoa_r+0xb68>
 80062d4:	07e3      	lsls	r3, r4, #31
 80062d6:	d49a      	bmi.n	800620e <_dtoa_r+0xa9e>
 80062d8:	1e6b      	subs	r3, r5, #1
 80062da:	781a      	ldrb	r2, [r3, #0]
 80062dc:	2a30      	cmp	r2, #48	; 0x30
 80062de:	d000      	beq.n	80062e2 <_dtoa_r+0xb72>
 80062e0:	e6f4      	b.n	80060cc <_dtoa_r+0x95c>
 80062e2:	001d      	movs	r5, r3
 80062e4:	e7f8      	b.n	80062d8 <_dtoa_r+0xb68>
 80062e6:	9a08      	ldr	r2, [sp, #32]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d103      	bne.n	80062f4 <_dtoa_r+0xb84>
 80062ec:	2331      	movs	r3, #49	; 0x31
 80062ee:	3701      	adds	r7, #1
 80062f0:	7013      	strb	r3, [r2, #0]
 80062f2:	e6eb      	b.n	80060cc <_dtoa_r+0x95c>
 80062f4:	001d      	movs	r5, r3
 80062f6:	e78a      	b.n	800620e <_dtoa_r+0xa9e>
 80062f8:	4b0b      	ldr	r3, [pc, #44]	; (8006328 <_dtoa_r+0xbb8>)
 80062fa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80062fc:	9308      	str	r3, [sp, #32]
 80062fe:	4b0b      	ldr	r3, [pc, #44]	; (800632c <_dtoa_r+0xbbc>)
 8006300:	2a00      	cmp	r2, #0
 8006302:	d001      	beq.n	8006308 <_dtoa_r+0xb98>
 8006304:	f7ff fa77 	bl	80057f6 <_dtoa_r+0x86>
 8006308:	f7ff fa77 	bl	80057fa <_dtoa_r+0x8a>
 800630c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800630e:	2b01      	cmp	r3, #1
 8006310:	dc00      	bgt.n	8006314 <_dtoa_r+0xba4>
 8006312:	e621      	b.n	8005f58 <_dtoa_r+0x7e8>
 8006314:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8006316:	2001      	movs	r0, #1
 8006318:	e635      	b.n	8005f86 <_dtoa_r+0x816>
 800631a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800631c:	2b00      	cmp	r3, #0
 800631e:	dcb2      	bgt.n	8006286 <_dtoa_r+0xb16>
 8006320:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006322:	2b02      	cmp	r3, #2
 8006324:	ddaf      	ble.n	8006286 <_dtoa_r+0xb16>
 8006326:	e6bc      	b.n	80060a2 <_dtoa_r+0x932>
 8006328:	08006b9e 	.word	0x08006b9e
 800632c:	08006ba6 	.word	0x08006ba6

08006330 <_localeconv_r>:
 8006330:	4b03      	ldr	r3, [pc, #12]	; (8006340 <_localeconv_r+0x10>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6a18      	ldr	r0, [r3, #32]
 8006336:	2800      	cmp	r0, #0
 8006338:	d100      	bne.n	800633c <_localeconv_r+0xc>
 800633a:	4802      	ldr	r0, [pc, #8]	; (8006344 <_localeconv_r+0x14>)
 800633c:	30f0      	adds	r0, #240	; 0xf0
 800633e:	4770      	bx	lr
 8006340:	20000008 	.word	0x20000008
 8006344:	2000006c 	.word	0x2000006c

08006348 <malloc>:
 8006348:	b510      	push	{r4, lr}
 800634a:	4b03      	ldr	r3, [pc, #12]	; (8006358 <malloc+0x10>)
 800634c:	0001      	movs	r1, r0
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	f000 faf8 	bl	8006944 <_malloc_r>
 8006354:	bd10      	pop	{r4, pc}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	20000008 	.word	0x20000008

0800635c <_Balloc>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006360:	0004      	movs	r4, r0
 8006362:	000d      	movs	r5, r1
 8006364:	2e00      	cmp	r6, #0
 8006366:	d107      	bne.n	8006378 <_Balloc+0x1c>
 8006368:	2010      	movs	r0, #16
 800636a:	f7ff ffed 	bl	8006348 <malloc>
 800636e:	6260      	str	r0, [r4, #36]	; 0x24
 8006370:	6046      	str	r6, [r0, #4]
 8006372:	6086      	str	r6, [r0, #8]
 8006374:	6006      	str	r6, [r0, #0]
 8006376:	60c6      	str	r6, [r0, #12]
 8006378:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800637a:	68f3      	ldr	r3, [r6, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d013      	beq.n	80063a8 <_Balloc+0x4c>
 8006380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006382:	00aa      	lsls	r2, r5, #2
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	189b      	adds	r3, r3, r2
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	2800      	cmp	r0, #0
 800638c:	d118      	bne.n	80063c0 <_Balloc+0x64>
 800638e:	2101      	movs	r1, #1
 8006390:	000e      	movs	r6, r1
 8006392:	40ae      	lsls	r6, r5
 8006394:	1d72      	adds	r2, r6, #5
 8006396:	0092      	lsls	r2, r2, #2
 8006398:	0020      	movs	r0, r4
 800639a:	f000 fac5 	bl	8006928 <_calloc_r>
 800639e:	2800      	cmp	r0, #0
 80063a0:	d00c      	beq.n	80063bc <_Balloc+0x60>
 80063a2:	6045      	str	r5, [r0, #4]
 80063a4:	6086      	str	r6, [r0, #8]
 80063a6:	e00d      	b.n	80063c4 <_Balloc+0x68>
 80063a8:	2221      	movs	r2, #33	; 0x21
 80063aa:	2104      	movs	r1, #4
 80063ac:	0020      	movs	r0, r4
 80063ae:	f000 fabb 	bl	8006928 <_calloc_r>
 80063b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063b4:	60f0      	str	r0, [r6, #12]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e1      	bne.n	8006380 <_Balloc+0x24>
 80063bc:	2000      	movs	r0, #0
 80063be:	bd70      	pop	{r4, r5, r6, pc}
 80063c0:	6802      	ldr	r2, [r0, #0]
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	2300      	movs	r3, #0
 80063c6:	6103      	str	r3, [r0, #16]
 80063c8:	60c3      	str	r3, [r0, #12]
 80063ca:	e7f8      	b.n	80063be <_Balloc+0x62>

080063cc <_Bfree>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80063d0:	0006      	movs	r6, r0
 80063d2:	000d      	movs	r5, r1
 80063d4:	2c00      	cmp	r4, #0
 80063d6:	d107      	bne.n	80063e8 <_Bfree+0x1c>
 80063d8:	2010      	movs	r0, #16
 80063da:	f7ff ffb5 	bl	8006348 <malloc>
 80063de:	6270      	str	r0, [r6, #36]	; 0x24
 80063e0:	6044      	str	r4, [r0, #4]
 80063e2:	6084      	str	r4, [r0, #8]
 80063e4:	6004      	str	r4, [r0, #0]
 80063e6:	60c4      	str	r4, [r0, #12]
 80063e8:	2d00      	cmp	r5, #0
 80063ea:	d007      	beq.n	80063fc <_Bfree+0x30>
 80063ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80063ee:	686a      	ldr	r2, [r5, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	0092      	lsls	r2, r2, #2
 80063f4:	189b      	adds	r3, r3, r2
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	602a      	str	r2, [r5, #0]
 80063fa:	601d      	str	r5, [r3, #0]
 80063fc:	bd70      	pop	{r4, r5, r6, pc}

080063fe <__multadd>:
 80063fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006400:	001e      	movs	r6, r3
 8006402:	2314      	movs	r3, #20
 8006404:	469c      	mov	ip, r3
 8006406:	0007      	movs	r7, r0
 8006408:	000c      	movs	r4, r1
 800640a:	2000      	movs	r0, #0
 800640c:	690d      	ldr	r5, [r1, #16]
 800640e:	448c      	add	ip, r1
 8006410:	4663      	mov	r3, ip
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3001      	adds	r0, #1
 8006416:	b299      	uxth	r1, r3
 8006418:	4663      	mov	r3, ip
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4351      	muls	r1, r2
 800641e:	0c1b      	lsrs	r3, r3, #16
 8006420:	4353      	muls	r3, r2
 8006422:	1989      	adds	r1, r1, r6
 8006424:	0c0e      	lsrs	r6, r1, #16
 8006426:	199b      	adds	r3, r3, r6
 8006428:	b289      	uxth	r1, r1
 800642a:	0c1e      	lsrs	r6, r3, #16
 800642c:	041b      	lsls	r3, r3, #16
 800642e:	185b      	adds	r3, r3, r1
 8006430:	4661      	mov	r1, ip
 8006432:	c108      	stmia	r1!, {r3}
 8006434:	468c      	mov	ip, r1
 8006436:	4285      	cmp	r5, r0
 8006438:	dcea      	bgt.n	8006410 <__multadd+0x12>
 800643a:	2e00      	cmp	r6, #0
 800643c:	d01b      	beq.n	8006476 <__multadd+0x78>
 800643e:	68a3      	ldr	r3, [r4, #8]
 8006440:	42ab      	cmp	r3, r5
 8006442:	dc12      	bgt.n	800646a <__multadd+0x6c>
 8006444:	6863      	ldr	r3, [r4, #4]
 8006446:	0038      	movs	r0, r7
 8006448:	1c59      	adds	r1, r3, #1
 800644a:	f7ff ff87 	bl	800635c <_Balloc>
 800644e:	0021      	movs	r1, r4
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	9001      	str	r0, [sp, #4]
 8006454:	1c9a      	adds	r2, r3, #2
 8006456:	0092      	lsls	r2, r2, #2
 8006458:	310c      	adds	r1, #12
 800645a:	300c      	adds	r0, #12
 800645c:	f7fe fd9a 	bl	8004f94 <memcpy>
 8006460:	0021      	movs	r1, r4
 8006462:	0038      	movs	r0, r7
 8006464:	f7ff ffb2 	bl	80063cc <_Bfree>
 8006468:	9c01      	ldr	r4, [sp, #4]
 800646a:	1d2b      	adds	r3, r5, #4
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	18e3      	adds	r3, r4, r3
 8006470:	3501      	adds	r5, #1
 8006472:	605e      	str	r6, [r3, #4]
 8006474:	6125      	str	r5, [r4, #16]
 8006476:	0020      	movs	r0, r4
 8006478:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800647a <__hi0bits>:
 800647a:	0003      	movs	r3, r0
 800647c:	0c02      	lsrs	r2, r0, #16
 800647e:	2000      	movs	r0, #0
 8006480:	4282      	cmp	r2, r0
 8006482:	d101      	bne.n	8006488 <__hi0bits+0xe>
 8006484:	041b      	lsls	r3, r3, #16
 8006486:	3010      	adds	r0, #16
 8006488:	0e1a      	lsrs	r2, r3, #24
 800648a:	d101      	bne.n	8006490 <__hi0bits+0x16>
 800648c:	3008      	adds	r0, #8
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	0f1a      	lsrs	r2, r3, #28
 8006492:	d101      	bne.n	8006498 <__hi0bits+0x1e>
 8006494:	3004      	adds	r0, #4
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	0f9a      	lsrs	r2, r3, #30
 800649a:	d101      	bne.n	80064a0 <__hi0bits+0x26>
 800649c:	3002      	adds	r0, #2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	db03      	blt.n	80064ac <__hi0bits+0x32>
 80064a4:	3001      	adds	r0, #1
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	d400      	bmi.n	80064ac <__hi0bits+0x32>
 80064aa:	2020      	movs	r0, #32
 80064ac:	4770      	bx	lr

080064ae <__lo0bits>:
 80064ae:	2207      	movs	r2, #7
 80064b0:	6803      	ldr	r3, [r0, #0]
 80064b2:	b510      	push	{r4, lr}
 80064b4:	0001      	movs	r1, r0
 80064b6:	401a      	ands	r2, r3
 80064b8:	d00d      	beq.n	80064d6 <__lo0bits+0x28>
 80064ba:	2401      	movs	r4, #1
 80064bc:	2000      	movs	r0, #0
 80064be:	4223      	tst	r3, r4
 80064c0:	d105      	bne.n	80064ce <__lo0bits+0x20>
 80064c2:	3002      	adds	r0, #2
 80064c4:	4203      	tst	r3, r0
 80064c6:	d003      	beq.n	80064d0 <__lo0bits+0x22>
 80064c8:	40e3      	lsrs	r3, r4
 80064ca:	0020      	movs	r0, r4
 80064cc:	600b      	str	r3, [r1, #0]
 80064ce:	bd10      	pop	{r4, pc}
 80064d0:	089b      	lsrs	r3, r3, #2
 80064d2:	600b      	str	r3, [r1, #0]
 80064d4:	e7fb      	b.n	80064ce <__lo0bits+0x20>
 80064d6:	b29c      	uxth	r4, r3
 80064d8:	0010      	movs	r0, r2
 80064da:	2c00      	cmp	r4, #0
 80064dc:	d101      	bne.n	80064e2 <__lo0bits+0x34>
 80064de:	2010      	movs	r0, #16
 80064e0:	0c1b      	lsrs	r3, r3, #16
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	d101      	bne.n	80064ec <__lo0bits+0x3e>
 80064e8:	3008      	adds	r0, #8
 80064ea:	0a1b      	lsrs	r3, r3, #8
 80064ec:	071a      	lsls	r2, r3, #28
 80064ee:	d101      	bne.n	80064f4 <__lo0bits+0x46>
 80064f0:	3004      	adds	r0, #4
 80064f2:	091b      	lsrs	r3, r3, #4
 80064f4:	079a      	lsls	r2, r3, #30
 80064f6:	d101      	bne.n	80064fc <__lo0bits+0x4e>
 80064f8:	3002      	adds	r0, #2
 80064fa:	089b      	lsrs	r3, r3, #2
 80064fc:	07da      	lsls	r2, r3, #31
 80064fe:	d4e8      	bmi.n	80064d2 <__lo0bits+0x24>
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	d001      	beq.n	8006508 <__lo0bits+0x5a>
 8006504:	3001      	adds	r0, #1
 8006506:	e7e4      	b.n	80064d2 <__lo0bits+0x24>
 8006508:	2020      	movs	r0, #32
 800650a:	e7e0      	b.n	80064ce <__lo0bits+0x20>

0800650c <__i2b>:
 800650c:	b510      	push	{r4, lr}
 800650e:	000c      	movs	r4, r1
 8006510:	2101      	movs	r1, #1
 8006512:	f7ff ff23 	bl	800635c <_Balloc>
 8006516:	2301      	movs	r3, #1
 8006518:	6144      	str	r4, [r0, #20]
 800651a:	6103      	str	r3, [r0, #16]
 800651c:	bd10      	pop	{r4, pc}

0800651e <__multiply>:
 800651e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006520:	690b      	ldr	r3, [r1, #16]
 8006522:	0014      	movs	r4, r2
 8006524:	6912      	ldr	r2, [r2, #16]
 8006526:	b089      	sub	sp, #36	; 0x24
 8006528:	000d      	movs	r5, r1
 800652a:	4293      	cmp	r3, r2
 800652c:	da01      	bge.n	8006532 <__multiply+0x14>
 800652e:	0025      	movs	r5, r4
 8006530:	000c      	movs	r4, r1
 8006532:	692f      	ldr	r7, [r5, #16]
 8006534:	6926      	ldr	r6, [r4, #16]
 8006536:	6869      	ldr	r1, [r5, #4]
 8006538:	19bb      	adds	r3, r7, r6
 800653a:	9302      	str	r3, [sp, #8]
 800653c:	68ab      	ldr	r3, [r5, #8]
 800653e:	19ba      	adds	r2, r7, r6
 8006540:	4293      	cmp	r3, r2
 8006542:	da00      	bge.n	8006546 <__multiply+0x28>
 8006544:	3101      	adds	r1, #1
 8006546:	f7ff ff09 	bl	800635c <_Balloc>
 800654a:	0002      	movs	r2, r0
 800654c:	19bb      	adds	r3, r7, r6
 800654e:	3214      	adds	r2, #20
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	18d3      	adds	r3, r2, r3
 8006554:	469c      	mov	ip, r3
 8006556:	2100      	movs	r1, #0
 8006558:	0013      	movs	r3, r2
 800655a:	9004      	str	r0, [sp, #16]
 800655c:	4563      	cmp	r3, ip
 800655e:	d31d      	bcc.n	800659c <__multiply+0x7e>
 8006560:	3514      	adds	r5, #20
 8006562:	00bf      	lsls	r7, r7, #2
 8006564:	19eb      	adds	r3, r5, r7
 8006566:	3414      	adds	r4, #20
 8006568:	00b6      	lsls	r6, r6, #2
 800656a:	9305      	str	r3, [sp, #20]
 800656c:	19a3      	adds	r3, r4, r6
 800656e:	9503      	str	r5, [sp, #12]
 8006570:	9401      	str	r4, [sp, #4]
 8006572:	9307      	str	r3, [sp, #28]
 8006574:	9b07      	ldr	r3, [sp, #28]
 8006576:	9901      	ldr	r1, [sp, #4]
 8006578:	4299      	cmp	r1, r3
 800657a:	d311      	bcc.n	80065a0 <__multiply+0x82>
 800657c:	9b02      	ldr	r3, [sp, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	dd06      	ble.n	8006590 <__multiply+0x72>
 8006582:	2304      	movs	r3, #4
 8006584:	425b      	negs	r3, r3
 8006586:	449c      	add	ip, r3
 8006588:	4663      	mov	r3, ip
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d051      	beq.n	8006634 <__multiply+0x116>
 8006590:	9b04      	ldr	r3, [sp, #16]
 8006592:	9a02      	ldr	r2, [sp, #8]
 8006594:	0018      	movs	r0, r3
 8006596:	611a      	str	r2, [r3, #16]
 8006598:	b009      	add	sp, #36	; 0x24
 800659a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800659c:	c302      	stmia	r3!, {r1}
 800659e:	e7dd      	b.n	800655c <__multiply+0x3e>
 80065a0:	9b01      	ldr	r3, [sp, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	b298      	uxth	r0, r3
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d01c      	beq.n	80065e4 <__multiply+0xc6>
 80065aa:	0015      	movs	r5, r2
 80065ac:	2600      	movs	r6, #0
 80065ae:	9f03      	ldr	r7, [sp, #12]
 80065b0:	cf02      	ldmia	r7!, {r1}
 80065b2:	682c      	ldr	r4, [r5, #0]
 80065b4:	b28b      	uxth	r3, r1
 80065b6:	4343      	muls	r3, r0
 80065b8:	0c09      	lsrs	r1, r1, #16
 80065ba:	4341      	muls	r1, r0
 80065bc:	b2a4      	uxth	r4, r4
 80065be:	191b      	adds	r3, r3, r4
 80065c0:	199b      	adds	r3, r3, r6
 80065c2:	000e      	movs	r6, r1
 80065c4:	6829      	ldr	r1, [r5, #0]
 80065c6:	9506      	str	r5, [sp, #24]
 80065c8:	0c09      	lsrs	r1, r1, #16
 80065ca:	1871      	adds	r1, r6, r1
 80065cc:	0c1e      	lsrs	r6, r3, #16
 80065ce:	1989      	adds	r1, r1, r6
 80065d0:	0c0e      	lsrs	r6, r1, #16
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	0409      	lsls	r1, r1, #16
 80065d6:	430b      	orrs	r3, r1
 80065d8:	c508      	stmia	r5!, {r3}
 80065da:	9b05      	ldr	r3, [sp, #20]
 80065dc:	42bb      	cmp	r3, r7
 80065de:	d8e7      	bhi.n	80065b0 <__multiply+0x92>
 80065e0:	9b06      	ldr	r3, [sp, #24]
 80065e2:	605e      	str	r6, [r3, #4]
 80065e4:	9b01      	ldr	r3, [sp, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	0c1d      	lsrs	r5, r3, #16
 80065ea:	d01e      	beq.n	800662a <__multiply+0x10c>
 80065ec:	0010      	movs	r0, r2
 80065ee:	2700      	movs	r7, #0
 80065f0:	6813      	ldr	r3, [r2, #0]
 80065f2:	9e03      	ldr	r6, [sp, #12]
 80065f4:	6831      	ldr	r1, [r6, #0]
 80065f6:	6804      	ldr	r4, [r0, #0]
 80065f8:	b289      	uxth	r1, r1
 80065fa:	4369      	muls	r1, r5
 80065fc:	0c24      	lsrs	r4, r4, #16
 80065fe:	1909      	adds	r1, r1, r4
 8006600:	19c9      	adds	r1, r1, r7
 8006602:	040f      	lsls	r7, r1, #16
 8006604:	b29b      	uxth	r3, r3
 8006606:	433b      	orrs	r3, r7
 8006608:	6003      	str	r3, [r0, #0]
 800660a:	ce80      	ldmia	r6!, {r7}
 800660c:	6843      	ldr	r3, [r0, #4]
 800660e:	0c3f      	lsrs	r7, r7, #16
 8006610:	436f      	muls	r7, r5
 8006612:	b29b      	uxth	r3, r3
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	0c09      	lsrs	r1, r1, #16
 8006618:	185b      	adds	r3, r3, r1
 800661a:	9905      	ldr	r1, [sp, #20]
 800661c:	9006      	str	r0, [sp, #24]
 800661e:	0c1f      	lsrs	r7, r3, #16
 8006620:	3004      	adds	r0, #4
 8006622:	42b1      	cmp	r1, r6
 8006624:	d8e6      	bhi.n	80065f4 <__multiply+0xd6>
 8006626:	9906      	ldr	r1, [sp, #24]
 8006628:	604b      	str	r3, [r1, #4]
 800662a:	9b01      	ldr	r3, [sp, #4]
 800662c:	3204      	adds	r2, #4
 800662e:	3304      	adds	r3, #4
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	e79f      	b.n	8006574 <__multiply+0x56>
 8006634:	9b02      	ldr	r3, [sp, #8]
 8006636:	3b01      	subs	r3, #1
 8006638:	9302      	str	r3, [sp, #8]
 800663a:	e79f      	b.n	800657c <__multiply+0x5e>

0800663c <__pow5mult>:
 800663c:	2303      	movs	r3, #3
 800663e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006640:	4013      	ands	r3, r2
 8006642:	0005      	movs	r5, r0
 8006644:	000e      	movs	r6, r1
 8006646:	0014      	movs	r4, r2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d008      	beq.n	800665e <__pow5mult+0x22>
 800664c:	4922      	ldr	r1, [pc, #136]	; (80066d8 <__pow5mult+0x9c>)
 800664e:	3b01      	subs	r3, #1
 8006650:	009a      	lsls	r2, r3, #2
 8006652:	5852      	ldr	r2, [r2, r1]
 8006654:	2300      	movs	r3, #0
 8006656:	0031      	movs	r1, r6
 8006658:	f7ff fed1 	bl	80063fe <__multadd>
 800665c:	0006      	movs	r6, r0
 800665e:	10a3      	asrs	r3, r4, #2
 8006660:	9301      	str	r3, [sp, #4]
 8006662:	d036      	beq.n	80066d2 <__pow5mult+0x96>
 8006664:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8006666:	2c00      	cmp	r4, #0
 8006668:	d107      	bne.n	800667a <__pow5mult+0x3e>
 800666a:	2010      	movs	r0, #16
 800666c:	f7ff fe6c 	bl	8006348 <malloc>
 8006670:	6268      	str	r0, [r5, #36]	; 0x24
 8006672:	6044      	str	r4, [r0, #4]
 8006674:	6084      	str	r4, [r0, #8]
 8006676:	6004      	str	r4, [r0, #0]
 8006678:	60c4      	str	r4, [r0, #12]
 800667a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800667c:	68bc      	ldr	r4, [r7, #8]
 800667e:	2c00      	cmp	r4, #0
 8006680:	d107      	bne.n	8006692 <__pow5mult+0x56>
 8006682:	4916      	ldr	r1, [pc, #88]	; (80066dc <__pow5mult+0xa0>)
 8006684:	0028      	movs	r0, r5
 8006686:	f7ff ff41 	bl	800650c <__i2b>
 800668a:	2300      	movs	r3, #0
 800668c:	0004      	movs	r4, r0
 800668e:	60b8      	str	r0, [r7, #8]
 8006690:	6003      	str	r3, [r0, #0]
 8006692:	2201      	movs	r2, #1
 8006694:	9b01      	ldr	r3, [sp, #4]
 8006696:	4213      	tst	r3, r2
 8006698:	d00a      	beq.n	80066b0 <__pow5mult+0x74>
 800669a:	0031      	movs	r1, r6
 800669c:	0022      	movs	r2, r4
 800669e:	0028      	movs	r0, r5
 80066a0:	f7ff ff3d 	bl	800651e <__multiply>
 80066a4:	0007      	movs	r7, r0
 80066a6:	0031      	movs	r1, r6
 80066a8:	0028      	movs	r0, r5
 80066aa:	f7ff fe8f 	bl	80063cc <_Bfree>
 80066ae:	003e      	movs	r6, r7
 80066b0:	9b01      	ldr	r3, [sp, #4]
 80066b2:	105b      	asrs	r3, r3, #1
 80066b4:	9301      	str	r3, [sp, #4]
 80066b6:	d00c      	beq.n	80066d2 <__pow5mult+0x96>
 80066b8:	6820      	ldr	r0, [r4, #0]
 80066ba:	2800      	cmp	r0, #0
 80066bc:	d107      	bne.n	80066ce <__pow5mult+0x92>
 80066be:	0022      	movs	r2, r4
 80066c0:	0021      	movs	r1, r4
 80066c2:	0028      	movs	r0, r5
 80066c4:	f7ff ff2b 	bl	800651e <__multiply>
 80066c8:	2300      	movs	r3, #0
 80066ca:	6020      	str	r0, [r4, #0]
 80066cc:	6003      	str	r3, [r0, #0]
 80066ce:	0004      	movs	r4, r0
 80066d0:	e7df      	b.n	8006692 <__pow5mult+0x56>
 80066d2:	0030      	movs	r0, r6
 80066d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066d6:	46c0      	nop			; (mov r8, r8)
 80066d8:	08006ca0 	.word	0x08006ca0
 80066dc:	00000271 	.word	0x00000271

080066e0 <__lshift>:
 80066e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066e2:	000d      	movs	r5, r1
 80066e4:	0017      	movs	r7, r2
 80066e6:	692b      	ldr	r3, [r5, #16]
 80066e8:	1154      	asrs	r4, r2, #5
 80066ea:	b085      	sub	sp, #20
 80066ec:	18e3      	adds	r3, r4, r3
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	3301      	adds	r3, #1
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	6849      	ldr	r1, [r1, #4]
 80066f6:	68ab      	ldr	r3, [r5, #8]
 80066f8:	9002      	str	r0, [sp, #8]
 80066fa:	9a00      	ldr	r2, [sp, #0]
 80066fc:	4293      	cmp	r3, r2
 80066fe:	db35      	blt.n	800676c <__lshift+0x8c>
 8006700:	9802      	ldr	r0, [sp, #8]
 8006702:	f7ff fe2b 	bl	800635c <_Balloc>
 8006706:	2300      	movs	r3, #0
 8006708:	0002      	movs	r2, r0
 800670a:	0006      	movs	r6, r0
 800670c:	0019      	movs	r1, r3
 800670e:	3214      	adds	r2, #20
 8006710:	42a3      	cmp	r3, r4
 8006712:	db2e      	blt.n	8006772 <__lshift+0x92>
 8006714:	43e3      	mvns	r3, r4
 8006716:	17db      	asrs	r3, r3, #31
 8006718:	401c      	ands	r4, r3
 800671a:	002b      	movs	r3, r5
 800671c:	00a4      	lsls	r4, r4, #2
 800671e:	1914      	adds	r4, r2, r4
 8006720:	692a      	ldr	r2, [r5, #16]
 8006722:	3314      	adds	r3, #20
 8006724:	0092      	lsls	r2, r2, #2
 8006726:	189a      	adds	r2, r3, r2
 8006728:	4694      	mov	ip, r2
 800672a:	221f      	movs	r2, #31
 800672c:	4017      	ands	r7, r2
 800672e:	d024      	beq.n	800677a <__lshift+0x9a>
 8006730:	3201      	adds	r2, #1
 8006732:	1bd2      	subs	r2, r2, r7
 8006734:	9203      	str	r2, [sp, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	6819      	ldr	r1, [r3, #0]
 800673a:	0020      	movs	r0, r4
 800673c:	40b9      	lsls	r1, r7
 800673e:	430a      	orrs	r2, r1
 8006740:	c404      	stmia	r4!, {r2}
 8006742:	cb04      	ldmia	r3!, {r2}
 8006744:	9903      	ldr	r1, [sp, #12]
 8006746:	40ca      	lsrs	r2, r1
 8006748:	459c      	cmp	ip, r3
 800674a:	d8f5      	bhi.n	8006738 <__lshift+0x58>
 800674c:	6042      	str	r2, [r0, #4]
 800674e:	2a00      	cmp	r2, #0
 8006750:	d002      	beq.n	8006758 <__lshift+0x78>
 8006752:	9b01      	ldr	r3, [sp, #4]
 8006754:	3302      	adds	r3, #2
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	9b00      	ldr	r3, [sp, #0]
 800675a:	9802      	ldr	r0, [sp, #8]
 800675c:	3b01      	subs	r3, #1
 800675e:	6133      	str	r3, [r6, #16]
 8006760:	0029      	movs	r1, r5
 8006762:	f7ff fe33 	bl	80063cc <_Bfree>
 8006766:	0030      	movs	r0, r6
 8006768:	b005      	add	sp, #20
 800676a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800676c:	3101      	adds	r1, #1
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	e7c3      	b.n	80066fa <__lshift+0x1a>
 8006772:	0098      	lsls	r0, r3, #2
 8006774:	5011      	str	r1, [r2, r0]
 8006776:	3301      	adds	r3, #1
 8006778:	e7ca      	b.n	8006710 <__lshift+0x30>
 800677a:	cb04      	ldmia	r3!, {r2}
 800677c:	c404      	stmia	r4!, {r2}
 800677e:	459c      	cmp	ip, r3
 8006780:	d8fb      	bhi.n	800677a <__lshift+0x9a>
 8006782:	e7e9      	b.n	8006758 <__lshift+0x78>

08006784 <__mcmp>:
 8006784:	690a      	ldr	r2, [r1, #16]
 8006786:	6903      	ldr	r3, [r0, #16]
 8006788:	b530      	push	{r4, r5, lr}
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	d10d      	bne.n	80067aa <__mcmp+0x26>
 800678e:	0092      	lsls	r2, r2, #2
 8006790:	3014      	adds	r0, #20
 8006792:	3114      	adds	r1, #20
 8006794:	1884      	adds	r4, r0, r2
 8006796:	1889      	adds	r1, r1, r2
 8006798:	3c04      	subs	r4, #4
 800679a:	3904      	subs	r1, #4
 800679c:	6825      	ldr	r5, [r4, #0]
 800679e:	680a      	ldr	r2, [r1, #0]
 80067a0:	4295      	cmp	r5, r2
 80067a2:	d004      	beq.n	80067ae <__mcmp+0x2a>
 80067a4:	2301      	movs	r3, #1
 80067a6:	4295      	cmp	r5, r2
 80067a8:	d304      	bcc.n	80067b4 <__mcmp+0x30>
 80067aa:	0018      	movs	r0, r3
 80067ac:	bd30      	pop	{r4, r5, pc}
 80067ae:	42a0      	cmp	r0, r4
 80067b0:	d3f2      	bcc.n	8006798 <__mcmp+0x14>
 80067b2:	e7fa      	b.n	80067aa <__mcmp+0x26>
 80067b4:	425b      	negs	r3, r3
 80067b6:	e7f8      	b.n	80067aa <__mcmp+0x26>

080067b8 <__mdiff>:
 80067b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ba:	000d      	movs	r5, r1
 80067bc:	b085      	sub	sp, #20
 80067be:	0007      	movs	r7, r0
 80067c0:	0011      	movs	r1, r2
 80067c2:	0028      	movs	r0, r5
 80067c4:	0014      	movs	r4, r2
 80067c6:	f7ff ffdd 	bl	8006784 <__mcmp>
 80067ca:	1e06      	subs	r6, r0, #0
 80067cc:	d108      	bne.n	80067e0 <__mdiff+0x28>
 80067ce:	0001      	movs	r1, r0
 80067d0:	0038      	movs	r0, r7
 80067d2:	f7ff fdc3 	bl	800635c <_Balloc>
 80067d6:	2301      	movs	r3, #1
 80067d8:	6146      	str	r6, [r0, #20]
 80067da:	6103      	str	r3, [r0, #16]
 80067dc:	b005      	add	sp, #20
 80067de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067e0:	2301      	movs	r3, #1
 80067e2:	9301      	str	r3, [sp, #4]
 80067e4:	2800      	cmp	r0, #0
 80067e6:	db04      	blt.n	80067f2 <__mdiff+0x3a>
 80067e8:	0023      	movs	r3, r4
 80067ea:	002c      	movs	r4, r5
 80067ec:	001d      	movs	r5, r3
 80067ee:	2300      	movs	r3, #0
 80067f0:	9301      	str	r3, [sp, #4]
 80067f2:	6861      	ldr	r1, [r4, #4]
 80067f4:	0038      	movs	r0, r7
 80067f6:	f7ff fdb1 	bl	800635c <_Balloc>
 80067fa:	002f      	movs	r7, r5
 80067fc:	2200      	movs	r2, #0
 80067fe:	9b01      	ldr	r3, [sp, #4]
 8006800:	6926      	ldr	r6, [r4, #16]
 8006802:	60c3      	str	r3, [r0, #12]
 8006804:	3414      	adds	r4, #20
 8006806:	00b3      	lsls	r3, r6, #2
 8006808:	18e3      	adds	r3, r4, r3
 800680a:	9302      	str	r3, [sp, #8]
 800680c:	692b      	ldr	r3, [r5, #16]
 800680e:	3714      	adds	r7, #20
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	9303      	str	r3, [sp, #12]
 8006816:	0003      	movs	r3, r0
 8006818:	4694      	mov	ip, r2
 800681a:	3314      	adds	r3, #20
 800681c:	cc20      	ldmia	r4!, {r5}
 800681e:	cf04      	ldmia	r7!, {r2}
 8006820:	9201      	str	r2, [sp, #4]
 8006822:	b2aa      	uxth	r2, r5
 8006824:	4494      	add	ip, r2
 8006826:	466a      	mov	r2, sp
 8006828:	4661      	mov	r1, ip
 800682a:	8892      	ldrh	r2, [r2, #4]
 800682c:	0c2d      	lsrs	r5, r5, #16
 800682e:	1a8a      	subs	r2, r1, r2
 8006830:	9901      	ldr	r1, [sp, #4]
 8006832:	0c09      	lsrs	r1, r1, #16
 8006834:	1a69      	subs	r1, r5, r1
 8006836:	1415      	asrs	r5, r2, #16
 8006838:	1949      	adds	r1, r1, r5
 800683a:	140d      	asrs	r5, r1, #16
 800683c:	b292      	uxth	r2, r2
 800683e:	0409      	lsls	r1, r1, #16
 8006840:	430a      	orrs	r2, r1
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	9a03      	ldr	r2, [sp, #12]
 8006846:	46ac      	mov	ip, r5
 8006848:	3304      	adds	r3, #4
 800684a:	42ba      	cmp	r2, r7
 800684c:	d8e6      	bhi.n	800681c <__mdiff+0x64>
 800684e:	9902      	ldr	r1, [sp, #8]
 8006850:	001a      	movs	r2, r3
 8006852:	428c      	cmp	r4, r1
 8006854:	d305      	bcc.n	8006862 <__mdiff+0xaa>
 8006856:	3a04      	subs	r2, #4
 8006858:	6813      	ldr	r3, [r2, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00e      	beq.n	800687c <__mdiff+0xc4>
 800685e:	6106      	str	r6, [r0, #16]
 8006860:	e7bc      	b.n	80067dc <__mdiff+0x24>
 8006862:	cc04      	ldmia	r4!, {r2}
 8006864:	b291      	uxth	r1, r2
 8006866:	4461      	add	r1, ip
 8006868:	140d      	asrs	r5, r1, #16
 800686a:	0c12      	lsrs	r2, r2, #16
 800686c:	1952      	adds	r2, r2, r5
 800686e:	1415      	asrs	r5, r2, #16
 8006870:	b289      	uxth	r1, r1
 8006872:	0412      	lsls	r2, r2, #16
 8006874:	430a      	orrs	r2, r1
 8006876:	46ac      	mov	ip, r5
 8006878:	c304      	stmia	r3!, {r2}
 800687a:	e7e8      	b.n	800684e <__mdiff+0x96>
 800687c:	3e01      	subs	r6, #1
 800687e:	e7ea      	b.n	8006856 <__mdiff+0x9e>

08006880 <__d2b>:
 8006880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006882:	001d      	movs	r5, r3
 8006884:	2101      	movs	r1, #1
 8006886:	0014      	movs	r4, r2
 8006888:	9f08      	ldr	r7, [sp, #32]
 800688a:	f7ff fd67 	bl	800635c <_Balloc>
 800688e:	032b      	lsls	r3, r5, #12
 8006890:	006d      	lsls	r5, r5, #1
 8006892:	0006      	movs	r6, r0
 8006894:	0b1b      	lsrs	r3, r3, #12
 8006896:	0d6d      	lsrs	r5, r5, #21
 8006898:	d124      	bne.n	80068e4 <__d2b+0x64>
 800689a:	9301      	str	r3, [sp, #4]
 800689c:	2c00      	cmp	r4, #0
 800689e:	d027      	beq.n	80068f0 <__d2b+0x70>
 80068a0:	4668      	mov	r0, sp
 80068a2:	9400      	str	r4, [sp, #0]
 80068a4:	f7ff fe03 	bl	80064ae <__lo0bits>
 80068a8:	9c00      	ldr	r4, [sp, #0]
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d01e      	beq.n	80068ec <__d2b+0x6c>
 80068ae:	9b01      	ldr	r3, [sp, #4]
 80068b0:	2120      	movs	r1, #32
 80068b2:	001a      	movs	r2, r3
 80068b4:	1a09      	subs	r1, r1, r0
 80068b6:	408a      	lsls	r2, r1
 80068b8:	40c3      	lsrs	r3, r0
 80068ba:	4322      	orrs	r2, r4
 80068bc:	6172      	str	r2, [r6, #20]
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	9c01      	ldr	r4, [sp, #4]
 80068c2:	61b4      	str	r4, [r6, #24]
 80068c4:	1e63      	subs	r3, r4, #1
 80068c6:	419c      	sbcs	r4, r3
 80068c8:	3401      	adds	r4, #1
 80068ca:	6134      	str	r4, [r6, #16]
 80068cc:	2d00      	cmp	r5, #0
 80068ce:	d018      	beq.n	8006902 <__d2b+0x82>
 80068d0:	4b12      	ldr	r3, [pc, #72]	; (800691c <__d2b+0x9c>)
 80068d2:	18ed      	adds	r5, r5, r3
 80068d4:	2335      	movs	r3, #53	; 0x35
 80068d6:	182d      	adds	r5, r5, r0
 80068d8:	603d      	str	r5, [r7, #0]
 80068da:	1a18      	subs	r0, r3, r0
 80068dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068de:	6018      	str	r0, [r3, #0]
 80068e0:	0030      	movs	r0, r6
 80068e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068e4:	2280      	movs	r2, #128	; 0x80
 80068e6:	0352      	lsls	r2, r2, #13
 80068e8:	4313      	orrs	r3, r2
 80068ea:	e7d6      	b.n	800689a <__d2b+0x1a>
 80068ec:	6174      	str	r4, [r6, #20]
 80068ee:	e7e7      	b.n	80068c0 <__d2b+0x40>
 80068f0:	a801      	add	r0, sp, #4
 80068f2:	f7ff fddc 	bl	80064ae <__lo0bits>
 80068f6:	2401      	movs	r4, #1
 80068f8:	9b01      	ldr	r3, [sp, #4]
 80068fa:	6134      	str	r4, [r6, #16]
 80068fc:	6173      	str	r3, [r6, #20]
 80068fe:	3020      	adds	r0, #32
 8006900:	e7e4      	b.n	80068cc <__d2b+0x4c>
 8006902:	4b07      	ldr	r3, [pc, #28]	; (8006920 <__d2b+0xa0>)
 8006904:	18c0      	adds	r0, r0, r3
 8006906:	4b07      	ldr	r3, [pc, #28]	; (8006924 <__d2b+0xa4>)
 8006908:	6038      	str	r0, [r7, #0]
 800690a:	18e3      	adds	r3, r4, r3
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	18f3      	adds	r3, r6, r3
 8006910:	6958      	ldr	r0, [r3, #20]
 8006912:	f7ff fdb2 	bl	800647a <__hi0bits>
 8006916:	0164      	lsls	r4, r4, #5
 8006918:	1a20      	subs	r0, r4, r0
 800691a:	e7df      	b.n	80068dc <__d2b+0x5c>
 800691c:	fffffbcd 	.word	0xfffffbcd
 8006920:	fffffbce 	.word	0xfffffbce
 8006924:	3fffffff 	.word	0x3fffffff

08006928 <_calloc_r>:
 8006928:	434a      	muls	r2, r1
 800692a:	b570      	push	{r4, r5, r6, lr}
 800692c:	0011      	movs	r1, r2
 800692e:	0014      	movs	r4, r2
 8006930:	f000 f808 	bl	8006944 <_malloc_r>
 8006934:	1e05      	subs	r5, r0, #0
 8006936:	d003      	beq.n	8006940 <_calloc_r+0x18>
 8006938:	0022      	movs	r2, r4
 800693a:	2100      	movs	r1, #0
 800693c:	f7fe fb33 	bl	8004fa6 <memset>
 8006940:	0028      	movs	r0, r5
 8006942:	bd70      	pop	{r4, r5, r6, pc}

08006944 <_malloc_r>:
 8006944:	2303      	movs	r3, #3
 8006946:	b570      	push	{r4, r5, r6, lr}
 8006948:	1ccd      	adds	r5, r1, #3
 800694a:	439d      	bics	r5, r3
 800694c:	3508      	adds	r5, #8
 800694e:	0006      	movs	r6, r0
 8006950:	2d0c      	cmp	r5, #12
 8006952:	d21e      	bcs.n	8006992 <_malloc_r+0x4e>
 8006954:	250c      	movs	r5, #12
 8006956:	42a9      	cmp	r1, r5
 8006958:	d81d      	bhi.n	8006996 <_malloc_r+0x52>
 800695a:	0030      	movs	r0, r6
 800695c:	f000 f874 	bl	8006a48 <__malloc_lock>
 8006960:	4a25      	ldr	r2, [pc, #148]	; (80069f8 <_malloc_r+0xb4>)
 8006962:	6814      	ldr	r4, [r2, #0]
 8006964:	0021      	movs	r1, r4
 8006966:	2900      	cmp	r1, #0
 8006968:	d119      	bne.n	800699e <_malloc_r+0x5a>
 800696a:	4c24      	ldr	r4, [pc, #144]	; (80069fc <_malloc_r+0xb8>)
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d103      	bne.n	800697a <_malloc_r+0x36>
 8006972:	0030      	movs	r0, r6
 8006974:	f000 f844 	bl	8006a00 <_sbrk_r>
 8006978:	6020      	str	r0, [r4, #0]
 800697a:	0029      	movs	r1, r5
 800697c:	0030      	movs	r0, r6
 800697e:	f000 f83f 	bl	8006a00 <_sbrk_r>
 8006982:	1c43      	adds	r3, r0, #1
 8006984:	d12b      	bne.n	80069de <_malloc_r+0x9a>
 8006986:	230c      	movs	r3, #12
 8006988:	0030      	movs	r0, r6
 800698a:	6033      	str	r3, [r6, #0]
 800698c:	f000 f85d 	bl	8006a4a <__malloc_unlock>
 8006990:	e003      	b.n	800699a <_malloc_r+0x56>
 8006992:	2d00      	cmp	r5, #0
 8006994:	dadf      	bge.n	8006956 <_malloc_r+0x12>
 8006996:	230c      	movs	r3, #12
 8006998:	6033      	str	r3, [r6, #0]
 800699a:	2000      	movs	r0, #0
 800699c:	bd70      	pop	{r4, r5, r6, pc}
 800699e:	680b      	ldr	r3, [r1, #0]
 80069a0:	1b5b      	subs	r3, r3, r5
 80069a2:	d419      	bmi.n	80069d8 <_malloc_r+0x94>
 80069a4:	2b0b      	cmp	r3, #11
 80069a6:	d903      	bls.n	80069b0 <_malloc_r+0x6c>
 80069a8:	600b      	str	r3, [r1, #0]
 80069aa:	18cc      	adds	r4, r1, r3
 80069ac:	6025      	str	r5, [r4, #0]
 80069ae:	e003      	b.n	80069b8 <_malloc_r+0x74>
 80069b0:	684b      	ldr	r3, [r1, #4]
 80069b2:	428c      	cmp	r4, r1
 80069b4:	d10d      	bne.n	80069d2 <_malloc_r+0x8e>
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	0030      	movs	r0, r6
 80069ba:	f000 f846 	bl	8006a4a <__malloc_unlock>
 80069be:	0020      	movs	r0, r4
 80069c0:	2207      	movs	r2, #7
 80069c2:	300b      	adds	r0, #11
 80069c4:	1d23      	adds	r3, r4, #4
 80069c6:	4390      	bics	r0, r2
 80069c8:	1ac3      	subs	r3, r0, r3
 80069ca:	d0e7      	beq.n	800699c <_malloc_r+0x58>
 80069cc:	425a      	negs	r2, r3
 80069ce:	50e2      	str	r2, [r4, r3]
 80069d0:	e7e4      	b.n	800699c <_malloc_r+0x58>
 80069d2:	6063      	str	r3, [r4, #4]
 80069d4:	000c      	movs	r4, r1
 80069d6:	e7ef      	b.n	80069b8 <_malloc_r+0x74>
 80069d8:	000c      	movs	r4, r1
 80069da:	6849      	ldr	r1, [r1, #4]
 80069dc:	e7c3      	b.n	8006966 <_malloc_r+0x22>
 80069de:	2303      	movs	r3, #3
 80069e0:	1cc4      	adds	r4, r0, #3
 80069e2:	439c      	bics	r4, r3
 80069e4:	42a0      	cmp	r0, r4
 80069e6:	d0e1      	beq.n	80069ac <_malloc_r+0x68>
 80069e8:	1a21      	subs	r1, r4, r0
 80069ea:	0030      	movs	r0, r6
 80069ec:	f000 f808 	bl	8006a00 <_sbrk_r>
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	d1db      	bne.n	80069ac <_malloc_r+0x68>
 80069f4:	e7c7      	b.n	8006986 <_malloc_r+0x42>
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	200001f8 	.word	0x200001f8
 80069fc:	200001fc 	.word	0x200001fc

08006a00 <_sbrk_r>:
 8006a00:	2300      	movs	r3, #0
 8006a02:	b570      	push	{r4, r5, r6, lr}
 8006a04:	4c06      	ldr	r4, [pc, #24]	; (8006a20 <_sbrk_r+0x20>)
 8006a06:	0005      	movs	r5, r0
 8006a08:	0008      	movs	r0, r1
 8006a0a:	6023      	str	r3, [r4, #0]
 8006a0c:	f7fc fa54 	bl	8002eb8 <_sbrk>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	d103      	bne.n	8006a1c <_sbrk_r+0x1c>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d000      	beq.n	8006a1c <_sbrk_r+0x1c>
 8006a1a:	602b      	str	r3, [r5, #0]
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
 8006a1e:	46c0      	nop			; (mov r8, r8)
 8006a20:	20000484 	.word	0x20000484

08006a24 <__ascii_mbtowc>:
 8006a24:	b082      	sub	sp, #8
 8006a26:	2900      	cmp	r1, #0
 8006a28:	d100      	bne.n	8006a2c <__ascii_mbtowc+0x8>
 8006a2a:	a901      	add	r1, sp, #4
 8006a2c:	1e10      	subs	r0, r2, #0
 8006a2e:	d006      	beq.n	8006a3e <__ascii_mbtowc+0x1a>
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d006      	beq.n	8006a42 <__ascii_mbtowc+0x1e>
 8006a34:	7813      	ldrb	r3, [r2, #0]
 8006a36:	600b      	str	r3, [r1, #0]
 8006a38:	7810      	ldrb	r0, [r2, #0]
 8006a3a:	1e43      	subs	r3, r0, #1
 8006a3c:	4198      	sbcs	r0, r3
 8006a3e:	b002      	add	sp, #8
 8006a40:	4770      	bx	lr
 8006a42:	2002      	movs	r0, #2
 8006a44:	4240      	negs	r0, r0
 8006a46:	e7fa      	b.n	8006a3e <__ascii_mbtowc+0x1a>

08006a48 <__malloc_lock>:
 8006a48:	4770      	bx	lr

08006a4a <__malloc_unlock>:
 8006a4a:	4770      	bx	lr

08006a4c <__ascii_wctomb>:
 8006a4c:	1e0b      	subs	r3, r1, #0
 8006a4e:	d004      	beq.n	8006a5a <__ascii_wctomb+0xe>
 8006a50:	2aff      	cmp	r2, #255	; 0xff
 8006a52:	d904      	bls.n	8006a5e <__ascii_wctomb+0x12>
 8006a54:	238a      	movs	r3, #138	; 0x8a
 8006a56:	6003      	str	r3, [r0, #0]
 8006a58:	3b8b      	subs	r3, #139	; 0x8b
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	4770      	bx	lr
 8006a5e:	700a      	strb	r2, [r1, #0]
 8006a60:	2301      	movs	r3, #1
 8006a62:	e7fa      	b.n	8006a5a <__ascii_wctomb+0xe>

08006a64 <_init>:
 8006a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a66:	46c0      	nop			; (mov r8, r8)
 8006a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6a:	bc08      	pop	{r3}
 8006a6c:	469e      	mov	lr, r3
 8006a6e:	4770      	bx	lr

08006a70 <_fini>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	46c0      	nop			; (mov r8, r8)
 8006a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a76:	bc08      	pop	{r3}
 8006a78:	469e      	mov	lr, r3
 8006a7a:	4770      	bx	lr
