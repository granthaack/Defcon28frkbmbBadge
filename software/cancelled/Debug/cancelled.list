
cancelled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c98  08003c98  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08003c98  08003c98  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c98  08003c98  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c98  08003c98  00013c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c9c  08003c9c  00013c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000008  08003ca8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08003ca8  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4e4  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024ca  00000000  00000000  0002f514  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f08  00000000  00000000  000319e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  000328e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000160c5  00000000  00000000  000336a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca12  00000000  00000000  0004976d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078ab5  00000000  00000000  0005617f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cec34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000355c  00000000  00000000  000cecb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a9c 	.word	0x08003a9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08003a9c 	.word	0x08003a9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <init_accel>:
#include "accel.h"

int init_accel(I2C_HandleTypeDef* i2c){
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af02      	add	r7, sp, #8
 8000226:	6078      	str	r0, [r7, #4]
	// Set output data rate to 50hz by writing to CTRL1 register
	uint8_t dat[2] = {0x20, 0x27};
 8000228:	210c      	movs	r1, #12
 800022a:	187b      	adds	r3, r7, r1
 800022c:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <init_accel+0x88>)
 800022e:	8812      	ldrh	r2, [r2, #0]
 8000230:	801a      	strh	r2, [r3, #0]
	uint8_t buf = 0;
 8000232:	250b      	movs	r5, #11
 8000234:	197b      	adds	r3, r7, r5
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(i2c, ACC_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 800023a:	000c      	movs	r4, r1
 800023c:	187a      	adds	r2, r7, r1
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	2301      	movs	r3, #1
 8000242:	425b      	negs	r3, r3
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	2302      	movs	r3, #2
 8000248:	213a      	movs	r1, #58	; 0x3a
 800024a:	f001 fbeb 	bl	8001a24 <HAL_I2C_Master_Transmit>
	// Set the full scale selection to +-4G, turn on auto increment reads
	dat[0] = 0x23;
 800024e:	0021      	movs	r1, r4
 8000250:	187b      	adds	r3, r7, r1
 8000252:	2223      	movs	r2, #35	; 0x23
 8000254:	701a      	strb	r2, [r3, #0]
	dat[1] = 0x24;
 8000256:	187b      	adds	r3, r7, r1
 8000258:	2224      	movs	r2, #36	; 0x24
 800025a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(i2c, ACC_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 800025c:	000c      	movs	r4, r1
 800025e:	187a      	adds	r2, r7, r1
 8000260:	6878      	ldr	r0, [r7, #4]
 8000262:	2301      	movs	r3, #1
 8000264:	425b      	negs	r3, r3
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	2302      	movs	r3, #2
 800026a:	213a      	movs	r1, #58	; 0x3a
 800026c:	f001 fbda 	bl	8001a24 <HAL_I2C_Master_Transmit>

	// Read back the whoami register
	dat[0] = 0xF;
 8000270:	0021      	movs	r1, r4
 8000272:	187b      	adds	r3, r7, r1
 8000274:	220f      	movs	r2, #15
 8000276:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(i2c, ACC_ADDR_WR, &dat, 1, HAL_MAX_DELAY);
 8000278:	187a      	adds	r2, r7, r1
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	2301      	movs	r3, #1
 800027e:	425b      	negs	r3, r3
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2301      	movs	r3, #1
 8000284:	213a      	movs	r1, #58	; 0x3a
 8000286:	f001 fbcd 	bl	8001a24 <HAL_I2C_Master_Transmit>
	// Read the data back
	HAL_I2C_Master_Receive(i2c, ACC_ADDR_RD, &buf, 1, HAL_MAX_DELAY);
 800028a:	197a      	adds	r2, r7, r5
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	2301      	movs	r3, #1
 8000290:	425b      	negs	r3, r3
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	2301      	movs	r3, #1
 8000296:	213b      	movs	r1, #59	; 0x3b
 8000298:	f001 fccc 	bl	8001c34 <HAL_I2C_Master_Receive>
	return buf;
 800029c:	197b      	adds	r3, r7, r5
 800029e:	781b      	ldrb	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	b004      	add	sp, #16
 80002a6:	bdb0      	pop	{r4, r5, r7, pc}
 80002a8:	08003ab4 	.word	0x08003ab4

080002ac <_get_16bit_reg>:

uint16_t _get_16bit_reg(uint8_t start_addr, I2C_HandleTypeDef* i2c){
 80002ac:	b5b0      	push	{r4, r5, r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af02      	add	r7, sp, #8
 80002b2:	0002      	movs	r2, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	701a      	strb	r2, [r3, #0]
	uint8_t buf_l;
	uint8_t buf_h;
	// Get the lower bits from the register pair, write the address to the bus
	HAL_I2C_Master_Transmit(i2c, ACC_ADDR_WR, &start_addr, 1, HAL_MAX_DELAY);
 80002ba:	1dfa      	adds	r2, r7, #7
 80002bc:	6838      	ldr	r0, [r7, #0]
 80002be:	2301      	movs	r3, #1
 80002c0:	425b      	negs	r3, r3
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	2301      	movs	r3, #1
 80002c6:	213a      	movs	r1, #58	; 0x3a
 80002c8:	f001 fbac 	bl	8001a24 <HAL_I2C_Master_Transmit>
	// Read the data back
	HAL_I2C_Master_Receive(i2c, ACC_ADDR_RD, &buf_l, 1, HAL_MAX_DELAY);
 80002cc:	240f      	movs	r4, #15
 80002ce:	193a      	adds	r2, r7, r4
 80002d0:	6838      	ldr	r0, [r7, #0]
 80002d2:	2301      	movs	r3, #1
 80002d4:	425b      	negs	r3, r3
 80002d6:	9300      	str	r3, [sp, #0]
 80002d8:	2301      	movs	r3, #1
 80002da:	213b      	movs	r1, #59	; 0x3b
 80002dc:	f001 fcaa 	bl	8001c34 <HAL_I2C_Master_Receive>
	// Get the higher bits from the register pair, write the address to the bus
	start_addr = start_addr + 1;
 80002e0:	1dfb      	adds	r3, r7, #7
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	3301      	adds	r3, #1
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	1dfb      	adds	r3, r7, #7
 80002ea:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(i2c, ACC_ADDR_WR, &start_addr, 1, HAL_MAX_DELAY);
 80002ec:	1dfa      	adds	r2, r7, #7
 80002ee:	6838      	ldr	r0, [r7, #0]
 80002f0:	2301      	movs	r3, #1
 80002f2:	425b      	negs	r3, r3
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	2301      	movs	r3, #1
 80002f8:	213a      	movs	r1, #58	; 0x3a
 80002fa:	f001 fb93 	bl	8001a24 <HAL_I2C_Master_Transmit>
	// Read the data back
	HAL_I2C_Master_Receive(i2c, ACC_ADDR_RD, &buf_h, 1, HAL_MAX_DELAY);
 80002fe:	250e      	movs	r5, #14
 8000300:	197a      	adds	r2, r7, r5
 8000302:	6838      	ldr	r0, [r7, #0]
 8000304:	2301      	movs	r3, #1
 8000306:	425b      	negs	r3, r3
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	2301      	movs	r3, #1
 800030c:	213b      	movs	r1, #59	; 0x3b
 800030e:	f001 fc91 	bl	8001c34 <HAL_I2C_Master_Receive>
	// Return the formatted data
	return (buf_h << 8) | buf_l;
 8000312:	197b      	adds	r3, r7, r5
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	021b      	lsls	r3, r3, #8
 8000318:	b21a      	sxth	r2, r3
 800031a:	193b      	adds	r3, r7, r4
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	b21b      	sxth	r3, r3
 8000320:	4313      	orrs	r3, r2
 8000322:	b21b      	sxth	r3, r3
 8000324:	b29b      	uxth	r3, r3
}
 8000326:	0018      	movs	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	b004      	add	sp, #16
 800032c:	bdb0      	pop	{r4, r5, r7, pc}

0800032e <get_x>:

uint16_t get_x(I2C_HandleTypeDef* i2c){
 800032e:	b580      	push	{r7, lr}
 8000330:	b082      	sub	sp, #8
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
	return _get_16bit_reg(X_DATA_REG, i2c);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	0019      	movs	r1, r3
 800033a:	2028      	movs	r0, #40	; 0x28
 800033c:	f7ff ffb6 	bl	80002ac <_get_16bit_reg>
 8000340:	0003      	movs	r3, r0
}
 8000342:	0018      	movs	r0, r3
 8000344:	46bd      	mov	sp, r7
 8000346:	b002      	add	sp, #8
 8000348:	bd80      	pop	{r7, pc}

0800034a <get_y>:

uint16_t get_y(I2C_HandleTypeDef* i2c){
 800034a:	b580      	push	{r7, lr}
 800034c:	b082      	sub	sp, #8
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
	return _get_16bit_reg(Y_DATA_REG, i2c);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	0019      	movs	r1, r3
 8000356:	202a      	movs	r0, #42	; 0x2a
 8000358:	f7ff ffa8 	bl	80002ac <_get_16bit_reg>
 800035c:	0003      	movs	r3, r0
}
 800035e:	0018      	movs	r0, r3
 8000360:	46bd      	mov	sp, r7
 8000362:	b002      	add	sp, #8
 8000364:	bd80      	pop	{r7, pc}

08000366 <get_z>:
uint16_t get_z(I2C_HandleTypeDef* i2c){
 8000366:	b580      	push	{r7, lr}
 8000368:	b082      	sub	sp, #8
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
	return _get_16bit_reg(Z_DATA_REG, i2c);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	0019      	movs	r1, r3
 8000372:	202c      	movs	r0, #44	; 0x2c
 8000374:	f7ff ff9a 	bl	80002ac <_get_16bit_reg>
 8000378:	0003      	movs	r3, r0
}
 800037a:	0018      	movs	r0, r3
 800037c:	46bd      	mov	sp, r7
 800037e:	b002      	add	sp, #8
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <life>:
#include "conway.h"

int life(uint8_t x, uint8_t y){
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	0002      	movs	r2, r0
 800038c:	1dfb      	adds	r3, r7, #7
 800038e:	701a      	strb	r2, [r3, #0]
 8000390:	1dbb      	adds	r3, r7, #6
 8000392:	1c0a      	adds	r2, r1, #0
 8000394:	701a      	strb	r2, [r3, #0]
	uint8_t x_end;
	uint8_t y_end;

	uint8_t x_start;
	uint8_t y_start;
	uint8_t neighbors = 0;
 8000396:	230b      	movs	r3, #11
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]
	// Set the bounds for looking for neighbors
	if(x == 0){
 800039e:	1dfb      	adds	r3, r7, #7
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d10b      	bne.n	80003be <life+0x3a>
		x_start = x;
 80003a6:	230d      	movs	r3, #13
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	1dfa      	adds	r2, r7, #7
 80003ac:	7812      	ldrb	r2, [r2, #0]
 80003ae:	701a      	strb	r2, [r3, #0]
		x_end = x + 1;
 80003b0:	230f      	movs	r3, #15
 80003b2:	18fb      	adds	r3, r7, r3
 80003b4:	1dfa      	adds	r2, r7, #7
 80003b6:	7812      	ldrb	r2, [r2, #0]
 80003b8:	3201      	adds	r2, #1
 80003ba:	701a      	strb	r2, [r3, #0]
 80003bc:	e019      	b.n	80003f2 <life+0x6e>
	}
	else if(x == X_BND){
 80003be:	1dfb      	adds	r3, r7, #7
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b07      	cmp	r3, #7
 80003c4:	d109      	bne.n	80003da <life+0x56>
		x_start = X_BND - 1;
 80003c6:	230d      	movs	r3, #13
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	2206      	movs	r2, #6
 80003cc:	701a      	strb	r2, [r3, #0]
		x_end = x;
 80003ce:	230f      	movs	r3, #15
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	1dfa      	adds	r2, r7, #7
 80003d4:	7812      	ldrb	r2, [r2, #0]
 80003d6:	701a      	strb	r2, [r3, #0]
 80003d8:	e00b      	b.n	80003f2 <life+0x6e>
	}
	else{
		x_start = x - 1;
 80003da:	230d      	movs	r3, #13
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	1dfa      	adds	r2, r7, #7
 80003e0:	7812      	ldrb	r2, [r2, #0]
 80003e2:	3a01      	subs	r2, #1
 80003e4:	701a      	strb	r2, [r3, #0]
		x_end = x + 1;
 80003e6:	230f      	movs	r3, #15
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	1dfa      	adds	r2, r7, #7
 80003ec:	7812      	ldrb	r2, [r2, #0]
 80003ee:	3201      	adds	r2, #1
 80003f0:	701a      	strb	r2, [r3, #0]
	}
	if(y == 0){
 80003f2:	1dbb      	adds	r3, r7, #6
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d10b      	bne.n	8000412 <life+0x8e>
		y_start = y;
 80003fa:	230c      	movs	r3, #12
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	1dba      	adds	r2, r7, #6
 8000400:	7812      	ldrb	r2, [r2, #0]
 8000402:	701a      	strb	r2, [r3, #0]
		y_end = y + 1;
 8000404:	230e      	movs	r3, #14
 8000406:	18fb      	adds	r3, r7, r3
 8000408:	1dba      	adds	r2, r7, #6
 800040a:	7812      	ldrb	r2, [r2, #0]
 800040c:	3201      	adds	r2, #1
 800040e:	701a      	strb	r2, [r3, #0]
 8000410:	e019      	b.n	8000446 <life+0xc2>
	}
	else if(y == Y_BND){
 8000412:	1dbb      	adds	r3, r7, #6
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	2b11      	cmp	r3, #17
 8000418:	d109      	bne.n	800042e <life+0xaa>
		y_start = Y_BND - 1;
 800041a:	230c      	movs	r3, #12
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	2210      	movs	r2, #16
 8000420:	701a      	strb	r2, [r3, #0]
		y_end = y;
 8000422:	230e      	movs	r3, #14
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	1dba      	adds	r2, r7, #6
 8000428:	7812      	ldrb	r2, [r2, #0]
 800042a:	701a      	strb	r2, [r3, #0]
 800042c:	e00b      	b.n	8000446 <life+0xc2>
	}
	else{
		y_start = y - 1;
 800042e:	230c      	movs	r3, #12
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	1dba      	adds	r2, r7, #6
 8000434:	7812      	ldrb	r2, [r2, #0]
 8000436:	3a01      	subs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
		y_end = y + 1;
 800043a:	230e      	movs	r3, #14
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	1dba      	adds	r2, r7, #6
 8000440:	7812      	ldrb	r2, [r2, #0]
 8000442:	3201      	adds	r2, #1
 8000444:	701a      	strb	r2, [r3, #0]
	}
	for(uint8_t y_index = y_start; y_index <= y_end; y_index++){
 8000446:	230a      	movs	r3, #10
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	220c      	movs	r2, #12
 800044c:	18ba      	adds	r2, r7, r2
 800044e:	7812      	ldrb	r2, [r2, #0]
 8000450:	701a      	strb	r2, [r3, #0]
 8000452:	e03c      	b.n	80004ce <life+0x14a>
		for(uint8_t x_index = x_start; x_index <= x_end; x_index++){
 8000454:	2309      	movs	r3, #9
 8000456:	18fb      	adds	r3, r7, r3
 8000458:	220d      	movs	r2, #13
 800045a:	18ba      	adds	r2, r7, r2
 800045c:	7812      	ldrb	r2, [r2, #0]
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e027      	b.n	80004b2 <life+0x12e>
			if((active_fbuf[y_index * MTX_WIDTH + x_index] != 0) &&
 8000462:	4b4a      	ldr	r3, [pc, #296]	; (800058c <life+0x208>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	220a      	movs	r2, #10
 8000468:	18ba      	adds	r2, r7, r2
 800046a:	7812      	ldrb	r2, [r2, #0]
 800046c:	00d1      	lsls	r1, r2, #3
 800046e:	2209      	movs	r2, #9
 8000470:	18ba      	adds	r2, r7, r2
 8000472:	7812      	ldrb	r2, [r2, #0]
 8000474:	188a      	adds	r2, r1, r2
 8000476:	189b      	adds	r3, r3, r2
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d013      	beq.n	80004a6 <life+0x122>
 800047e:	1dfa      	adds	r2, r7, #7
 8000480:	2309      	movs	r3, #9
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	7812      	ldrb	r2, [r2, #0]
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	429a      	cmp	r2, r3
 800048a:	d106      	bne.n	800049a <life+0x116>
					!((x == x_index) && (y == y_index))){
 800048c:	1dba      	adds	r2, r7, #6
 800048e:	230a      	movs	r3, #10
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	7812      	ldrb	r2, [r2, #0]
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	429a      	cmp	r2, r3
 8000498:	d005      	beq.n	80004a6 <life+0x122>
				neighbors++;
 800049a:	210b      	movs	r1, #11
 800049c:	187b      	adds	r3, r7, r1
 800049e:	781a      	ldrb	r2, [r3, #0]
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	3201      	adds	r2, #1
 80004a4:	701a      	strb	r2, [r3, #0]
		for(uint8_t x_index = x_start; x_index <= x_end; x_index++){
 80004a6:	2109      	movs	r1, #9
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	781a      	ldrb	r2, [r3, #0]
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	3201      	adds	r2, #1
 80004b0:	701a      	strb	r2, [r3, #0]
 80004b2:	2309      	movs	r3, #9
 80004b4:	18fa      	adds	r2, r7, r3
 80004b6:	230f      	movs	r3, #15
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	7812      	ldrb	r2, [r2, #0]
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d9cf      	bls.n	8000462 <life+0xde>
	for(uint8_t y_index = y_start; y_index <= y_end; y_index++){
 80004c2:	210a      	movs	r1, #10
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	3201      	adds	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
 80004ce:	230a      	movs	r3, #10
 80004d0:	18fa      	adds	r2, r7, r3
 80004d2:	230e      	movs	r3, #14
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	7812      	ldrb	r2, [r2, #0]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	429a      	cmp	r2, r3
 80004dc:	d9ba      	bls.n	8000454 <life+0xd0>
			}
		}
	}
	// Any cell with less than 2 neighbors dies of loneliness
	if(active_fbuf[y * MTX_WIDTH + x] != 0 && neighbors < 2){
 80004de:	4b2b      	ldr	r3, [pc, #172]	; (800058c <life+0x208>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	1dba      	adds	r2, r7, #6
 80004e4:	7812      	ldrb	r2, [r2, #0]
 80004e6:	00d1      	lsls	r1, r2, #3
 80004e8:	1dfa      	adds	r2, r7, #7
 80004ea:	7812      	ldrb	r2, [r2, #0]
 80004ec:	188a      	adds	r2, r1, r2
 80004ee:	189b      	adds	r3, r3, r2
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d006      	beq.n	8000504 <life+0x180>
 80004f6:	230b      	movs	r3, #11
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d801      	bhi.n	8000504 <life+0x180>
		return 0;
 8000500:	2300      	movs	r3, #0
 8000502:	e03e      	b.n	8000582 <life+0x1fe>
	}
	// Any living cell with 2 or 3 neighbors lives on to the next generation
	else if((active_fbuf[y * MTX_WIDTH + x] != 0) && (neighbors == 2 || neighbors == 3)){
 8000504:	4b21      	ldr	r3, [pc, #132]	; (800058c <life+0x208>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	1dba      	adds	r2, r7, #6
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	00d1      	lsls	r1, r2, #3
 800050e:	1dfa      	adds	r2, r7, #7
 8000510:	7812      	ldrb	r2, [r2, #0]
 8000512:	188a      	adds	r2, r1, r2
 8000514:	189b      	adds	r3, r3, r2
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00b      	beq.n	8000534 <life+0x1b0>
 800051c:	230b      	movs	r3, #11
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b02      	cmp	r3, #2
 8000524:	d004      	beq.n	8000530 <life+0x1ac>
 8000526:	230b      	movs	r3, #11
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b03      	cmp	r3, #3
 800052e:	d101      	bne.n	8000534 <life+0x1b0>
		return 1;
 8000530:	2301      	movs	r3, #1
 8000532:	e026      	b.n	8000582 <life+0x1fe>
	}
	// Any cell with more than 3 neighbors dies of overpopulation
	else if(active_fbuf[y * MTX_WIDTH + x] != 0 && neighbors > 3){
 8000534:	4b15      	ldr	r3, [pc, #84]	; (800058c <life+0x208>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	1dba      	adds	r2, r7, #6
 800053a:	7812      	ldrb	r2, [r2, #0]
 800053c:	00d1      	lsls	r1, r2, #3
 800053e:	1dfa      	adds	r2, r7, #7
 8000540:	7812      	ldrb	r2, [r2, #0]
 8000542:	188a      	adds	r2, r1, r2
 8000544:	189b      	adds	r3, r3, r2
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d006      	beq.n	800055a <life+0x1d6>
 800054c:	230b      	movs	r3, #11
 800054e:	18fb      	adds	r3, r7, r3
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b03      	cmp	r3, #3
 8000554:	d901      	bls.n	800055a <life+0x1d6>
		return 0;
 8000556:	2300      	movs	r3, #0
 8000558:	e013      	b.n	8000582 <life+0x1fe>
	}
	// Any dead cell with exactly three neighbors is born
	else if(active_fbuf[y * MTX_WIDTH + x] == 0 && neighbors == 3){
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <life+0x208>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	1dba      	adds	r2, r7, #6
 8000560:	7812      	ldrb	r2, [r2, #0]
 8000562:	00d1      	lsls	r1, r2, #3
 8000564:	1dfa      	adds	r2, r7, #7
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	188a      	adds	r2, r1, r2
 800056a:	189b      	adds	r3, r3, r2
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d106      	bne.n	8000580 <life+0x1fc>
 8000572:	230b      	movs	r3, #11
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b03      	cmp	r3, #3
 800057a:	d101      	bne.n	8000580 <life+0x1fc>
		return 1;
 800057c:	2301      	movs	r3, #1
 800057e:	e000      	b.n	8000582 <life+0x1fe>
	}
	// MISRA
	else{
		return 0;
 8000580:	2300      	movs	r3, #0
	}

}
 8000582:	0018      	movs	r0, r3
 8000584:	46bd      	mov	sp, r7
 8000586:	b004      	add	sp, #16
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	20000148 	.word	0x20000148

08000590 <conway_demo>:

void conway_demo(I2C_HandleTypeDef* hi2c){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	stop_conway = 0;
 8000598:	4b34      	ldr	r3, [pc, #208]	; (800066c <conway_demo+0xdc>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
	// Seed Conway's game of life with a glider
	next_fbuf[0 * MTX_WIDTH + 1] = 0xFF;
 800059e:	4b34      	ldr	r3, [pc, #208]	; (8000670 <conway_demo+0xe0>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	22ff      	movs	r2, #255	; 0xff
 80005a6:	701a      	strb	r2, [r3, #0]
	next_fbuf[1 * MTX_WIDTH + 2] = 0xFF;
 80005a8:	4b31      	ldr	r3, [pc, #196]	; (8000670 <conway_demo+0xe0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	330a      	adds	r3, #10
 80005ae:	22ff      	movs	r2, #255	; 0xff
 80005b0:	701a      	strb	r2, [r3, #0]
	next_fbuf[2 * MTX_WIDTH + 0] = 0xFF;
 80005b2:	4b2f      	ldr	r3, [pc, #188]	; (8000670 <conway_demo+0xe0>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	3310      	adds	r3, #16
 80005b8:	22ff      	movs	r2, #255	; 0xff
 80005ba:	701a      	strb	r2, [r3, #0]
	next_fbuf[2 * MTX_WIDTH + 1] = 0xFF;
 80005bc:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <conway_demo+0xe0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	3311      	adds	r3, #17
 80005c2:	22ff      	movs	r2, #255	; 0xff
 80005c4:	701a      	strb	r2, [r3, #0]
	next_fbuf[2 * MTX_WIDTH + 2] = 0xFF;
 80005c6:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <conway_demo+0xe0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3312      	adds	r3, #18
 80005cc:	22ff      	movs	r2, #255	; 0xff
 80005ce:	701a      	strb	r2, [r3, #0]
	update_fbuf(hi2c);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fa78 	bl	8000ac8 <update_fbuf>
	while (!stop_conway){
 80005d8:	e03f      	b.n	800065a <conway_demo+0xca>
		for(uint8_t y = 0; y < 18; y++){
 80005da:	230f      	movs	r3, #15
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
 80005e2:	e02e      	b.n	8000642 <conway_demo+0xb2>
			for(uint8_t x = 0; x < 8; x++){
 80005e4:	230e      	movs	r3, #14
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
 80005ec:	e01e      	b.n	800062c <conway_demo+0x9c>
				if(life(x, y)){
 80005ee:	230f      	movs	r3, #15
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	230e      	movs	r3, #14
 80005f6:	18fb      	adds	r3, r7, r3
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff fec1 	bl	8000384 <life>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d00c      	beq.n	8000620 <conway_demo+0x90>
					next_fbuf[y * MTX_WIDTH + x] = 0xFF;
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <conway_demo+0xe0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	220f      	movs	r2, #15
 800060c:	18ba      	adds	r2, r7, r2
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	00d1      	lsls	r1, r2, #3
 8000612:	220e      	movs	r2, #14
 8000614:	18ba      	adds	r2, r7, r2
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	188a      	adds	r2, r1, r2
 800061a:	189b      	adds	r3, r3, r2
 800061c:	22ff      	movs	r2, #255	; 0xff
 800061e:	701a      	strb	r2, [r3, #0]
			for(uint8_t x = 0; x < 8; x++){
 8000620:	210e      	movs	r1, #14
 8000622:	187b      	adds	r3, r7, r1
 8000624:	781a      	ldrb	r2, [r3, #0]
 8000626:	187b      	adds	r3, r7, r1
 8000628:	3201      	adds	r2, #1
 800062a:	701a      	strb	r2, [r3, #0]
 800062c:	230e      	movs	r3, #14
 800062e:	18fb      	adds	r3, r7, r3
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b07      	cmp	r3, #7
 8000634:	d9db      	bls.n	80005ee <conway_demo+0x5e>
		for(uint8_t y = 0; y < 18; y++){
 8000636:	210f      	movs	r1, #15
 8000638:	187b      	adds	r3, r7, r1
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	187b      	adds	r3, r7, r1
 800063e:	3201      	adds	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	230f      	movs	r3, #15
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b11      	cmp	r3, #17
 800064a:	d9cb      	bls.n	80005e4 <conway_demo+0x54>
				}
			}
		}
		HAL_Delay(100);
 800064c:	2064      	movs	r0, #100	; 0x64
 800064e:	f000 fefd 	bl	800144c <HAL_Delay>
		update_fbuf(hi2c);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	0018      	movs	r0, r3
 8000656:	f000 fa37 	bl	8000ac8 <update_fbuf>
	while (!stop_conway){
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <conway_demo+0xdc>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0ba      	beq.n	80005da <conway_demo+0x4a>
	}
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b004      	add	sp, #16
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000144 	.word	0x20000144
 8000670:	20000230 	.word	0x20000230

08000674 <doggo_demo>:
#include "doggo.h"

int doggo_demo(I2C_HandleTypeDef* hi2c){
 8000674:	b5b0      	push	{r4, r5, r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 800067c:	230f      	movs	r3, #15
 800067e:	18fb      	adds	r3, r7, r3
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
	uint8_t y = 0;
 8000684:	230e      	movs	r3, #14
 8000686:	18fb      	adds	r3, r7, r3
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
	uint8_t z = 0;
 800068c:	230d      	movs	r3, #13
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]

	while(1){
		x = get_x(hi2c);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	0018      	movs	r0, r3
 8000698:	f7ff fe49 	bl	800032e <get_x>
 800069c:	0003      	movs	r3, r0
 800069e:	001a      	movs	r2, r3
 80006a0:	240f      	movs	r4, #15
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	701a      	strb	r2, [r3, #0]
		y = get_y(hi2c);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	0018      	movs	r0, r3
 80006aa:	f7ff fe4e 	bl	800034a <get_y>
 80006ae:	0003      	movs	r3, r0
 80006b0:	001a      	movs	r2, r3
 80006b2:	250e      	movs	r5, #14
 80006b4:	197b      	adds	r3, r7, r5
 80006b6:	701a      	strb	r2, [r3, #0]
		z = get_z(hi2c);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff fe53 	bl	8000366 <get_z>
 80006c0:	0003      	movs	r3, r0
 80006c2:	001a      	movs	r2, r3
 80006c4:	210d      	movs	r1, #13
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	701a      	strb	r2, [r3, #0]
		next_fbuf[0] = x & 0xFF;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <doggo_demo+0xa0>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	193a      	adds	r2, r7, r4
 80006d0:	7812      	ldrb	r2, [r2, #0]
 80006d2:	701a      	strb	r2, [r3, #0]
		next_fbuf[1] = (x & 0xFF00) >> 8;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <doggo_demo+0xa0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]

		next_fbuf[2] = y & 0xFF;
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <doggo_demo+0xa0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3302      	adds	r3, #2
 80006e4:	197a      	adds	r2, r7, r5
 80006e6:	7812      	ldrb	r2, [r2, #0]
 80006e8:	701a      	strb	r2, [r3, #0]
		next_fbuf[3] = (y & 0xFF00) >> 8;
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <doggo_demo+0xa0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	3303      	adds	r3, #3
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]


		next_fbuf[4] = z & 0xFF;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <doggo_demo+0xa0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	3304      	adds	r3, #4
 80006fa:	187a      	adds	r2, r7, r1
 80006fc:	7812      	ldrb	r2, [r2, #0]
 80006fe:	701a      	strb	r2, [r3, #0]
		next_fbuf[5] = (z & 0xFF00) >> 8;
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <doggo_demo+0xa0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3305      	adds	r3, #5
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
		update_fbuf(hi2c);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	0018      	movs	r0, r3
 800070e:	f000 f9db 	bl	8000ac8 <update_fbuf>
		x = get_x(hi2c);
 8000712:	e7bf      	b.n	8000694 <doggo_demo+0x20>
 8000714:	20000230 	.word	0x20000230

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f000 fe66 	bl	80013ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f81e 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f8e4 	bl	80008f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000728:	f000 f8b2 	bl	8000890 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800072c:	f000 f870 	bl	8000810 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  init_matrix(&hi2c1);
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <main+0x44>)
 8000732:	0018      	movs	r0, r3
 8000734:	f000 f94a 	bl	80009cc <init_matrix>
  init_accel(&hi2c1);
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <main+0x44>)
 800073a:	0018      	movs	r0, r3
 800073c:	f7ff fd70 	bl	8000220 <init_accel>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  doggo_demo(&hi2c1);
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <main+0x44>)
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff ff96 	bl	8000674 <doggo_demo>
	  conway_demo(&hi2c1);
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <main+0x44>)
 800074a:	0018      	movs	r0, r3
 800074c:	f7ff ff20 	bl	8000590 <conway_demo>
	  rotate_demo(&hi2c1);
 8000750:	4b02      	ldr	r3, [pc, #8]	; (800075c <main+0x44>)
 8000752:	0018      	movs	r0, r3
 8000754:	f000 fac2 	bl	8000cdc <rotate_demo>
	  doggo_demo(&hi2c1);
 8000758:	e7f2      	b.n	8000740 <main+0x28>
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	200001e4 	.word	0x200001e4

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b099      	sub	sp, #100	; 0x64
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	242c      	movs	r4, #44	; 0x2c
 8000768:	193b      	adds	r3, r7, r4
 800076a:	0018      	movs	r0, r3
 800076c:	2334      	movs	r3, #52	; 0x34
 800076e:	001a      	movs	r2, r3
 8000770:	2100      	movs	r1, #0
 8000772:	f003 f98a 	bl	8003a8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000776:	231c      	movs	r3, #28
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	0018      	movs	r0, r3
 800077c:	2310      	movs	r3, #16
 800077e:	001a      	movs	r2, r3
 8000780:	2100      	movs	r1, #0
 8000782:	f003 f982 	bl	8003a8a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	0018      	movs	r0, r3
 800078a:	2318      	movs	r3, #24
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f003 f97b 	bl	8003a8a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000794:	0021      	movs	r1, r4
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2202      	movs	r2, #2
 800079a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2201      	movs	r2, #1
 80007a0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2210      	movs	r2, #16
 80007a6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 fdc3 	bl	800233c <HAL_RCC_OscConfig>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007ba:	f000 f901 	bl	80009c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	211c      	movs	r1, #28
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2207      	movs	r2, #7
 80007c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2100      	movs	r1, #0
 80007dc:	0018      	movs	r0, r3
 80007de:	f002 f933 	bl	8002a48 <HAL_RCC_ClockConfig>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007e6:	f000 f8eb 	bl	80009c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2220      	movs	r2, #32
 80007ee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	0018      	movs	r0, r3
 80007fa:	f002 fac7 	bl	8002d8c <HAL_RCCEx_PeriphCLKConfig>
 80007fe:	1e03      	subs	r3, r0, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000802:	f000 f8dd 	bl	80009c0 <Error_Handler>
  }
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b019      	add	sp, #100	; 0x64
 800080c:	bd90      	pop	{r4, r7, pc}
	...

08000810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_I2C1_Init+0x74>)
 8000816:	4a1c      	ldr	r2, [pc, #112]	; (8000888 <MX_I2C1_Init+0x78>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_I2C1_Init+0x74>)
 800081c:	4a1b      	ldr	r2, [pc, #108]	; (800088c <MX_I2C1_Init+0x7c>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_I2C1_Init+0x74>)
 8000828:	2201      	movs	r2, #1
 800082a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_I2C1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_I2C1_Init+0x74>)
 800084c:	0018      	movs	r0, r3
 800084e:	f001 f853 	bl	80018f8 <HAL_I2C_Init>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000856:	f000 f8b3 	bl	80009c0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_I2C1_Init+0x74>)
 800085c:	2100      	movs	r1, #0
 800085e:	0018      	movs	r0, r3
 8000860:	f001 fcd4 	bl	800220c <HAL_I2CEx_ConfigAnalogFilter>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000868:	f000 f8aa 	bl	80009c0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <MX_I2C1_Init+0x74>)
 800086e:	2100      	movs	r1, #0
 8000870:	0018      	movs	r0, r3
 8000872:	f001 fd17 	bl	80022a4 <HAL_I2CEx_ConfigDigitalFilter>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800087a:	f000 f8a1 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200001e4 	.word	0x200001e4
 8000888:	40005400 	.word	0x40005400
 800088c:	2000090e 	.word	0x2000090e

08000890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 8000896:	4a15      	ldr	r2, [pc, #84]	; (80008ec <MX_USART2_UART_Init+0x5c>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 800089c:	2296      	movs	r2, #150	; 0x96
 800089e:	0212      	lsls	r2, r2, #8
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008d4:	0018      	movs	r0, r3
 80008d6:	f002 fd59 	bl	800338c <HAL_UART_Init>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 f86f 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000234 	.word	0x20000234
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b089      	sub	sp, #36	; 0x24
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	240c      	movs	r4, #12
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	0018      	movs	r0, r3
 80008fc:	2314      	movs	r3, #20
 80008fe:	001a      	movs	r2, r3
 8000900:	2100      	movs	r1, #0
 8000902:	f003 f8c2 	bl	8003a8a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <MX_GPIO_Init+0xa8>)
 8000908:	695a      	ldr	r2, [r3, #20]
 800090a:	4b23      	ldr	r3, [pc, #140]	; (8000998 <MX_GPIO_Init+0xa8>)
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	03c9      	lsls	r1, r1, #15
 8000910:	430a      	orrs	r2, r1
 8000912:	615a      	str	r2, [r3, #20]
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <MX_GPIO_Init+0xa8>)
 8000916:	695a      	ldr	r2, [r3, #20]
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	03db      	lsls	r3, r3, #15
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_GPIO_Init+0xa8>)
 8000924:	695a      	ldr	r2, [r3, #20]
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_GPIO_Init+0xa8>)
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	0289      	lsls	r1, r1, #10
 800092c:	430a      	orrs	r2, r1
 800092e:	615a      	str	r2, [r3, #20]
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_GPIO_Init+0xa8>)
 8000932:	695a      	ldr	r2, [r3, #20]
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	029b      	lsls	r3, r3, #10
 8000938:	4013      	ands	r3, r2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_GPIO_Init+0xa8>)
 8000940:	695a      	ldr	r2, [r3, #20]
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_GPIO_Init+0xa8>)
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	02c9      	lsls	r1, r1, #11
 8000948:	430a      	orrs	r2, r1
 800094a:	615a      	str	r2, [r3, #20]
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_GPIO_Init+0xa8>)
 800094e:	695a      	ldr	r2, [r3, #20]
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	02db      	lsls	r3, r3, #11
 8000954:	4013      	ands	r3, r2
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800095a:	2390      	movs	r3, #144	; 0x90
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	2200      	movs	r2, #0
 8000960:	2101      	movs	r1, #1
 8000962:	0018      	movs	r0, r3
 8000964:	f000 ffaa 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000968:	0021      	movs	r1, r4
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2201      	movs	r2, #1
 800096e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2201      	movs	r2, #1
 8000974:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	187a      	adds	r2, r7, r1
 8000984:	2390      	movs	r3, #144	; 0x90
 8000986:	05db      	lsls	r3, r3, #23
 8000988:	0011      	movs	r1, r2
 800098a:	0018      	movs	r0, r3
 800098c:	f000 fe2e 	bl	80015ec <HAL_GPIO_Init>

}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b009      	add	sp, #36	; 0x24
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d101      	bne.n	80009b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ae:	f000 fd31 	bl	8001414 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b002      	add	sp, #8
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	40012c00 	.word	0x40012c00

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <init_matrix>:
#include <string.h>

uint8_t* active_fbuf;
uint8_t* next_fbuf;

int init_matrix(I2C_HandleTypeDef* i2c){
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af02      	add	r7, sp, #8
 80009d2:	6078      	str	r0, [r7, #4]
	// Set up the next and active fbuf pointers
	active_fbuf = fbuf0;
 80009d4:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <init_matrix+0xe4>)
 80009d6:	4a37      	ldr	r2, [pc, #220]	; (8000ab4 <init_matrix+0xe8>)
 80009d8:	601a      	str	r2, [r3, #0]
	next_fbuf = fbuf1;
 80009da:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <init_matrix+0xec>)
 80009dc:	4a37      	ldr	r2, [pc, #220]	; (8000abc <init_matrix+0xf0>)
 80009de:	601a      	str	r2, [r3, #0]
	// Clear the frame buffers
	clear_fbuf();
 80009e0:	f000 f95a 	bl	8000c98 <clear_fbuf>
	// Turn on the GPIO that controls the shutdown register for the matrix
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80009e4:	2390      	movs	r3, #144	; 0x90
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	2201      	movs	r2, #1
 80009ea:	2101      	movs	r1, #1
 80009ec:	0018      	movs	r0, r3
 80009ee:	f000 ff65 	bl	80018bc <HAL_GPIO_WritePin>

	// Set command register to point to function register
	uint8_t dat[2] = {0xfd, 0x0b};
 80009f2:	210c      	movs	r1, #12
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	4a32      	ldr	r2, [pc, #200]	; (8000ac0 <init_matrix+0xf4>)
 80009f8:	8812      	ldrh	r2, [r2, #0]
 80009fa:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 80009fc:	000c      	movs	r4, r1
 80009fe:	187a      	adds	r2, r7, r1
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	2301      	movs	r3, #1
 8000a04:	425b      	negs	r3, r3
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2302      	movs	r3, #2
 8000a0a:	21e8      	movs	r1, #232	; 0xe8
 8000a0c:	f001 f80a 	bl	8001a24 <HAL_I2C_Master_Transmit>

	// Bring matrix out of shutdown, write a 1 to shutdown register
	dat[0] = 0xa;
 8000a10:	0021      	movs	r1, r4
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	220a      	movs	r2, #10
 8000a16:	701a      	strb	r2, [r3, #0]
	dat[1] = 0x1;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 8000a1e:	000c      	movs	r4, r1
 8000a20:	187a      	adds	r2, r7, r1
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	2301      	movs	r3, #1
 8000a26:	425b      	negs	r3, r3
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	21e8      	movs	r1, #232	; 0xe8
 8000a2e:	f000 fff9 	bl	8001a24 <HAL_I2C_Master_Transmit>

	// Set command register to point to frame 1 register
	dat[0] = 0xfd;
 8000a32:	0021      	movs	r1, r4
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	22fd      	movs	r2, #253	; 0xfd
 8000a38:	701a      	strb	r2, [r3, #0]
	dat[1] = 0x00;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 8000a40:	187a      	adds	r2, r7, r1
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	2301      	movs	r3, #1
 8000a46:	425b      	negs	r3, r3
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	21e8      	movs	r1, #232	; 0xe8
 8000a4e:	f000 ffe9 	bl	8001a24 <HAL_I2C_Master_Transmit>

	// Set all the LEDs to on
	for(uint8_t i = 0; i < 0x12; i++){
 8000a52:	230f      	movs	r3, #15
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
 8000a5a:	e016      	b.n	8000a8a <init_matrix+0xbe>
	  dat[0] = i;
 8000a5c:	210c      	movs	r1, #12
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	240f      	movs	r4, #15
 8000a62:	193a      	adds	r2, r7, r4
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	701a      	strb	r2, [r3, #0]
	  dat[1] = 0xFF;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	22ff      	movs	r2, #255	; 0xff
 8000a6c:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, &dat, 2, HAL_MAX_DELAY);
 8000a6e:	187a      	adds	r2, r7, r1
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	2301      	movs	r3, #1
 8000a74:	425b      	negs	r3, r3
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2302      	movs	r3, #2
 8000a7a:	21e8      	movs	r1, #232	; 0xe8
 8000a7c:	f000 ffd2 	bl	8001a24 <HAL_I2C_Master_Transmit>
	for(uint8_t i = 0; i < 0x12; i++){
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	3201      	adds	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b11      	cmp	r3, #17
 8000a92:	d9e3      	bls.n	8000a5c <init_matrix+0x90>
	}
	// Initialize the LEDs with the cleared frame buffer
	HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, send_fbuf, 145, HAL_MAX_DELAY);
 8000a94:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <init_matrix+0xf8>)
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	425b      	negs	r3, r3
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2391      	movs	r3, #145	; 0x91
 8000aa0:	21e8      	movs	r1, #232	; 0xe8
 8000aa2:	f000 ffbf 	bl	8001a24 <HAL_I2C_Master_Transmit>
	// Set the I2C as ready
	return MTX_OK;
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b005      	add	sp, #20
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	20000148 	.word	0x20000148
 8000ab4:	200000b4 	.word	0x200000b4
 8000ab8:	20000230 	.word	0x20000230
 8000abc:	20000024 	.word	0x20000024
 8000ac0:	08003ab8 	.word	0x08003ab8
 8000ac4:	2000014c 	.word	0x2000014c

08000ac8 <update_fbuf>:

int update_fbuf(I2C_HandleTypeDef* i2c){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	6078      	str	r0, [r7, #4]
	// Transform the fbuf so it gets displayed properly
	transform_fbuf();
 8000ad0:	f000 f826 	bl	8000b20 <transform_fbuf>
	// Send the new fbuf over to the matrix
	HAL_I2C_Master_Transmit(i2c, MTX_ADDR_WR, send_fbuf, 145, HAL_MAX_DELAY);
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <update_fbuf+0x4c>)
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	425b      	negs	r3, r3
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2391      	movs	r3, #145	; 0x91
 8000ae0:	21e8      	movs	r1, #232	; 0xe8
 8000ae2:	f000 ff9f 	bl	8001a24 <HAL_I2C_Master_Transmit>
	// Swap the next and active fbuf pointers
	uint8_t *tmp = next_fbuf;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <update_fbuf+0x50>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	60fb      	str	r3, [r7, #12]
	next_fbuf = active_fbuf;
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <update_fbuf+0x54>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <update_fbuf+0x50>)
 8000af2:	601a      	str	r2, [r3, #0]
	active_fbuf = tmp;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <update_fbuf+0x54>)
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	601a      	str	r2, [r3, #0]
	memset(next_fbuf, 0, 144);
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <update_fbuf+0x50>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2290      	movs	r2, #144	; 0x90
 8000b00:	2100      	movs	r1, #0
 8000b02:	0018      	movs	r0, r3
 8000b04:	f002 ffc1 	bl	8003a8a <memset>
	return MTX_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	2000014c 	.word	0x2000014c
 8000b18:	20000230 	.word	0x20000230
 8000b1c:	20000148 	.word	0x20000148

08000b20 <transform_fbuf>:

int transform_fbuf(){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	// Move the data in the fbuf around to handle the LED layout
	memcpy(send_fbuf + 1,   next_fbuf + 0 *  MTX_WIDTH, 8);
 8000b24:	4849      	ldr	r0, [pc, #292]	; (8000c4c <transform_fbuf+0x12c>)
 8000b26:	4b4a      	ldr	r3, [pc, #296]	; (8000c50 <transform_fbuf+0x130>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	f002 ffa3 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 17,  next_fbuf + 1 *  MTX_WIDTH, 8);
 8000b32:	4848      	ldr	r0, [pc, #288]	; (8000c54 <transform_fbuf+0x134>)
 8000b34:	4b46      	ldr	r3, [pc, #280]	; (8000c50 <transform_fbuf+0x130>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3308      	adds	r3, #8
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	f002 ff9b 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 33,  next_fbuf + 2 *  MTX_WIDTH, 8);
 8000b42:	4845      	ldr	r0, [pc, #276]	; (8000c58 <transform_fbuf+0x138>)
 8000b44:	4b42      	ldr	r3, [pc, #264]	; (8000c50 <transform_fbuf+0x130>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3310      	adds	r3, #16
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	f002 ff93 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 49,  next_fbuf + 3 *  MTX_WIDTH, 8);
 8000b52:	4842      	ldr	r0, [pc, #264]	; (8000c5c <transform_fbuf+0x13c>)
 8000b54:	4b3e      	ldr	r3, [pc, #248]	; (8000c50 <transform_fbuf+0x130>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3318      	adds	r3, #24
 8000b5a:	2208      	movs	r2, #8
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	f002 ff8b 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 65,  next_fbuf + 4 *  MTX_WIDTH, 8);
 8000b62:	483f      	ldr	r0, [pc, #252]	; (8000c60 <transform_fbuf+0x140>)
 8000b64:	4b3a      	ldr	r3, [pc, #232]	; (8000c50 <transform_fbuf+0x130>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3320      	adds	r3, #32
 8000b6a:	2208      	movs	r2, #8
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	f002 ff83 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 81,  next_fbuf + 5 *  MTX_WIDTH, 8);
 8000b72:	483c      	ldr	r0, [pc, #240]	; (8000c64 <transform_fbuf+0x144>)
 8000b74:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <transform_fbuf+0x130>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3328      	adds	r3, #40	; 0x28
 8000b7a:	2208      	movs	r2, #8
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	f002 ff7b 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 97,  next_fbuf + 6 *  MTX_WIDTH, 8);
 8000b82:	4839      	ldr	r0, [pc, #228]	; (8000c68 <transform_fbuf+0x148>)
 8000b84:	4b32      	ldr	r3, [pc, #200]	; (8000c50 <transform_fbuf+0x130>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3330      	adds	r3, #48	; 0x30
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	f002 ff73 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 113, next_fbuf + 7 *  MTX_WIDTH, 8);
 8000b92:	4836      	ldr	r0, [pc, #216]	; (8000c6c <transform_fbuf+0x14c>)
 8000b94:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <transform_fbuf+0x130>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3338      	adds	r3, #56	; 0x38
 8000b9a:	2208      	movs	r2, #8
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	f002 ff6b 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 129, next_fbuf + 8 *  MTX_WIDTH, 8);
 8000ba2:	4833      	ldr	r0, [pc, #204]	; (8000c70 <transform_fbuf+0x150>)
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <transform_fbuf+0x130>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3340      	adds	r3, #64	; 0x40
 8000baa:	2208      	movs	r2, #8
 8000bac:	0019      	movs	r1, r3
 8000bae:	f002 ff63 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 9,   next_fbuf + 9 *  MTX_WIDTH, 8);
 8000bb2:	4830      	ldr	r0, [pc, #192]	; (8000c74 <transform_fbuf+0x154>)
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <transform_fbuf+0x130>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3348      	adds	r3, #72	; 0x48
 8000bba:	2208      	movs	r2, #8
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	f002 ff5b 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 25,  next_fbuf + 10 * MTX_WIDTH, 8);
 8000bc2:	482d      	ldr	r0, [pc, #180]	; (8000c78 <transform_fbuf+0x158>)
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <transform_fbuf+0x130>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3350      	adds	r3, #80	; 0x50
 8000bca:	2208      	movs	r2, #8
 8000bcc:	0019      	movs	r1, r3
 8000bce:	f002 ff53 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 41,  next_fbuf + 11 * MTX_WIDTH, 8);
 8000bd2:	482a      	ldr	r0, [pc, #168]	; (8000c7c <transform_fbuf+0x15c>)
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <transform_fbuf+0x130>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3358      	adds	r3, #88	; 0x58
 8000bda:	2208      	movs	r2, #8
 8000bdc:	0019      	movs	r1, r3
 8000bde:	f002 ff4b 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 57,  next_fbuf + 12 * MTX_WIDTH, 8);
 8000be2:	4827      	ldr	r0, [pc, #156]	; (8000c80 <transform_fbuf+0x160>)
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <transform_fbuf+0x130>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3360      	adds	r3, #96	; 0x60
 8000bea:	2208      	movs	r2, #8
 8000bec:	0019      	movs	r1, r3
 8000bee:	f002 ff43 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 73,  next_fbuf + 13 * MTX_WIDTH, 8);
 8000bf2:	4824      	ldr	r0, [pc, #144]	; (8000c84 <transform_fbuf+0x164>)
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <transform_fbuf+0x130>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3368      	adds	r3, #104	; 0x68
 8000bfa:	2208      	movs	r2, #8
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	f002 ff3b 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 89,  next_fbuf + 14 * MTX_WIDTH, 8);
 8000c02:	4821      	ldr	r0, [pc, #132]	; (8000c88 <transform_fbuf+0x168>)
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <transform_fbuf+0x130>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3370      	adds	r3, #112	; 0x70
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	f002 ff33 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 105, next_fbuf + 15 * MTX_WIDTH, 8);
 8000c12:	481e      	ldr	r0, [pc, #120]	; (8000c8c <transform_fbuf+0x16c>)
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <transform_fbuf+0x130>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3378      	adds	r3, #120	; 0x78
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	0019      	movs	r1, r3
 8000c1e:	f002 ff2b 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 121, next_fbuf + 16 * MTX_WIDTH, 8);
 8000c22:	481b      	ldr	r0, [pc, #108]	; (8000c90 <transform_fbuf+0x170>)
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <transform_fbuf+0x130>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3380      	adds	r3, #128	; 0x80
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	f002 ff23 	bl	8003a78 <memcpy>
	memcpy(send_fbuf + 137, next_fbuf + 17 * MTX_WIDTH, 8);
 8000c32:	4818      	ldr	r0, [pc, #96]	; (8000c94 <transform_fbuf+0x174>)
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <transform_fbuf+0x130>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3388      	adds	r3, #136	; 0x88
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	f002 ff1b 	bl	8003a78 <memcpy>
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	2000014d 	.word	0x2000014d
 8000c50:	20000230 	.word	0x20000230
 8000c54:	2000015d 	.word	0x2000015d
 8000c58:	2000016d 	.word	0x2000016d
 8000c5c:	2000017d 	.word	0x2000017d
 8000c60:	2000018d 	.word	0x2000018d
 8000c64:	2000019d 	.word	0x2000019d
 8000c68:	200001ad 	.word	0x200001ad
 8000c6c:	200001bd 	.word	0x200001bd
 8000c70:	200001cd 	.word	0x200001cd
 8000c74:	20000155 	.word	0x20000155
 8000c78:	20000165 	.word	0x20000165
 8000c7c:	20000175 	.word	0x20000175
 8000c80:	20000185 	.word	0x20000185
 8000c84:	20000195 	.word	0x20000195
 8000c88:	200001a5 	.word	0x200001a5
 8000c8c:	200001b5 	.word	0x200001b5
 8000c90:	200001c5 	.word	0x200001c5
 8000c94:	200001d5 	.word	0x200001d5

08000c98 <clear_fbuf>:

int clear_fbuf(){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	// Clear the frame buffers that the matrix uses
	memset(fbuf0, 0, 144);
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <clear_fbuf+0x38>)
 8000c9e:	2290      	movs	r2, #144	; 0x90
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f002 fef1 	bl	8003a8a <memset>
	memset(fbuf1, 0, 144);
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <clear_fbuf+0x3c>)
 8000caa:	2290      	movs	r2, #144	; 0x90
 8000cac:	2100      	movs	r1, #0
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f002 feeb 	bl	8003a8a <memset>
	memset(send_fbuf, 0, 145);
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <clear_fbuf+0x40>)
 8000cb6:	2291      	movs	r2, #145	; 0x91
 8000cb8:	2100      	movs	r1, #0
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f002 fee5 	bl	8003a8a <memset>
	// Set the first address of the frame buffer to the address of the first
	// PWM register. This makes transmitting easier
	send_fbuf[0] = MTX_FBUF_ADDR;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <clear_fbuf+0x40>)
 8000cc2:	2224      	movs	r2, #36	; 0x24
 8000cc4:	701a      	strb	r2, [r3, #0]
	return MTX_OK;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	200000b4 	.word	0x200000b4
 8000cd4:	20000024 	.word	0x20000024
 8000cd8:	2000014c 	.word	0x2000014c

08000cdc <rotate_demo>:
#include "rotate.h"



void rotate_demo(I2C_HandleTypeDef* hi2c){
 8000cdc:	b5b0      	push	{r4, r5, r7, lr}
 8000cde:	4cba      	ldr	r4, [pc, #744]	; (8000fc8 <rotate_demo+0x2ec>)
 8000ce0:	44a5      	add	sp, r4
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
	const uint8_t cube_bmp0[81] = {
 8000ce6:	24da      	movs	r4, #218	; 0xda
 8000ce8:	0064      	lsls	r4, r4, #1
 8000cea:	193a      	adds	r2, r7, r4
 8000cec:	4bb7      	ldr	r3, [pc, #732]	; (8000fcc <rotate_demo+0x2f0>)
 8000cee:	0010      	movs	r0, r2
 8000cf0:	0019      	movs	r1, r3
 8000cf2:	2351      	movs	r3, #81	; 0x51
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	f002 febf 	bl	8003a78 <memcpy>
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
			0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	const uint8_t cube_bmp1[81] = {
 8000cfa:	23b0      	movs	r3, #176	; 0xb0
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	18fa      	adds	r2, r7, r3
 8000d00:	4bb3      	ldr	r3, [pc, #716]	; (8000fd0 <rotate_demo+0x2f4>)
 8000d02:	0010      	movs	r0, r2
 8000d04:	0019      	movs	r1, r3
 8000d06:	2351      	movs	r3, #81	; 0x51
 8000d08:	001a      	movs	r2, r3
 8000d0a:	f002 feb5 	bl	8003a78 <memcpy>
			0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	const uint8_t cube_bmp2[81] = {
 8000d0e:	2386      	movs	r3, #134	; 0x86
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	18fa      	adds	r2, r7, r3
 8000d14:	4baf      	ldr	r3, [pc, #700]	; (8000fd4 <rotate_demo+0x2f8>)
 8000d16:	0010      	movs	r0, r2
 8000d18:	0019      	movs	r1, r3
 8000d1a:	2351      	movs	r3, #81	; 0x51
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	f002 feab 	bl	8003a78 <memcpy>
			0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	const uint8_t cube_bmp3[81] = {
 8000d22:	4bad      	ldr	r3, [pc, #692]	; (8000fd8 <rotate_demo+0x2fc>)
 8000d24:	2282      	movs	r2, #130	; 0x82
 8000d26:	0092      	lsls	r2, r2, #2
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44bc      	add	ip, r7
 8000d2c:	4463      	add	r3, ip
 8000d2e:	0018      	movs	r0, r3
 8000d30:	2351      	movs	r3, #81	; 0x51
 8000d32:	001a      	movs	r2, r3
 8000d34:	2100      	movs	r1, #0
 8000d36:	f002 fea8 	bl	8003a8a <memset>
 8000d3a:	4ba7      	ldr	r3, [pc, #668]	; (8000fd8 <rotate_demo+0x2fc>)
 8000d3c:	2282      	movs	r2, #130	; 0x82
 8000d3e:	0092      	lsls	r2, r2, #2
 8000d40:	4694      	mov	ip, r2
 8000d42:	44bc      	add	ip, r7
 8000d44:	4463      	add	r3, ip
 8000d46:	22ff      	movs	r2, #255	; 0xff
 8000d48:	711a      	strb	r2, [r3, #4]
 8000d4a:	4ba3      	ldr	r3, [pc, #652]	; (8000fd8 <rotate_demo+0x2fc>)
 8000d4c:	2282      	movs	r2, #130	; 0x82
 8000d4e:	0092      	lsls	r2, r2, #2
 8000d50:	4694      	mov	ip, r2
 8000d52:	44bc      	add	ip, r7
 8000d54:	4463      	add	r3, ip
 8000d56:	22ff      	movs	r2, #255	; 0xff
 8000d58:	731a      	strb	r2, [r3, #12]
 8000d5a:	4b9f      	ldr	r3, [pc, #636]	; (8000fd8 <rotate_demo+0x2fc>)
 8000d5c:	2282      	movs	r2, #130	; 0x82
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	4694      	mov	ip, r2
 8000d62:	44bc      	add	ip, r7
 8000d64:	4463      	add	r3, ip
 8000d66:	22ff      	movs	r2, #255	; 0xff
 8000d68:	739a      	strb	r2, [r3, #14]
 8000d6a:	4b9b      	ldr	r3, [pc, #620]	; (8000fd8 <rotate_demo+0x2fc>)
 8000d6c:	2282      	movs	r2, #130	; 0x82
 8000d6e:	0092      	lsls	r2, r2, #2
 8000d70:	4694      	mov	ip, r2
 8000d72:	44bc      	add	ip, r7
 8000d74:	4463      	add	r3, ip
 8000d76:	22ff      	movs	r2, #255	; 0xff
 8000d78:	751a      	strb	r2, [r3, #20]
 8000d7a:	4b97      	ldr	r3, [pc, #604]	; (8000fd8 <rotate_demo+0x2fc>)
 8000d7c:	2282      	movs	r2, #130	; 0x82
 8000d7e:	0092      	lsls	r2, r2, #2
 8000d80:	4694      	mov	ip, r2
 8000d82:	44bc      	add	ip, r7
 8000d84:	4463      	add	r3, ip
 8000d86:	22ff      	movs	r2, #255	; 0xff
 8000d88:	761a      	strb	r2, [r3, #24]
 8000d8a:	4b93      	ldr	r3, [pc, #588]	; (8000fd8 <rotate_demo+0x2fc>)
 8000d8c:	2282      	movs	r2, #130	; 0x82
 8000d8e:	0092      	lsls	r2, r2, #2
 8000d90:	4694      	mov	ip, r2
 8000d92:	44bc      	add	ip, r7
 8000d94:	4463      	add	r3, ip
 8000d96:	22ff      	movs	r2, #255	; 0xff
 8000d98:	771a      	strb	r2, [r3, #28]
 8000d9a:	4b8f      	ldr	r3, [pc, #572]	; (8000fd8 <rotate_demo+0x2fc>)
 8000d9c:	2282      	movs	r2, #130	; 0x82
 8000d9e:	0092      	lsls	r2, r2, #2
 8000da0:	4694      	mov	ip, r2
 8000da2:	44bc      	add	ip, r7
 8000da4:	4463      	add	r3, ip
 8000da6:	2222      	movs	r2, #34	; 0x22
 8000da8:	21ff      	movs	r1, #255	; 0xff
 8000daa:	5499      	strb	r1, [r3, r2]
 8000dac:	4b8a      	ldr	r3, [pc, #552]	; (8000fd8 <rotate_demo+0x2fc>)
 8000dae:	2282      	movs	r2, #130	; 0x82
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	4694      	mov	ip, r2
 8000db4:	44bc      	add	ip, r7
 8000db6:	4463      	add	r3, ip
 8000db8:	2224      	movs	r2, #36	; 0x24
 8000dba:	21ff      	movs	r1, #255	; 0xff
 8000dbc:	5499      	strb	r1, [r3, r2]
 8000dbe:	4b86      	ldr	r3, [pc, #536]	; (8000fd8 <rotate_demo+0x2fc>)
 8000dc0:	2282      	movs	r2, #130	; 0x82
 8000dc2:	0092      	lsls	r2, r2, #2
 8000dc4:	4694      	mov	ip, r2
 8000dc6:	44bc      	add	ip, r7
 8000dc8:	4463      	add	r3, ip
 8000dca:	222c      	movs	r2, #44	; 0x2c
 8000dcc:	21ff      	movs	r1, #255	; 0xff
 8000dce:	5499      	strb	r1, [r3, r2]
 8000dd0:	4b81      	ldr	r3, [pc, #516]	; (8000fd8 <rotate_demo+0x2fc>)
 8000dd2:	2282      	movs	r2, #130	; 0x82
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	4694      	mov	ip, r2
 8000dd8:	44bc      	add	ip, r7
 8000dda:	4463      	add	r3, ip
 8000ddc:	222e      	movs	r2, #46	; 0x2e
 8000dde:	21ff      	movs	r1, #255	; 0xff
 8000de0:	5499      	strb	r1, [r3, r2]
 8000de2:	4b7d      	ldr	r3, [pc, #500]	; (8000fd8 <rotate_demo+0x2fc>)
 8000de4:	2282      	movs	r2, #130	; 0x82
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	4694      	mov	ip, r2
 8000dea:	44bc      	add	ip, r7
 8000dec:	4463      	add	r3, ip
 8000dee:	2234      	movs	r2, #52	; 0x34
 8000df0:	21ff      	movs	r1, #255	; 0xff
 8000df2:	5499      	strb	r1, [r3, r2]
 8000df4:	4b78      	ldr	r3, [pc, #480]	; (8000fd8 <rotate_demo+0x2fc>)
 8000df6:	2282      	movs	r2, #130	; 0x82
 8000df8:	0092      	lsls	r2, r2, #2
 8000dfa:	4694      	mov	ip, r2
 8000dfc:	44bc      	add	ip, r7
 8000dfe:	4463      	add	r3, ip
 8000e00:	2238      	movs	r2, #56	; 0x38
 8000e02:	21ff      	movs	r1, #255	; 0xff
 8000e04:	5499      	strb	r1, [r3, r2]
 8000e06:	4b74      	ldr	r3, [pc, #464]	; (8000fd8 <rotate_demo+0x2fc>)
 8000e08:	2282      	movs	r2, #130	; 0x82
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	4694      	mov	ip, r2
 8000e0e:	44bc      	add	ip, r7
 8000e10:	4463      	add	r3, ip
 8000e12:	223c      	movs	r2, #60	; 0x3c
 8000e14:	21ff      	movs	r1, #255	; 0xff
 8000e16:	5499      	strb	r1, [r3, r2]
 8000e18:	4b6f      	ldr	r3, [pc, #444]	; (8000fd8 <rotate_demo+0x2fc>)
 8000e1a:	2282      	movs	r2, #130	; 0x82
 8000e1c:	0092      	lsls	r2, r2, #2
 8000e1e:	4694      	mov	ip, r2
 8000e20:	44bc      	add	ip, r7
 8000e22:	4463      	add	r3, ip
 8000e24:	2242      	movs	r2, #66	; 0x42
 8000e26:	21ff      	movs	r1, #255	; 0xff
 8000e28:	5499      	strb	r1, [r3, r2]
 8000e2a:	4b6b      	ldr	r3, [pc, #428]	; (8000fd8 <rotate_demo+0x2fc>)
 8000e2c:	2282      	movs	r2, #130	; 0x82
 8000e2e:	0092      	lsls	r2, r2, #2
 8000e30:	4694      	mov	ip, r2
 8000e32:	44bc      	add	ip, r7
 8000e34:	4463      	add	r3, ip
 8000e36:	2244      	movs	r2, #68	; 0x44
 8000e38:	21ff      	movs	r1, #255	; 0xff
 8000e3a:	5499      	strb	r1, [r3, r2]
 8000e3c:	4b66      	ldr	r3, [pc, #408]	; (8000fd8 <rotate_demo+0x2fc>)
 8000e3e:	2282      	movs	r2, #130	; 0x82
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	4694      	mov	ip, r2
 8000e44:	44bc      	add	ip, r7
 8000e46:	4463      	add	r3, ip
 8000e48:	224c      	movs	r2, #76	; 0x4c
 8000e4a:	21ff      	movs	r1, #255	; 0xff
 8000e4c:	5499      	strb	r1, [r3, r2]
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00
	};
	const uint8_t cube_bmp4[81] = {
 8000e4e:	4b63      	ldr	r3, [pc, #396]	; (8000fdc <rotate_demo+0x300>)
 8000e50:	2582      	movs	r5, #130	; 0x82
 8000e52:	00ad      	lsls	r5, r5, #2
 8000e54:	197a      	adds	r2, r7, r5
 8000e56:	18d2      	adds	r2, r2, r3
 8000e58:	4b61      	ldr	r3, [pc, #388]	; (8000fe0 <rotate_demo+0x304>)
 8000e5a:	0010      	movs	r0, r2
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	2351      	movs	r3, #81	; 0x51
 8000e60:	001a      	movs	r2, r3
 8000e62:	f002 fe09 	bl	8003a78 <memcpy>
			0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	const uint8_t cube_bmp5[81] = {
 8000e66:	4b5f      	ldr	r3, [pc, #380]	; (8000fe4 <rotate_demo+0x308>)
 8000e68:	197a      	adds	r2, r7, r5
 8000e6a:	18d2      	adds	r2, r2, r3
 8000e6c:	4b5e      	ldr	r3, [pc, #376]	; (8000fe8 <rotate_demo+0x30c>)
 8000e6e:	0010      	movs	r0, r2
 8000e70:	0019      	movs	r1, r3
 8000e72:	2351      	movs	r3, #81	; 0x51
 8000e74:	001a      	movs	r2, r3
 8000e76:	f002 fdff 	bl	8003a78 <memcpy>
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	struct img cube;
	cube.bitmap = cube_bmp0;
 8000e7a:	4b5c      	ldr	r3, [pc, #368]	; (8000fec <rotate_demo+0x310>)
 8000e7c:	2282      	movs	r2, #130	; 0x82
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	4694      	mov	ip, r2
 8000e82:	44bc      	add	ip, r7
 8000e84:	4463      	add	r3, ip
 8000e86:	193a      	adds	r2, r7, r4
 8000e88:	601a      	str	r2, [r3, #0]
	cube.width = 9;
 8000e8a:	4b58      	ldr	r3, [pc, #352]	; (8000fec <rotate_demo+0x310>)
 8000e8c:	2282      	movs	r2, #130	; 0x82
 8000e8e:	0092      	lsls	r2, r2, #2
 8000e90:	4694      	mov	ip, r2
 8000e92:	44bc      	add	ip, r7
 8000e94:	4463      	add	r3, ip
 8000e96:	2209      	movs	r2, #9
 8000e98:	711a      	strb	r2, [r3, #4]
	cube.height = 9;
 8000e9a:	4b54      	ldr	r3, [pc, #336]	; (8000fec <rotate_demo+0x310>)
 8000e9c:	2282      	movs	r2, #130	; 0x82
 8000e9e:	0092      	lsls	r2, r2, #2
 8000ea0:	4694      	mov	ip, r2
 8000ea2:	44bc      	add	ip, r7
 8000ea4:	4463      	add	r3, ip
 8000ea6:	2209      	movs	r2, #9
 8000ea8:	715a      	strb	r2, [r3, #5]
	cube.x = 0;
 8000eaa:	4b50      	ldr	r3, [pc, #320]	; (8000fec <rotate_demo+0x310>)
 8000eac:	2282      	movs	r2, #130	; 0x82
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	4694      	mov	ip, r2
 8000eb2:	44bc      	add	ip, r7
 8000eb4:	4463      	add	r3, ip
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	719a      	strb	r2, [r3, #6]
	cube.y = 3;
 8000eba:	4b4c      	ldr	r3, [pc, #304]	; (8000fec <rotate_demo+0x310>)
 8000ebc:	2282      	movs	r2, #130	; 0x82
 8000ebe:	0092      	lsls	r2, r2, #2
 8000ec0:	4694      	mov	ip, r2
 8000ec2:	44bc      	add	ip, r7
 8000ec4:	4463      	add	r3, ip
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	71da      	strb	r2, [r3, #7]

	stop_rotate = 0;
 8000eca:	4b49      	ldr	r3, [pc, #292]	; (8000ff0 <rotate_demo+0x314>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
	while(!stop_rotate){
 8000ed0:	e06f      	b.n	8000fb2 <rotate_demo+0x2d6>
		cube.bitmap = cube_bmp0;
 8000ed2:	4b46      	ldr	r3, [pc, #280]	; (8000fec <rotate_demo+0x310>)
 8000ed4:	2282      	movs	r2, #130	; 0x82
 8000ed6:	0092      	lsls	r2, r2, #2
 8000ed8:	4694      	mov	ip, r2
 8000eda:	44bc      	add	ip, r7
 8000edc:	4463      	add	r3, ip
 8000ede:	22da      	movs	r2, #218	; 0xda
 8000ee0:	0052      	lsls	r2, r2, #1
 8000ee2:	18ba      	adds	r2, r7, r2
 8000ee4:	601a      	str	r2, [r3, #0]
		draw_image(&cube, hi2c);
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	2408      	movs	r4, #8
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	0011      	movs	r1, r2
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f000 f880 	bl	8000ff4 <draw_image>
		HAL_Delay(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f000 faa9 	bl	800144c <HAL_Delay>
		cube.bitmap = cube_bmp1;
 8000efa:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <rotate_demo+0x310>)
 8000efc:	2282      	movs	r2, #130	; 0x82
 8000efe:	0092      	lsls	r2, r2, #2
 8000f00:	4694      	mov	ip, r2
 8000f02:	44bc      	add	ip, r7
 8000f04:	4463      	add	r3, ip
 8000f06:	22b0      	movs	r2, #176	; 0xb0
 8000f08:	0052      	lsls	r2, r2, #1
 8000f0a:	18ba      	adds	r2, r7, r2
 8000f0c:	601a      	str	r2, [r3, #0]
		draw_image(&cube, hi2c);
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	0011      	movs	r1, r2
 8000f14:	0018      	movs	r0, r3
 8000f16:	f000 f86d 	bl	8000ff4 <draw_image>
		HAL_Delay(100);
 8000f1a:	2064      	movs	r0, #100	; 0x64
 8000f1c:	f000 fa96 	bl	800144c <HAL_Delay>
		cube.bitmap = cube_bmp2;
 8000f20:	4b32      	ldr	r3, [pc, #200]	; (8000fec <rotate_demo+0x310>)
 8000f22:	2282      	movs	r2, #130	; 0x82
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	4694      	mov	ip, r2
 8000f28:	44bc      	add	ip, r7
 8000f2a:	4463      	add	r3, ip
 8000f2c:	2286      	movs	r2, #134	; 0x86
 8000f2e:	0052      	lsls	r2, r2, #1
 8000f30:	18ba      	adds	r2, r7, r2
 8000f32:	601a      	str	r2, [r3, #0]
		draw_image(&cube, hi2c);
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	0011      	movs	r1, r2
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 f85a 	bl	8000ff4 <draw_image>
		HAL_Delay(100);
 8000f40:	2064      	movs	r0, #100	; 0x64
 8000f42:	f000 fa83 	bl	800144c <HAL_Delay>
		cube.bitmap = cube_bmp3;
 8000f46:	4b29      	ldr	r3, [pc, #164]	; (8000fec <rotate_demo+0x310>)
 8000f48:	2282      	movs	r2, #130	; 0x82
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	4694      	mov	ip, r2
 8000f4e:	44bc      	add	ip, r7
 8000f50:	4463      	add	r3, ip
 8000f52:	22b8      	movs	r2, #184	; 0xb8
 8000f54:	18ba      	adds	r2, r7, r2
 8000f56:	601a      	str	r2, [r3, #0]
		draw_image(&cube, hi2c);
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 f848 	bl	8000ff4 <draw_image>
		HAL_Delay(100);
 8000f64:	2064      	movs	r0, #100	; 0x64
 8000f66:	f000 fa71 	bl	800144c <HAL_Delay>
		cube.bitmap = cube_bmp4;
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <rotate_demo+0x310>)
 8000f6c:	2282      	movs	r2, #130	; 0x82
 8000f6e:	0092      	lsls	r2, r2, #2
 8000f70:	4694      	mov	ip, r2
 8000f72:	44bc      	add	ip, r7
 8000f74:	4463      	add	r3, ip
 8000f76:	2264      	movs	r2, #100	; 0x64
 8000f78:	18ba      	adds	r2, r7, r2
 8000f7a:	601a      	str	r2, [r3, #0]
		draw_image(&cube, hi2c);
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	0011      	movs	r1, r2
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 f836 	bl	8000ff4 <draw_image>
		HAL_Delay(100);
 8000f88:	2064      	movs	r0, #100	; 0x64
 8000f8a:	f000 fa5f 	bl	800144c <HAL_Delay>
		cube.bitmap = cube_bmp5;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <rotate_demo+0x310>)
 8000f90:	2282      	movs	r2, #130	; 0x82
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	4694      	mov	ip, r2
 8000f96:	44bc      	add	ip, r7
 8000f98:	4463      	add	r3, ip
 8000f9a:	2210      	movs	r2, #16
 8000f9c:	18ba      	adds	r2, r7, r2
 8000f9e:	601a      	str	r2, [r3, #0]
		draw_image(&cube, hi2c);
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	0011      	movs	r1, r2
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 f824 	bl	8000ff4 <draw_image>
		HAL_Delay(100);
 8000fac:	2064      	movs	r0, #100	; 0x64
 8000fae:	f000 fa4d 	bl	800144c <HAL_Delay>
	while(!stop_rotate){
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <rotate_demo+0x314>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d08b      	beq.n	8000ed2 <rotate_demo+0x1f6>
	}
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	2382      	movs	r3, #130	; 0x82
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	449d      	add	sp, r3
 8000fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	fffffdf8 	.word	0xfffffdf8
 8000fcc:	08003abc 	.word	0x08003abc
 8000fd0:	08003b10 	.word	0x08003b10
 8000fd4:	08003b64 	.word	0x08003b64
 8000fd8:	fffffeb0 	.word	0xfffffeb0
 8000fdc:	fffffe5c 	.word	0xfffffe5c
 8000fe0:	08003bb8 	.word	0x08003bb8
 8000fe4:	fffffe08 	.word	0xfffffe08
 8000fe8:	08003c0c 	.word	0x08003c0c
 8000fec:	fffffe00 	.word	0xfffffe00
 8000ff0:	200001e0 	.word	0x200001e0

08000ff4 <draw_image>:

void draw_image(struct img* image, I2C_HandleTypeDef* hi2c){
 8000ff4:	b5b0      	push	{r4, r5, r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
	for(uint8_t y = 0; y < image->height; y++){
 8000ffe:	230f      	movs	r3, #15
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e036      	b.n	8001076 <draw_image+0x82>
		for(uint8_t x = 0; x < image->width; x++){
 8001008:	230e      	movs	r3, #14
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e024      	b.n	800105c <draw_image+0x68>
			next_fbuf[((y + image->y) * MTX_WIDTH) + (x + image->x)] =  image->bitmap[(y * image->width) + x];
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	200f      	movs	r0, #15
 8001018:	183a      	adds	r2, r7, r0
 800101a:	7812      	ldrb	r2, [r2, #0]
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	7909      	ldrb	r1, [r1, #4]
 8001020:	4351      	muls	r1, r2
 8001022:	240e      	movs	r4, #14
 8001024:	193a      	adds	r2, r7, r4
 8001026:	7812      	ldrb	r2, [r2, #0]
 8001028:	188a      	adds	r2, r1, r2
 800102a:	189a      	adds	r2, r3, r2
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <draw_image+0xa0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	1839      	adds	r1, r7, r0
 8001032:	7809      	ldrb	r1, [r1, #0]
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	79c0      	ldrb	r0, [r0, #7]
 8001038:	1809      	adds	r1, r1, r0
 800103a:	00c8      	lsls	r0, r1, #3
 800103c:	0025      	movs	r5, r4
 800103e:	1939      	adds	r1, r7, r4
 8001040:	7809      	ldrb	r1, [r1, #0]
 8001042:	687c      	ldr	r4, [r7, #4]
 8001044:	79a4      	ldrb	r4, [r4, #6]
 8001046:	1909      	adds	r1, r1, r4
 8001048:	1841      	adds	r1, r0, r1
 800104a:	185b      	adds	r3, r3, r1
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	701a      	strb	r2, [r3, #0]
		for(uint8_t x = 0; x < image->width; x++){
 8001050:	002c      	movs	r4, r5
 8001052:	193b      	adds	r3, r7, r4
 8001054:	781a      	ldrb	r2, [r3, #0]
 8001056:	193b      	adds	r3, r7, r4
 8001058:	3201      	adds	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	220e      	movs	r2, #14
 8001062:	18ba      	adds	r2, r7, r2
 8001064:	7812      	ldrb	r2, [r2, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d3d3      	bcc.n	8001012 <draw_image+0x1e>
	for(uint8_t y = 0; y < image->height; y++){
 800106a:	210f      	movs	r1, #15
 800106c:	187b      	adds	r3, r7, r1
 800106e:	781a      	ldrb	r2, [r3, #0]
 8001070:	187b      	adds	r3, r7, r1
 8001072:	3201      	adds	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	795b      	ldrb	r3, [r3, #5]
 800107a:	220f      	movs	r2, #15
 800107c:	18ba      	adds	r2, r7, r2
 800107e:	7812      	ldrb	r2, [r2, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d3c1      	bcc.n	8001008 <draw_image+0x14>
		}
	}
	update_fbuf(hi2c);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff fd1e 	bl	8000ac8 <update_fbuf>
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b004      	add	sp, #16
 8001092:	bdb0      	pop	{r4, r5, r7, pc}
 8001094:	20000230 	.word	0x20000230

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <HAL_MspInit+0x44>)
 80010a0:	699a      	ldr	r2, [r3, #24]
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_MspInit+0x44>)
 80010a4:	2101      	movs	r1, #1
 80010a6:	430a      	orrs	r2, r1
 80010a8:	619a      	str	r2, [r3, #24]
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_MspInit+0x44>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	2201      	movs	r2, #1
 80010b0:	4013      	ands	r3, r2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_MspInit+0x44>)
 80010b8:	69da      	ldr	r2, [r3, #28]
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_MspInit+0x44>)
 80010bc:	2180      	movs	r1, #128	; 0x80
 80010be:	0549      	lsls	r1, r1, #21
 80010c0:	430a      	orrs	r2, r1
 80010c2:	61da      	str	r2, [r3, #28]
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_MspInit+0x44>)
 80010c6:	69da      	ldr	r2, [r3, #28]
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	055b      	lsls	r3, r3, #21
 80010cc:	4013      	ands	r3, r2
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b002      	add	sp, #8
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	40021000 	.word	0x40021000

080010e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b08b      	sub	sp, #44	; 0x2c
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	2314      	movs	r3, #20
 80010ea:	18fb      	adds	r3, r7, r3
 80010ec:	0018      	movs	r0, r3
 80010ee:	2314      	movs	r3, #20
 80010f0:	001a      	movs	r2, r3
 80010f2:	2100      	movs	r1, #0
 80010f4:	f002 fcc9 	bl	8003a8a <memset>
  if(hi2c->Instance==I2C1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a2f      	ldr	r2, [pc, #188]	; (80011bc <HAL_I2C_MspInit+0xdc>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d158      	bne.n	80011b4 <HAL_I2C_MspInit+0xd4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <HAL_I2C_MspInit+0xe0>)
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <HAL_I2C_MspInit+0xe0>)
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	0289      	lsls	r1, r1, #10
 800110c:	430a      	orrs	r2, r1
 800110e:	615a      	str	r2, [r3, #20]
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_I2C_MspInit+0xe0>)
 8001112:	695a      	ldr	r2, [r3, #20]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	029b      	lsls	r3, r3, #10
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <HAL_I2C_MspInit+0xe0>)
 8001120:	695a      	ldr	r2, [r3, #20]
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <HAL_I2C_MspInit+0xe0>)
 8001124:	2180      	movs	r1, #128	; 0x80
 8001126:	02c9      	lsls	r1, r1, #11
 8001128:	430a      	orrs	r2, r1
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <HAL_I2C_MspInit+0xe0>)
 800112e:	695a      	ldr	r2, [r3, #20]
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	02db      	lsls	r3, r3, #11
 8001134:	4013      	ands	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800113a:	2114      	movs	r1, #20
 800113c:	187b      	adds	r3, r7, r1
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	00d2      	lsls	r2, r2, #3
 8001142:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001144:	000c      	movs	r4, r1
 8001146:	193b      	adds	r3, r7, r4
 8001148:	2212      	movs	r2, #18
 800114a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114c:	193b      	adds	r3, r7, r4
 800114e:	2201      	movs	r2, #1
 8001150:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001152:	193b      	adds	r3, r7, r4
 8001154:	2203      	movs	r2, #3
 8001156:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001158:	193b      	adds	r3, r7, r4
 800115a:	2204      	movs	r2, #4
 800115c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	193a      	adds	r2, r7, r4
 8001160:	2390      	movs	r3, #144	; 0x90
 8001162:	05db      	lsls	r3, r3, #23
 8001164:	0011      	movs	r1, r2
 8001166:	0018      	movs	r0, r3
 8001168:	f000 fa40 	bl	80015ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800116c:	0021      	movs	r1, r4
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2240      	movs	r2, #64	; 0x40
 8001172:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001174:	187b      	adds	r3, r7, r1
 8001176:	2212      	movs	r2, #18
 8001178:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2201      	movs	r2, #1
 800117e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2203      	movs	r2, #3
 8001184:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2201      	movs	r2, #1
 800118a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	187b      	adds	r3, r7, r1
 800118e:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <HAL_I2C_MspInit+0xe4>)
 8001190:	0019      	movs	r1, r3
 8001192:	0010      	movs	r0, r2
 8001194:	f000 fa2a 	bl	80015ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_I2C_MspInit+0xe0>)
 800119a:	69da      	ldr	r2, [r3, #28]
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_I2C_MspInit+0xe0>)
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	0389      	lsls	r1, r1, #14
 80011a2:	430a      	orrs	r2, r1
 80011a4:	61da      	str	r2, [r3, #28]
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_I2C_MspInit+0xe0>)
 80011a8:	69da      	ldr	r2, [r3, #28]
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	039b      	lsls	r3, r3, #14
 80011ae:	4013      	ands	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b00b      	add	sp, #44	; 0x2c
 80011ba:	bd90      	pop	{r4, r7, pc}
 80011bc:	40005400 	.word	0x40005400
 80011c0:	40021000 	.word	0x40021000
 80011c4:	48000400 	.word	0x48000400

080011c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	2314      	movs	r3, #20
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	0018      	movs	r0, r3
 80011d6:	2314      	movs	r3, #20
 80011d8:	001a      	movs	r2, r3
 80011da:	2100      	movs	r1, #0
 80011dc:	f002 fc55 	bl	8003a8a <memset>
  if(huart->Instance==USART2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <HAL_UART_MspInit+0x90>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d132      	bne.n	8001250 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <HAL_UART_MspInit+0x94>)
 80011ec:	69da      	ldr	r2, [r3, #28]
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <HAL_UART_MspInit+0x94>)
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	0289      	lsls	r1, r1, #10
 80011f4:	430a      	orrs	r2, r1
 80011f6:	61da      	str	r2, [r3, #28]
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_UART_MspInit+0x94>)
 80011fa:	69da      	ldr	r2, [r3, #28]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	029b      	lsls	r3, r3, #10
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_UART_MspInit+0x94>)
 8001208:	695a      	ldr	r2, [r3, #20]
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <HAL_UART_MspInit+0x94>)
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	0289      	lsls	r1, r1, #10
 8001210:	430a      	orrs	r2, r1
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_UART_MspInit+0x94>)
 8001216:	695a      	ldr	r2, [r3, #20]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	029b      	lsls	r3, r3, #10
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001222:	2114      	movs	r1, #20
 8001224:	187b      	adds	r3, r7, r1
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_UART_MspInit+0x98>)
 8001228:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	187b      	adds	r3, r7, r1
 800122c:	2202      	movs	r2, #2
 800122e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	187b      	adds	r3, r7, r1
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001236:	187b      	adds	r3, r7, r1
 8001238:	2203      	movs	r2, #3
 800123a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2201      	movs	r2, #1
 8001240:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	187a      	adds	r2, r7, r1
 8001244:	2390      	movs	r3, #144	; 0x90
 8001246:	05db      	lsls	r3, r3, #23
 8001248:	0011      	movs	r1, r2
 800124a:	0018      	movs	r0, r3
 800124c:	f000 f9ce 	bl	80015ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	b00a      	add	sp, #40	; 0x28
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40004400 	.word	0x40004400
 800125c:	40021000 	.word	0x40021000
 8001260:	00008004 	.word	0x00008004

08001264 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	0019      	movs	r1, r3
 800127a:	200d      	movs	r0, #13
 800127c:	f000 f990 	bl	80015a0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 8001280:	200d      	movs	r0, #13
 8001282:	f000 f9a2 	bl	80015ca <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <HAL_InitTick+0xa8>)
 8001288:	699a      	ldr	r2, [r3, #24]
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <HAL_InitTick+0xa8>)
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	0109      	lsls	r1, r1, #4
 8001290:	430a      	orrs	r2, r1
 8001292:	619a      	str	r2, [r3, #24]
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <HAL_InitTick+0xa8>)
 8001296:	699a      	ldr	r2, [r3, #24]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012a2:	230c      	movs	r3, #12
 80012a4:	18fa      	adds	r2, r7, r3
 80012a6:	2310      	movs	r3, #16
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	0011      	movs	r1, r2
 80012ac:	0018      	movs	r0, r3
 80012ae:	f001 fd43 	bl	8002d38 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012b2:	f001 fd2b 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 80012b6:	0003      	movs	r3, r0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	4914      	ldr	r1, [pc, #80]	; (8001310 <HAL_InitTick+0xac>)
 80012be:	0018      	movs	r0, r3
 80012c0:	f7fe ff22 	bl	8000108 <__udivsi3>
 80012c4:	0003      	movs	r3, r0
 80012c6:	3b01      	subs	r3, #1
 80012c8:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0xb0>)
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <HAL_InitTick+0xb4>)
 80012ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80012d0:	4b10      	ldr	r3, [pc, #64]	; (8001314 <HAL_InitTick+0xb0>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <HAL_InitTick+0xb8>)
 80012d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_InitTick+0xb0>)
 80012d8:	6a3a      	ldr	r2, [r7, #32]
 80012da:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80012dc:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <HAL_InitTick+0xb0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <HAL_InitTick+0xb0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_InitTick+0xb0>)
 80012ea:	0018      	movs	r0, r3
 80012ec:	f001 fe3c 	bl	8002f68 <HAL_TIM_Base_Init>
 80012f0:	1e03      	subs	r3, r0, #0
 80012f2:	d105      	bne.n	8001300 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <HAL_InitTick+0xb0>)
 80012f6:	0018      	movs	r0, r3
 80012f8:	f001 fe6a 	bl	8002fd0 <HAL_TIM_Base_Start_IT>
 80012fc:	0003      	movs	r3, r0
 80012fe:	e000      	b.n	8001302 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
}
 8001302:	0018      	movs	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	b00a      	add	sp, #40	; 0x28
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	40021000 	.word	0x40021000
 8001310:	000f4240 	.word	0x000f4240
 8001314:	200002b4 	.word	0x200002b4
 8001318:	40012c00 	.word	0x40012c00
 800131c:	000003e7 	.word	0x000003e7

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001324:	46c0      	nop			; (mov r8, r8)
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <HardFault_Handler+0x4>

08001330 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800134a:	0018      	movs	r0, r3
 800134c:	f001 fe62 	bl	8003014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	200002b4 	.word	0x200002b4

0800135c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001368:	4813      	ldr	r0, [pc, #76]	; (80013b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800136a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800136c:	4813      	ldr	r0, [pc, #76]	; (80013bc <LoopForever+0x6>)
    LDR R1, [R0]
 800136e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001370:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001372:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <LoopForever+0xa>)
    CMP R1, R2
 8001374:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001376:	d105      	bne.n	8001384 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001378:	4812      	ldr	r0, [pc, #72]	; (80013c4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800137a:	4913      	ldr	r1, [pc, #76]	; (80013c8 <LoopForever+0x12>)
    STR R1, [R0]
 800137c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800137e:	4813      	ldr	r0, [pc, #76]	; (80013cc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001380:	4913      	ldr	r1, [pc, #76]	; (80013d0 <LoopForever+0x1a>)
    STR R1, [R0]
 8001382:	6001      	str	r1, [r0, #0]

08001384 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001386:	4914      	ldr	r1, [pc, #80]	; (80013d8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <LoopForever+0x26>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800139c:	4c11      	ldr	r4, [pc, #68]	; (80013e4 <LoopForever+0x2e>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013aa:	f7ff ffd7 	bl	800135c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80013ae:	f002 fb3f 	bl	8003a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013b2:	f7ff f9b1 	bl	8000718 <main>

080013b6 <LoopForever>:

LoopForever:
    b LoopForever
 80013b6:	e7fe      	b.n	80013b6 <LoopForever>
  ldr   r0, =_estack
 80013b8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80013bc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80013c0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80013c4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80013c8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80013cc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80013d0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80013dc:	08003ca0 	.word	0x08003ca0
  ldr r2, =_sbss
 80013e0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80013e4:	200002f8 	.word	0x200002f8

080013e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC1_IRQHandler>
	...

080013ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <HAL_Init+0x24>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_Init+0x24>)
 80013f6:	2110      	movs	r1, #16
 80013f8:	430a      	orrs	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff ff31 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001402:	f7ff fe49 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	0018      	movs	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	40022000 	.word	0x40022000

08001414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_IncTick+0x1c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	001a      	movs	r2, r3
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_IncTick+0x20>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	18d2      	adds	r2, r2, r3
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_IncTick+0x20>)
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	20000004 	.word	0x20000004
 8001434:	200002f4 	.word	0x200002f4

08001438 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  return uwTick;
 800143c:	4b02      	ldr	r3, [pc, #8]	; (8001448 <HAL_GetTick+0x10>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	0018      	movs	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	200002f4 	.word	0x200002f4

0800144c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff fff0 	bl	8001438 <HAL_GetTick>
 8001458:	0003      	movs	r3, r0
 800145a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3301      	adds	r3, #1
 8001464:	d005      	beq.n	8001472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_Delay+0x40>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	001a      	movs	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	189b      	adds	r3, r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	f7ff ffe0 	bl	8001438 <HAL_GetTick>
 8001478:	0002      	movs	r2, r0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	429a      	cmp	r2, r3
 8001482:	d8f7      	bhi.n	8001474 <HAL_Delay+0x28>
  {
  }
}
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b004      	add	sp, #16
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000004 	.word	0x20000004

08001490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	0002      	movs	r2, r0
 8001498:	1dfb      	adds	r3, r7, #7
 800149a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800149c:	1dfb      	adds	r3, r7, #7
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b7f      	cmp	r3, #127	; 0x7f
 80014a2:	d809      	bhi.n	80014b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a4:	1dfb      	adds	r3, r7, #7
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	001a      	movs	r2, r3
 80014aa:	231f      	movs	r3, #31
 80014ac:	401a      	ands	r2, r3
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_EnableIRQ+0x30>)
 80014b0:	2101      	movs	r1, #1
 80014b2:	4091      	lsls	r1, r2
 80014b4:	000a      	movs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
  }
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b002      	add	sp, #8
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	0002      	movs	r2, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b7f      	cmp	r3, #127	; 0x7f
 80014d8:	d828      	bhi.n	800152c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014da:	4a2f      	ldr	r2, [pc, #188]	; (8001598 <__NVIC_SetPriority+0xd4>)
 80014dc:	1dfb      	adds	r3, r7, #7
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	33c0      	adds	r3, #192	; 0xc0
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	589b      	ldr	r3, [r3, r2]
 80014ea:	1dfa      	adds	r2, r7, #7
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	0011      	movs	r1, r2
 80014f0:	2203      	movs	r2, #3
 80014f2:	400a      	ands	r2, r1
 80014f4:	00d2      	lsls	r2, r2, #3
 80014f6:	21ff      	movs	r1, #255	; 0xff
 80014f8:	4091      	lsls	r1, r2
 80014fa:	000a      	movs	r2, r1
 80014fc:	43d2      	mvns	r2, r2
 80014fe:	401a      	ands	r2, r3
 8001500:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	22ff      	movs	r2, #255	; 0xff
 8001508:	401a      	ands	r2, r3
 800150a:	1dfb      	adds	r3, r7, #7
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	0018      	movs	r0, r3
 8001510:	2303      	movs	r3, #3
 8001512:	4003      	ands	r3, r0
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001518:	481f      	ldr	r0, [pc, #124]	; (8001598 <__NVIC_SetPriority+0xd4>)
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b25b      	sxtb	r3, r3
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	430a      	orrs	r2, r1
 8001524:	33c0      	adds	r3, #192	; 0xc0
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800152a:	e031      	b.n	8001590 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800152c:	4a1b      	ldr	r2, [pc, #108]	; (800159c <__NVIC_SetPriority+0xd8>)
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	0019      	movs	r1, r3
 8001534:	230f      	movs	r3, #15
 8001536:	400b      	ands	r3, r1
 8001538:	3b08      	subs	r3, #8
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3306      	adds	r3, #6
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	18d3      	adds	r3, r2, r3
 8001542:	3304      	adds	r3, #4
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	1dfa      	adds	r2, r7, #7
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	0011      	movs	r1, r2
 800154c:	2203      	movs	r2, #3
 800154e:	400a      	ands	r2, r1
 8001550:	00d2      	lsls	r2, r2, #3
 8001552:	21ff      	movs	r1, #255	; 0xff
 8001554:	4091      	lsls	r1, r2
 8001556:	000a      	movs	r2, r1
 8001558:	43d2      	mvns	r2, r2
 800155a:	401a      	ands	r2, r3
 800155c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	019b      	lsls	r3, r3, #6
 8001562:	22ff      	movs	r2, #255	; 0xff
 8001564:	401a      	ands	r2, r3
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	0018      	movs	r0, r3
 800156c:	2303      	movs	r3, #3
 800156e:	4003      	ands	r3, r0
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001574:	4809      	ldr	r0, [pc, #36]	; (800159c <__NVIC_SetPriority+0xd8>)
 8001576:	1dfb      	adds	r3, r7, #7
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	001c      	movs	r4, r3
 800157c:	230f      	movs	r3, #15
 800157e:	4023      	ands	r3, r4
 8001580:	3b08      	subs	r3, #8
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	430a      	orrs	r2, r1
 8001586:	3306      	adds	r3, #6
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	18c3      	adds	r3, r0, r3
 800158c:	3304      	adds	r3, #4
 800158e:	601a      	str	r2, [r3, #0]
}
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b003      	add	sp, #12
 8001596:	bd90      	pop	{r4, r7, pc}
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	210f      	movs	r1, #15
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	1c02      	adds	r2, r0, #0
 80015b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	0011      	movs	r1, r2
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff ff81 	bl	80014c4 <__NVIC_SetPriority>
}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b004      	add	sp, #16
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	0002      	movs	r2, r0
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff ff57 	bl	8001490 <__NVIC_EnableIRQ>
}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b002      	add	sp, #8
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fa:	e149      	b.n	8001890 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2101      	movs	r1, #1
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4091      	lsls	r1, r2
 8001606:	000a      	movs	r2, r1
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d100      	bne.n	8001614 <HAL_GPIO_Init+0x28>
 8001612:	e13a      	b.n	800188a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x38>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b12      	cmp	r3, #18
 8001622:	d123      	bne.n	800166c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	0092      	lsls	r2, r2, #2
 800162e:	58d3      	ldr	r3, [r2, r3]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	2207      	movs	r2, #7
 8001636:	4013      	ands	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	409a      	lsls	r2, r3
 800163e:	0013      	movs	r3, r2
 8001640:	43da      	mvns	r2, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	2107      	movs	r1, #7
 8001650:	400b      	ands	r3, r1
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	409a      	lsls	r2, r3
 8001656:	0013      	movs	r3, r2
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	08da      	lsrs	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3208      	adds	r2, #8
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	6939      	ldr	r1, [r7, #16]
 800166a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	409a      	lsls	r2, r3
 800167a:	0013      	movs	r3, r2
 800167c:	43da      	mvns	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2203      	movs	r2, #3
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	409a      	lsls	r2, r3
 8001692:	0013      	movs	r3, r2
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d00b      	beq.n	80016c0 <HAL_GPIO_Init+0xd4>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d007      	beq.n	80016c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b4:	2b11      	cmp	r3, #17
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b12      	cmp	r3, #18
 80016be:	d130      	bne.n	8001722 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	409a      	lsls	r2, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	43da      	mvns	r2, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	409a      	lsls	r2, r3
 80016e2:	0013      	movs	r3, r2
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f6:	2201      	movs	r2, #1
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
 80016fc:	0013      	movs	r3, r2
 80016fe:	43da      	mvns	r2, r3
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	2201      	movs	r2, #1
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
 8001714:	0013      	movs	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	43da      	mvns	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	409a      	lsls	r2, r3
 8001744:	0013      	movs	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	055b      	lsls	r3, r3, #21
 800175a:	4013      	ands	r3, r2
 800175c:	d100      	bne.n	8001760 <HAL_GPIO_Init+0x174>
 800175e:	e094      	b.n	800188a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001760:	4b51      	ldr	r3, [pc, #324]	; (80018a8 <HAL_GPIO_Init+0x2bc>)
 8001762:	699a      	ldr	r2, [r3, #24]
 8001764:	4b50      	ldr	r3, [pc, #320]	; (80018a8 <HAL_GPIO_Init+0x2bc>)
 8001766:	2101      	movs	r1, #1
 8001768:	430a      	orrs	r2, r1
 800176a:	619a      	str	r2, [r3, #24]
 800176c:	4b4e      	ldr	r3, [pc, #312]	; (80018a8 <HAL_GPIO_Init+0x2bc>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	2201      	movs	r2, #1
 8001772:	4013      	ands	r3, r2
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001778:	4a4c      	ldr	r2, [pc, #304]	; (80018ac <HAL_GPIO_Init+0x2c0>)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	589b      	ldr	r3, [r3, r2]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2203      	movs	r2, #3
 800178a:	4013      	ands	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	220f      	movs	r2, #15
 8001790:	409a      	lsls	r2, r3
 8001792:	0013      	movs	r3, r2
 8001794:	43da      	mvns	r2, r3
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	2390      	movs	r3, #144	; 0x90
 80017a0:	05db      	lsls	r3, r3, #23
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d00d      	beq.n	80017c2 <HAL_GPIO_Init+0x1d6>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a41      	ldr	r2, [pc, #260]	; (80018b0 <HAL_GPIO_Init+0x2c4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d007      	beq.n	80017be <HAL_GPIO_Init+0x1d2>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a40      	ldr	r2, [pc, #256]	; (80018b4 <HAL_GPIO_Init+0x2c8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_GPIO_Init+0x1ce>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e004      	b.n	80017c4 <HAL_GPIO_Init+0x1d8>
 80017ba:	2305      	movs	r3, #5
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_Init+0x1d8>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_GPIO_Init+0x1d8>
 80017c2:	2300      	movs	r3, #0
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	2103      	movs	r1, #3
 80017c8:	400a      	ands	r2, r1
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	4093      	lsls	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017d4:	4935      	ldr	r1, [pc, #212]	; (80018ac <HAL_GPIO_Init+0x2c0>)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e2:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <HAL_GPIO_Init+0x2cc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43da      	mvns	r2, r3
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	025b      	lsls	r3, r3, #9
 80017fa:	4013      	ands	r3, r2
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001806:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <HAL_GPIO_Init+0x2cc>)
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <HAL_GPIO_Init+0x2cc>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43da      	mvns	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	4013      	ands	r3, r2
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_GPIO_Init+0x2cc>)
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <HAL_GPIO_Init+0x2cc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43da      	mvns	r2, r3
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	035b      	lsls	r3, r3, #13
 800184e:	4013      	ands	r3, r2
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_GPIO_Init+0x2cc>)
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_GPIO_Init+0x2cc>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43da      	mvns	r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	039b      	lsls	r3, r3, #14
 8001878:	4013      	ands	r3, r2
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_GPIO_Init+0x2cc>)
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	40da      	lsrs	r2, r3
 8001898:	1e13      	subs	r3, r2, #0
 800189a:	d000      	beq.n	800189e <HAL_GPIO_Init+0x2b2>
 800189c:	e6ae      	b.n	80015fc <HAL_GPIO_Init+0x10>
  } 
}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b006      	add	sp, #24
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010000 	.word	0x40010000
 80018b0:	48000400 	.word	0x48000400
 80018b4:	48000800 	.word	0x48000800
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	0008      	movs	r0, r1
 80018c6:	0011      	movs	r1, r2
 80018c8:	1cbb      	adds	r3, r7, #2
 80018ca:	1c02      	adds	r2, r0, #0
 80018cc:	801a      	strh	r2, [r3, #0]
 80018ce:	1c7b      	adds	r3, r7, #1
 80018d0:	1c0a      	adds	r2, r1, #0
 80018d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d4:	1c7b      	adds	r3, r7, #1
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018dc:	1cbb      	adds	r3, r7, #2
 80018de:	881a      	ldrh	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e4:	e003      	b.n	80018ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018e6:	1cbb      	adds	r3, r7, #2
 80018e8:	881a      	ldrh	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b002      	add	sp, #8
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e082      	b.n	8001a10 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2241      	movs	r2, #65	; 0x41
 800190e:	5c9b      	ldrb	r3, [r3, r2]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d107      	bne.n	8001926 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2240      	movs	r2, #64	; 0x40
 800191a:	2100      	movs	r1, #0
 800191c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff fbdd 	bl	80010e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2241      	movs	r2, #65	; 0x41
 800192a:	2124      	movs	r1, #36	; 0x24
 800192c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	438a      	bics	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4934      	ldr	r1, [pc, #208]	; (8001a18 <HAL_I2C_Init+0x120>)
 8001948:	400a      	ands	r2, r1
 800194a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4931      	ldr	r1, [pc, #196]	; (8001a1c <HAL_I2C_Init+0x124>)
 8001958:	400a      	ands	r2, r1
 800195a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d108      	bne.n	8001976 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	0209      	lsls	r1, r1, #8
 8001970:	430a      	orrs	r2, r1
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	e007      	b.n	8001986 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2184      	movs	r1, #132	; 0x84
 8001980:	0209      	lsls	r1, r1, #8
 8001982:	430a      	orrs	r2, r1
 8001984:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d104      	bne.n	8001998 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	491f      	ldr	r1, [pc, #124]	; (8001a20 <HAL_I2C_Init+0x128>)
 80019a4:	430a      	orrs	r2, r1
 80019a6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	491a      	ldr	r1, [pc, #104]	; (8001a1c <HAL_I2C_Init+0x124>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	0011      	movs	r1, r2
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	021a      	lsls	r2, r3, #8
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69d9      	ldr	r1, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1a      	ldr	r2, [r3, #32]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2101      	movs	r1, #1
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2241      	movs	r2, #65	; 0x41
 80019fc:	2120      	movs	r1, #32
 80019fe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2242      	movs	r2, #66	; 0x42
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b002      	add	sp, #8
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	f0ffffff 	.word	0xf0ffffff
 8001a1c:	ffff7fff 	.word	0xffff7fff
 8001a20:	02008000 	.word	0x02008000

08001a24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	0008      	movs	r0, r1
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	0019      	movs	r1, r3
 8001a32:	230a      	movs	r3, #10
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	1c02      	adds	r2, r0, #0
 8001a38:	801a      	strh	r2, [r3, #0]
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	1c0a      	adds	r2, r1, #0
 8001a40:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2241      	movs	r2, #65	; 0x41
 8001a46:	5c9b      	ldrb	r3, [r3, r2]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	d000      	beq.n	8001a50 <HAL_I2C_Master_Transmit+0x2c>
 8001a4e:	e0e7      	b.n	8001c20 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2240      	movs	r2, #64	; 0x40
 8001a54:	5c9b      	ldrb	r3, [r3, r2]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_I2C_Master_Transmit+0x3a>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e0e1      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2240      	movs	r2, #64	; 0x40
 8001a62:	2101      	movs	r1, #1
 8001a64:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a66:	f7ff fce7 	bl	8001438 <HAL_GetTick>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	0219      	lsls	r1, r3, #8
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2319      	movs	r3, #25
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f000 fa04 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001a80:	1e03      	subs	r3, r0, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0cc      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2241      	movs	r2, #65	; 0x41
 8001a8c:	2121      	movs	r1, #33	; 0x21
 8001a8e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2242      	movs	r2, #66	; 0x42
 8001a94:	2110      	movs	r1, #16
 8001a96:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	18ba      	adds	r2, r7, r2
 8001aaa:	8812      	ldrh	r2, [r2, #0]
 8001aac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	2bff      	cmp	r3, #255	; 0xff
 8001abc:	d911      	bls.n	8001ae2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	22ff      	movs	r2, #255	; 0xff
 8001ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	045c      	lsls	r4, r3, #17
 8001ace:	230a      	movs	r3, #10
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	8819      	ldrh	r1, [r3, #0]
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	4b55      	ldr	r3, [pc, #340]	; (8001c2c <HAL_I2C_Master_Transmit+0x208>)
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	0023      	movs	r3, r4
 8001adc:	f000 fb60 	bl	80021a0 <I2C_TransferConfig>
 8001ae0:	e075      	b.n	8001bce <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	049c      	lsls	r4, r3, #18
 8001af6:	230a      	movs	r3, #10
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	8819      	ldrh	r1, [r3, #0]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <HAL_I2C_Master_Transmit+0x208>)
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	0023      	movs	r3, r4
 8001b04:	f000 fb4c 	bl	80021a0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001b08:	e061      	b.n	8001bce <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f000 f9f8 	bl	8001f06 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b16:	1e03      	subs	r3, r0, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e081      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d03a      	beq.n	8001bce <HAL_I2C_Master_Transmit+0x1aa>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d136      	bne.n	8001bce <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	0013      	movs	r3, r2
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	f000 f98b 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001b72:	1e03      	subs	r3, r0, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e053      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2bff      	cmp	r3, #255	; 0xff
 8001b82:	d911      	bls.n	8001ba8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	22ff      	movs	r2, #255	; 0xff
 8001b88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	045c      	lsls	r4, r3, #17
 8001b94:	230a      	movs	r3, #10
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	8819      	ldrh	r1, [r3, #0]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	0023      	movs	r3, r4
 8001ba2:	f000 fafd 	bl	80021a0 <I2C_TransferConfig>
 8001ba6:	e012      	b.n	8001bce <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	049c      	lsls	r4, r3, #18
 8001bbc:	230a      	movs	r3, #10
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	8819      	ldrh	r1, [r3, #0]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	0023      	movs	r3, r4
 8001bca:	f000 fae9 	bl	80021a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d198      	bne.n	8001b0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	0018      	movs	r0, r3
 8001be0:	f000 f9d0 	bl	8001f84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001be4:	1e03      	subs	r3, r0, #0
 8001be6:	d001      	beq.n	8001bec <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e01a      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	490c      	ldr	r1, [pc, #48]	; (8001c30 <HAL_I2C_Master_Transmit+0x20c>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2241      	movs	r2, #65	; 0x41
 8001c08:	2120      	movs	r1, #32
 8001c0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2242      	movs	r2, #66	; 0x42
 8001c10:	2100      	movs	r1, #0
 8001c12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	2100      	movs	r1, #0
 8001c1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e000      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001c20:	2302      	movs	r3, #2
  }
}
 8001c22:	0018      	movs	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b007      	add	sp, #28
 8001c28:	bd90      	pop	{r4, r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	80002000 	.word	0x80002000
 8001c30:	fe00e800 	.word	0xfe00e800

08001c34 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	0008      	movs	r0, r1
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	0019      	movs	r1, r3
 8001c42:	230a      	movs	r3, #10
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	1c02      	adds	r2, r0, #0
 8001c48:	801a      	strh	r2, [r3, #0]
 8001c4a:	2308      	movs	r3, #8
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	1c0a      	adds	r2, r1, #0
 8001c50:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2241      	movs	r2, #65	; 0x41
 8001c56:	5c9b      	ldrb	r3, [r3, r2]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	d000      	beq.n	8001c60 <HAL_I2C_Master_Receive+0x2c>
 8001c5e:	e0e8      	b.n	8001e32 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	5c9b      	ldrb	r3, [r3, r2]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_I2C_Master_Receive+0x3a>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e0e2      	b.n	8001e34 <HAL_I2C_Master_Receive+0x200>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2240      	movs	r2, #64	; 0x40
 8001c72:	2101      	movs	r1, #1
 8001c74:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c76:	f7ff fbdf 	bl	8001438 <HAL_GetTick>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	0219      	lsls	r1, r3, #8
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2319      	movs	r3, #25
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f000 f8fc 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001c90:	1e03      	subs	r3, r0, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0cd      	b.n	8001e34 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2241      	movs	r2, #65	; 0x41
 8001c9c:	2122      	movs	r1, #34	; 0x22
 8001c9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2242      	movs	r2, #66	; 0x42
 8001ca4:	2110      	movs	r1, #16
 8001ca6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	18ba      	adds	r2, r7, r2
 8001cba:	8812      	ldrh	r2, [r2, #0]
 8001cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2bff      	cmp	r3, #255	; 0xff
 8001ccc:	d911      	bls.n	8001cf2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	22ff      	movs	r2, #255	; 0xff
 8001cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	045c      	lsls	r4, r3, #17
 8001cde:	230a      	movs	r3, #10
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	8819      	ldrh	r1, [r3, #0]
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	4b55      	ldr	r3, [pc, #340]	; (8001e3c <HAL_I2C_Master_Receive+0x208>)
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	0023      	movs	r3, r4
 8001cec:	f000 fa58 	bl	80021a0 <I2C_TransferConfig>
 8001cf0:	e076      	b.n	8001de0 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	049c      	lsls	r4, r3, #18
 8001d06:	230a      	movs	r3, #10
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	8819      	ldrh	r1, [r3, #0]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <HAL_I2C_Master_Receive+0x208>)
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	0023      	movs	r3, r4
 8001d14:	f000 fa44 	bl	80021a0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001d18:	e062      	b.n	8001de0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 f96b 	bl	8001ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d26:	1e03      	subs	r3, r0, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e082      	b.n	8001e34 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d03a      	beq.n	8001de0 <HAL_I2C_Master_Receive+0x1ac>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d136      	bne.n	8001de0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	f000 f882 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e053      	b.n	8001e34 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2bff      	cmp	r3, #255	; 0xff
 8001d94:	d911      	bls.n	8001dba <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	22ff      	movs	r2, #255	; 0xff
 8001d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	045c      	lsls	r4, r3, #17
 8001da6:	230a      	movs	r3, #10
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	8819      	ldrh	r1, [r3, #0]
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	2300      	movs	r3, #0
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	0023      	movs	r3, r4
 8001db4:	f000 f9f4 	bl	80021a0 <I2C_TransferConfig>
 8001db8:	e012      	b.n	8001de0 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	049c      	lsls	r4, r3, #18
 8001dce:	230a      	movs	r3, #10
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	8819      	ldrh	r1, [r3, #0]
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	0023      	movs	r3, r4
 8001ddc:	f000 f9e0 	bl	80021a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d197      	bne.n	8001d1a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	0018      	movs	r0, r3
 8001df2:	f000 f8c7 	bl	8001f84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001df6:	1e03      	subs	r3, r0, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e01a      	b.n	8001e34 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2220      	movs	r2, #32
 8001e04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	490b      	ldr	r1, [pc, #44]	; (8001e40 <HAL_I2C_Master_Receive+0x20c>)
 8001e12:	400a      	ands	r2, r1
 8001e14:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2241      	movs	r2, #65	; 0x41
 8001e1a:	2120      	movs	r1, #32
 8001e1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2242      	movs	r2, #66	; 0x42
 8001e22:	2100      	movs	r1, #0
 8001e24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2240      	movs	r2, #64	; 0x40
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001e32:	2302      	movs	r3, #2
  }
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b007      	add	sp, #28
 8001e3a:	bd90      	pop	{r4, r7, pc}
 8001e3c:	80002400 	.word	0x80002400
 8001e40:	fe00e800 	.word	0xfe00e800

08001e44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2202      	movs	r2, #2
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d103      	bne.n	8001e62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d007      	beq.n	8001e80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699a      	ldr	r2, [r3, #24]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	619a      	str	r2, [r3, #24]
  }
}
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b002      	add	sp, #8
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e98:	e021      	b.n	8001ede <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	d01e      	beq.n	8001ede <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea0:	f7ff faca 	bl	8001438 <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d302      	bcc.n	8001eb6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d113      	bne.n	8001ede <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	2220      	movs	r2, #32
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2241      	movs	r2, #65	; 0x41
 8001ec6:	2120      	movs	r1, #32
 8001ec8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2242      	movs	r2, #66	; 0x42
 8001ece:	2100      	movs	r1, #0
 8001ed0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2240      	movs	r2, #64	; 0x40
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00f      	b.n	8001efe <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	425a      	negs	r2, r3
 8001eee:	4153      	adcs	r3, r2
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d0ce      	beq.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	0018      	movs	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b004      	add	sp, #16
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f12:	e02b      	b.n	8001f6c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	68b9      	ldr	r1, [r7, #8]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f000 f8da 	bl	80020d4 <I2C_IsAcknowledgeFailed>
 8001f20:	1e03      	subs	r3, r0, #0
 8001f22:	d001      	beq.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e029      	b.n	8001f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	d01e      	beq.n	8001f6c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2e:	f7ff fa83 	bl	8001438 <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d302      	bcc.n	8001f44 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d113      	bne.n	8001f6c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f48:	2220      	movs	r2, #32
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2241      	movs	r2, #65	; 0x41
 8001f54:	2120      	movs	r1, #32
 8001f56:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2242      	movs	r2, #66	; 0x42
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2240      	movs	r2, #64	; 0x40
 8001f64:	2100      	movs	r1, #0
 8001f66:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e007      	b.n	8001f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2202      	movs	r2, #2
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d1cc      	bne.n	8001f14 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b004      	add	sp, #16
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f90:	e028      	b.n	8001fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f000 f89b 	bl	80020d4 <I2C_IsAcknowledgeFailed>
 8001f9e:	1e03      	subs	r3, r0, #0
 8001fa0:	d001      	beq.n	8001fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e026      	b.n	8001ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa6:	f7ff fa47 	bl	8001438 <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d302      	bcc.n	8001fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d113      	bne.n	8001fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2241      	movs	r2, #65	; 0x41
 8001fcc:	2120      	movs	r1, #32
 8001fce:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2242      	movs	r2, #66	; 0x42
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	2100      	movs	r1, #0
 8001fde:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e007      	b.n	8001ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2220      	movs	r2, #32
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	d1cf      	bne.n	8001f92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b004      	add	sp, #16
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002008:	e055      	b.n	80020b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	0018      	movs	r0, r3
 8002012:	f000 f85f 	bl	80020d4 <I2C_IsAcknowledgeFailed>
 8002016:	1e03      	subs	r3, r0, #0
 8002018:	d001      	beq.n	800201e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e053      	b.n	80020c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2220      	movs	r2, #32
 8002026:	4013      	ands	r3, r2
 8002028:	2b20      	cmp	r3, #32
 800202a:	d129      	bne.n	8002080 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2204      	movs	r2, #4
 8002034:	4013      	ands	r3, r2
 8002036:	2b04      	cmp	r3, #4
 8002038:	d105      	bne.n	8002046 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e03f      	b.n	80020c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2220      	movs	r2, #32
 800204c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	491d      	ldr	r1, [pc, #116]	; (80020d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800205a:	400a      	ands	r2, r1
 800205c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2241      	movs	r2, #65	; 0x41
 8002068:	2120      	movs	r1, #32
 800206a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2242      	movs	r2, #66	; 0x42
 8002070:	2100      	movs	r1, #0
 8002072:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2240      	movs	r2, #64	; 0x40
 8002078:	2100      	movs	r1, #0
 800207a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e022      	b.n	80020c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002080:	f7ff f9da 	bl	8001438 <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	429a      	cmp	r2, r3
 800208e:	d302      	bcc.n	8002096 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10f      	bne.n	80020b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	2220      	movs	r2, #32
 800209c:	431a      	orrs	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2241      	movs	r2, #65	; 0x41
 80020a6:	2120      	movs	r1, #32
 80020a8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2240      	movs	r2, #64	; 0x40
 80020ae:	2100      	movs	r1, #0
 80020b0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e007      	b.n	80020c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2204      	movs	r2, #4
 80020be:	4013      	ands	r3, r2
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d1a2      	bne.n	800200a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b004      	add	sp, #16
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	fe00e800 	.word	0xfe00e800

080020d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2210      	movs	r2, #16
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d151      	bne.n	8002192 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ee:	e021      	b.n	8002134 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	3301      	adds	r3, #1
 80020f4:	d01e      	beq.n	8002134 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f6:	f7ff f99f 	bl	8001438 <HAL_GetTick>
 80020fa:	0002      	movs	r2, r0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	429a      	cmp	r2, r3
 8002104:	d302      	bcc.n	800210c <I2C_IsAcknowledgeFailed+0x38>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d113      	bne.n	8002134 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	2220      	movs	r2, #32
 8002112:	431a      	orrs	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2241      	movs	r2, #65	; 0x41
 800211c:	2120      	movs	r1, #32
 800211e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2242      	movs	r2, #66	; 0x42
 8002124:	2100      	movs	r1, #0
 8002126:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2240      	movs	r2, #64	; 0x40
 800212c:	2100      	movs	r1, #0
 800212e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e02f      	b.n	8002194 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2220      	movs	r2, #32
 800213c:	4013      	ands	r3, r2
 800213e:	2b20      	cmp	r3, #32
 8002140:	d1d6      	bne.n	80020f0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2210      	movs	r2, #16
 8002148:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2220      	movs	r2, #32
 8002150:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	0018      	movs	r0, r3
 8002156:	f7ff fe75 	bl	8001e44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	490d      	ldr	r1, [pc, #52]	; (800219c <I2C_IsAcknowledgeFailed+0xc8>)
 8002166:	400a      	ands	r2, r1
 8002168:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	2204      	movs	r2, #4
 8002170:	431a      	orrs	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2241      	movs	r2, #65	; 0x41
 800217a:	2120      	movs	r1, #32
 800217c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2242      	movs	r2, #66	; 0x42
 8002182:	2100      	movs	r1, #0
 8002184:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2240      	movs	r2, #64	; 0x40
 800218a:	2100      	movs	r1, #0
 800218c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	b004      	add	sp, #16
 800219a:	bd80      	pop	{r7, pc}
 800219c:	fe00e800 	.word	0xfe00e800

080021a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	0008      	movs	r0, r1
 80021aa:	0011      	movs	r1, r2
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	240a      	movs	r4, #10
 80021b0:	193b      	adds	r3, r7, r4
 80021b2:	1c02      	adds	r2, r0, #0
 80021b4:	801a      	strh	r2, [r3, #0]
 80021b6:	2009      	movs	r0, #9
 80021b8:	183b      	adds	r3, r7, r0
 80021ba:	1c0a      	adds	r2, r1, #0
 80021bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	6a3a      	ldr	r2, [r7, #32]
 80021c6:	0d51      	lsrs	r1, r2, #21
 80021c8:	2280      	movs	r2, #128	; 0x80
 80021ca:	00d2      	lsls	r2, r2, #3
 80021cc:	400a      	ands	r2, r1
 80021ce:	490e      	ldr	r1, [pc, #56]	; (8002208 <I2C_TransferConfig+0x68>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	43d2      	mvns	r2, r2
 80021d4:	401a      	ands	r2, r3
 80021d6:	0011      	movs	r1, r2
 80021d8:	193b      	adds	r3, r7, r4
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	059b      	lsls	r3, r3, #22
 80021de:	0d9a      	lsrs	r2, r3, #22
 80021e0:	183b      	adds	r3, r7, r0
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	0418      	lsls	r0, r3, #16
 80021e6:	23ff      	movs	r3, #255	; 0xff
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	4003      	ands	r3, r0
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	46bd      	mov	sp, r7
 8002202:	b005      	add	sp, #20
 8002204:	bd90      	pop	{r4, r7, pc}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	03ff63ff 	.word	0x03ff63ff

0800220c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2241      	movs	r2, #65	; 0x41
 800221a:	5c9b      	ldrb	r3, [r3, r2]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b20      	cmp	r3, #32
 8002220:	d138      	bne.n	8002294 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2240      	movs	r2, #64	; 0x40
 8002226:	5c9b      	ldrb	r3, [r3, r2]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800222c:	2302      	movs	r3, #2
 800222e:	e032      	b.n	8002296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2240      	movs	r2, #64	; 0x40
 8002234:	2101      	movs	r1, #1
 8002236:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2241      	movs	r2, #65	; 0x41
 800223c:	2124      	movs	r1, #36	; 0x24
 800223e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2101      	movs	r1, #1
 800224c:	438a      	bics	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4911      	ldr	r1, [pc, #68]	; (80022a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800225c:	400a      	ands	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6819      	ldr	r1, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2101      	movs	r1, #1
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2241      	movs	r2, #65	; 0x41
 8002284:	2120      	movs	r1, #32
 8002286:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	2100      	movs	r1, #0
 800228e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e000      	b.n	8002296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002294:	2302      	movs	r3, #2
  }
}
 8002296:	0018      	movs	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	b002      	add	sp, #8
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	ffffefff 	.word	0xffffefff

080022a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2241      	movs	r2, #65	; 0x41
 80022b2:	5c9b      	ldrb	r3, [r3, r2]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d139      	bne.n	800232e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2240      	movs	r2, #64	; 0x40
 80022be:	5c9b      	ldrb	r3, [r3, r2]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e033      	b.n	8002330 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2240      	movs	r2, #64	; 0x40
 80022cc:	2101      	movs	r1, #1
 80022ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2241      	movs	r2, #65	; 0x41
 80022d4:	2124      	movs	r1, #36	; 0x24
 80022d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2101      	movs	r1, #1
 80022e4:	438a      	bics	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a11      	ldr	r2, [pc, #68]	; (8002338 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2101      	movs	r1, #1
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2241      	movs	r2, #65	; 0x41
 800231e:	2120      	movs	r1, #32
 8002320:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2240      	movs	r2, #64	; 0x40
 8002326:	2100      	movs	r1, #0
 8002328:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	e000      	b.n	8002330 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800232e:	2302      	movs	r3, #2
  }
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	b004      	add	sp, #16
 8002336:	bd80      	pop	{r7, pc}
 8002338:	fffff0ff 	.word	0xfffff0ff

0800233c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d102      	bne.n	8002350 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	f000 fb76 	bl	8002a3c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2201      	movs	r2, #1
 8002356:	4013      	ands	r3, r2
 8002358:	d100      	bne.n	800235c <HAL_RCC_OscConfig+0x20>
 800235a:	e08e      	b.n	800247a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800235c:	4bc5      	ldr	r3, [pc, #788]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	220c      	movs	r2, #12
 8002362:	4013      	ands	r3, r2
 8002364:	2b04      	cmp	r3, #4
 8002366:	d00e      	beq.n	8002386 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002368:	4bc2      	ldr	r3, [pc, #776]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	220c      	movs	r2, #12
 800236e:	4013      	ands	r3, r2
 8002370:	2b08      	cmp	r3, #8
 8002372:	d117      	bne.n	80023a4 <HAL_RCC_OscConfig+0x68>
 8002374:	4bbf      	ldr	r3, [pc, #764]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	23c0      	movs	r3, #192	; 0xc0
 800237a:	025b      	lsls	r3, r3, #9
 800237c:	401a      	ands	r2, r3
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	025b      	lsls	r3, r3, #9
 8002382:	429a      	cmp	r2, r3
 8002384:	d10e      	bne.n	80023a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002386:	4bbb      	ldr	r3, [pc, #748]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	029b      	lsls	r3, r3, #10
 800238e:	4013      	ands	r3, r2
 8002390:	d100      	bne.n	8002394 <HAL_RCC_OscConfig+0x58>
 8002392:	e071      	b.n	8002478 <HAL_RCC_OscConfig+0x13c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d000      	beq.n	800239e <HAL_RCC_OscConfig+0x62>
 800239c:	e06c      	b.n	8002478 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	f000 fb4c 	bl	8002a3c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_OscConfig+0x80>
 80023ac:	4bb1      	ldr	r3, [pc, #708]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4bb0      	ldr	r3, [pc, #704]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80023b2:	2180      	movs	r1, #128	; 0x80
 80023b4:	0249      	lsls	r1, r1, #9
 80023b6:	430a      	orrs	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	e02f      	b.n	800241c <HAL_RCC_OscConfig+0xe0>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10c      	bne.n	80023de <HAL_RCC_OscConfig+0xa2>
 80023c4:	4bab      	ldr	r3, [pc, #684]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4baa      	ldr	r3, [pc, #680]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80023ca:	49ab      	ldr	r1, [pc, #684]	; (8002678 <HAL_RCC_OscConfig+0x33c>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	4ba8      	ldr	r3, [pc, #672]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4ba7      	ldr	r3, [pc, #668]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80023d6:	49a9      	ldr	r1, [pc, #676]	; (800267c <HAL_RCC_OscConfig+0x340>)
 80023d8:	400a      	ands	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e01e      	b.n	800241c <HAL_RCC_OscConfig+0xe0>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d10e      	bne.n	8002404 <HAL_RCC_OscConfig+0xc8>
 80023e6:	4ba3      	ldr	r3, [pc, #652]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4ba2      	ldr	r3, [pc, #648]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80023ec:	2180      	movs	r1, #128	; 0x80
 80023ee:	02c9      	lsls	r1, r1, #11
 80023f0:	430a      	orrs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	4b9f      	ldr	r3, [pc, #636]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b9e      	ldr	r3, [pc, #632]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	0249      	lsls	r1, r1, #9
 80023fe:	430a      	orrs	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	e00b      	b.n	800241c <HAL_RCC_OscConfig+0xe0>
 8002404:	4b9b      	ldr	r3, [pc, #620]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b9a      	ldr	r3, [pc, #616]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 800240a:	499b      	ldr	r1, [pc, #620]	; (8002678 <HAL_RCC_OscConfig+0x33c>)
 800240c:	400a      	ands	r2, r1
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	4b98      	ldr	r3, [pc, #608]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b97      	ldr	r3, [pc, #604]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002416:	4999      	ldr	r1, [pc, #612]	; (800267c <HAL_RCC_OscConfig+0x340>)
 8002418:	400a      	ands	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d014      	beq.n	800244e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff f808 	bl	8001438 <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800242e:	f7ff f803 	bl	8001438 <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b64      	cmp	r3, #100	; 0x64
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e2fd      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002440:	4b8c      	ldr	r3, [pc, #560]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	029b      	lsls	r3, r3, #10
 8002448:	4013      	ands	r3, r2
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0xf2>
 800244c:	e015      	b.n	800247a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244e:	f7fe fff3 	bl	8001438 <HAL_GetTick>
 8002452:	0003      	movs	r3, r0
 8002454:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002458:	f7fe ffee 	bl	8001438 <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e2e8      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246a:	4b82      	ldr	r3, [pc, #520]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	029b      	lsls	r3, r3, #10
 8002472:	4013      	ands	r3, r2
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x11c>
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2202      	movs	r2, #2
 8002480:	4013      	ands	r3, r2
 8002482:	d100      	bne.n	8002486 <HAL_RCC_OscConfig+0x14a>
 8002484:	e06c      	b.n	8002560 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002486:	4b7b      	ldr	r3, [pc, #492]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	220c      	movs	r2, #12
 800248c:	4013      	ands	r3, r2
 800248e:	d00e      	beq.n	80024ae <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002490:	4b78      	ldr	r3, [pc, #480]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	220c      	movs	r2, #12
 8002496:	4013      	ands	r3, r2
 8002498:	2b08      	cmp	r3, #8
 800249a:	d11f      	bne.n	80024dc <HAL_RCC_OscConfig+0x1a0>
 800249c:	4b75      	ldr	r3, [pc, #468]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	23c0      	movs	r3, #192	; 0xc0
 80024a2:	025b      	lsls	r3, r3, #9
 80024a4:	401a      	ands	r2, r3
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d116      	bne.n	80024dc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ae:	4b71      	ldr	r3, [pc, #452]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2202      	movs	r2, #2
 80024b4:	4013      	ands	r3, r2
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_OscConfig+0x188>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e2bb      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b6b      	ldr	r3, [pc, #428]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	22f8      	movs	r2, #248	; 0xf8
 80024ca:	4393      	bics	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00da      	lsls	r2, r3, #3
 80024d4:	4b67      	ldr	r3, [pc, #412]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80024d6:	430a      	orrs	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	e041      	b.n	8002560 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d024      	beq.n	800252e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e4:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b62      	ldr	r3, [pc, #392]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80024ea:	2101      	movs	r1, #1
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe ffa2 	bl	8001438 <HAL_GetTick>
 80024f4:	0003      	movs	r3, r0
 80024f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fa:	f7fe ff9d 	bl	8001438 <HAL_GetTick>
 80024fe:	0002      	movs	r2, r0
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e297      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250c:	4b59      	ldr	r3, [pc, #356]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2202      	movs	r2, #2
 8002512:	4013      	ands	r3, r2
 8002514:	d0f1      	beq.n	80024fa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002516:	4b57      	ldr	r3, [pc, #348]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	22f8      	movs	r2, #248	; 0xf8
 800251c:	4393      	bics	r3, r2
 800251e:	0019      	movs	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	00da      	lsls	r2, r3, #3
 8002526:	4b53      	ldr	r3, [pc, #332]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e018      	b.n	8002560 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252e:	4b51      	ldr	r3, [pc, #324]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4b50      	ldr	r3, [pc, #320]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002534:	2101      	movs	r1, #1
 8002536:	438a      	bics	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7fe ff7d 	bl	8001438 <HAL_GetTick>
 800253e:	0003      	movs	r3, r0
 8002540:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002544:	f7fe ff78 	bl	8001438 <HAL_GetTick>
 8002548:	0002      	movs	r2, r0
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e272      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2202      	movs	r2, #2
 800255c:	4013      	ands	r3, r2
 800255e:	d1f1      	bne.n	8002544 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2208      	movs	r2, #8
 8002566:	4013      	ands	r3, r2
 8002568:	d036      	beq.n	80025d8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d019      	beq.n	80025a6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002572:	4b40      	ldr	r3, [pc, #256]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002576:	4b3f      	ldr	r3, [pc, #252]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002578:	2101      	movs	r1, #1
 800257a:	430a      	orrs	r2, r1
 800257c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257e:	f7fe ff5b 	bl	8001438 <HAL_GetTick>
 8002582:	0003      	movs	r3, r0
 8002584:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002588:	f7fe ff56 	bl	8001438 <HAL_GetTick>
 800258c:	0002      	movs	r2, r0
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e250      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259a:	4b36      	ldr	r3, [pc, #216]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	2202      	movs	r2, #2
 80025a0:	4013      	ands	r3, r2
 80025a2:	d0f1      	beq.n	8002588 <HAL_RCC_OscConfig+0x24c>
 80025a4:	e018      	b.n	80025d8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a6:	4b33      	ldr	r3, [pc, #204]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80025a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025aa:	4b32      	ldr	r3, [pc, #200]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80025ac:	2101      	movs	r1, #1
 80025ae:	438a      	bics	r2, r1
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7fe ff41 	bl	8001438 <HAL_GetTick>
 80025b6:	0003      	movs	r3, r0
 80025b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025bc:	f7fe ff3c 	bl	8001438 <HAL_GetTick>
 80025c0:	0002      	movs	r2, r0
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e236      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ce:	4b29      	ldr	r3, [pc, #164]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	2202      	movs	r2, #2
 80025d4:	4013      	ands	r3, r2
 80025d6:	d1f1      	bne.n	80025bc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2204      	movs	r2, #4
 80025de:	4013      	ands	r3, r2
 80025e0:	d100      	bne.n	80025e4 <HAL_RCC_OscConfig+0x2a8>
 80025e2:	e0b5      	b.n	8002750 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e4:	231f      	movs	r3, #31
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ec:	4b21      	ldr	r3, [pc, #132]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80025ee:	69da      	ldr	r2, [r3, #28]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	055b      	lsls	r3, r3, #21
 80025f4:	4013      	ands	r3, r2
 80025f6:	d111      	bne.n	800261c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f8:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80025fa:	69da      	ldr	r2, [r3, #28]
 80025fc:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80025fe:	2180      	movs	r1, #128	; 0x80
 8002600:	0549      	lsls	r1, r1, #21
 8002602:	430a      	orrs	r2, r1
 8002604:	61da      	str	r2, [r3, #28]
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002608:	69da      	ldr	r2, [r3, #28]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	055b      	lsls	r3, r3, #21
 800260e:	4013      	ands	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002614:	231f      	movs	r3, #31
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_RCC_OscConfig+0x344>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4013      	ands	r3, r2
 8002626:	d11a      	bne.n	800265e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002628:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_RCC_OscConfig+0x344>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <HAL_RCC_OscConfig+0x344>)
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	0049      	lsls	r1, r1, #1
 8002632:	430a      	orrs	r2, r1
 8002634:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002636:	f7fe feff 	bl	8001438 <HAL_GetTick>
 800263a:	0003      	movs	r3, r0
 800263c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002640:	f7fe fefa 	bl	8001438 <HAL_GetTick>
 8002644:	0002      	movs	r2, r0
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e1f4      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_OscConfig+0x344>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4013      	ands	r3, r2
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d10e      	bne.n	8002684 <HAL_RCC_OscConfig+0x348>
 8002666:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 8002668:	6a1a      	ldr	r2, [r3, #32]
 800266a:	4b02      	ldr	r3, [pc, #8]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 800266c:	2101      	movs	r1, #1
 800266e:	430a      	orrs	r2, r1
 8002670:	621a      	str	r2, [r3, #32]
 8002672:	e035      	b.n	80026e0 <HAL_RCC_OscConfig+0x3a4>
 8002674:	40021000 	.word	0x40021000
 8002678:	fffeffff 	.word	0xfffeffff
 800267c:	fffbffff 	.word	0xfffbffff
 8002680:	40007000 	.word	0x40007000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10c      	bne.n	80026a6 <HAL_RCC_OscConfig+0x36a>
 800268c:	4bca      	ldr	r3, [pc, #808]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 800268e:	6a1a      	ldr	r2, [r3, #32]
 8002690:	4bc9      	ldr	r3, [pc, #804]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002692:	2101      	movs	r1, #1
 8002694:	438a      	bics	r2, r1
 8002696:	621a      	str	r2, [r3, #32]
 8002698:	4bc7      	ldr	r3, [pc, #796]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 800269a:	6a1a      	ldr	r2, [r3, #32]
 800269c:	4bc6      	ldr	r3, [pc, #792]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 800269e:	2104      	movs	r1, #4
 80026a0:	438a      	bics	r2, r1
 80026a2:	621a      	str	r2, [r3, #32]
 80026a4:	e01c      	b.n	80026e0 <HAL_RCC_OscConfig+0x3a4>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x38c>
 80026ae:	4bc2      	ldr	r3, [pc, #776]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80026b0:	6a1a      	ldr	r2, [r3, #32]
 80026b2:	4bc1      	ldr	r3, [pc, #772]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80026b4:	2104      	movs	r1, #4
 80026b6:	430a      	orrs	r2, r1
 80026b8:	621a      	str	r2, [r3, #32]
 80026ba:	4bbf      	ldr	r3, [pc, #764]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80026bc:	6a1a      	ldr	r2, [r3, #32]
 80026be:	4bbe      	ldr	r3, [pc, #760]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80026c0:	2101      	movs	r1, #1
 80026c2:	430a      	orrs	r2, r1
 80026c4:	621a      	str	r2, [r3, #32]
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0x3a4>
 80026c8:	4bbb      	ldr	r3, [pc, #748]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80026ca:	6a1a      	ldr	r2, [r3, #32]
 80026cc:	4bba      	ldr	r3, [pc, #744]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80026ce:	2101      	movs	r1, #1
 80026d0:	438a      	bics	r2, r1
 80026d2:	621a      	str	r2, [r3, #32]
 80026d4:	4bb8      	ldr	r3, [pc, #736]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80026d6:	6a1a      	ldr	r2, [r3, #32]
 80026d8:	4bb7      	ldr	r3, [pc, #732]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80026da:	2104      	movs	r1, #4
 80026dc:	438a      	bics	r2, r1
 80026de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d014      	beq.n	8002712 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e8:	f7fe fea6 	bl	8001438 <HAL_GetTick>
 80026ec:	0003      	movs	r3, r0
 80026ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f0:	e009      	b.n	8002706 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7fe fea1 	bl	8001438 <HAL_GetTick>
 80026f6:	0002      	movs	r2, r0
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	4aaf      	ldr	r2, [pc, #700]	; (80029bc <HAL_RCC_OscConfig+0x680>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e19a      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002706:	4bac      	ldr	r3, [pc, #688]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	2202      	movs	r2, #2
 800270c:	4013      	ands	r3, r2
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x3b6>
 8002710:	e013      	b.n	800273a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002712:	f7fe fe91 	bl	8001438 <HAL_GetTick>
 8002716:	0003      	movs	r3, r0
 8002718:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271a:	e009      	b.n	8002730 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271c:	f7fe fe8c 	bl	8001438 <HAL_GetTick>
 8002720:	0002      	movs	r2, r0
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	4aa5      	ldr	r2, [pc, #660]	; (80029bc <HAL_RCC_OscConfig+0x680>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e185      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002730:	4ba1      	ldr	r3, [pc, #644]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	2202      	movs	r2, #2
 8002736:	4013      	ands	r3, r2
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800273a:	231f      	movs	r3, #31
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002744:	4b9c      	ldr	r3, [pc, #624]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002746:	69da      	ldr	r2, [r3, #28]
 8002748:	4b9b      	ldr	r3, [pc, #620]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 800274a:	499d      	ldr	r1, [pc, #628]	; (80029c0 <HAL_RCC_OscConfig+0x684>)
 800274c:	400a      	ands	r2, r1
 800274e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2210      	movs	r2, #16
 8002756:	4013      	ands	r3, r2
 8002758:	d063      	beq.n	8002822 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d12a      	bne.n	80027b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002762:	4b95      	ldr	r3, [pc, #596]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002766:	4b94      	ldr	r3, [pc, #592]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002768:	2104      	movs	r1, #4
 800276a:	430a      	orrs	r2, r1
 800276c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800276e:	4b92      	ldr	r3, [pc, #584]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002772:	4b91      	ldr	r3, [pc, #580]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002774:	2101      	movs	r1, #1
 8002776:	430a      	orrs	r2, r1
 8002778:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277a:	f7fe fe5d 	bl	8001438 <HAL_GetTick>
 800277e:	0003      	movs	r3, r0
 8002780:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002784:	f7fe fe58 	bl	8001438 <HAL_GetTick>
 8002788:	0002      	movs	r2, r0
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e152      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002796:	4b88      	ldr	r3, [pc, #544]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279a:	2202      	movs	r2, #2
 800279c:	4013      	ands	r3, r2
 800279e:	d0f1      	beq.n	8002784 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027a0:	4b85      	ldr	r3, [pc, #532]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80027a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a4:	22f8      	movs	r2, #248	; 0xf8
 80027a6:	4393      	bics	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	00da      	lsls	r2, r3, #3
 80027b0:	4b81      	ldr	r3, [pc, #516]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	635a      	str	r2, [r3, #52]	; 0x34
 80027b6:	e034      	b.n	8002822 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	3305      	adds	r3, #5
 80027be:	d111      	bne.n	80027e4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80027c0:	4b7d      	ldr	r3, [pc, #500]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80027c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c4:	4b7c      	ldr	r3, [pc, #496]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80027c6:	2104      	movs	r1, #4
 80027c8:	438a      	bics	r2, r1
 80027ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027cc:	4b7a      	ldr	r3, [pc, #488]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80027ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d0:	22f8      	movs	r2, #248	; 0xf8
 80027d2:	4393      	bics	r3, r2
 80027d4:	0019      	movs	r1, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	00da      	lsls	r2, r3, #3
 80027dc:	4b76      	ldr	r3, [pc, #472]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80027de:	430a      	orrs	r2, r1
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34
 80027e2:	e01e      	b.n	8002822 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027e4:	4b74      	ldr	r3, [pc, #464]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80027e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e8:	4b73      	ldr	r3, [pc, #460]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80027ea:	2104      	movs	r1, #4
 80027ec:	430a      	orrs	r2, r1
 80027ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80027f0:	4b71      	ldr	r3, [pc, #452]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80027f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027f4:	4b70      	ldr	r3, [pc, #448]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80027f6:	2101      	movs	r1, #1
 80027f8:	438a      	bics	r2, r1
 80027fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fc:	f7fe fe1c 	bl	8001438 <HAL_GetTick>
 8002800:	0003      	movs	r3, r0
 8002802:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002806:	f7fe fe17 	bl	8001438 <HAL_GetTick>
 800280a:	0002      	movs	r2, r0
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e111      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002818:	4b67      	ldr	r3, [pc, #412]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 800281a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281c:	2202      	movs	r2, #2
 800281e:	4013      	ands	r3, r2
 8002820:	d1f1      	bne.n	8002806 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2220      	movs	r2, #32
 8002828:	4013      	ands	r3, r2
 800282a:	d05c      	beq.n	80028e6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800282c:	4b62      	ldr	r3, [pc, #392]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	220c      	movs	r2, #12
 8002832:	4013      	ands	r3, r2
 8002834:	2b0c      	cmp	r3, #12
 8002836:	d00e      	beq.n	8002856 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002838:	4b5f      	ldr	r3, [pc, #380]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	220c      	movs	r2, #12
 800283e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002840:	2b08      	cmp	r3, #8
 8002842:	d114      	bne.n	800286e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002844:	4b5c      	ldr	r3, [pc, #368]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	23c0      	movs	r3, #192	; 0xc0
 800284a:	025b      	lsls	r3, r3, #9
 800284c:	401a      	ands	r2, r3
 800284e:	23c0      	movs	r3, #192	; 0xc0
 8002850:	025b      	lsls	r3, r3, #9
 8002852:	429a      	cmp	r2, r3
 8002854:	d10b      	bne.n	800286e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002856:	4b58      	ldr	r3, [pc, #352]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	025b      	lsls	r3, r3, #9
 800285e:	4013      	ands	r3, r2
 8002860:	d040      	beq.n	80028e4 <HAL_RCC_OscConfig+0x5a8>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d03c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0e6      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01b      	beq.n	80028ae <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002876:	4b50      	ldr	r3, [pc, #320]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287a:	4b4f      	ldr	r3, [pc, #316]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	0249      	lsls	r1, r1, #9
 8002880:	430a      	orrs	r2, r1
 8002882:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe fdd8 	bl	8001438 <HAL_GetTick>
 8002888:	0003      	movs	r3, r0
 800288a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800288e:	f7fe fdd3 	bl	8001438 <HAL_GetTick>
 8002892:	0002      	movs	r2, r0
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e0cd      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028a0:	4b45      	ldr	r3, [pc, #276]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80028a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	025b      	lsls	r3, r3, #9
 80028a8:	4013      	ands	r3, r2
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x552>
 80028ac:	e01b      	b.n	80028e6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80028ae:	4b42      	ldr	r3, [pc, #264]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80028b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b2:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80028b4:	4943      	ldr	r1, [pc, #268]	; (80029c4 <HAL_RCC_OscConfig+0x688>)
 80028b6:	400a      	ands	r2, r1
 80028b8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7fe fdbd 	bl	8001438 <HAL_GetTick>
 80028be:	0003      	movs	r3, r0
 80028c0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c4:	f7fe fdb8 	bl	8001438 <HAL_GetTick>
 80028c8:	0002      	movs	r2, r0
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0b2      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80028d6:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80028d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028da:	2380      	movs	r3, #128	; 0x80
 80028dc:	025b      	lsls	r3, r3, #9
 80028de:	4013      	ands	r3, r2
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x588>
 80028e2:	e000      	b.n	80028e6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80028e4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d100      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5b4>
 80028ee:	e0a4      	b.n	8002a3a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f0:	4b31      	ldr	r3, [pc, #196]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	220c      	movs	r2, #12
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d100      	bne.n	80028fe <HAL_RCC_OscConfig+0x5c2>
 80028fc:	e078      	b.n	80029f0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	2b02      	cmp	r3, #2
 8002904:	d14c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b2c      	ldr	r3, [pc, #176]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 800290c:	492e      	ldr	r1, [pc, #184]	; (80029c8 <HAL_RCC_OscConfig+0x68c>)
 800290e:	400a      	ands	r2, r1
 8002910:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002912:	f7fe fd91 	bl	8001438 <HAL_GetTick>
 8002916:	0003      	movs	r3, r0
 8002918:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe fd8c 	bl	8001438 <HAL_GetTick>
 8002920:	0002      	movs	r2, r0
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e086      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292e:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	049b      	lsls	r3, r3, #18
 8002936:	4013      	ands	r3, r2
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800293a:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	220f      	movs	r2, #15
 8002940:	4393      	bics	r3, r2
 8002942:	0019      	movs	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 800294a:	430a      	orrs	r2, r1
 800294c:	62da      	str	r2, [r3, #44]	; 0x2c
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4a1e      	ldr	r2, [pc, #120]	; (80029cc <HAL_RCC_OscConfig+0x690>)
 8002954:	4013      	ands	r3, r2
 8002956:	0019      	movs	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	431a      	orrs	r2, r3
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002964:	430a      	orrs	r2, r1
 8002966:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	0449      	lsls	r1, r1, #17
 8002972:	430a      	orrs	r2, r1
 8002974:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002976:	f7fe fd5f 	bl	8001438 <HAL_GetTick>
 800297a:	0003      	movs	r3, r0
 800297c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002980:	f7fe fd5a 	bl	8001438 <HAL_GetTick>
 8002984:	0002      	movs	r2, r0
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e054      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	049b      	lsls	r3, r3, #18
 800299a:	4013      	ands	r3, r2
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x644>
 800299e:	e04c      	b.n	8002a3a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <HAL_RCC_OscConfig+0x67c>)
 80029a6:	4908      	ldr	r1, [pc, #32]	; (80029c8 <HAL_RCC_OscConfig+0x68c>)
 80029a8:	400a      	ands	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe fd44 	bl	8001438 <HAL_GetTick>
 80029b0:	0003      	movs	r3, r0
 80029b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b4:	e015      	b.n	80029e2 <HAL_RCC_OscConfig+0x6a6>
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	40021000 	.word	0x40021000
 80029bc:	00001388 	.word	0x00001388
 80029c0:	efffffff 	.word	0xefffffff
 80029c4:	fffeffff 	.word	0xfffeffff
 80029c8:	feffffff 	.word	0xfeffffff
 80029cc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d0:	f7fe fd32 	bl	8001438 <HAL_GetTick>
 80029d4:	0002      	movs	r2, r0
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e02c      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <HAL_RCC_OscConfig+0x708>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	049b      	lsls	r3, r3, #18
 80029ea:	4013      	ands	r3, r2
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x694>
 80029ee:	e024      	b.n	8002a3a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e01f      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_RCC_OscConfig+0x708>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_RCC_OscConfig+0x708>)
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	23c0      	movs	r3, #192	; 0xc0
 8002a0c:	025b      	lsls	r3, r3, #9
 8002a0e:	401a      	ands	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d10e      	bne.n	8002a36 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	220f      	movs	r2, #15
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	23f0      	movs	r3, #240	; 0xf0
 8002a2a:	039b      	lsls	r3, r3, #14
 8002a2c:	401a      	ands	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b008      	add	sp, #32
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000

08002a48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0bf      	b.n	8002bdc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b61      	ldr	r3, [pc, #388]	; (8002be4 <HAL_RCC_ClockConfig+0x19c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2201      	movs	r2, #1
 8002a62:	4013      	ands	r3, r2
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d911      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b5e      	ldr	r3, [pc, #376]	; (8002be4 <HAL_RCC_ClockConfig+0x19c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4393      	bics	r3, r2
 8002a72:	0019      	movs	r1, r3
 8002a74:	4b5b      	ldr	r3, [pc, #364]	; (8002be4 <HAL_RCC_ClockConfig+0x19c>)
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7c:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <HAL_RCC_ClockConfig+0x19c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2201      	movs	r2, #1
 8002a82:	4013      	ands	r3, r2
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d001      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0a6      	b.n	8002bdc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2202      	movs	r2, #2
 8002a94:	4013      	ands	r3, r2
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d006      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002aa2:	4b51      	ldr	r3, [pc, #324]	; (8002be8 <HAL_RCC_ClockConfig+0x1a0>)
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	4b50      	ldr	r3, [pc, #320]	; (8002be8 <HAL_RCC_ClockConfig+0x1a0>)
 8002aa8:	21e0      	movs	r1, #224	; 0xe0
 8002aaa:	00c9      	lsls	r1, r1, #3
 8002aac:	430a      	orrs	r2, r1
 8002aae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b4d      	ldr	r3, [pc, #308]	; (8002be8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	22f0      	movs	r2, #240	; 0xf0
 8002ab6:	4393      	bics	r3, r2
 8002ab8:	0019      	movs	r1, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4013      	ands	r3, r2
 8002acc:	d04c      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b44      	ldr	r3, [pc, #272]	; (8002be8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	029b      	lsls	r3, r3, #10
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d120      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e07a      	b.n	8002bdc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aee:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <HAL_RCC_ClockConfig+0x1a0>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	049b      	lsls	r3, r3, #18
 8002af6:	4013      	ands	r3, r2
 8002af8:	d114      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e06e      	b.n	8002bdc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b06:	4b38      	ldr	r3, [pc, #224]	; (8002be8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	025b      	lsls	r3, r3, #9
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d108      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e062      	b.n	8002bdc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	4b34      	ldr	r3, [pc, #208]	; (8002be8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e05b      	b.n	8002bdc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b24:	4b30      	ldr	r3, [pc, #192]	; (8002be8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2203      	movs	r2, #3
 8002b2a:	4393      	bics	r3, r2
 8002b2c:	0019      	movs	r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b34:	430a      	orrs	r2, r1
 8002b36:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fc7e 	bl	8001438 <HAL_GetTick>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b40:	e009      	b.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b42:	f7fe fc79 	bl	8001438 <HAL_GetTick>
 8002b46:	0002      	movs	r2, r0
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	4a27      	ldr	r2, [pc, #156]	; (8002bec <HAL_RCC_ClockConfig+0x1a4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e042      	b.n	8002bdc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1ec      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <HAL_RCC_ClockConfig+0x19c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4013      	ands	r3, r2
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d211      	bcs.n	8002b9a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_RCC_ClockConfig+0x19c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4393      	bics	r3, r2
 8002b7e:	0019      	movs	r1, r3
 8002b80:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <HAL_RCC_ClockConfig+0x19c>)
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b88:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <HAL_RCC_ClockConfig+0x19c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	4013      	ands	r3, r2
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d001      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e020      	b.n	8002bdc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d009      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba4:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <HAL_RCC_ClockConfig+0x1a8>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <HAL_RCC_ClockConfig+0x1a0>)
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bb8:	f000 f820 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002bbc:	0001      	movs	r1, r0
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_RCC_ClockConfig+0x1a0>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <HAL_RCC_ClockConfig+0x1ac>)
 8002bca:	5cd3      	ldrb	r3, [r2, r3]
 8002bcc:	000a      	movs	r2, r1
 8002bce:	40da      	lsrs	r2, r3
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b0>)
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7fe fb45 	bl	8001264 <HAL_InitTick>
  
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b004      	add	sp, #16
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40022000 	.word	0x40022000
 8002be8:	40021000 	.word	0x40021000
 8002bec:	00001388 	.word	0x00001388
 8002bf0:	fffff8ff 	.word	0xfffff8ff
 8002bf4:	08003c80 	.word	0x08003c80
 8002bf8:	20000000 	.word	0x20000000

08002bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b08f      	sub	sp, #60	; 0x3c
 8002c00:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002c02:	2314      	movs	r3, #20
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	4a37      	ldr	r2, [pc, #220]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002c08:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c0a:	c313      	stmia	r3!, {r0, r1, r4}
 8002c0c:	6812      	ldr	r2, [r2, #0]
 8002c0e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	4a35      	ldr	r2, [pc, #212]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0xec>)
 8002c14:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c16:	c313      	stmia	r3!, {r0, r1, r4}
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c20:	2300      	movs	r3, #0
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c24:	2300      	movs	r3, #0
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
 8002c28:	2300      	movs	r3, #0
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002c30:	4b2e      	ldr	r3, [pc, #184]	; (8002cec <HAL_RCC_GetSysClockFreq+0xf0>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	220c      	movs	r2, #12
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d006      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x52>
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	d043      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0xd0>
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d144      	bne.n	8002cd2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c48:	4b29      	ldr	r3, [pc, #164]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c4c:	e044      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	0c9b      	lsrs	r3, r3, #18
 8002c52:	220f      	movs	r2, #15
 8002c54:	4013      	ands	r3, r2
 8002c56:	2214      	movs	r2, #20
 8002c58:	18ba      	adds	r2, r7, r2
 8002c5a:	5cd3      	ldrb	r3, [r2, r3]
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c5e:	4b23      	ldr	r3, [pc, #140]	; (8002cec <HAL_RCC_GetSysClockFreq+0xf0>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	220f      	movs	r2, #15
 8002c64:	4013      	ands	r3, r2
 8002c66:	1d3a      	adds	r2, r7, #4
 8002c68:	5cd3      	ldrb	r3, [r2, r3]
 8002c6a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c6e:	23c0      	movs	r3, #192	; 0xc0
 8002c70:	025b      	lsls	r3, r3, #9
 8002c72:	401a      	ands	r2, r3
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	025b      	lsls	r3, r3, #9
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d109      	bne.n	8002c90 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c7e:	481c      	ldr	r0, [pc, #112]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c80:	f7fd fa42 	bl	8000108 <__udivsi3>
 8002c84:	0003      	movs	r3, r0
 8002c86:	001a      	movs	r2, r3
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	4353      	muls	r3, r2
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8e:	e01a      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c92:	23c0      	movs	r3, #192	; 0xc0
 8002c94:	025b      	lsls	r3, r3, #9
 8002c96:	401a      	ands	r2, r3
 8002c98:	23c0      	movs	r3, #192	; 0xc0
 8002c9a:	025b      	lsls	r3, r3, #9
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d109      	bne.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ca2:	4814      	ldr	r0, [pc, #80]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ca4:	f7fd fa30 	bl	8000108 <__udivsi3>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	001a      	movs	r2, r3
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	4353      	muls	r3, r2
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cb6:	480e      	ldr	r0, [pc, #56]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002cb8:	f7fd fa26 	bl	8000108 <__udivsi3>
 8002cbc:	0003      	movs	r3, r0
 8002cbe:	001a      	movs	r2, r3
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	4353      	muls	r3, r2
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cca:	e005      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cd0:	e002      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cd2:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002cd4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cd6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b00f      	add	sp, #60	; 0x3c
 8002ce0:	bd90      	pop	{r4, r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	08003c60 	.word	0x08003c60
 8002ce8:	08003c70 	.word	0x08003c70
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	007a1200 	.word	0x007a1200
 8002cf4:	02dc6c00 	.word	0x02dc6c00

08002cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cfc:	4b02      	ldr	r3, [pc, #8]	; (8002d08 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	20000000 	.word	0x20000000

08002d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d10:	f7ff fff2 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d14:	0001      	movs	r1, r0
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	4013      	ands	r3, r2
 8002d20:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d22:	5cd3      	ldrb	r3, [r2, r3]
 8002d24:	40d9      	lsrs	r1, r3
 8002d26:	000b      	movs	r3, r1
}    
 8002d28:	0018      	movs	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08003c90 	.word	0x08003c90

08002d38 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2207      	movs	r2, #7
 8002d46:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d48:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <HAL_RCC_GetClockConfig+0x4c>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	401a      	ands	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_GetClockConfig+0x4c>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	22f0      	movs	r2, #240	; 0xf0
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_RCC_GetClockConfig+0x4c>)
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	23e0      	movs	r3, #224	; 0xe0
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	401a      	ands	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002d6e:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_RCC_GetClockConfig+0x50>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2201      	movs	r2, #1
 8002d74:	401a      	ands	r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	601a      	str	r2, [r3, #0]
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b002      	add	sp, #8
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40022000 	.word	0x40022000

08002d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	025b      	lsls	r3, r3, #9
 8002da4:	4013      	ands	r3, r2
 8002da6:	d100      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002da8:	e08f      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002daa:	2317      	movs	r3, #23
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db2:	4b67      	ldr	r3, [pc, #412]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002db4:	69da      	ldr	r2, [r3, #28]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	055b      	lsls	r3, r3, #21
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d111      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	4b64      	ldr	r3, [pc, #400]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	0549      	lsls	r1, r1, #21
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	61da      	str	r2, [r3, #28]
 8002dcc:	4b60      	ldr	r3, [pc, #384]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	055b      	lsls	r3, r3, #21
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dda:	2317      	movs	r3, #23
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de2:	4b5c      	ldr	r3, [pc, #368]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4013      	ands	r3, r2
 8002dec:	d11a      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dee:	4b59      	ldr	r3, [pc, #356]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4b58      	ldr	r3, [pc, #352]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002df4:	2180      	movs	r1, #128	; 0x80
 8002df6:	0049      	lsls	r1, r1, #1
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fb1c 	bl	8001438 <HAL_GetTick>
 8002e00:	0003      	movs	r3, r0
 8002e02:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e04:	e008      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e06:	f7fe fb17 	bl	8001438 <HAL_GetTick>
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b64      	cmp	r3, #100	; 0x64
 8002e12:	d901      	bls.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e097      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	4b4e      	ldr	r3, [pc, #312]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4013      	ands	r3, r2
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e24:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	23c0      	movs	r3, #192	; 0xc0
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d034      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	23c0      	movs	r3, #192	; 0xc0
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4013      	ands	r3, r2
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d02c      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e46:	4b42      	ldr	r3, [pc, #264]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	4a43      	ldr	r2, [pc, #268]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e50:	4b3f      	ldr	r3, [pc, #252]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e52:	6a1a      	ldr	r2, [r3, #32]
 8002e54:	4b3e      	ldr	r3, [pc, #248]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	0249      	lsls	r1, r1, #9
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5e:	4b3c      	ldr	r3, [pc, #240]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e60:	6a1a      	ldr	r2, [r3, #32]
 8002e62:	4b3b      	ldr	r3, [pc, #236]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e64:	493d      	ldr	r1, [pc, #244]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e66:	400a      	ands	r2, r1
 8002e68:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e6a:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	4013      	ands	r3, r2
 8002e76:	d013      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fe fade 	bl	8001438 <HAL_GetTick>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e80:	e009      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e82:	f7fe fad9 	bl	8001438 <HAL_GetTick>
 8002e86:	0002      	movs	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	4a34      	ldr	r2, [pc, #208]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e058      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e96:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ea0:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4a2c      	ldr	r2, [pc, #176]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eb4:	2317      	movs	r3, #23
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d105      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebe:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ec4:	4927      	ldr	r1, [pc, #156]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ec6:	400a      	ands	r2, r1
 8002ec8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d009      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ed4:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	2203      	movs	r2, #3
 8002eda:	4393      	bics	r3, r2
 8002edc:	0019      	movs	r1, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2220      	movs	r2, #32
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d009      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ef2:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	2210      	movs	r2, #16
 8002ef8:	4393      	bics	r3, r2
 8002efa:	0019      	movs	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f02:	430a      	orrs	r2, r1
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	029b      	lsls	r3, r3, #10
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d009      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f12:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	2280      	movs	r2, #128	; 0x80
 8002f18:	4393      	bics	r3, r2
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f22:	430a      	orrs	r2, r1
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d009      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f32:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	2240      	movs	r2, #64	; 0x40
 8002f38:	4393      	bics	r3, r2
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f42:	430a      	orrs	r2, r1
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b006      	add	sp, #24
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40007000 	.word	0x40007000
 8002f58:	fffffcff 	.word	0xfffffcff
 8002f5c:	fffeffff 	.word	0xfffeffff
 8002f60:	00001388 	.word	0x00001388
 8002f64:	efffffff 	.word	0xefffffff

08002f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e01e      	b.n	8002fb8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	223d      	movs	r2, #61	; 0x3d
 8002f7e:	5c9b      	ldrb	r3, [r3, r2]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	223c      	movs	r2, #60	; 0x3c
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 f815 	bl	8002fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	223d      	movs	r2, #61	; 0x3d
 8002f9a:	2102      	movs	r1, #2
 8002f9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	0010      	movs	r0, r2
 8002faa:	f000 f969 	bl	8003280 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	223d      	movs	r2, #61	; 0x3d
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fc8:	46c0      	nop			; (mov r8, r8)
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b002      	add	sp, #8
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2207      	movs	r2, #7
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b06      	cmp	r3, #6
 8002ff8:	d007      	beq.n	800300a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2101      	movs	r1, #1
 8003006:	430a      	orrs	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	b004      	add	sp, #16
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2202      	movs	r2, #2
 8003024:	4013      	ands	r3, r2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d124      	bne.n	8003074 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2202      	movs	r2, #2
 8003032:	4013      	ands	r3, r2
 8003034:	2b02      	cmp	r3, #2
 8003036:	d11d      	bne.n	8003074 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2203      	movs	r2, #3
 800303e:	4252      	negs	r2, r2
 8003040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2203      	movs	r2, #3
 8003050:	4013      	ands	r3, r2
 8003052:	d004      	beq.n	800305e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	0018      	movs	r0, r3
 8003058:	f000 f8fa 	bl	8003250 <HAL_TIM_IC_CaptureCallback>
 800305c:	e007      	b.n	800306e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0018      	movs	r0, r3
 8003062:	f000 f8ed 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	0018      	movs	r0, r3
 800306a:	f000 f8f9 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2204      	movs	r2, #4
 800307c:	4013      	ands	r3, r2
 800307e:	2b04      	cmp	r3, #4
 8003080:	d125      	bne.n	80030ce <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2204      	movs	r2, #4
 800308a:	4013      	ands	r3, r2
 800308c:	2b04      	cmp	r3, #4
 800308e:	d11e      	bne.n	80030ce <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2205      	movs	r2, #5
 8003096:	4252      	negs	r2, r2
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2202      	movs	r2, #2
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	23c0      	movs	r3, #192	; 0xc0
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4013      	ands	r3, r2
 80030ac:	d004      	beq.n	80030b8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f000 f8cd 	bl	8003250 <HAL_TIM_IC_CaptureCallback>
 80030b6:	e007      	b.n	80030c8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 f8c0 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f000 f8cc 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2208      	movs	r2, #8
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d124      	bne.n	8003126 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2208      	movs	r2, #8
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d11d      	bne.n	8003126 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2209      	movs	r2, #9
 80030f0:	4252      	negs	r2, r2
 80030f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2204      	movs	r2, #4
 80030f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	2203      	movs	r2, #3
 8003102:	4013      	ands	r3, r2
 8003104:	d004      	beq.n	8003110 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	0018      	movs	r0, r3
 800310a:	f000 f8a1 	bl	8003250 <HAL_TIM_IC_CaptureCallback>
 800310e:	e007      	b.n	8003120 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	0018      	movs	r0, r3
 8003114:	f000 f894 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	0018      	movs	r0, r3
 800311c:	f000 f8a0 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2210      	movs	r2, #16
 800312e:	4013      	ands	r3, r2
 8003130:	2b10      	cmp	r3, #16
 8003132:	d125      	bne.n	8003180 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2210      	movs	r2, #16
 800313c:	4013      	ands	r3, r2
 800313e:	2b10      	cmp	r3, #16
 8003140:	d11e      	bne.n	8003180 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2211      	movs	r2, #17
 8003148:	4252      	negs	r2, r2
 800314a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2208      	movs	r2, #8
 8003150:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	23c0      	movs	r3, #192	; 0xc0
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4013      	ands	r3, r2
 800315e:	d004      	beq.n	800316a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	0018      	movs	r0, r3
 8003164:	f000 f874 	bl	8003250 <HAL_TIM_IC_CaptureCallback>
 8003168:	e007      	b.n	800317a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	0018      	movs	r0, r3
 800316e:	f000 f867 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	0018      	movs	r0, r3
 8003176:	f000 f873 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2201      	movs	r2, #1
 8003188:	4013      	ands	r3, r2
 800318a:	2b01      	cmp	r3, #1
 800318c:	d10f      	bne.n	80031ae <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	4013      	ands	r3, r2
 8003198:	2b01      	cmp	r3, #1
 800319a:	d108      	bne.n	80031ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2202      	movs	r2, #2
 80031a2:	4252      	negs	r2, r2
 80031a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7fd fbf7 	bl	800099c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d10f      	bne.n	80031dc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2280      	movs	r2, #128	; 0x80
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b80      	cmp	r3, #128	; 0x80
 80031c8:	d108      	bne.n	80031dc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2281      	movs	r2, #129	; 0x81
 80031d0:	4252      	negs	r2, r2
 80031d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	0018      	movs	r0, r3
 80031d8:	f000 f8d0 	bl	800337c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2240      	movs	r2, #64	; 0x40
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b40      	cmp	r3, #64	; 0x40
 80031e8:	d10f      	bne.n	800320a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2240      	movs	r2, #64	; 0x40
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	d108      	bne.n	800320a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2241      	movs	r2, #65	; 0x41
 80031fe:	4252      	negs	r2, r2
 8003200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	0018      	movs	r0, r3
 8003206:	f000 f833 	bl	8003270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2220      	movs	r2, #32
 8003212:	4013      	ands	r3, r2
 8003214:	2b20      	cmp	r3, #32
 8003216:	d10f      	bne.n	8003238 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	4013      	ands	r3, r2
 8003222:	2b20      	cmp	r3, #32
 8003224:	d108      	bne.n	8003238 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2221      	movs	r2, #33	; 0x21
 800322c:	4252      	negs	r2, r2
 800322e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	0018      	movs	r0, r3
 8003234:	f000 f89a 	bl	800336c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b002      	add	sp, #8
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	b002      	add	sp, #8
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b002      	add	sp, #8
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b002      	add	sp, #8
 800327e:	bd80      	pop	{r7, pc}

08003280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a30      	ldr	r2, [pc, #192]	; (8003354 <TIM_Base_SetConfig+0xd4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d008      	beq.n	80032aa <TIM_Base_SetConfig+0x2a>
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	05db      	lsls	r3, r3, #23
 800329e:	429a      	cmp	r2, r3
 80032a0:	d003      	beq.n	80032aa <TIM_Base_SetConfig+0x2a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2c      	ldr	r2, [pc, #176]	; (8003358 <TIM_Base_SetConfig+0xd8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d108      	bne.n	80032bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2270      	movs	r2, #112	; 0x70
 80032ae:	4393      	bics	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a25      	ldr	r2, [pc, #148]	; (8003354 <TIM_Base_SetConfig+0xd4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d014      	beq.n	80032ee <TIM_Base_SetConfig+0x6e>
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	05db      	lsls	r3, r3, #23
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d00f      	beq.n	80032ee <TIM_Base_SetConfig+0x6e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a21      	ldr	r2, [pc, #132]	; (8003358 <TIM_Base_SetConfig+0xd8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00b      	beq.n	80032ee <TIM_Base_SetConfig+0x6e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a20      	ldr	r2, [pc, #128]	; (800335c <TIM_Base_SetConfig+0xdc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d007      	beq.n	80032ee <TIM_Base_SetConfig+0x6e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1f      	ldr	r2, [pc, #124]	; (8003360 <TIM_Base_SetConfig+0xe0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d003      	beq.n	80032ee <TIM_Base_SetConfig+0x6e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a1e      	ldr	r2, [pc, #120]	; (8003364 <TIM_Base_SetConfig+0xe4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d108      	bne.n	8003300 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <TIM_Base_SetConfig+0xe8>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2280      	movs	r2, #128	; 0x80
 8003304:	4393      	bics	r3, r2
 8003306:	001a      	movs	r2, r3
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <TIM_Base_SetConfig+0xd4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d007      	beq.n	800333e <TIM_Base_SetConfig+0xbe>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a0b      	ldr	r2, [pc, #44]	; (8003360 <TIM_Base_SetConfig+0xe0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d003      	beq.n	800333e <TIM_Base_SetConfig+0xbe>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <TIM_Base_SetConfig+0xe4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d103      	bne.n	8003346 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	615a      	str	r2, [r3, #20]
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b004      	add	sp, #16
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40012c00 	.word	0x40012c00
 8003358:	40000400 	.word	0x40000400
 800335c:	40002000 	.word	0x40002000
 8003360:	40014400 	.word	0x40014400
 8003364:	40014800 	.word	0x40014800
 8003368:	fffffcff 	.word	0xfffffcff

0800336c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	b002      	add	sp, #8
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b002      	add	sp, #8
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e044      	b.n	8003428 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d107      	bne.n	80033b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2270      	movs	r2, #112	; 0x70
 80033aa:	2100      	movs	r1, #0
 80033ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7fd ff09 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2224      	movs	r2, #36	; 0x24
 80033ba:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2101      	movs	r1, #1
 80033c8:	438a      	bics	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	0018      	movs	r0, r3
 80033d0:	f000 f830 	bl	8003434 <UART_SetConfig>
 80033d4:	0003      	movs	r3, r0
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e024      	b.n	8003428 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	0018      	movs	r0, r3
 80033ea:	f000 f9a9 	bl	8003740 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	490d      	ldr	r1, [pc, #52]	; (8003430 <HAL_UART_Init+0xa4>)
 80033fa:	400a      	ands	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	212a      	movs	r1, #42	; 0x2a
 800340a:	438a      	bics	r2, r1
 800340c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2101      	movs	r1, #1
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	0018      	movs	r0, r3
 8003422:	f000 fa41 	bl	80038a8 <UART_CheckIdleState>
 8003426:	0003      	movs	r3, r0
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b002      	add	sp, #8
 800342e:	bd80      	pop	{r7, pc}
 8003430:	ffffb7ff 	.word	0xffffb7ff

08003434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003440:	2317      	movs	r3, #23
 8003442:	18fb      	adds	r3, r7, r3
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4aad      	ldr	r2, [pc, #692]	; (800371c <UART_SetConfig+0x2e8>)
 8003468:	4013      	ands	r3, r2
 800346a:	0019      	movs	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	430a      	orrs	r2, r1
 8003474:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4aa8      	ldr	r2, [pc, #672]	; (8003720 <UART_SetConfig+0x2ec>)
 800347e:	4013      	ands	r3, r2
 8003480:	0019      	movs	r1, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	4a9f      	ldr	r2, [pc, #636]	; (8003724 <UART_SetConfig+0x2f0>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	0019      	movs	r1, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a9b      	ldr	r2, [pc, #620]	; (8003728 <UART_SetConfig+0x2f4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d125      	bne.n	800350a <UART_SetConfig+0xd6>
 80034be:	4b9b      	ldr	r3, [pc, #620]	; (800372c <UART_SetConfig+0x2f8>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	2203      	movs	r2, #3
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d00f      	beq.n	80034ea <UART_SetConfig+0xb6>
 80034ca:	d304      	bcc.n	80034d6 <UART_SetConfig+0xa2>
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d011      	beq.n	80034f4 <UART_SetConfig+0xc0>
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d005      	beq.n	80034e0 <UART_SetConfig+0xac>
 80034d4:	e013      	b.n	80034fe <UART_SetConfig+0xca>
 80034d6:	231f      	movs	r3, #31
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	e022      	b.n	8003526 <UART_SetConfig+0xf2>
 80034e0:	231f      	movs	r3, #31
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	2202      	movs	r2, #2
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e01d      	b.n	8003526 <UART_SetConfig+0xf2>
 80034ea:	231f      	movs	r3, #31
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	2204      	movs	r2, #4
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e018      	b.n	8003526 <UART_SetConfig+0xf2>
 80034f4:	231f      	movs	r3, #31
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	2208      	movs	r2, #8
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	e013      	b.n	8003526 <UART_SetConfig+0xf2>
 80034fe:	231f      	movs	r3, #31
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	2210      	movs	r2, #16
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	e00d      	b.n	8003526 <UART_SetConfig+0xf2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a88      	ldr	r2, [pc, #544]	; (8003730 <UART_SetConfig+0x2fc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d104      	bne.n	800351e <UART_SetConfig+0xea>
 8003514:	231f      	movs	r3, #31
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
 800351c:	e003      	b.n	8003526 <UART_SetConfig+0xf2>
 800351e:	231f      	movs	r3, #31
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	2210      	movs	r2, #16
 8003524:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	429a      	cmp	r2, r3
 8003530:	d000      	beq.n	8003534 <UART_SetConfig+0x100>
 8003532:	e07d      	b.n	8003630 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8003534:	231f      	movs	r3, #31
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d01c      	beq.n	8003578 <UART_SetConfig+0x144>
 800353e:	dc02      	bgt.n	8003546 <UART_SetConfig+0x112>
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <UART_SetConfig+0x11c>
 8003544:	e04b      	b.n	80035de <UART_SetConfig+0x1aa>
 8003546:	2b04      	cmp	r3, #4
 8003548:	d025      	beq.n	8003596 <UART_SetConfig+0x162>
 800354a:	2b08      	cmp	r3, #8
 800354c:	d037      	beq.n	80035be <UART_SetConfig+0x18a>
 800354e:	e046      	b.n	80035de <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003550:	f7ff fbdc 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8003554:	0003      	movs	r3, r0
 8003556:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	005a      	lsls	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	18d2      	adds	r2, r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	0019      	movs	r1, r3
 800356a:	0010      	movs	r0, r2
 800356c:	f7fc fdcc 	bl	8000108 <__udivsi3>
 8003570:	0003      	movs	r3, r0
 8003572:	b29b      	uxth	r3, r3
 8003574:	61bb      	str	r3, [r7, #24]
        break;
 8003576:	e037      	b.n	80035e8 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	4a6d      	ldr	r2, [pc, #436]	; (8003734 <UART_SetConfig+0x300>)
 8003580:	189a      	adds	r2, r3, r2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	0019      	movs	r1, r3
 8003588:	0010      	movs	r0, r2
 800358a:	f7fc fdbd 	bl	8000108 <__udivsi3>
 800358e:	0003      	movs	r3, r0
 8003590:	b29b      	uxth	r3, r3
 8003592:	61bb      	str	r3, [r7, #24]
        break;
 8003594:	e028      	b.n	80035e8 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003596:	f7ff fb31 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 800359a:	0003      	movs	r3, r0
 800359c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	005a      	lsls	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	18d2      	adds	r2, r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	0019      	movs	r1, r3
 80035b0:	0010      	movs	r0, r2
 80035b2:	f7fc fda9 	bl	8000108 <__udivsi3>
 80035b6:	0003      	movs	r3, r0
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	61bb      	str	r3, [r7, #24]
        break;
 80035bc:	e014      	b.n	80035e8 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	085b      	lsrs	r3, r3, #1
 80035c4:	2280      	movs	r2, #128	; 0x80
 80035c6:	0252      	lsls	r2, r2, #9
 80035c8:	189a      	adds	r2, r3, r2
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	0019      	movs	r1, r3
 80035d0:	0010      	movs	r0, r2
 80035d2:	f7fc fd99 	bl	8000108 <__udivsi3>
 80035d6:	0003      	movs	r3, r0
 80035d8:	b29b      	uxth	r3, r3
 80035da:	61bb      	str	r3, [r7, #24]
        break;
 80035dc:	e004      	b.n	80035e8 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80035de:	2317      	movs	r3, #23
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
        break;
 80035e6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b0f      	cmp	r3, #15
 80035ec:	d91b      	bls.n	8003626 <UART_SetConfig+0x1f2>
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	4a51      	ldr	r2, [pc, #324]	; (8003738 <UART_SetConfig+0x304>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d817      	bhi.n	8003626 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	200a      	movs	r0, #10
 80035fc:	183b      	adds	r3, r7, r0
 80035fe:	210f      	movs	r1, #15
 8003600:	438a      	bics	r2, r1
 8003602:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	b29b      	uxth	r3, r3
 800360a:	2207      	movs	r2, #7
 800360c:	4013      	ands	r3, r2
 800360e:	b299      	uxth	r1, r3
 8003610:	183b      	adds	r3, r7, r0
 8003612:	183a      	adds	r2, r7, r0
 8003614:	8812      	ldrh	r2, [r2, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	183a      	adds	r2, r7, r0
 8003620:	8812      	ldrh	r2, [r2, #0]
 8003622:	60da      	str	r2, [r3, #12]
 8003624:	e06c      	b.n	8003700 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003626:	2317      	movs	r3, #23
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	e067      	b.n	8003700 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003630:	231f      	movs	r3, #31
 8003632:	18fb      	adds	r3, r7, r3
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d01b      	beq.n	8003672 <UART_SetConfig+0x23e>
 800363a:	dc02      	bgt.n	8003642 <UART_SetConfig+0x20e>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <UART_SetConfig+0x218>
 8003640:	e049      	b.n	80036d6 <UART_SetConfig+0x2a2>
 8003642:	2b04      	cmp	r3, #4
 8003644:	d024      	beq.n	8003690 <UART_SetConfig+0x25c>
 8003646:	2b08      	cmp	r3, #8
 8003648:	d035      	beq.n	80036b6 <UART_SetConfig+0x282>
 800364a:	e044      	b.n	80036d6 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800364c:	f7ff fb5e 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8003650:	0003      	movs	r3, r0
 8003652:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	085a      	lsrs	r2, r3, #1
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	18d2      	adds	r2, r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	0019      	movs	r1, r3
 8003664:	0010      	movs	r0, r2
 8003666:	f7fc fd4f 	bl	8000108 <__udivsi3>
 800366a:	0003      	movs	r3, r0
 800366c:	b29b      	uxth	r3, r3
 800366e:	61bb      	str	r3, [r7, #24]
        break;
 8003670:	e036      	b.n	80036e0 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	4a30      	ldr	r2, [pc, #192]	; (800373c <UART_SetConfig+0x308>)
 800367a:	189a      	adds	r2, r3, r2
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	0019      	movs	r1, r3
 8003682:	0010      	movs	r0, r2
 8003684:	f7fc fd40 	bl	8000108 <__udivsi3>
 8003688:	0003      	movs	r3, r0
 800368a:	b29b      	uxth	r3, r3
 800368c:	61bb      	str	r3, [r7, #24]
        break;
 800368e:	e027      	b.n	80036e0 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003690:	f7ff fab4 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8003694:	0003      	movs	r3, r0
 8003696:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	085a      	lsrs	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	18d2      	adds	r2, r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	0019      	movs	r1, r3
 80036a8:	0010      	movs	r0, r2
 80036aa:	f7fc fd2d 	bl	8000108 <__udivsi3>
 80036ae:	0003      	movs	r3, r0
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	61bb      	str	r3, [r7, #24]
        break;
 80036b4:	e014      	b.n	80036e0 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	2280      	movs	r2, #128	; 0x80
 80036be:	0212      	lsls	r2, r2, #8
 80036c0:	189a      	adds	r2, r3, r2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	0019      	movs	r1, r3
 80036c8:	0010      	movs	r0, r2
 80036ca:	f7fc fd1d 	bl	8000108 <__udivsi3>
 80036ce:	0003      	movs	r3, r0
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	61bb      	str	r3, [r7, #24]
        break;
 80036d4:	e004      	b.n	80036e0 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80036d6:	2317      	movs	r3, #23
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	2201      	movs	r2, #1
 80036dc:	701a      	strb	r2, [r3, #0]
        break;
 80036de:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	2b0f      	cmp	r3, #15
 80036e4:	d908      	bls.n	80036f8 <UART_SetConfig+0x2c4>
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	4a13      	ldr	r2, [pc, #76]	; (8003738 <UART_SetConfig+0x304>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d804      	bhi.n	80036f8 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	e003      	b.n	8003700 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80036f8:	2317      	movs	r3, #23
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	2201      	movs	r2, #1
 80036fe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800370c:	2317      	movs	r3, #23
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	781b      	ldrb	r3, [r3, #0]
}
 8003712:	0018      	movs	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	b008      	add	sp, #32
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	efff69f3 	.word	0xefff69f3
 8003720:	ffffcfff 	.word	0xffffcfff
 8003724:	fffff4ff 	.word	0xfffff4ff
 8003728:	40013800 	.word	0x40013800
 800372c:	40021000 	.word	0x40021000
 8003730:	40004400 	.word	0x40004400
 8003734:	00f42400 	.word	0x00f42400
 8003738:	0000ffff 	.word	0x0000ffff
 800373c:	007a1200 	.word	0x007a1200

08003740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	2201      	movs	r2, #1
 800374e:	4013      	ands	r3, r2
 8003750:	d00b      	beq.n	800376a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a4a      	ldr	r2, [pc, #296]	; (8003884 <UART_AdvFeatureConfig+0x144>)
 800375a:	4013      	ands	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	2202      	movs	r2, #2
 8003770:	4013      	ands	r3, r2
 8003772:	d00b      	beq.n	800378c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4a43      	ldr	r2, [pc, #268]	; (8003888 <UART_AdvFeatureConfig+0x148>)
 800377c:	4013      	ands	r3, r2
 800377e:	0019      	movs	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	2204      	movs	r2, #4
 8003792:	4013      	ands	r3, r2
 8003794:	d00b      	beq.n	80037ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4a3b      	ldr	r2, [pc, #236]	; (800388c <UART_AdvFeatureConfig+0x14c>)
 800379e:	4013      	ands	r3, r2
 80037a0:	0019      	movs	r1, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	2208      	movs	r2, #8
 80037b4:	4013      	ands	r3, r2
 80037b6:	d00b      	beq.n	80037d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4a34      	ldr	r2, [pc, #208]	; (8003890 <UART_AdvFeatureConfig+0x150>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	0019      	movs	r1, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	2210      	movs	r2, #16
 80037d6:	4013      	ands	r3, r2
 80037d8:	d00b      	beq.n	80037f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4a2c      	ldr	r2, [pc, #176]	; (8003894 <UART_AdvFeatureConfig+0x154>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	0019      	movs	r1, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	2220      	movs	r2, #32
 80037f8:	4013      	ands	r3, r2
 80037fa:	d00b      	beq.n	8003814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	4a25      	ldr	r2, [pc, #148]	; (8003898 <UART_AdvFeatureConfig+0x158>)
 8003804:	4013      	ands	r3, r2
 8003806:	0019      	movs	r1, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	2240      	movs	r2, #64	; 0x40
 800381a:	4013      	ands	r3, r2
 800381c:	d01d      	beq.n	800385a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4a1d      	ldr	r2, [pc, #116]	; (800389c <UART_AdvFeatureConfig+0x15c>)
 8003826:	4013      	ands	r3, r2
 8003828:	0019      	movs	r1, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	035b      	lsls	r3, r3, #13
 800383e:	429a      	cmp	r2, r3
 8003840:	d10b      	bne.n	800385a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	4a15      	ldr	r2, [pc, #84]	; (80038a0 <UART_AdvFeatureConfig+0x160>)
 800384a:	4013      	ands	r3, r2
 800384c:	0019      	movs	r1, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	2280      	movs	r2, #128	; 0x80
 8003860:	4013      	ands	r3, r2
 8003862:	d00b      	beq.n	800387c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4a0e      	ldr	r2, [pc, #56]	; (80038a4 <UART_AdvFeatureConfig+0x164>)
 800386c:	4013      	ands	r3, r2
 800386e:	0019      	movs	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	605a      	str	r2, [r3, #4]
  }
}
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}
 8003884:	fffdffff 	.word	0xfffdffff
 8003888:	fffeffff 	.word	0xfffeffff
 800388c:	fffbffff 	.word	0xfffbffff
 8003890:	ffff7fff 	.word	0xffff7fff
 8003894:	ffffefff 	.word	0xffffefff
 8003898:	ffffdfff 	.word	0xffffdfff
 800389c:	ffefffff 	.word	0xffefffff
 80038a0:	ff9fffff 	.word	0xff9fffff
 80038a4:	fff7ffff 	.word	0xfff7ffff

080038a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80038b6:	f7fd fdbf 	bl	8001438 <HAL_GetTick>
 80038ba:	0003      	movs	r3, r0
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2208      	movs	r2, #8
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d10d      	bne.n	80038e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	0399      	lsls	r1, r3, #14
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4b16      	ldr	r3, [pc, #88]	; (8003930 <UART_CheckIdleState+0x88>)
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	0013      	movs	r3, r2
 80038da:	2200      	movs	r2, #0
 80038dc:	f000 f82a 	bl	8003934 <UART_WaitOnFlagUntilTimeout>
 80038e0:	1e03      	subs	r3, r0, #0
 80038e2:	d001      	beq.n	80038e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e01f      	b.n	8003928 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2204      	movs	r2, #4
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d10d      	bne.n	8003912 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	03d9      	lsls	r1, r3, #15
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <UART_CheckIdleState+0x88>)
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	0013      	movs	r3, r2
 8003904:	2200      	movs	r2, #0
 8003906:	f000 f815 	bl	8003934 <UART_WaitOnFlagUntilTimeout>
 800390a:	1e03      	subs	r3, r0, #0
 800390c:	d001      	beq.n	8003912 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e00a      	b.n	8003928 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2270      	movs	r2, #112	; 0x70
 8003922:	2100      	movs	r1, #0
 8003924:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	b004      	add	sp, #16
 800392e:	bd80      	pop	{r7, pc}
 8003930:	01ffffff 	.word	0x01ffffff

08003934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	1dfb      	adds	r3, r7, #7
 8003942:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003944:	e05d      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	3301      	adds	r3, #1
 800394a:	d05a      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394c:	f7fd fd74 	bl	8001438 <HAL_GetTick>
 8003950:	0002      	movs	r2, r0
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	429a      	cmp	r2, r3
 800395a:	d302      	bcc.n	8003962 <UART_WaitOnFlagUntilTimeout+0x2e>
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d11b      	bne.n	800399a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	492f      	ldr	r1, [pc, #188]	; (8003a2c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800396e:	400a      	ands	r2, r1
 8003970:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2101      	movs	r1, #1
 800397e:	438a      	bics	r2, r1
 8003980:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2270      	movs	r2, #112	; 0x70
 8003992:	2100      	movs	r1, #0
 8003994:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e043      	b.n	8003a22 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2204      	movs	r2, #4
 80039a2:	4013      	ands	r3, r2
 80039a4:	d02d      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	401a      	ands	r2, r3
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d123      	bne.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2280      	movs	r2, #128	; 0x80
 80039c0:	0112      	lsls	r2, r2, #4
 80039c2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4917      	ldr	r1, [pc, #92]	; (8003a2c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80039d0:	400a      	ands	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2101      	movs	r1, #1
 80039e0:	438a      	bics	r2, r1
 80039e2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2220      	movs	r2, #32
 80039ee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2270      	movs	r2, #112	; 0x70
 80039fa:	2100      	movs	r1, #0
 80039fc:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e00f      	b.n	8003a22 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	425a      	negs	r2, r3
 8003a12:	4153      	adcs	r3, r2
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	001a      	movs	r2, r3
 8003a18:	1dfb      	adds	r3, r7, #7
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d092      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	0018      	movs	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b004      	add	sp, #16
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	fffffe5f 	.word	0xfffffe5f

08003a30 <__libc_init_array>:
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	2600      	movs	r6, #0
 8003a34:	4d0c      	ldr	r5, [pc, #48]	; (8003a68 <__libc_init_array+0x38>)
 8003a36:	4c0d      	ldr	r4, [pc, #52]	; (8003a6c <__libc_init_array+0x3c>)
 8003a38:	1b64      	subs	r4, r4, r5
 8003a3a:	10a4      	asrs	r4, r4, #2
 8003a3c:	42a6      	cmp	r6, r4
 8003a3e:	d109      	bne.n	8003a54 <__libc_init_array+0x24>
 8003a40:	2600      	movs	r6, #0
 8003a42:	f000 f82b 	bl	8003a9c <_init>
 8003a46:	4d0a      	ldr	r5, [pc, #40]	; (8003a70 <__libc_init_array+0x40>)
 8003a48:	4c0a      	ldr	r4, [pc, #40]	; (8003a74 <__libc_init_array+0x44>)
 8003a4a:	1b64      	subs	r4, r4, r5
 8003a4c:	10a4      	asrs	r4, r4, #2
 8003a4e:	42a6      	cmp	r6, r4
 8003a50:	d105      	bne.n	8003a5e <__libc_init_array+0x2e>
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
 8003a54:	00b3      	lsls	r3, r6, #2
 8003a56:	58eb      	ldr	r3, [r5, r3]
 8003a58:	4798      	blx	r3
 8003a5a:	3601      	adds	r6, #1
 8003a5c:	e7ee      	b.n	8003a3c <__libc_init_array+0xc>
 8003a5e:	00b3      	lsls	r3, r6, #2
 8003a60:	58eb      	ldr	r3, [r5, r3]
 8003a62:	4798      	blx	r3
 8003a64:	3601      	adds	r6, #1
 8003a66:	e7f2      	b.n	8003a4e <__libc_init_array+0x1e>
 8003a68:	08003c98 	.word	0x08003c98
 8003a6c:	08003c98 	.word	0x08003c98
 8003a70:	08003c98 	.word	0x08003c98
 8003a74:	08003c9c 	.word	0x08003c9c

08003a78 <memcpy>:
 8003a78:	2300      	movs	r3, #0
 8003a7a:	b510      	push	{r4, lr}
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d100      	bne.n	8003a82 <memcpy+0xa>
 8003a80:	bd10      	pop	{r4, pc}
 8003a82:	5ccc      	ldrb	r4, [r1, r3]
 8003a84:	54c4      	strb	r4, [r0, r3]
 8003a86:	3301      	adds	r3, #1
 8003a88:	e7f8      	b.n	8003a7c <memcpy+0x4>

08003a8a <memset>:
 8003a8a:	0003      	movs	r3, r0
 8003a8c:	1812      	adds	r2, r2, r0
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d100      	bne.n	8003a94 <memset+0xa>
 8003a92:	4770      	bx	lr
 8003a94:	7019      	strb	r1, [r3, #0]
 8003a96:	3301      	adds	r3, #1
 8003a98:	e7f9      	b.n	8003a8e <memset+0x4>
	...

08003a9c <_init>:
 8003a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa2:	bc08      	pop	{r3}
 8003aa4:	469e      	mov	lr, r3
 8003aa6:	4770      	bx	lr

08003aa8 <_fini>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aae:	bc08      	pop	{r3}
 8003ab0:	469e      	mov	lr, r3
 8003ab2:	4770      	bx	lr
